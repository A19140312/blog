{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clipboard.min.js","path":"js/src/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clipboard-use.js","path":"js/src/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ea9ff9d4f49b950e6aa64a8bc1f7e2515829ade3","modified":1566206184393},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1548818372000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1548818372000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1548818372000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1548818372000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1548818372000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1548818372000},{"_id":"themes/next/.DS_Store","hash":"ac72b298abe4fad238659b6ea52a0aa675a73a1f","modified":1566462583188},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1548818372000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1548818372000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1548818372000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1548818372000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1548818372000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1548818372000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1548818372000},{"_id":"themes/next/_config.yml","hash":"5b0155c3ecb24a50c7560f5246ac041201d89391","modified":1565683204989},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1548818372000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1548818372000},{"_id":"source/_drafts/Redis.md","hash":"b7c466dce97ff94f7efcb60de711a291306982c7","modified":1553669424318},{"_id":"source/_drafts/MyBatis-01.md","hash":"0b86f1a1affa5ba8f0b4cc59d4a4434657104c2d","modified":1576135191411},{"_id":"source/_posts/.DS_Store","hash":"bbbec2a03ad7e91e1f36b0885af421c63bef2a7d","modified":1566206189431},{"_id":"source/_posts/C++-01.md","hash":"36c756700cb0d8dd5307e0445e7df60f95c9ddea","modified":1564486636769},{"_id":"source/_posts/C++-02.md","hash":"fd628fd111b89ba5e4009f6791320e73c519db91","modified":1564486636779},{"_id":"source/_posts/Design-Pattern-Strategy.md","hash":"be90c5c593f02798e60ccc0e8283c5ba988642f6","modified":1576482812391},{"_id":"source/_posts/GIt-Ignore.md","hash":"749c54729a3595fb46bb94aad3d5db6e2f3bc417","modified":1564486636767},{"_id":"source/_posts/Design-Pattern-Observer.md","hash":"c8bceaa0798b948365c8bc0aaf77a5ca3432c372","modified":1576235578271},{"_id":"source/_posts/Guava.md","hash":"3b3294314bd3e52c6e37bb47e33a0b28a29064e3","modified":1576235547363},{"_id":"source/_posts/Github-Pages-Blog.md","hash":"5ee6fa536db3f9c25602f58ec76a22f4a8f378c8","modified":1564486636785},{"_id":"source/_posts/JVM1.md","hash":"19fc14394c50c1f101ac17415db16915c793dc5c","modified":1564486636775},{"_id":"source/_posts/JVM2.md","hash":"1b6c4052d779947f9f654e9bbc683cb00aed4477","modified":1564486636772},{"_id":"source/_posts/JVM3.md","hash":"d5d5687cc2b0681915c70735cf5903e67d344f66","modified":1564486636762},{"_id":"source/_posts/Java-Cas.md","hash":"31656752505dce4603e385754dc3b0f06957f7ea","modified":1576235607636},{"_id":"source/_posts/Java-ThreadPool.md","hash":"ee138783463065ead57a4e834ca7b587cad85043","modified":1576235607644},{"_id":"source/_posts/Kafka-Background.md","hash":"5bdcdb250f731ac7c1387a0399326533c76b6999","modified":1564486672660},{"_id":"source/_posts/Kafka-Producer.md","hash":"9d099a8d9b0f857c0b19f35ca7cea66d4d5d4fc3","modified":1565060202549},{"_id":"source/_posts/Kafka-Install.md","hash":"20a9e0697c1680827d4660932c16b40848846b00","modified":1564714671036},{"_id":"source/_posts/Mysql-LSN.md","hash":"27b4c1aa1fd770b70aa413b8a7fa9806ee375437","modified":1566213910381},{"_id":"source/_posts/Mysql01.md","hash":"edb7db5495a8c4bc64633ed8da2d0c8dfd879304","modified":1566213873580},{"_id":"source/_posts/Mysql-storage.md","hash":"576ea02a03930f706759dd360a039f964e33b126","modified":1567500944349},{"_id":"source/_posts/Mysql-RedoAndUndo.md","hash":"ca165ad83fdf547473224d96f3bba60addfd6cbd","modified":1566355406002},{"_id":"source/_posts/Mysql03.md","hash":"6802745780979b82a1b1ad6393596b54565af5bc","modified":1567416270063},{"_id":"source/_posts/Mysql02.md","hash":"9b042ae630ef258cb4da6bd29150ada0f1914a22","modified":1566911323968},{"_id":"source/_posts/Mysql05.md","hash":"63fff20103f186ac89cf5d5b771f0bd95f95cd8b","modified":1571384667802},{"_id":"source/_posts/Project-Module.md","hash":"01f4ad68cbb9b0e3c8e6cf27c67aaaf30396de6f","modified":1564486636751},{"_id":"source/_posts/Redis-adlist.md","hash":"3614e9eacd3a93c0ecb76c598d063e686622f56c","modified":1564486636764},{"_id":"source/_posts/Redis-sds.md","hash":"ca08090dab47ba81c6860b27a2d15e0fe5dbe5e5","modified":1564486636777},{"_id":"source/categories/index.md","hash":"aee2c5e57dc28322f727617488ec89ca13299877","modified":1553669424318},{"_id":"source/authors/index.md","hash":"9072a029c7c9cb7050b7e98498752ab5b4f896e9","modified":1562844268842},{"_id":"source/tags/index.md","hash":"924a602ccdf829c5c1fd0faced2eb9b0f656d9d8","modified":1553669424318},{"_id":"source/_posts/Thailand-Raiders.md","hash":"7550aad1ea561765a04b5c1190295470c5749814","modified":1567407533310},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1548818372000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1548818372000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1548818372000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1548818372000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1548818372000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1548818372000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1548818372000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1548818372000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1548818372000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1548818372000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1548818372000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1548818372000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1548818372000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1548818372000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1548818372000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1548818372000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1548818372000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1548818372000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1548818372000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c4c9569e44d28fb37c2dad564922eee1d80dc0a2","modified":1562847884700},{"_id":"themes/next/layout/.DS_Store","hash":"65f03c5fa89ebd5a8bebda1b8b329029827e19ce","modified":1566462583187},{"_id":"themes/next/layout/_layout.swig","hash":"0a817b96ab4c85961a247dad37ae9fb992e23438","modified":1564485753153},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1548818372000},{"_id":"themes/next/layout/author.swig","hash":"564a7e148729701e48e1ae84f5176e38adf42204","modified":1562847624044},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1548818372000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1548818372000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1548818372000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1548818372000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1548818372000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1548818372000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1548818372000},{"_id":"themes/next/layout/page.swig","hash":"8c9280e56c45298e829b7b1418e621772eab78a7","modified":1564545155600},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1548922370000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1548818372000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1548818372000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1548818372000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/blog-icon.png","hash":"b4198f97a457236f7c5677680634cbbff15bc837","modified":1553669424303},{"_id":"source/_posts/Github-Pages-Blog/change-theme.png","hash":"80d61b4a4f7cba6f53e903cff176b394f9b7bdfa","modified":1553669424304},{"_id":"source/_posts/Github-Pages-Blog/categories.png","hash":"9d225500581c6625ccb43c90446ea702e2ad3d27","modified":1553669424303},{"_id":"source/_posts/Github-Pages-Blog/create-project.png","hash":"8111130d13191b07f4de818e818120f8f4941c65","modified":1553669424307},{"_id":"source/_posts/Github-Pages-Blog/deploy-position.png","hash":"710e477d8ff93bdd654228e4edfaeb8419fc32cb","modified":1553669424309},{"_id":"source/_posts/Github-Pages-Blog/tags.png","hash":"ebae8e66598ef4ab1354a3f8b21f27ec29ef667f","modified":1553669424316},{"_id":"source/_posts/Kafka-Background/3.jpg","hash":"a4c2e32670e49c09a2d377caff93c8aaa1d70b09","modified":1562815622273},{"_id":"source/_posts/Kafka-Producer/producer.png","hash":"42ee01fe607e1749fa1cd1abc69cd2641456f353","modified":1565060202550},{"_id":"source/_posts/Mysql-RedoAndUndo/redo-buffer.png","hash":"a9958302114fdc34e5b637c2cf97391f1652ab6f","modified":1565085481000},{"_id":"source/_posts/Mysql-storage/640.png","hash":"6ac75230f47c0f20723ff8173a692c333791a6e6","modified":1566984483354},{"_id":"source/_posts/Mysql-RedoAndUndo/undo-Segment.png","hash":"457de2d3b2642a5f6e77eccae8551cec0d6a7a06","modified":1566185900065},{"_id":"source/_posts/Mysql02/1.png","hash":"82b40a9930154e28645f49e88edf3cd83e66dba9","modified":1564563239486},{"_id":"source/_posts/Mysql02/2.png","hash":"442f662987cf8f60dc485f28b0204af01e00eae3","modified":1564573330558},{"_id":"source/_posts/Mysql02/IO.png","hash":"bb293525c02678266360c565b887ba239a88dfcd","modified":1565690877643},{"_id":"source/_posts/Mysql02/Insert-Buffer.svg","hash":"92de2c921440df1dd4e0e80231c744089b740b07","modified":1565685023480},{"_id":"source/_posts/Mysql02/index-update.png","hash":"3ead441d30ab2d87942c80255e996af2ecbcb453","modified":1566820169323},{"_id":"source/_posts/Mysql02/innodb-buffer-pool-list.jpg","hash":"40c9f806063efd636600239d43fdb5744ba2fceb","modified":1564998692364},{"_id":"source/_posts/Mysql02/read.svg","hash":"d6742bddd10610adc113a494aa96d24578dbc24d","modified":1565683760941},{"_id":"source/_posts/Mysql02/insert-buffer.png","hash":"1e3ab488168d2be4ea0155824d7c7a685d2d5ace","modified":1566820702994},{"_id":"source/_posts/Mysql02/redo-buffer.png","hash":"a9958302114fdc34e5b637c2cf97391f1652ab6f","modified":1565085481133},{"_id":"source/_posts/Mysql02/write.svg","hash":"677a64b2ce87638d8c1d7fb86b857815e95f386b","modified":1565683849896},{"_id":"source/_posts/Mysql02/write.png","hash":"e86f979693cd53c9dc663f3d838d038f5ace0365","modified":1565941554291},{"_id":"source/_posts/Mysql05/BBT2.png","hash":"23e5828814c8e662bd0aed71dfcf9bebb35038a8","modified":1571392299317},{"_id":"source/_posts/Mysql05/BBT3.png","hash":"3bbb36e99daa5c6cac40a2f7fb5c57227e4c9181","modified":1571392299364},{"_id":"source/_posts/Mysql05/BBT1.png","hash":"645a1fe9ba706a0159bfacd5cb9bf6cd525abefb","modified":1571392299398},{"_id":"source/_posts/Mysql05/BBT4.png","hash":"e0d5a6066060e3f56c9b2a646b41f9ad267a2bf7","modified":1571392299447},{"_id":"source/_posts/Mysql05/BST_delete1.png","hash":"7a4ead2cfe4785e8a85fb667c046933ba06c3904","modified":1571392299472},{"_id":"source/_posts/Mysql05/BST_delete2.png","hash":"460deb38ed00f83ceb4e05ce05808e7b66f0dda3","modified":1571392299506},{"_id":"source/_posts/Mysql05/BST_linked.png","hash":"fa4948a5bcee882a13b10b8c2daf51ac6ca24d85","modified":1571392299543},{"_id":"source/_posts/Mysql05/BST_insert.png","hash":"b5c6e16d88546efe42b1f8b04cc678c573d20364","modified":1571392299281},{"_id":"source/_posts/Project-Module/12.png","hash":"0c0eac591fb404c7b4bf7652807cb36468b41f50","modified":1562157821438},{"_id":"source/_posts/Project-Module/17.png","hash":"78271020841f963b565f5bbadbd0fd5e4053f79e","modified":1562158155946},{"_id":"source/_posts/Project-Module/19.png","hash":"3e5db4c7a07dc0e56bd19f93ff9d6fb0002f1802","modified":1562234502599},{"_id":"source/_posts/Project-Module/24.png","hash":"9bf2ce87e94232e26d6793509c69b2a15368646f","modified":1562244649617},{"_id":"source/_posts/Project-Module/32.png","hash":"b04d5ce74316668a7034f5c6a25cea90b0825289","modified":1562590688582},{"_id":"source/_posts/Project-Module/30.2.png","hash":"4a74cb3845660e82405f5a58d6707d8952c3536a","modified":1562587657499},{"_id":"source/_posts/Project-Module/8.png","hash":"408186cdf11cf8fd9e44b01ddb300ce89853e874","modified":1562157397710},{"_id":"source/_posts/Project-Module/7.png","hash":"42eb5628fe0a2771a62be81dcab1912d28293cdd","modified":1562073686413},{"_id":"source/_posts/Project-Module/6.png","hash":"12c3edf7adc454d9d40b4cf1e06f13cd5d8ac1e7","modified":1562073502235},{"_id":"source/_posts/Redis-sds/sdshdr.png","hash":"a0297688ecc572e7a8a01e6c3d67055a34270da1","modified":1553744715067},{"_id":"source/_posts/Thailand-Raiders/10.jpeg","hash":"6d3cbf62e3ae76e9f1c0b7d83131c2285f153012","modified":1562932867627},{"_id":"source/_posts/Thailand-Raiders/5.png","hash":"fa26beabe60a86da1e11fb49f9243e3872b495bc","modified":1562926883172},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548818372000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548818372000},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"72c1224cd566eea28a33e93f85e4ad3cb67270b1","modified":1564485753167},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1548818372000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1548818372000},{"_id":"themes/next/layout/_macro/post-end-tag.swig","hash":"51118e29759de4dce54b348eb8197cd0044aa45c","modified":1548926225000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1548818372000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1548818372000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1548818372000},{"_id":"themes/next/layout/_macro/post.swig","hash":"37e74f7c40641840e8d5f7dc6c05d1a627850735","modified":1562844362540},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1548818372000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6cf19e058fd5febd31bfd6bfa02bc0eda9a9c5bd","modified":1565683230513},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1548818372000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1548818372000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ef329e7b1d3890dfe541ef095a10cfdd81ebbbc9","modified":1564487114830},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1548818372000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1548818372000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1548818372000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1548818372000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1548818372000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1548818372000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1548818372000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1548818372000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1548818372000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1548818372000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1548818372000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1548818372000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1548818372000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1548818372000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1548818372000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1548818372000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1548818372000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1548818372000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1548818372000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1548818372000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1548818372000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1548818372000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1548818372000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548818372000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548818372000},{"_id":"themes/next/source/images/alipay.jpg","hash":"499aab03d01ae8b1e2f2eb593bdcd6e989188b9e","modified":1548922023000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1548818372000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548818372000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1548818372000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1548818372000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548818372000},{"_id":"themes/next/source/images/favicon.ico","hash":"85da2faa392c9c975434e11a311e70fc6e8ca55e","modified":1546966292000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548818372000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1548818372000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548818372000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548818372000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1548818372000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1548818372000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"a6529134a0531dda88058747a8f41f4aab5e9abe","modified":1548922040000},{"_id":"source/_posts/Kafka-Background/1.png","hash":"f970b02b874a9e4a4ae888ee84153951b6e82153","modified":1562815616709},{"_id":"source/_posts/Kafka-Background/5.jpeg","hash":"2b65edd6da76ce3d4a5e9952e443a42cc26b33b2","modified":1562815610845},{"_id":"source/_posts/Kafka-Producer/cert_override.png","hash":"c91783236434fcdc194b90089a5b1b9c1768344b","modified":1565060202549},{"_id":"source/_posts/Mysql02/doublewrite.png","hash":"f42d0c74d3eb68e0c960d90c40523918f34c5e12","modified":1565697226116},{"_id":"source/_posts/Mysql02/read.png","hash":"a8de8ff1931593ce04cd3c588dd4c29319b77546","modified":1565938985180},{"_id":"source/_posts/Mysql02/three-list2.png","hash":"59d11716ab165d813482de8b436db0b60eb6604f","modified":1565948891516},{"_id":"source/_posts/Project-Module/10.png","hash":"5db18541d543dd31c8345d1fc67cef3c0a41f755","modified":1562157481092},{"_id":"source/_posts/Project-Module/11.png","hash":"9b094ebe0fbdfd04aa207b9ce540c69a5c0c3f45","modified":1562157501724},{"_id":"source/_posts/Project-Module/3.png","hash":"be6b1ece28049a1871b51a8c184e2e1952ae6da2","modified":1562073027513},{"_id":"source/_posts/Project-Module/5.png","hash":"77180f160369fde5065dd5b6139c5e506c60671b","modified":1562073148167},{"_id":"source/_posts/Redis-adlist/list.png","hash":"8c42024153090d4e8dc85dd26313b98ae394a2fc","modified":1553762050803},{"_id":"source/_posts/Thailand-Raiders/1.png","hash":"6df75200d332aff25a8a580f74be792f9ebadebc","modified":1563367590531},{"_id":"source/_posts/Thailand-Raiders/WechatIMG39.png","hash":"9add9f7543f1a03febc8430bf4053a11ed9e6101","modified":1567407533497},{"_id":"source/_posts/Thailand-Raiders/WechatIMG40.png","hash":"433cf7251a4e330ab70046a7ddce2dc7a83fba84","modified":1567407533498},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/images/avatar.png","hash":"2fc664b73fb0dc51c0025d6d605f70440f3712c1","modified":1538126136000},{"_id":"source/_posts/Github-Pages-Blog/comment-delete.png","hash":"e8e8f4226ffb96387f1e15a45df8e28d6fe219f2","modified":1553669424305},{"_id":"source/_posts/Github-Pages-Blog/github-pages.png","hash":"cb19bd12e2c73729f622bb439c7ca2bfc6fa1706","modified":1553669424310},{"_id":"source/_posts/Mysql02/innodb-Architecture.png","hash":"f99f6d2e919632903493f158c7573cb81238dba0","modified":1565869741439},{"_id":"source/_posts/Mysql02/three-list.png","hash":"b5cdd07f60a3fa569e61b7c6078f860f5e1441e6","modified":1565775959926},{"_id":"source/_posts/Project-Module/2.png","hash":"23d9f5a8c391d42f884d2921d3ae263f17510a41","modified":1562072968734},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1548818372000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1548818372000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1564714671038},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1548818372000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1548818372000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"b0952d607ead833a45199c24c99611660aa0cffd","modified":1565684246834},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1548818372000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"890cfaa4e771d2a7624389042febe40604d285cf","modified":1548926869000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1548818372000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1548818372000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1548818372000},{"_id":"themes/next/source/js/src/clipboard.min.js","hash":"765eed9192ea1956416508e97868f65507cc7d35","modified":1564485753163},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1548818372000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1548818372000},{"_id":"themes/next/source/js/src/clipboard-use.js","hash":"f5dfecd9bf13b9d1483bf663a367c7c080aac9cc","modified":1564485865410},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548818372000},{"_id":"themes/next/source/js/src/motion.js","hash":"6a96c556378d10ec3250850be7ba4a5b55f5b5d7","modified":1548926393000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1548818372000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1548818372000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1548818372000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1548818372000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548818372000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548818372000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1548818372000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1548818372000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1548818372000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1548818372000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/setting.png","hash":"d78c0cf7a9a0d795e350eff8c0ab9ef0262cc01d","modified":1553669424316},{"_id":"source/_posts/Github-Pages-Blog/valine.png","hash":"b35df8378b9559765b74f7d6bb9909a1372d115e","modified":1553669424317},{"_id":"source/_posts/Kafka-Background/2.png","hash":"ab3ac1493d4e8a787578f5ad348c1164e137fa03","modified":1562815619501},{"_id":"source/_posts/MyBatis-01/1.png","hash":"793797fc5114bdb4ae634a652ade3cb7a90b7413","modified":1573808074404},{"_id":"source/_posts/Mysql01/01.jpg","hash":"6d800a31280148d6e6b796003941c74e14805fea","modified":1564470457461},{"_id":"source/_posts/Project-Module/30.1.png","hash":"8d2eb3439248383787e3593bf7fd1693efe90ea9","modified":1562587529735},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548818372000},{"_id":"source/_posts/Design-Pattern-Strategy/1.png","hash":"16ed88fb9c6ebcb5a719523c85b47cf758215906","modified":1576480712153},{"_id":"source/_posts/Design-Pattern-Strategy/2.png","hash":"0adb36c4dfce45fb13b942ff508a7200a8cd4c33","modified":1576481975709},{"_id":"source/_posts/Design-Pattern-Observer/2.png","hash":"72a6fba3e46327e3632a09810b24215f763850b4","modified":1576225992904},{"_id":"source/_posts/Github-Pages-Blog/create-repository.png","hash":"9bdbb8073bb7b6f37f42577ef8843d09028cd026","modified":1553669424309},{"_id":"source/_posts/Kafka-Background/4.jpg","hash":"2f17548f83ba5831e21fca29aaed2dc64ef1a4db","modified":1562815610851},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"f05d6881daddfba936f7936fb7ea8b8debe07c01","modified":1548926869000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1548818372000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6109209e94d4d06513ce194a11e05a5640927e41","modified":1548926501000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1548818372000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548818372000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548818372000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/copy-url.png","hash":"fb7edbabddfe278a5fc1db57a90a99f690daafe5","modified":1553669424307},{"_id":"source/_posts/Mysql-LSN/LOG.png","hash":"9a8feb8bfefe2de7a8401f1afebeb88577807ac6","modified":1566199006060},{"_id":"source/_posts/Project-Module/4.png","hash":"10d542aa156ac37480249b2be21cd83ee6902804","modified":1562073097537},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548818372000},{"_id":"source/_posts/Project-Module/1.png","hash":"0d13a4094fe66b80ad104b87698f7d95c422acf0","modified":1562072882808},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-13-11-50-782_com.xingin.xhs.png","hash":"94400f10315c8e5d2717b26181f21ec5fa89dadb","modified":1567407533468},{"_id":"source/_posts/Thailand-Raiders/tianjin-airport.png","hash":"24a3881c4494b484a15cfaa065221d05241d9ebc","modified":1562925390800},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/authors.styl","hash":"ebbd43658f5a054d934c9ca5abdf801449ca6559","modified":1562848358889},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"646467b94ae4a78eebabb2d8635a2ac12665fa4e","modified":1562848681019},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1548843928000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"8f40a758fe6dff1f45268f2dc875b4336e551335","modified":1548837748000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"90d78b7270739eaab5b054226b684631a319011a","modified":1548844058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548818372000},{"_id":"source/_posts/C++-02/1.png","hash":"36cb35aebf9aff9ea22a85ce733502814cd96341","modified":1563367590248},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548818372000},{"_id":"source/_posts/Design-Pattern-Observer/1.png","hash":"d3bddadb077b53b79235a90930fed4a902a531d1","modified":1576223331958},{"_id":"source/_posts/Kafka-Background/6.png","hash":"95bb5f40b31f98bec90ca4eb43fa1fcb6a6d2b1d","modified":1562815610839},{"_id":"source/_posts/Thailand-Raiders/Tiffany.png","hash":"e2b3b598e4f2f77aa72c6d888de5b7c28d971dd9","modified":1562930985684},{"_id":"source/_posts/Project-Module/9.png","hash":"b7a7304228d094b97030b6a3851d60c0cd40db8c","modified":1562157438227},{"_id":"source/_posts/Thailand-Raiders/8.png","hash":"05f3c25bcbdad89508a1740b34464f33ea8132ce","modified":1562931299084},{"_id":"source/_posts/Thailand-Raiders/WechatIMG38.jpeg","hash":"b9d274ae9388be4436f54708acb8ae92a303b60a","modified":1567407533496},{"_id":"source/_posts/Thailand-Raiders/9.png","hash":"565b668726c06a9abab0bd490da907f2b3ed6e98","modified":1562931644016},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1548818372000},{"_id":"source/_posts/Thailand-Raiders/455.jpeg","hash":"f62028d3c728e26a58ee9a081b5a470ab114d82b","modified":1565697870935},{"_id":"source/_posts/Thailand-Raiders/455-3.jpeg","hash":"604b935a2bcd0dc10de6a3303e741a72b572dc40","modified":1565697870927},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548818372000},{"_id":"source/_posts/Thailand-Raiders/455-2.jpeg","hash":"c6bfeb6633daa1a6250c18f91f9369626959e157","modified":1565697870923},{"_id":"source/_posts/Thailand-Raiders/6.png","hash":"3f10dab38908d094d0b909422bc19d0a17340057","modified":1562926943522},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/select-theme.png","hash":"2f05fcf89dee3dbaf7042198d28ab27c567b6a0d","modified":1553669424315},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-13-12-27-105_com.xingin.xhs.png","hash":"8cff18582c7a30d6195fbcc5d7c55267eb7453ae","modified":1567407533475},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-13-11-56-133_com.xingin.xhs.png","hash":"e6eff5392fa75f21454b10b8d5952f92e083da2d","modified":1567407533471},{"_id":"source/_posts/Thailand-Raiders/7.png","hash":"3fc9d1546cac372d29ff9b8b7d15391355ca4b7f","modified":1562930773029},{"_id":"source/_posts/Thailand-Raiders/11.png","hash":"7d4c9b3713ea0e79a64cb03a47c4b300ba2e4b70","modified":1562932642973},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-14-25-04-833_com.xingin.xhs.png","hash":"2238216e08587f3b15762c9dd3e82051358a5e51","modified":1567407533491},{"_id":"source/_posts/Thailand-Raiders/4.png","hash":"1fb34d3299621f60fb2dbf4288d8c36e6ac5e77f","modified":1562926787294},{"_id":"source/_posts/Thailand-Raiders/2.png","hash":"d6619479a7b598851ad99a36ef764acbad9aa01a","modified":1562925091977},{"_id":"source/_posts/Thailand-Raiders/3.png","hash":"371d12b9c4257b27c643c35e22ded6217d31d2f5","modified":1562926690483},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-14-05-58-003_com.xingin.xhs.png","hash":"56e1172a88c0bfd9c4c52e333611fc6595ab8c7a","modified":1567407533485},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-18-389_com.xingin.xhs.png","hash":"f928b7f7e08fbb020de4fb3c4cf528f8d856b8e3","modified":1567407533435},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-30-499_com.xingin.xhs.png","hash":"7cafaa78693a7c0b2626f1ee2210b3b57ab2ed1b","modified":1567407533465},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-20-912_com.xingin.xhs.png","hash":"2ac2f81bc4349ec9568cb5747b88893642922a67","modified":1567407533441},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-46-03-072_com.xingin.xhs.png","hash":"9e417ba24b91a347b8cbb606f8c728e2557d2a82","modified":1567407533381},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-25-297_com.xingin.xhs.png","hash":"5c7ab3a4fb6d52e1ac7a7b25ac67c5f2e3e8ae0d","modified":1567407533458},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-23-188_com.xingin.xhs.png","hash":"2c4b2f791d89c9f9fdfc9f41c1d2e59c44be9703","modified":1567407533451},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-46-00-652_com.xingin.xhs.png","hash":"e8f3537c76dc753e795914ac8ffbe4e515b5304f","modified":1567407533364},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-14-972_com.xingin.xhs.png","hash":"a252f74aae9f5fc9bafc8086362434d537b30de9","modified":1567407533419},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-45-57-687_com.xingin.xhs.png","hash":"c38ed53378b5d8b29299a543b9615d289e2679a6","modified":1567407533345},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-46-08-364_com.xingin.xhs.png","hash":"98baf6d8c995e9f2a9e366730c584219e32a3911","modified":1567407533399},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-45-53-237_com.xingin.xhs.png","hash":"724228f9d5e8d6ad4dbc4c27ad75b316650834d7","modified":1567407533325}],"Category":[{"name":"redis","_id":"ck4859y2p0004t0fyvq59ozee"},{"name":"MyBatis","_id":"ck4859y2v000at0fy97kyjs0v"},{"name":"C++","_id":"ck4859y2z000ft0fy7qa2n5cz"},{"name":"设计模式","_id":"ck4859y39000qt0fytruffvv0"},{"name":"项目搭建","_id":"ck4859y3j000wt0fyc0m7pryq"},{"name":"GUAVA","_id":"ck4859y3r0014t0fyjyfuw2m7"},{"name":"JVM","_id":"ck4859y3t001at0fyfz8ufpd7"},{"name":"Kafka","_id":"ck4859y3v001ht0fy67xd10v9"},{"name":"Mysql","_id":"ck4859y3v001lt0fy1691rvmm"},{"name":"旅游","_id":"ck4859y3z0026t0fybz4smcrg"},{"name":"blog","_id":"ck4859y97003ot0fyk2w5e503"},{"name":"JAVA","_id":"ck4859y9b003xt0fy9y6jho6y"}],"Data":[],"Page":[{"title":"categories","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n","date":"2019-03-27T06:50:24.318Z","updated":"2019-03-27T06:50:24.318Z","path":"categories/index.html","layout":"page","_id":"ck4859y2m0001t0fy91pknl22","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ncomments: false\n---","date":"2019-03-27T06:50:24.318Z","updated":"2019-03-27T06:50:24.318Z","path":"tags/index.html","layout":"page","_id":"ck4859y2o0003t0fyf2w0tkmp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"authors","type":"authors","comments":0,"_content":"","source":"authors/index.md","raw":"---\ntitle: authors\ntype: \"authors\"\ncomments: false\n---","date":"2019-07-11T11:24:28.845Z","updated":"2019-07-11T11:24:28.842Z","path":"authors/index.html","layout":"page","_id":"ck4859y2r0007t0fyb9xfyke0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"redis常见面试题","date":"2019-03-13T14:33:04.000Z","copyright":true,"comments":0,"_content":"#### 什么是redis?\n```bash\nRedis 是一个基于内存的高性能key-value数据库。\n```\n\n#### Redis支持哪几种数据结构\n``` bash\nString（字符串）: set key value\nHash（哈希）: hmset name  key1 value1 key2 value2\nList（列表）：lpush  name  value\nSet（集合）：sadd  name  value\nzset(sorted set：有序集合)： zadd  name score value\n```\n#### Redis为什么这么快？redis采用多线程会有哪些问题？\n```bash\nRedis效率高的主要原因有下面几个：\n\n    （1）基于内存操作，速度非常快\n    （2）采用单线程，避免了上下文的切换导致消耗CPU\n    （3）采用单线程，不用去考虑各种加锁释放锁的问题\n    （4）使用IO多路复用模型，非阻塞IO\n```\n#### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n```bash\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。\nAOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。\n```\n#### 一个字符串类型的值能存储最大容量是多少？\n```bash\n512M\n```\n#### Redis集群方案什么情况下会导致整个集群不可用？\n```bash\n有A，B，C三个节点的集群,在没有<复制模型>的情况下.\n如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。\n```\n#### Redis哈希槽的概念？\n```bash\nRedis集群没有使用一致性hash,而是引入了哈希槽的概念.\nRedis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.\n集群的每个节点负责一部分hash槽。\n```\n#### Redis集群的主从复制模型？\n```bash\n为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，\n所以集群使用了主从复制模型,每个节点都会有N-1个复制品.\n```\n#### Redis事务相关的命令有哪几个？\n```bash\ndiscard命令-取消事务,发起执行事务块里的所有命令.\nexec命令-执行所有事务块内的命令.\nmulti命令-标记一个事务块的开始.\nwatch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.\nunwatch命令-取消watch命令对所有key的监视.\n```\n\n#### redis的过期策略\n```bash\nredis采用的是定期删除+惰性删除策略。\n\n定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。\n因此，如果只采用定期删除策略，会导致很多key到时间没有删除。\n\n惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。\n```\n#### 为什么不用定时删除策略?\n```bash\n定时删除,用一个定时器来负责监视key,过期则自动删除。\n虽然内存及时释放，但是十分消耗CPU资源。\n在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.\n```\n","source":"_drafts/Redis.md","raw":"---\ntitle: redis常见面试题\ndate: 2019-03-13 22:33:04\ntags:\n    - redis\n    - 面试总结\ncategories: redis\ncopyright: true\ncomments: false\n---\n#### 什么是redis?\n```bash\nRedis 是一个基于内存的高性能key-value数据库。\n```\n\n#### Redis支持哪几种数据结构\n``` bash\nString（字符串）: set key value\nHash（哈希）: hmset name  key1 value1 key2 value2\nList（列表）：lpush  name  value\nSet（集合）：sadd  name  value\nzset(sorted set：有序集合)： zadd  name score value\n```\n#### Redis为什么这么快？redis采用多线程会有哪些问题？\n```bash\nRedis效率高的主要原因有下面几个：\n\n    （1）基于内存操作，速度非常快\n    （2）采用单线程，避免了上下文的切换导致消耗CPU\n    （3）采用单线程，不用去考虑各种加锁释放锁的问题\n    （4）使用IO多路复用模型，非阻塞IO\n```\n#### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n```bash\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。\nAOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。\n```\n#### 一个字符串类型的值能存储最大容量是多少？\n```bash\n512M\n```\n#### Redis集群方案什么情况下会导致整个集群不可用？\n```bash\n有A，B，C三个节点的集群,在没有<复制模型>的情况下.\n如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。\n```\n#### Redis哈希槽的概念？\n```bash\nRedis集群没有使用一致性hash,而是引入了哈希槽的概念.\nRedis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.\n集群的每个节点负责一部分hash槽。\n```\n#### Redis集群的主从复制模型？\n```bash\n为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，\n所以集群使用了主从复制模型,每个节点都会有N-1个复制品.\n```\n#### Redis事务相关的命令有哪几个？\n```bash\ndiscard命令-取消事务,发起执行事务块里的所有命令.\nexec命令-执行所有事务块内的命令.\nmulti命令-标记一个事务块的开始.\nwatch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.\nunwatch命令-取消watch命令对所有key的监视.\n```\n\n#### redis的过期策略\n```bash\nredis采用的是定期删除+惰性删除策略。\n\n定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。\n因此，如果只采用定期删除策略，会导致很多key到时间没有删除。\n\n惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。\n```\n#### 为什么不用定时删除策略?\n```bash\n定时删除,用一个定时器来负责监视key,过期则自动删除。\n虽然内存及时释放，但是十分消耗CPU资源。\n在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.\n```\n","slug":"Redis","published":0,"updated":"2019-03-27T06:50:24.318Z","layout":"post","photos":[],"link":"","_id":"ck4859y2a0000t0fydtstsw7o","content":"<h4 id=\"什么是redis\"><a href=\"#什么是redis\" class=\"headerlink\" title=\"什么是redis?\"></a>什么是redis?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 是一个基于内存的高性能key-value数据库。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis支持哪几种数据结构\"><a href=\"#Redis支持哪几种数据结构\" class=\"headerlink\" title=\"Redis支持哪几种数据结构\"></a>Redis支持哪几种数据结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String（字符串）: <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">Hash（哈希）: hmset name  key1 value1 key2 value2</span><br><span class=\"line\">List（列表）：lpush  name  value</span><br><span class=\"line\">Set（集合）：sadd  name  value</span><br><span class=\"line\">zset(sorted <span class=\"built_in\">set</span>：有序集合)： zadd  name score value</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"><a href=\"#Redis为什么这么快？redis采用多线程会有哪些问题？\" class=\"headerlink\" title=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"></a>Redis为什么这么快？redis采用多线程会有哪些问题？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis效率高的主要原因有下面几个：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）基于内存操作，速度非常快</span><br><span class=\"line\">    （2）采用单线程，避免了上下文的切换导致消耗CPU</span><br><span class=\"line\">    （3）采用单线程，不用去考虑各种加锁释放锁的问题</span><br><span class=\"line\">    （4）使用IO多路复用模型，非阻塞IO</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 提供了两种持久化方式:RDB（默认） 和AOF </span><br><span class=\"line\">RDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。</span><br><span class=\"line\">AOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一个字符串类型的值能存储最大容量是多少？\"><a href=\"#一个字符串类型的值能存储最大容量是多少？\" class=\"headerlink\" title=\"一个字符串类型的值能存储最大容量是多少？\"></a>一个字符串类型的值能存储最大容量是多少？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512M</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis集群方案什么情况下会导致整个集群不可用？\"><a href=\"#Redis集群方案什么情况下会导致整个集群不可用？\" class=\"headerlink\" title=\"Redis集群方案什么情况下会导致整个集群不可用？\"></a>Redis集群方案什么情况下会导致整个集群不可用？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有A，B，C三个节点的集群,在没有&lt;复制模型&gt;的情况下.</span><br><span class=\"line\">如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis哈希槽的概念？\"><a href=\"#Redis哈希槽的概念？\" class=\"headerlink\" title=\"Redis哈希槽的概念？\"></a>Redis哈希槽的概念？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群没有使用一致性<span class=\"built_in\">hash</span>,而是引入了哈希槽的概念.</span><br><span class=\"line\">Redis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.</span><br><span class=\"line\">集群的每个节点负责一部分<span class=\"built_in\">hash</span>槽。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis集群的主从复制模型？\"><a href=\"#Redis集群的主从复制模型？\" class=\"headerlink\" title=\"Redis集群的主从复制模型？\"></a>Redis集群的主从复制模型？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，</span><br><span class=\"line\">所以集群使用了主从复制模型,每个节点都会有N-1个复制品.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis事务相关的命令有哪几个？\"><a href=\"#Redis事务相关的命令有哪几个？\" class=\"headerlink\" title=\"Redis事务相关的命令有哪几个？\"></a>Redis事务相关的命令有哪几个？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discard命令-取消事务,发起执行事务块里的所有命令.</span><br><span class=\"line\"><span class=\"built_in\">exec</span>命令-执行所有事务块内的命令.</span><br><span class=\"line\">multi命令-标记一个事务块的开始.</span><br><span class=\"line\">watch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.</span><br><span class=\"line\">unwatch命令-取消watch命令对所有key的监视.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redis的过期策略\"><a href=\"#redis的过期策略\" class=\"headerlink\" title=\"redis的过期策略\"></a>redis的过期策略</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis采用的是定期删除+惰性删除策略。</span><br><span class=\"line\"></span><br><span class=\"line\">定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。</span><br><span class=\"line\">因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</span><br><span class=\"line\"></span><br><span class=\"line\">惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"为什么不用定时删除策略\"><a href=\"#为什么不用定时删除策略\" class=\"headerlink\" title=\"为什么不用定时删除策略?\"></a>为什么不用定时删除策略?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定时删除,用一个定时器来负责监视key,过期则自动删除。</span><br><span class=\"line\">虽然内存及时释放，但是十分消耗CPU资源。</span><br><span class=\"line\">在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是redis\"><a href=\"#什么是redis\" class=\"headerlink\" title=\"什么是redis?\"></a>什么是redis?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 是一个基于内存的高性能key-value数据库。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis支持哪几种数据结构\"><a href=\"#Redis支持哪几种数据结构\" class=\"headerlink\" title=\"Redis支持哪几种数据结构\"></a>Redis支持哪几种数据结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String（字符串）: <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">Hash（哈希）: hmset name  key1 value1 key2 value2</span><br><span class=\"line\">List（列表）：lpush  name  value</span><br><span class=\"line\">Set（集合）：sadd  name  value</span><br><span class=\"line\">zset(sorted <span class=\"built_in\">set</span>：有序集合)： zadd  name score value</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"><a href=\"#Redis为什么这么快？redis采用多线程会有哪些问题？\" class=\"headerlink\" title=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"></a>Redis为什么这么快？redis采用多线程会有哪些问题？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis效率高的主要原因有下面几个：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）基于内存操作，速度非常快</span><br><span class=\"line\">    （2）采用单线程，避免了上下文的切换导致消耗CPU</span><br><span class=\"line\">    （3）采用单线程，不用去考虑各种加锁释放锁的问题</span><br><span class=\"line\">    （4）使用IO多路复用模型，非阻塞IO</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 提供了两种持久化方式:RDB（默认） 和AOF </span><br><span class=\"line\">RDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。</span><br><span class=\"line\">AOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一个字符串类型的值能存储最大容量是多少？\"><a href=\"#一个字符串类型的值能存储最大容量是多少？\" class=\"headerlink\" title=\"一个字符串类型的值能存储最大容量是多少？\"></a>一个字符串类型的值能存储最大容量是多少？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512M</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis集群方案什么情况下会导致整个集群不可用？\"><a href=\"#Redis集群方案什么情况下会导致整个集群不可用？\" class=\"headerlink\" title=\"Redis集群方案什么情况下会导致整个集群不可用？\"></a>Redis集群方案什么情况下会导致整个集群不可用？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有A，B，C三个节点的集群,在没有&lt;复制模型&gt;的情况下.</span><br><span class=\"line\">如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis哈希槽的概念？\"><a href=\"#Redis哈希槽的概念？\" class=\"headerlink\" title=\"Redis哈希槽的概念？\"></a>Redis哈希槽的概念？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群没有使用一致性<span class=\"built_in\">hash</span>,而是引入了哈希槽的概念.</span><br><span class=\"line\">Redis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.</span><br><span class=\"line\">集群的每个节点负责一部分<span class=\"built_in\">hash</span>槽。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis集群的主从复制模型？\"><a href=\"#Redis集群的主从复制模型？\" class=\"headerlink\" title=\"Redis集群的主从复制模型？\"></a>Redis集群的主从复制模型？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，</span><br><span class=\"line\">所以集群使用了主从复制模型,每个节点都会有N-1个复制品.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis事务相关的命令有哪几个？\"><a href=\"#Redis事务相关的命令有哪几个？\" class=\"headerlink\" title=\"Redis事务相关的命令有哪几个？\"></a>Redis事务相关的命令有哪几个？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discard命令-取消事务,发起执行事务块里的所有命令.</span><br><span class=\"line\"><span class=\"built_in\">exec</span>命令-执行所有事务块内的命令.</span><br><span class=\"line\">multi命令-标记一个事务块的开始.</span><br><span class=\"line\">watch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.</span><br><span class=\"line\">unwatch命令-取消watch命令对所有key的监视.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redis的过期策略\"><a href=\"#redis的过期策略\" class=\"headerlink\" title=\"redis的过期策略\"></a>redis的过期策略</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis采用的是定期删除+惰性删除策略。</span><br><span class=\"line\"></span><br><span class=\"line\">定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。</span><br><span class=\"line\">因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</span><br><span class=\"line\"></span><br><span class=\"line\">惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"为什么不用定时删除策略\"><a href=\"#为什么不用定时删除策略\" class=\"headerlink\" title=\"为什么不用定时删除策略?\"></a>为什么不用定时删除策略?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定时删除,用一个定时器来负责监视key,过期则自动删除。</span><br><span class=\"line\">虽然内存及时释放，但是十分消耗CPU资源。</span><br><span class=\"line\">在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</span><br></pre></td></tr></table></figure>\n\n"},{"title":"《MyBatis技术内幕》学习笔记-MyBatis整体架构","date":"2019-11-15T08:51:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"# 整体架构\nMyBatis 整体架构分为3层，分别是 基础支持层、核心处理层、接口层。\n![mysql体系结构图](../_posts/MyBatis-01/1.png)\n\n## 基础支持层\n1. 反射模块:\n    * 对JAVA原生反射进行了良好的封装。\n2. 类型转换模块：\n    * 为了简化配置文件，提供了别名机制。\n3. 日志模块：\n    * 能够集成多种日志框架。\n4. 资源加载模块\n    * 对类加载器进行封装，确定类加载器的使用顺序，并可加载类文件及其他资源文件。\n5. 解析器模块\n    * 对XPath进行封装，用于解析mybatis-config.xml以及映射配置文件。\n    * 为处理动态SQL语句中的占位符提供支持。\n6. 数据源模块\n    * 自身提供了数据源实现，也支持第三方数据源集成接口。\n7. 事务管理模块\n    * 对数据库事物进行了抽象，并提供了相应的事务接口及简单实现。\n8. 缓存模块\n    * 提供了一级缓存和二级缓存\n9. Binding模块\n    * 讲用户自定义的Mapper接口与映射配置文件关联。\n","source":"_drafts/MyBatis-01.md","raw":"---\ntitle: 《MyBatis技术内幕》学习笔记-MyBatis整体架构\ndate: 2019-11-15 16:51:04\ntags:\n    - MyBatis\n    - 框架\n    - 学习笔记\ncategories: MyBatis\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n# 整体架构\nMyBatis 整体架构分为3层，分别是 基础支持层、核心处理层、接口层。\n![mysql体系结构图](../_posts/MyBatis-01/1.png)\n\n## 基础支持层\n1. 反射模块:\n    * 对JAVA原生反射进行了良好的封装。\n2. 类型转换模块：\n    * 为了简化配置文件，提供了别名机制。\n3. 日志模块：\n    * 能够集成多种日志框架。\n4. 资源加载模块\n    * 对类加载器进行封装，确定类加载器的使用顺序，并可加载类文件及其他资源文件。\n5. 解析器模块\n    * 对XPath进行封装，用于解析mybatis-config.xml以及映射配置文件。\n    * 为处理动态SQL语句中的占位符提供支持。\n6. 数据源模块\n    * 自身提供了数据源实现，也支持第三方数据源集成接口。\n7. 事务管理模块\n    * 对数据库事物进行了抽象，并提供了相应的事务接口及简单实现。\n8. 缓存模块\n    * 提供了一级缓存和二级缓存\n9. Binding模块\n    * 讲用户自定义的Mapper接口与映射配置文件关联。\n","slug":"MyBatis-01","published":0,"updated":"2019-12-12T07:19:51.411Z","layout":"post","photos":[],"link":"","_id":"ck4859y2n0002t0fyras55fxe","content":"<h1 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h1><p>MyBatis 整体架构分为3层，分别是 基础支持层、核心处理层、接口层。<br><img src=\"/2019/11/15/MyBatis-01/../_posts/MyBatis-01/1.png\" alt=\"mysql体系结构图\"></p>\n<h2 id=\"基础支持层\"><a href=\"#基础支持层\" class=\"headerlink\" title=\"基础支持层\"></a>基础支持层</h2><ol>\n<li>反射模块:<ul>\n<li>对JAVA原生反射进行了良好的封装。</li>\n</ul>\n</li>\n<li>类型转换模块：<ul>\n<li>为了简化配置文件，提供了别名机制。</li>\n</ul>\n</li>\n<li>日志模块：<ul>\n<li>能够集成多种日志框架。</li>\n</ul>\n</li>\n<li>资源加载模块<ul>\n<li>对类加载器进行封装，确定类加载器的使用顺序，并可加载类文件及其他资源文件。</li>\n</ul>\n</li>\n<li>解析器模块<ul>\n<li>对XPath进行封装，用于解析mybatis-config.xml以及映射配置文件。</li>\n<li>为处理动态SQL语句中的占位符提供支持。</li>\n</ul>\n</li>\n<li>数据源模块<ul>\n<li>自身提供了数据源实现，也支持第三方数据源集成接口。</li>\n</ul>\n</li>\n<li>事务管理模块<ul>\n<li>对数据库事物进行了抽象，并提供了相应的事务接口及简单实现。</li>\n</ul>\n</li>\n<li>缓存模块<ul>\n<li>提供了一级缓存和二级缓存</li>\n</ul>\n</li>\n<li>Binding模块<ul>\n<li>讲用户自定义的Mapper接口与映射配置文件关联。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h1><p>MyBatis 整体架构分为3层，分别是 基础支持层、核心处理层、接口层。<br><img src=\"/2019/11/15/MyBatis-01/../_posts/MyBatis-01/1.png\" alt=\"mysql体系结构图\"></p>\n<h2 id=\"基础支持层\"><a href=\"#基础支持层\" class=\"headerlink\" title=\"基础支持层\"></a>基础支持层</h2><ol>\n<li>反射模块:<ul>\n<li>对JAVA原生反射进行了良好的封装。</li>\n</ul>\n</li>\n<li>类型转换模块：<ul>\n<li>为了简化配置文件，提供了别名机制。</li>\n</ul>\n</li>\n<li>日志模块：<ul>\n<li>能够集成多种日志框架。</li>\n</ul>\n</li>\n<li>资源加载模块<ul>\n<li>对类加载器进行封装，确定类加载器的使用顺序，并可加载类文件及其他资源文件。</li>\n</ul>\n</li>\n<li>解析器模块<ul>\n<li>对XPath进行封装，用于解析mybatis-config.xml以及映射配置文件。</li>\n<li>为处理动态SQL语句中的占位符提供支持。</li>\n</ul>\n</li>\n<li>数据源模块<ul>\n<li>自身提供了数据源实现，也支持第三方数据源集成接口。</li>\n</ul>\n</li>\n<li>事务管理模块<ul>\n<li>对数据库事物进行了抽象，并提供了相应的事务接口及简单实现。</li>\n</ul>\n</li>\n<li>缓存模块<ul>\n<li>提供了一级缓存和二级缓存</li>\n</ul>\n</li>\n<li>Binding模块<ul>\n<li>讲用户自定义的Mapper接口与映射配置文件关联。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"C++强制类型转换","date":"2019-07-09T12:17:00.000Z","author":"zyh","copyright":true,"comments":1,"_content":"## C语言类型转换\nc语言类型转换有如下两种(旧式转型)\n```C++\n(T)expression  //将 expression 转型为T\nT(expression)  //将 expression 转型为T\n```\n## C++新式类型转换\nC++类型转换有如下四种\n```C++\nconst_cast<T>(expression)\ndynamic_cast<T>(expression)\nreinterpret_cast<T>(expression)\nstatic_cast<T>(expression)\n```\n<!-- more -->\n### const_cast\n一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以`cout << a << endl;`输出为1。\n```C++\n#include <iostream>\nusing namespace std;\nint main(int argc, char *argv[]) {\n\tconst int a = 1;\n\tint* b = const_cast<int*> (&a);\n\t*b = 2;\n\tcout << a << \" \" << *(&a) << \" \" << *b << endl;\n}\n// 输出：1 2 2\n```\n### dynamic_cast\ndynamic_cast 主要作用是将指向**派生类对象**的**基类指针或引用**，安全的转换为指向**派生类对象**的**派生类指针或引用**，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。\n在如下3种情况中转换可以成功\n- expression的类型与待转换类型相同。则转换必定成功。\n- expression的类型为待转换类型的公有派生类。(指针向上转换)\n- expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)\n   - 当expression为指向派生类的指针或引用派生类对象的基类引用。\n   - 基类中必须包含虚函数，也就是必须具备多态性。\n\n假设有如下两个类\n```C++\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n\tBase() {}\n\tBase(string s) : str(s) {}\n\tvirtual void Print() {cout << str << endl;}\nprivate:\n\tstring str;\n};\n\nclass Derived : public Base {\npublic:\n\tDerived() {}\n\tDerived(string s, int i) : Base(s), ival(i) {}\n\tvoid Print() {\n\t\tBase::Print();\n\t\tcout << ival << endl;\n\t}\n\tvoid PrintIval() {\n\t\tcout << ival << endl;\n\t}\nprivate:\n\tint ival;\n};\n```\nexample:\n```C++\nint main(int argc, char *argv[])\n{\n\t//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。\n\tBase* b = new Derived(\"test\", 1);\n\t//使用基类指针无法调用派生类独有的函数，编译无法通过\n\tb->PrintIval();\n\t//类型转换至派生类指针就可以调用到派生类独有的函数\n\tDerived* d = dynamic_cast<Derived*> (b);\n\td->PrintIval();\n\treturn 0;\n}\n```\n### reinterpret_cast\nreinterpret_cast 主要的作用为允许任意**长度相同**的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，**reinterpret_cast无法去掉源对象的const、volatile属性**。\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 1;\n\t//将a的指针转化为长整型数\n\tlong b = reinterpret_cast<long>(&a);\n\t//将空指针转化为长整型数\n\tlong d = reinterpret_cast<long>(NULL);\n\t//编译报错 int 4字节，而指针8字节\n\tint e = reinterpret_cast<int>(&a);\n\treturn 0;\n}\n```\n需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。\n\n### static_cast\nstatic_cast 类似C语言强制类型转换，它可以完成如下一些转换\n- 编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大->精度小使用位截断处理)\n- 将任意类型表达式转换为void类型，或从void*指针中找回其中的值。\n- 基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。\nexample(使用上述代码定义的类):\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 'a';\n\t//将 char -> int\n\tint i = static_cast<int>(a);\n\t\n\tBase* b = new Base(\"123\");\n\t//将 Base 转换为 void*\n\tvoid* v = static_cast<void*>(b);\n\t//将 *void 转换为 Base\n\tb = static_cast<Base*>(v);\n\t\n\tDerived* d = new Derived(\"123\", 123);\n\t//向上转换 将Derived* 转换为 Base*\n\tBase* bb = static_cast<Base*>(d);\n\t//向下转换 将Base* 转换为 Derived*\n\tDerived* dd = static_cast<Derived*>(b);\n\t//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!\n\tdd->PrintIval();\n}\n```\n一下内容取自effective C++\n>如果可以，尽量避免转型，特别是在注重效率的代码中避免 dynamic_cast。如果有个设计需要转型的动作，试着发展无需转型的替代设计。\n>如果转型是必要的，试着将它隐藏至某个函数背后，客户随后可以调用该函数，而不需将转型放进他们的代码内。\n>宁可使用C++-style(新式转型)，不要使用旧式转型。前者很容易辨识出来，而且有其不同的职责。","source":"_posts/C++-01.md","raw":"---\ntitle: C++强制类型转换\ndate: 2019-07-09 20:17:00\ntags:\n    - C++\ncategories: C++\nauthor: zyh\ncopyright: true\ncomments: true\n---\n## C语言类型转换\nc语言类型转换有如下两种(旧式转型)\n```C++\n(T)expression  //将 expression 转型为T\nT(expression)  //将 expression 转型为T\n```\n## C++新式类型转换\nC++类型转换有如下四种\n```C++\nconst_cast<T>(expression)\ndynamic_cast<T>(expression)\nreinterpret_cast<T>(expression)\nstatic_cast<T>(expression)\n```\n<!-- more -->\n### const_cast\n一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以`cout << a << endl;`输出为1。\n```C++\n#include <iostream>\nusing namespace std;\nint main(int argc, char *argv[]) {\n\tconst int a = 1;\n\tint* b = const_cast<int*> (&a);\n\t*b = 2;\n\tcout << a << \" \" << *(&a) << \" \" << *b << endl;\n}\n// 输出：1 2 2\n```\n### dynamic_cast\ndynamic_cast 主要作用是将指向**派生类对象**的**基类指针或引用**，安全的转换为指向**派生类对象**的**派生类指针或引用**，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。\n在如下3种情况中转换可以成功\n- expression的类型与待转换类型相同。则转换必定成功。\n- expression的类型为待转换类型的公有派生类。(指针向上转换)\n- expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)\n   - 当expression为指向派生类的指针或引用派生类对象的基类引用。\n   - 基类中必须包含虚函数，也就是必须具备多态性。\n\n假设有如下两个类\n```C++\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n\tBase() {}\n\tBase(string s) : str(s) {}\n\tvirtual void Print() {cout << str << endl;}\nprivate:\n\tstring str;\n};\n\nclass Derived : public Base {\npublic:\n\tDerived() {}\n\tDerived(string s, int i) : Base(s), ival(i) {}\n\tvoid Print() {\n\t\tBase::Print();\n\t\tcout << ival << endl;\n\t}\n\tvoid PrintIval() {\n\t\tcout << ival << endl;\n\t}\nprivate:\n\tint ival;\n};\n```\nexample:\n```C++\nint main(int argc, char *argv[])\n{\n\t//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。\n\tBase* b = new Derived(\"test\", 1);\n\t//使用基类指针无法调用派生类独有的函数，编译无法通过\n\tb->PrintIval();\n\t//类型转换至派生类指针就可以调用到派生类独有的函数\n\tDerived* d = dynamic_cast<Derived*> (b);\n\td->PrintIval();\n\treturn 0;\n}\n```\n### reinterpret_cast\nreinterpret_cast 主要的作用为允许任意**长度相同**的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，**reinterpret_cast无法去掉源对象的const、volatile属性**。\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 1;\n\t//将a的指针转化为长整型数\n\tlong b = reinterpret_cast<long>(&a);\n\t//将空指针转化为长整型数\n\tlong d = reinterpret_cast<long>(NULL);\n\t//编译报错 int 4字节，而指针8字节\n\tint e = reinterpret_cast<int>(&a);\n\treturn 0;\n}\n```\n需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。\n\n### static_cast\nstatic_cast 类似C语言强制类型转换，它可以完成如下一些转换\n- 编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大->精度小使用位截断处理)\n- 将任意类型表达式转换为void类型，或从void*指针中找回其中的值。\n- 基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。\nexample(使用上述代码定义的类):\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 'a';\n\t//将 char -> int\n\tint i = static_cast<int>(a);\n\t\n\tBase* b = new Base(\"123\");\n\t//将 Base 转换为 void*\n\tvoid* v = static_cast<void*>(b);\n\t//将 *void 转换为 Base\n\tb = static_cast<Base*>(v);\n\t\n\tDerived* d = new Derived(\"123\", 123);\n\t//向上转换 将Derived* 转换为 Base*\n\tBase* bb = static_cast<Base*>(d);\n\t//向下转换 将Base* 转换为 Derived*\n\tDerived* dd = static_cast<Derived*>(b);\n\t//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!\n\tdd->PrintIval();\n}\n```\n一下内容取自effective C++\n>如果可以，尽量避免转型，特别是在注重效率的代码中避免 dynamic_cast。如果有个设计需要转型的动作，试着发展无需转型的替代设计。\n>如果转型是必要的，试着将它隐藏至某个函数背后，客户随后可以调用该函数，而不需将转型放进他们的代码内。\n>宁可使用C++-style(新式转型)，不要使用旧式转型。前者很容易辨识出来，而且有其不同的职责。","slug":"C++-01","published":1,"updated":"2019-07-30T11:37:16.769Z","layout":"post","photos":[],"link":"","_id":"ck4859y2q0006t0fyn4wm021x","content":"<h2 id=\"C语言类型转换\"><a href=\"#C语言类型转换\" class=\"headerlink\" title=\"C语言类型转换\"></a>C语言类型转换</h2><p>c语言类型转换有如下两种(旧式转型)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(T)expression  <span class=\"comment\">//将 expression 转型为T</span></span><br><span class=\"line\">T(expression)  <span class=\"comment\">//将 expression 转型为T</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-新式类型转换\"><a href=\"#C-新式类型转换\" class=\"headerlink\" title=\"C++新式类型转换\"></a>C++新式类型转换</h2><p>C++类型转换有如下四种</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">dynamic_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">static_cast</span>&lt;T&gt;(expression)</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h3 id=\"const-cast\"><a href=\"#const-cast\" class=\"headerlink\" title=\"const_cast\"></a>const_cast</h3><p>一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以<code>cout &lt;&lt; a &lt;&lt; endl;</code>输出为1。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* b = <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">int</span>*&gt; (&amp;a);</span><br><span class=\"line\">\t*b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *(&amp;a) &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1 2 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dynamic-cast\"><a href=\"#dynamic-cast\" class=\"headerlink\" title=\"dynamic_cast\"></a>dynamic_cast</h3><p>dynamic_cast 主要作用是将指向<strong>派生类对象</strong>的<strong>基类指针或引用</strong>，安全的转换为指向<strong>派生类对象</strong>的<strong>派生类指针或引用</strong>，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。<br>在如下3种情况中转换可以成功</p>\n<ul>\n<li>expression的类型与待转换类型相同。则转换必定成功。</li>\n<li>expression的类型为待转换类型的公有派生类。(指针向上转换)</li>\n<li>expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)<ul>\n<li>当expression为指向派生类的指针或引用派生类对象的基类引用。</li>\n<li>基类中必须包含虚函数，也就是必须具备多态性。</li>\n</ul>\n</li>\n</ul>\n<p>假设有如下两个类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase() &#123;&#125;</span><br><span class=\"line\">\tBase(<span class=\"built_in\">string</span> s) : str(s) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> :</span> <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDerived() &#123;&#125;</span><br><span class=\"line\">\tDerived(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> i) : Base(s), ival(i) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tBase::Print();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintIval</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ival;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。</span></span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//使用基类指针无法调用派生类独有的函数，编译无法通过</span></span><br><span class=\"line\">\tb-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"comment\">//类型转换至派生类指针就可以调用到派生类独有的函数</span></span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">dynamic_cast</span>&lt;Derived*&gt; (b);</span><br><span class=\"line\">\td-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reinterpret-cast\"><a href=\"#reinterpret-cast\" class=\"headerlink\" title=\"reinterpret_cast\"></a>reinterpret_cast</h3><p>reinterpret_cast 主要的作用为允许任意<strong>长度相同</strong>的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，<strong>reinterpret_cast无法去掉源对象的const、volatile属性</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将a的指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> b = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"comment\">//将空指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> d = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//编译报错 int 4字节，而指针8字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。</p>\n<h3 id=\"static-cast\"><a href=\"#static-cast\" class=\"headerlink\" title=\"static_cast\"></a>static_cast</h3><p>static_cast 类似C语言强制类型转换，它可以完成如下一些转换</p>\n<ul>\n<li>编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大-&gt;精度小使用位截断处理)</li>\n<li>将任意类型表达式转换为void类型，或从void*指针中找回其中的值。</li>\n<li>基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。<br>example(使用上述代码定义的类):<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将 char -&gt; int</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(a);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Base(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//将 Base 转换为 void*</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* v = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">void</span>*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//将 *void 转换为 Base</span></span><br><span class=\"line\">\tb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(v);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"123\"</span>, <span class=\"number\">123</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//向上转换 将Derived* 转换为 Base*</span></span><br><span class=\"line\">\tBase* bb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(d);</span><br><span class=\"line\">\t<span class=\"comment\">//向下转换 将Base* 转换为 Derived*</span></span><br><span class=\"line\">\tDerived* dd = <span class=\"keyword\">static_cast</span>&lt;Derived*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!</span></span><br><span class=\"line\">\tdd-&gt;PrintIval();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>一下内容取自effective C++</p>\n<blockquote>\n<p>如果可以，尽量避免转型，特别是在注重效率的代码中避免 dynamic_cast。如果有个设计需要转型的动作，试着发展无需转型的替代设计。<br>如果转型是必要的，试着将它隐藏至某个函数背后，客户随后可以调用该函数，而不需将转型放进他们的代码内。<br>宁可使用C++-style(新式转型)，不要使用旧式转型。前者很容易辨识出来，而且有其不同的职责。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"C语言类型转换\"><a href=\"#C语言类型转换\" class=\"headerlink\" title=\"C语言类型转换\"></a>C语言类型转换</h2><p>c语言类型转换有如下两种(旧式转型)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(T)expression  <span class=\"comment\">//将 expression 转型为T</span></span><br><span class=\"line\">T(expression)  <span class=\"comment\">//将 expression 转型为T</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-新式类型转换\"><a href=\"#C-新式类型转换\" class=\"headerlink\" title=\"C++新式类型转换\"></a>C++新式类型转换</h2><p>C++类型转换有如下四种</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">dynamic_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">static_cast</span>&lt;T&gt;(expression)</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"const-cast\"><a href=\"#const-cast\" class=\"headerlink\" title=\"const_cast\"></a>const_cast</h3><p>一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以<code>cout &lt;&lt; a &lt;&lt; endl;</code>输出为1。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* b = <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">int</span>*&gt; (&amp;a);</span><br><span class=\"line\">\t*b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *(&amp;a) &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1 2 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dynamic-cast\"><a href=\"#dynamic-cast\" class=\"headerlink\" title=\"dynamic_cast\"></a>dynamic_cast</h3><p>dynamic_cast 主要作用是将指向<strong>派生类对象</strong>的<strong>基类指针或引用</strong>，安全的转换为指向<strong>派生类对象</strong>的<strong>派生类指针或引用</strong>，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。<br>在如下3种情况中转换可以成功</p>\n<ul>\n<li>expression的类型与待转换类型相同。则转换必定成功。</li>\n<li>expression的类型为待转换类型的公有派生类。(指针向上转换)</li>\n<li>expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)<ul>\n<li>当expression为指向派生类的指针或引用派生类对象的基类引用。</li>\n<li>基类中必须包含虚函数，也就是必须具备多态性。</li>\n</ul>\n</li>\n</ul>\n<p>假设有如下两个类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase() &#123;&#125;</span><br><span class=\"line\">\tBase(<span class=\"built_in\">string</span> s) : str(s) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> :</span> <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDerived() &#123;&#125;</span><br><span class=\"line\">\tDerived(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> i) : Base(s), ival(i) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tBase::Print();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintIval</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ival;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。</span></span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//使用基类指针无法调用派生类独有的函数，编译无法通过</span></span><br><span class=\"line\">\tb-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"comment\">//类型转换至派生类指针就可以调用到派生类独有的函数</span></span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">dynamic_cast</span>&lt;Derived*&gt; (b);</span><br><span class=\"line\">\td-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reinterpret-cast\"><a href=\"#reinterpret-cast\" class=\"headerlink\" title=\"reinterpret_cast\"></a>reinterpret_cast</h3><p>reinterpret_cast 主要的作用为允许任意<strong>长度相同</strong>的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，<strong>reinterpret_cast无法去掉源对象的const、volatile属性</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将a的指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> b = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"comment\">//将空指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> d = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//编译报错 int 4字节，而指针8字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。</p>\n<h3 id=\"static-cast\"><a href=\"#static-cast\" class=\"headerlink\" title=\"static_cast\"></a>static_cast</h3><p>static_cast 类似C语言强制类型转换，它可以完成如下一些转换</p>\n<ul>\n<li>编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大-&gt;精度小使用位截断处理)</li>\n<li>将任意类型表达式转换为void类型，或从void*指针中找回其中的值。</li>\n<li>基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。<br>example(使用上述代码定义的类):<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将 char -&gt; int</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(a);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Base(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//将 Base 转换为 void*</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* v = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">void</span>*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//将 *void 转换为 Base</span></span><br><span class=\"line\">\tb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(v);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"123\"</span>, <span class=\"number\">123</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//向上转换 将Derived* 转换为 Base*</span></span><br><span class=\"line\">\tBase* bb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(d);</span><br><span class=\"line\">\t<span class=\"comment\">//向下转换 将Base* 转换为 Derived*</span></span><br><span class=\"line\">\tDerived* dd = <span class=\"keyword\">static_cast</span>&lt;Derived*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!</span></span><br><span class=\"line\">\tdd-&gt;PrintIval();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>一下内容取自effective C++</p>\n<blockquote>\n<p>如果可以，尽量避免转型，特别是在注重效率的代码中避免 dynamic_cast。如果有个设计需要转型的动作，试着发展无需转型的替代设计。<br>如果转型是必要的，试着将它隐藏至某个函数背后，客户随后可以调用该函数，而不需将转型放进他们的代码内。<br>宁可使用C++-style(新式转型)，不要使用旧式转型。前者很容易辨识出来，而且有其不同的职责。</p>\n</blockquote>"},{"title":"C++右值引用","date":"2019-07-09T12:17:00.000Z","author":"zyh","copyright":true,"comments":1,"_content":"## 左值与右值的区分\n在C++中，所有的值均被分为左值与右值之一。左值是指表达式结束后依然存在的**持久化对象**，右值是指表达式结束时就不再存在的**临时对象**。所有的具名变量或者对象都是左值，而右值不具名。有一个很简单的方法区别左值与右值，**观察是否可以对表达式进行取地址，如果能，则为左值，否则为右值。**\n```C++\nint func() {return func;}\nint a = 1 + 2;\nint b = func();\nint c = a + b;\nint d = c;\n```\n<!-- more -->\n如上图所示，第2行的 a显然是左值，而(1 + 2)产生的临时变量值则为右值。同理第3行的b为左值，而func()的返回值同样是一个临时变量，为右值。第4行的c为左值，而(a+b)作为临时变量则为右值，而第5行中，d与c都为左值。套用上述的区别方法，a,b,c,d变量均可以进行取地址操作，而(1+2), func()返回值, (a+b)我们都无法取其地址。\n如书中记载，在C++11中，右值分为**纯右值**与**将亡值**。纯右值指的就是我们上述所描述的各类临时变量。而将亡值则是c++11新增的和右值引用相关的表达式，这样的表达式通常时将要移动的对象、T&&函数返回值、std::move()函数的返回值等，将亡值与纯右值均为右值，使用没有任何区别。\n## 左值引用与右值引用\n在C++11前引用已经非常常见了，就是给变量取了一个别名，如下所示。\n```C++\nint b = 1;\nint &a = b;\nint &c = 2;   //编译错误!\n```\n需注意，在定义左值引用的同时，我们不能将右值绑定至左值引用上，如上面第3行代码所示。\n而C++的右值引用同左值引用相似，则使用 && 来表示。\n```C++\nint func() {return 1;}\nint && a = 1;\nint && b = (1 + 2) * 3;\nint && c = func();\nint && d = a;    //编译错误!\n```\n同左值引用相同，在定义右值引用的同时，我们不能将左值绑定在右值引用上，如上面第5行所示。\n也就是说，右值引用只能绑定右值，左值引用只能绑定左值。\n若希望将一个左值绑定到右值引用，则可以使用**移动语义**`std::move()`将左值转换为右值，例如:\n```C++\nint a = 1;\nint &&b = std::move(a);  //编译通过\n```\n但是注意，**使用移动移动语义转移对象a后，a不可再次被使用**!\n除了普通引用，还有一类我们经常使用到的引用，**常量左值引用**。大家可以显而易见的发现，常量左值引用是个“万能”的引用类型。它可以接受非常量左值、常量左值、右值对其进行初始化。但是在它的存活时期中，它只能是可读的。我们常在函数参数中使用到它，如下所示。\n```C++\nvoid func(const string &str) {\n\tcout << str << endl;\n}\n\nint main(int argc, char *argv[]) {\n\tstring s1(\"1234\");\n\tconst string s2(\"1234\");\n\tfunc(s1);                  //非常量左值\n\tfunc(s2);                  //常量左值\n\tfunc(string(\"1234\"));      //右值\n\treturn 0;\n}\n```\n在如上介绍中很容易可以得出一下结论(转载图片)：\n![表格1](C++-02/1.png)","source":"_posts/C++-02.md","raw":"---\ntitle: C++右值引用\ndate: 2019-07-09 20:17:00\ntags:\n    - C++\ncategories: C++\nauthor: zyh\ncopyright: true\ncomments: true\n---\n## 左值与右值的区分\n在C++中，所有的值均被分为左值与右值之一。左值是指表达式结束后依然存在的**持久化对象**，右值是指表达式结束时就不再存在的**临时对象**。所有的具名变量或者对象都是左值，而右值不具名。有一个很简单的方法区别左值与右值，**观察是否可以对表达式进行取地址，如果能，则为左值，否则为右值。**\n```C++\nint func() {return func;}\nint a = 1 + 2;\nint b = func();\nint c = a + b;\nint d = c;\n```\n<!-- more -->\n如上图所示，第2行的 a显然是左值，而(1 + 2)产生的临时变量值则为右值。同理第3行的b为左值，而func()的返回值同样是一个临时变量，为右值。第4行的c为左值，而(a+b)作为临时变量则为右值，而第5行中，d与c都为左值。套用上述的区别方法，a,b,c,d变量均可以进行取地址操作，而(1+2), func()返回值, (a+b)我们都无法取其地址。\n如书中记载，在C++11中，右值分为**纯右值**与**将亡值**。纯右值指的就是我们上述所描述的各类临时变量。而将亡值则是c++11新增的和右值引用相关的表达式，这样的表达式通常时将要移动的对象、T&&函数返回值、std::move()函数的返回值等，将亡值与纯右值均为右值，使用没有任何区别。\n## 左值引用与右值引用\n在C++11前引用已经非常常见了，就是给变量取了一个别名，如下所示。\n```C++\nint b = 1;\nint &a = b;\nint &c = 2;   //编译错误!\n```\n需注意，在定义左值引用的同时，我们不能将右值绑定至左值引用上，如上面第3行代码所示。\n而C++的右值引用同左值引用相似，则使用 && 来表示。\n```C++\nint func() {return 1;}\nint && a = 1;\nint && b = (1 + 2) * 3;\nint && c = func();\nint && d = a;    //编译错误!\n```\n同左值引用相同，在定义右值引用的同时，我们不能将左值绑定在右值引用上，如上面第5行所示。\n也就是说，右值引用只能绑定右值，左值引用只能绑定左值。\n若希望将一个左值绑定到右值引用，则可以使用**移动语义**`std::move()`将左值转换为右值，例如:\n```C++\nint a = 1;\nint &&b = std::move(a);  //编译通过\n```\n但是注意，**使用移动移动语义转移对象a后，a不可再次被使用**!\n除了普通引用，还有一类我们经常使用到的引用，**常量左值引用**。大家可以显而易见的发现，常量左值引用是个“万能”的引用类型。它可以接受非常量左值、常量左值、右值对其进行初始化。但是在它的存活时期中，它只能是可读的。我们常在函数参数中使用到它，如下所示。\n```C++\nvoid func(const string &str) {\n\tcout << str << endl;\n}\n\nint main(int argc, char *argv[]) {\n\tstring s1(\"1234\");\n\tconst string s2(\"1234\");\n\tfunc(s1);                  //非常量左值\n\tfunc(s2);                  //常量左值\n\tfunc(string(\"1234\"));      //右值\n\treturn 0;\n}\n```\n在如上介绍中很容易可以得出一下结论(转载图片)：\n![表格1](C++-02/1.png)","slug":"C++-02","published":1,"updated":"2019-07-30T11:37:16.779Z","layout":"post","photos":[],"link":"","_id":"ck4859y2s0008t0fy3l37j2fz","content":"<h2 id=\"左值与右值的区分\"><a href=\"#左值与右值的区分\" class=\"headerlink\" title=\"左值与右值的区分\"></a>左值与右值的区分</h2><p>在C++中，所有的值均被分为左值与右值之一。左值是指表达式结束后依然存在的<strong>持久化对象</strong>，右值是指表达式结束时就不再存在的<strong>临时对象</strong>。所有的具名变量或者对象都是左值，而右值不具名。有一个很简单的方法区别左值与右值，<strong>观察是否可以对表达式进行取地址，如果能，则为左值，否则为右值。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> func;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = func();</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a + b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d = c;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<p>如上图所示，第2行的 a显然是左值，而(1 + 2)产生的临时变量值则为右值。同理第3行的b为左值，而func()的返回值同样是一个临时变量，为右值。第4行的c为左值，而(a+b)作为临时变量则为右值，而第5行中，d与c都为左值。套用上述的区别方法，a,b,c,d变量均可以进行取地址操作，而(1+2), func()返回值, (a+b)我们都无法取其地址。<br>如书中记载，在C++11中，右值分为<strong>纯右值</strong>与<strong>将亡值</strong>。纯右值指的就是我们上述所描述的各类临时变量。而将亡值则是c++11新增的和右值引用相关的表达式，这样的表达式通常时将要移动的对象、T&amp;&amp;函数返回值、std::move()函数的返回值等，将亡值与纯右值均为右值，使用没有任何区别。</p>\n<h2 id=\"左值引用与右值引用\"><a href=\"#左值引用与右值引用\" class=\"headerlink\" title=\"左值引用与右值引用\"></a>左值引用与右值引用</h2><p>在C++11前引用已经非常常见了，就是给变量取了一个别名，如下所示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;a = b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;c = <span class=\"number\">2</span>;   <span class=\"comment\">//编译错误!</span></span><br></pre></td></tr></table></figure>\n\n<p>需注意，在定义左值引用的同时，我们不能将右值绑定至左值引用上，如上面第3行代码所示。<br>而C++的右值引用同左值引用相似，则使用 &amp;&amp; 来表示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; b = (<span class=\"number\">1</span> + <span class=\"number\">2</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; c = func();</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; d = a;    <span class=\"comment\">//编译错误!</span></span><br></pre></td></tr></table></figure>\n\n<p>同左值引用相同，在定义右值引用的同时，我们不能将左值绑定在右值引用上，如上面第5行所示。<br>也就是说，右值引用只能绑定右值，左值引用只能绑定左值。<br>若希望将一个左值绑定到右值引用，则可以使用<strong>移动语义</strong><code>std::move()</code>将左值转换为右值，例如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp;b = <span class=\"built_in\">std</span>::move(a);  <span class=\"comment\">//编译通过</span></span><br></pre></td></tr></table></figure>\n\n<p>但是注意，<strong>使用移动移动语义转移对象a后，a不可再次被使用</strong>!<br>除了普通引用，还有一类我们经常使用到的引用，<strong>常量左值引用</strong>。大家可以显而易见的发现，常量左值引用是个“万能”的引用类型。它可以接受非常量左值、常量左值、右值对其进行初始化。但是在它的存活时期中，它只能是可读的。我们常在函数参数中使用到它，如下所示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s1</span><span class=\"params\">(<span class=\"string\">\"1234\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> <span class=\"title\">s2</span><span class=\"params\">(<span class=\"string\">\"1234\"</span>)</span></span>;</span><br><span class=\"line\">\tfunc(s1);                  <span class=\"comment\">//非常量左值</span></span><br><span class=\"line\">\tfunc(s2);                  <span class=\"comment\">//常量左值</span></span><br><span class=\"line\">\tfunc(<span class=\"built_in\">string</span>(<span class=\"string\">\"1234\"</span>));      <span class=\"comment\">//右值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在如上介绍中很容易可以得出一下结论(转载图片)：<br><img src=\"/2019/07/09/C++-02/1.png\" alt=\"表格1\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"左值与右值的区分\"><a href=\"#左值与右值的区分\" class=\"headerlink\" title=\"左值与右值的区分\"></a>左值与右值的区分</h2><p>在C++中，所有的值均被分为左值与右值之一。左值是指表达式结束后依然存在的<strong>持久化对象</strong>，右值是指表达式结束时就不再存在的<strong>临时对象</strong>。所有的具名变量或者对象都是左值，而右值不具名。有一个很简单的方法区别左值与右值，<strong>观察是否可以对表达式进行取地址，如果能，则为左值，否则为右值。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> func;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = func();</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a + b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d = c;</span><br></pre></td></tr></table></figure>","more":"<p>如上图所示，第2行的 a显然是左值，而(1 + 2)产生的临时变量值则为右值。同理第3行的b为左值，而func()的返回值同样是一个临时变量，为右值。第4行的c为左值，而(a+b)作为临时变量则为右值，而第5行中，d与c都为左值。套用上述的区别方法，a,b,c,d变量均可以进行取地址操作，而(1+2), func()返回值, (a+b)我们都无法取其地址。<br>如书中记载，在C++11中，右值分为<strong>纯右值</strong>与<strong>将亡值</strong>。纯右值指的就是我们上述所描述的各类临时变量。而将亡值则是c++11新增的和右值引用相关的表达式，这样的表达式通常时将要移动的对象、T&amp;&amp;函数返回值、std::move()函数的返回值等，将亡值与纯右值均为右值，使用没有任何区别。</p>\n<h2 id=\"左值引用与右值引用\"><a href=\"#左值引用与右值引用\" class=\"headerlink\" title=\"左值引用与右值引用\"></a>左值引用与右值引用</h2><p>在C++11前引用已经非常常见了，就是给变量取了一个别名，如下所示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;a = b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;c = <span class=\"number\">2</span>;   <span class=\"comment\">//编译错误!</span></span><br></pre></td></tr></table></figure>\n\n<p>需注意，在定义左值引用的同时，我们不能将右值绑定至左值引用上，如上面第3行代码所示。<br>而C++的右值引用同左值引用相似，则使用 &amp;&amp; 来表示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; b = (<span class=\"number\">1</span> + <span class=\"number\">2</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; c = func();</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp; d = a;    <span class=\"comment\">//编译错误!</span></span><br></pre></td></tr></table></figure>\n\n<p>同左值引用相同，在定义右值引用的同时，我们不能将左值绑定在右值引用上，如上面第5行所示。<br>也就是说，右值引用只能绑定右值，左值引用只能绑定左值。<br>若希望将一个左值绑定到右值引用，则可以使用<strong>移动语义</strong><code>std::move()</code>将左值转换为右值，例如:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;&amp;b = <span class=\"built_in\">std</span>::move(a);  <span class=\"comment\">//编译通过</span></span><br></pre></td></tr></table></figure>\n\n<p>但是注意，<strong>使用移动移动语义转移对象a后，a不可再次被使用</strong>!<br>除了普通引用，还有一类我们经常使用到的引用，<strong>常量左值引用</strong>。大家可以显而易见的发现，常量左值引用是个“万能”的引用类型。它可以接受非常量左值、常量左值、右值对其进行初始化。但是在它的存活时期中，它只能是可读的。我们常在函数参数中使用到它，如下所示。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;str)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">s1</span><span class=\"params\">(<span class=\"string\">\"1234\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> <span class=\"title\">s2</span><span class=\"params\">(<span class=\"string\">\"1234\"</span>)</span></span>;</span><br><span class=\"line\">\tfunc(s1);                  <span class=\"comment\">//非常量左值</span></span><br><span class=\"line\">\tfunc(s2);                  <span class=\"comment\">//常量左值</span></span><br><span class=\"line\">\tfunc(<span class=\"built_in\">string</span>(<span class=\"string\">\"1234\"</span>));      <span class=\"comment\">//右值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在如上介绍中很容易可以得出一下结论(转载图片)：<br><img src=\"/2019/07/09/C++-02/1.png\" alt=\"表格1\"></p>"},{"title":"设计模式-策略模式","date":"2019-12-13T04:00:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"## 什么是策略模式\n策略这个词应该怎么理解，打个比方说，我们出门的时候会选择不同的出行方式，比如骑自行车、坐公交、坐火车、坐飞机、坐火箭等等，这些出行方式，每一种都是一个策略。\n\n再比如我们去逛商场，商场现在正在搞活动，有打折的、有满减的、有返利的等等，其实不管商场如何进行促销，说到底都是一些算法，这些算法本身只是一种策略，并且这些算法是随时都可能互相替换的，比如针对同一件商品，今天打八折、明天满100减30，这些策略间是可以互换的。\n\n**策略模式（Strategy）**，定义了一组算法，将每个算法都封装起来，并且使它们之间可以互换。\n<!-- more -->\n## 示例\n\n### 模拟鸭子项目\n![](Design-Pattern-Strategy/1.png)\n```java\n\npublic abstract class Duck {\t\n    public void Quack() {\t\n        System.out.println(\"~~gaga~~\");\n    }\n    public abstract void display();\n    public void swim() {\t\n        System.out.println(\"~~im swim~~\");\n    }\n}\n\n```\nGreenHeadDuck继承Duck ：\n```java\n\npublic class GreenHeadDuck extends Duck {\t\n    @Override\t\n    public void display() {\t\n          System.out.println(\"**GreenHead**\");\n    }\n}\n```\n### 新需求\n\n添加会飞的鸭子\n\n```java\npublic abstract class Duck {\n        //...;\n\t public void Fly() {\t\n\t \tSystem.out.println(\"~~im fly~~\");\n\t }\n}\n```\n问题来了,这个Fly让所有子类都会飞了，这是不科学的。并非Duck所有的子类都会飞。在Duck超类中加上新的行为，会使得某些并不适合该行为的子类也具有该行为。\n这个导致，后面几十个鸭子不没有这个功能，不会飞，那么他们的都要去实现。工作量大，而且重复劳动。\n所以：超类挖的一个坑，每个子类都要来填，增加工作量，复杂度O(N^2)。不是好的设计方式\n\n### 用策略模式来解决新需求\n需要新的设计方式，应对项目的扩展性，降低复杂度：\n\n1）分析项目变化与不变部分，提取变化部分，然后把变化的部分抽象成接口+实现；\n\n2）鸭子哪些功能是会根据新需求变化的？叫声、飞行...\n\n![](Design-Pattern-Strategy/2.png)\n\n### 重新设计模拟鸭子项目\n\n```java\npublic abstract class Duck {\t\n    FlyBehavior mFlyBehavior;\n    QuackBehavior mQuackBehavior;\n    public Duck() { }\n    public void Fly() {\t\n        mFlyBehavior.fly();\n    }\n    public void Quack() {\t\n        mQuackBehavior.quack();\n    }\n    public abstract void display();\n}\n\n\npublic class GreenHeadDuck extends Duck {\n    public GreenHeadDuck() {\n        mFlyBehavior = new GoodFlyBehavior();\n        mQuackBehavior = new GaGaQuackBehavior();\n    }\n    @Override\n    public void display() {\n        System.out.println(\"I’m a real GreenHeadDuck\");\n    }\n}\n\n```\n## 总结\n1. 分析项目中变化部分与不变部分（方法论）——>这个方法论不仅是策略模式中才可以用的，用来分析项目中变法的何不变化的，变化的就可以怎么来抽取替换。而且变化的抽离出来的行为族，行为族之间是可以来相互替换的。\n\n2. 多用组合少用继承；用行为类组合，而不是行为的继承。更有弹性\n\n## 策略模式中的设计原则\n1. 开闭原则（Open-Closed Principle，缩写为OCP）\n    * 一个软件实体应当对扩展开放(例如对抽象层的扩展)，对修改关闭(例如对抽象层的修改)。即在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展。\n    * 开闭原则的关键，在于抽象。策略模式，是开闭原则的一个极好的应用范例。\n\n2. 里氏替换原则（Liskov Substitution Principle，缩写为LSP）\n    * 里氏替换原则里一个软件实体如果使用的是**一个基类的话，那么一定适用于其子类，而且它根本不能察觉到基类对象和子类对象的区别。** 比如，假设有两个类，一个是Base类，一个是Derived类，并且Derived类是Base类的子类。那么一个方法如果可以接受一个基类对象b的话：method1(Base b)，那么它必然可以接受一个子类对象d，也即可以有method1(d)。反之，则不一定成立。\n    * 里氏替换原则讲的是基类与子类的关系。只有当这种关系存在时，里氏替换关系才存在，反之则不存在。\n    * 策略模式之所以可行的基础便是里氏替换原则：策略模式要求所有的策略对象都是可以互换的，因此它们都必须是一个抽象策略角色的子类。在客户端则仅知道抽象策略角色类型，虽然变量的真实类型可以是任何一个具体策略角色的实例。\n","source":"_posts/Design-Pattern-Strategy.md","raw":"---\ntitle: 设计模式-策略模式\ndate: 2019-12-13 12:00:04\ntags:\n    - 设计模式\ncategories: 设计模式\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n## 什么是策略模式\n策略这个词应该怎么理解，打个比方说，我们出门的时候会选择不同的出行方式，比如骑自行车、坐公交、坐火车、坐飞机、坐火箭等等，这些出行方式，每一种都是一个策略。\n\n再比如我们去逛商场，商场现在正在搞活动，有打折的、有满减的、有返利的等等，其实不管商场如何进行促销，说到底都是一些算法，这些算法本身只是一种策略，并且这些算法是随时都可能互相替换的，比如针对同一件商品，今天打八折、明天满100减30，这些策略间是可以互换的。\n\n**策略模式（Strategy）**，定义了一组算法，将每个算法都封装起来，并且使它们之间可以互换。\n<!-- more -->\n## 示例\n\n### 模拟鸭子项目\n![](Design-Pattern-Strategy/1.png)\n```java\n\npublic abstract class Duck {\t\n    public void Quack() {\t\n        System.out.println(\"~~gaga~~\");\n    }\n    public abstract void display();\n    public void swim() {\t\n        System.out.println(\"~~im swim~~\");\n    }\n}\n\n```\nGreenHeadDuck继承Duck ：\n```java\n\npublic class GreenHeadDuck extends Duck {\t\n    @Override\t\n    public void display() {\t\n          System.out.println(\"**GreenHead**\");\n    }\n}\n```\n### 新需求\n\n添加会飞的鸭子\n\n```java\npublic abstract class Duck {\n        //...;\n\t public void Fly() {\t\n\t \tSystem.out.println(\"~~im fly~~\");\n\t }\n}\n```\n问题来了,这个Fly让所有子类都会飞了，这是不科学的。并非Duck所有的子类都会飞。在Duck超类中加上新的行为，会使得某些并不适合该行为的子类也具有该行为。\n这个导致，后面几十个鸭子不没有这个功能，不会飞，那么他们的都要去实现。工作量大，而且重复劳动。\n所以：超类挖的一个坑，每个子类都要来填，增加工作量，复杂度O(N^2)。不是好的设计方式\n\n### 用策略模式来解决新需求\n需要新的设计方式，应对项目的扩展性，降低复杂度：\n\n1）分析项目变化与不变部分，提取变化部分，然后把变化的部分抽象成接口+实现；\n\n2）鸭子哪些功能是会根据新需求变化的？叫声、飞行...\n\n![](Design-Pattern-Strategy/2.png)\n\n### 重新设计模拟鸭子项目\n\n```java\npublic abstract class Duck {\t\n    FlyBehavior mFlyBehavior;\n    QuackBehavior mQuackBehavior;\n    public Duck() { }\n    public void Fly() {\t\n        mFlyBehavior.fly();\n    }\n    public void Quack() {\t\n        mQuackBehavior.quack();\n    }\n    public abstract void display();\n}\n\n\npublic class GreenHeadDuck extends Duck {\n    public GreenHeadDuck() {\n        mFlyBehavior = new GoodFlyBehavior();\n        mQuackBehavior = new GaGaQuackBehavior();\n    }\n    @Override\n    public void display() {\n        System.out.println(\"I’m a real GreenHeadDuck\");\n    }\n}\n\n```\n## 总结\n1. 分析项目中变化部分与不变部分（方法论）——>这个方法论不仅是策略模式中才可以用的，用来分析项目中变法的何不变化的，变化的就可以怎么来抽取替换。而且变化的抽离出来的行为族，行为族之间是可以来相互替换的。\n\n2. 多用组合少用继承；用行为类组合，而不是行为的继承。更有弹性\n\n## 策略模式中的设计原则\n1. 开闭原则（Open-Closed Principle，缩写为OCP）\n    * 一个软件实体应当对扩展开放(例如对抽象层的扩展)，对修改关闭(例如对抽象层的修改)。即在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展。\n    * 开闭原则的关键，在于抽象。策略模式，是开闭原则的一个极好的应用范例。\n\n2. 里氏替换原则（Liskov Substitution Principle，缩写为LSP）\n    * 里氏替换原则里一个软件实体如果使用的是**一个基类的话，那么一定适用于其子类，而且它根本不能察觉到基类对象和子类对象的区别。** 比如，假设有两个类，一个是Base类，一个是Derived类，并且Derived类是Base类的子类。那么一个方法如果可以接受一个基类对象b的话：method1(Base b)，那么它必然可以接受一个子类对象d，也即可以有method1(d)。反之，则不一定成立。\n    * 里氏替换原则讲的是基类与子类的关系。只有当这种关系存在时，里氏替换关系才存在，反之则不存在。\n    * 策略模式之所以可行的基础便是里氏替换原则：策略模式要求所有的策略对象都是可以互换的，因此它们都必须是一个抽象策略角色的子类。在客户端则仅知道抽象策略角色类型，虽然变量的真实类型可以是任何一个具体策略角色的实例。\n","slug":"Design-Pattern-Strategy","published":1,"updated":"2019-12-16T07:57:16.490Z","_id":"ck4859y2u0009t0fy5cbsap0e","layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是策略模式\"><a href=\"#什么是策略模式\" class=\"headerlink\" title=\"什么是策略模式\"></a>什么是策略模式</h2><p>策略这个词应该怎么理解，打个比方说，我们出门的时候会选择不同的出行方式，比如骑自行车、坐公交、坐火车、坐飞机、坐火箭等等，这些出行方式，每一种都是一个策略。</p>\n<p>再比如我们去逛商场，商场现在正在搞活动，有打折的、有满减的、有返利的等等，其实不管商场如何进行促销，说到底都是一些算法，这些算法本身只是一种策略，并且这些算法是随时都可能互相替换的，比如针对同一件商品，今天打八折、明天满100减30，这些策略间是可以互换的。</p>\n<p><strong>策略模式（Strategy）</strong>，定义了一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p>\n<a id=\"more\"></a>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"模拟鸭子项目\"><a href=\"#模拟鸭子项目\" class=\"headerlink\" title=\"模拟鸭子项目\"></a>模拟鸭子项目</h3><p><img src=\"/2019/12/13/Design-Pattern-Strategy/1.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Quack</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"~~gaga~~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"~~im swim~~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GreenHeadDuck继承Duck ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenHeadDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span>\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"**GreenHead**\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新需求\"><a href=\"#新需求\" class=\"headerlink\" title=\"新需求\"></a>新需求</h3><p>添加会飞的鸭子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...;</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">\t \tSystem.out.println(<span class=\"string\">\"~~im fly~~\"</span>);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题来了,这个Fly让所有子类都会飞了，这是不科学的。并非Duck所有的子类都会飞。在Duck超类中加上新的行为，会使得某些并不适合该行为的子类也具有该行为。<br>这个导致，后面几十个鸭子不没有这个功能，不会飞，那么他们的都要去实现。工作量大，而且重复劳动。<br>所以：超类挖的一个坑，每个子类都要来填，增加工作量，复杂度O(N^2)。不是好的设计方式</p>\n<h3 id=\"用策略模式来解决新需求\"><a href=\"#用策略模式来解决新需求\" class=\"headerlink\" title=\"用策略模式来解决新需求\"></a>用策略模式来解决新需求</h3><p>需要新的设计方式，应对项目的扩展性，降低复杂度：</p>\n<p>1）分析项目变化与不变部分，提取变化部分，然后把变化的部分抽象成接口+实现；</p>\n<p>2）鸭子哪些功能是会根据新需求变化的？叫声、飞行…</p>\n<p><img src=\"/2019/12/13/Design-Pattern-Strategy/2.png\" alt=\"\"></p>\n<h3 id=\"重新设计模拟鸭子项目\"><a href=\"#重新设计模拟鸭子项目\" class=\"headerlink\" title=\"重新设计模拟鸭子项目\"></a>重新设计模拟鸭子项目</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;\t</span><br><span class=\"line\">    FlyBehavior mFlyBehavior;</span><br><span class=\"line\">    QuackBehavior mQuackBehavior;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Duck</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        mFlyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Quack</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        mQuackBehavior.quack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenHeadDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GreenHeadDuck</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mFlyBehavior = <span class=\"keyword\">new</span> GoodFlyBehavior();</span><br><span class=\"line\">        mQuackBehavior = <span class=\"keyword\">new</span> GaGaQuackBehavior();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I’m a real GreenHeadDuck\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>分析项目中变化部分与不变部分（方法论）——&gt;这个方法论不仅是策略模式中才可以用的，用来分析项目中变法的何不变化的，变化的就可以怎么来抽取替换。而且变化的抽离出来的行为族，行为族之间是可以来相互替换的。</p>\n</li>\n<li><p>多用组合少用继承；用行为类组合，而不是行为的继承。更有弹性</p>\n</li>\n</ol>\n<h2 id=\"策略模式中的设计原则\"><a href=\"#策略模式中的设计原则\" class=\"headerlink\" title=\"策略模式中的设计原则\"></a>策略模式中的设计原则</h2><ol>\n<li><p>开闭原则（Open-Closed Principle，缩写为OCP）</p>\n<ul>\n<li>一个软件实体应当对扩展开放(例如对抽象层的扩展)，对修改关闭(例如对抽象层的修改)。即在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展。</li>\n<li>开闭原则的关键，在于抽象。策略模式，是开闭原则的一个极好的应用范例。</li>\n</ul>\n</li>\n<li><p>里氏替换原则（Liskov Substitution Principle，缩写为LSP）</p>\n<ul>\n<li>里氏替换原则里一个软件实体如果使用的是<strong>一个基类的话，那么一定适用于其子类，而且它根本不能察觉到基类对象和子类对象的区别。</strong> 比如，假设有两个类，一个是Base类，一个是Derived类，并且Derived类是Base类的子类。那么一个方法如果可以接受一个基类对象b的话：method1(Base b)，那么它必然可以接受一个子类对象d，也即可以有method1(d)。反之，则不一定成立。</li>\n<li>里氏替换原则讲的是基类与子类的关系。只有当这种关系存在时，里氏替换关系才存在，反之则不存在。</li>\n<li>策略模式之所以可行的基础便是里氏替换原则：策略模式要求所有的策略对象都是可以互换的，因此它们都必须是一个抽象策略角色的子类。在客户端则仅知道抽象策略角色类型，虽然变量的真实类型可以是任何一个具体策略角色的实例。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是策略模式\"><a href=\"#什么是策略模式\" class=\"headerlink\" title=\"什么是策略模式\"></a>什么是策略模式</h2><p>策略这个词应该怎么理解，打个比方说，我们出门的时候会选择不同的出行方式，比如骑自行车、坐公交、坐火车、坐飞机、坐火箭等等，这些出行方式，每一种都是一个策略。</p>\n<p>再比如我们去逛商场，商场现在正在搞活动，有打折的、有满减的、有返利的等等，其实不管商场如何进行促销，说到底都是一些算法，这些算法本身只是一种策略，并且这些算法是随时都可能互相替换的，比如针对同一件商品，今天打八折、明天满100减30，这些策略间是可以互换的。</p>\n<p><strong>策略模式（Strategy）</strong>，定义了一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p>","more":"<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"模拟鸭子项目\"><a href=\"#模拟鸭子项目\" class=\"headerlink\" title=\"模拟鸭子项目\"></a>模拟鸭子项目</h3><p><img src=\"/2019/12/13/Design-Pattern-Strategy/1.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Quack</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"~~gaga~~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"~~im swim~~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GreenHeadDuck继承Duck ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenHeadDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span>\t</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"**GreenHead**\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新需求\"><a href=\"#新需求\" class=\"headerlink\" title=\"新需求\"></a>新需求</h3><p>添加会飞的鸭子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...;</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">\t \tSystem.out.println(<span class=\"string\">\"~~im fly~~\"</span>);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>问题来了,这个Fly让所有子类都会飞了，这是不科学的。并非Duck所有的子类都会飞。在Duck超类中加上新的行为，会使得某些并不适合该行为的子类也具有该行为。<br>这个导致，后面几十个鸭子不没有这个功能，不会飞，那么他们的都要去实现。工作量大，而且重复劳动。<br>所以：超类挖的一个坑，每个子类都要来填，增加工作量，复杂度O(N^2)。不是好的设计方式</p>\n<h3 id=\"用策略模式来解决新需求\"><a href=\"#用策略模式来解决新需求\" class=\"headerlink\" title=\"用策略模式来解决新需求\"></a>用策略模式来解决新需求</h3><p>需要新的设计方式，应对项目的扩展性，降低复杂度：</p>\n<p>1）分析项目变化与不变部分，提取变化部分，然后把变化的部分抽象成接口+实现；</p>\n<p>2）鸭子哪些功能是会根据新需求变化的？叫声、飞行…</p>\n<p><img src=\"/2019/12/13/Design-Pattern-Strategy/2.png\" alt=\"\"></p>\n<h3 id=\"重新设计模拟鸭子项目\"><a href=\"#重新设计模拟鸭子项目\" class=\"headerlink\" title=\"重新设计模拟鸭子项目\"></a>重新设计模拟鸭子项目</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Duck</span> </span>&#123;\t</span><br><span class=\"line\">    FlyBehavior mFlyBehavior;</span><br><span class=\"line\">    QuackBehavior mQuackBehavior;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Duck</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        mFlyBehavior.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Quack</span><span class=\"params\">()</span> </span>&#123;\t</span><br><span class=\"line\">        mQuackBehavior.quack();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreenHeadDuck</span> <span class=\"keyword\">extends</span> <span class=\"title\">Duck</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GreenHeadDuck</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mFlyBehavior = <span class=\"keyword\">new</span> GoodFlyBehavior();</span><br><span class=\"line\">        mQuackBehavior = <span class=\"keyword\">new</span> GaGaQuackBehavior();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I’m a real GreenHeadDuck\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>分析项目中变化部分与不变部分（方法论）——&gt;这个方法论不仅是策略模式中才可以用的，用来分析项目中变法的何不变化的，变化的就可以怎么来抽取替换。而且变化的抽离出来的行为族，行为族之间是可以来相互替换的。</p>\n</li>\n<li><p>多用组合少用继承；用行为类组合，而不是行为的继承。更有弹性</p>\n</li>\n</ol>\n<h2 id=\"策略模式中的设计原则\"><a href=\"#策略模式中的设计原则\" class=\"headerlink\" title=\"策略模式中的设计原则\"></a>策略模式中的设计原则</h2><ol>\n<li><p>开闭原则（Open-Closed Principle，缩写为OCP）</p>\n<ul>\n<li>一个软件实体应当对扩展开放(例如对抽象层的扩展)，对修改关闭(例如对抽象层的修改)。即在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展。</li>\n<li>开闭原则的关键，在于抽象。策略模式，是开闭原则的一个极好的应用范例。</li>\n</ul>\n</li>\n<li><p>里氏替换原则（Liskov Substitution Principle，缩写为LSP）</p>\n<ul>\n<li>里氏替换原则里一个软件实体如果使用的是<strong>一个基类的话，那么一定适用于其子类，而且它根本不能察觉到基类对象和子类对象的区别。</strong> 比如，假设有两个类，一个是Base类，一个是Derived类，并且Derived类是Base类的子类。那么一个方法如果可以接受一个基类对象b的话：method1(Base b)，那么它必然可以接受一个子类对象d，也即可以有method1(d)。反之，则不一定成立。</li>\n<li>里氏替换原则讲的是基类与子类的关系。只有当这种关系存在时，里氏替换关系才存在，反之则不存在。</li>\n<li>策略模式之所以可行的基础便是里氏替换原则：策略模式要求所有的策略对象都是可以互换的，因此它们都必须是一个抽象策略角色的子类。在客户端则仅知道抽象策略角色类型，虽然变量的真实类型可以是任何一个具体策略角色的实例。</li>\n</ul>\n</li>\n</ol>"},{"title":"设置git忽略.idea文件","date":"2019-07-11T03:39:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"1.将.idea目录加入ignore：\n```bash\n$ echo '.idea' >> .gitignore\n```\n<!-- more -->\n\n2.从git中删除idea：\n```bash\n$ git rm -r --cached .idea\n```\n\n3.将.gitignore文件加入git：\n```bash\n$ git add .gitignore\n```\n\n4.提交.gitignore文件，将.idea从代码仓库中忽略：\n```bash\n$ git commit -m '忽略.idea文件夹'\n```\n\n5、Push到Git服务器：\n\n```bash\n$ git push\n```","source":"_posts/GIt-Ignore.md","raw":"---\ntitle: 设置git忽略.idea文件\ndate: 2019-07-11 11:39:04\ntags:\n    - git\n    - 教程\ncategories: 项目搭建\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n1.将.idea目录加入ignore：\n```bash\n$ echo '.idea' >> .gitignore\n```\n<!-- more -->\n\n2.从git中删除idea：\n```bash\n$ git rm -r --cached .idea\n```\n\n3.将.gitignore文件加入git：\n```bash\n$ git add .gitignore\n```\n\n4.提交.gitignore文件，将.idea从代码仓库中忽略：\n```bash\n$ git commit -m '忽略.idea文件夹'\n```\n\n5、Push到Git服务器：\n\n```bash\n$ git push\n```","slug":"GIt-Ignore","published":1,"updated":"2019-07-30T11:37:16.767Z","layout":"post","photos":[],"link":"","_id":"ck4859y2v000ct0fy3uk7y04f","content":"<p>1.将.idea目录加入ignore：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'.idea'</span> &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>2.从git中删除idea：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached .idea</span><br></pre></td></tr></table></figure>\n\n<p>3.将.gitignore文件加入git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .gitignore</span><br></pre></td></tr></table></figure>\n\n<p>4.提交.gitignore文件，将.idea从代码仓库中忽略：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">'忽略.idea文件夹'</span></span><br></pre></td></tr></table></figure>\n\n<p>5、Push到Git服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>1.将.idea目录加入ignore：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'.idea'</span> &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure>","more":"<p>2.从git中删除idea：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached .idea</span><br></pre></td></tr></table></figure>\n\n<p>3.将.gitignore文件加入git：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .gitignore</span><br></pre></td></tr></table></figure>\n\n<p>4.提交.gitignore文件，将.idea从代码仓库中忽略：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">'忽略.idea文件夹'</span></span><br></pre></td></tr></table></figure>\n\n<p>5、Push到Git服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>"},{"title":"Guava-总结","date":"2019-10-24T02:55:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"### 项目相关信息\n官方首页：http://code.google.com/p/guava-libraries\n英文文档：http://www.ostools.net/apidocs/apidoc?api=guava\n中文文档：https://www.kancloud.cn/wizardforcel/java-opensource-doc/112616\n<!-- more -->\n### 博客\n* [Guava 学习笔记：Google Guava 类库简介](http://www.iocoder.cn/Guava/peida/intro/)\n* [Guava 学习笔记：Optional 优雅的使用null](http://www.iocoder.cn/Guava/peida/Optional/)\n* [Guava学习笔记：Preconditions优雅的检验参数](http://www.iocoder.cn/Guava/peida/Preconditions/)\n* [Guava学习笔记：复写的Object常用方法](http://www.iocoder.cn/Guava/peida/Object/)\n* [Guava学习笔记：Ordering犀利的比较器](https://www.cnblogs.com/peida/p/Guava_Ordering.html)\n* [Guava学习笔记：简化异常处理的Throwables类](http://www.iocoder.cn/Guava/peida/Throwables/)\n* [Guava学习笔记：Immutable(不可变)集合](http://www.iocoder.cn/Guava/peida/Immutable_Collections/)\n* [Guava学习笔记：Guava新增集合类型-Multiset](http://www.iocoder.cn/Guava/peida/Multiset/)\n* [Guava 学习笔记：Guava 新增集合类型 —— Multimap](http://www.iocoder.cn/Guava/peida/Multimap/)\n* [Guava学习笔记：Guava新增集合类型-Bimap](http://www.iocoder.cn/Guava/peida/Bimap/)\n* [Guava学习笔记：Guava新集合-Table等](http://www.iocoder.cn/Guava/peida/Table/)\n* [Guava学习笔记：Guava cache](http://www.iocoder.cn/Guava/peida/Cache/)\n* [Guava学习笔记：EventBus](http://www.iocoder.cn/Guava/peida/EventBus/)\n* [Guava学习笔记：Range](http://www.iocoder.cn/Guava/peida/Range/)\n","source":"_posts/Guava.md","raw":"---\ntitle: Guava-总结\ndate: 2019-10-24 10:55:04\ntags:\n    - JAVA\n    - GUAVA\ncategories: GUAVA\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n### 项目相关信息\n官方首页：http://code.google.com/p/guava-libraries\n英文文档：http://www.ostools.net/apidocs/apidoc?api=guava\n中文文档：https://www.kancloud.cn/wizardforcel/java-opensource-doc/112616\n<!-- more -->\n### 博客\n* [Guava 学习笔记：Google Guava 类库简介](http://www.iocoder.cn/Guava/peida/intro/)\n* [Guava 学习笔记：Optional 优雅的使用null](http://www.iocoder.cn/Guava/peida/Optional/)\n* [Guava学习笔记：Preconditions优雅的检验参数](http://www.iocoder.cn/Guava/peida/Preconditions/)\n* [Guava学习笔记：复写的Object常用方法](http://www.iocoder.cn/Guava/peida/Object/)\n* [Guava学习笔记：Ordering犀利的比较器](https://www.cnblogs.com/peida/p/Guava_Ordering.html)\n* [Guava学习笔记：简化异常处理的Throwables类](http://www.iocoder.cn/Guava/peida/Throwables/)\n* [Guava学习笔记：Immutable(不可变)集合](http://www.iocoder.cn/Guava/peida/Immutable_Collections/)\n* [Guava学习笔记：Guava新增集合类型-Multiset](http://www.iocoder.cn/Guava/peida/Multiset/)\n* [Guava 学习笔记：Guava 新增集合类型 —— Multimap](http://www.iocoder.cn/Guava/peida/Multimap/)\n* [Guava学习笔记：Guava新增集合类型-Bimap](http://www.iocoder.cn/Guava/peida/Bimap/)\n* [Guava学习笔记：Guava新集合-Table等](http://www.iocoder.cn/Guava/peida/Table/)\n* [Guava学习笔记：Guava cache](http://www.iocoder.cn/Guava/peida/Cache/)\n* [Guava学习笔记：EventBus](http://www.iocoder.cn/Guava/peida/EventBus/)\n* [Guava学习笔记：Range](http://www.iocoder.cn/Guava/peida/Range/)\n","slug":"Guava","published":1,"updated":"2019-12-13T11:12:27.363Z","layout":"post","photos":[],"link":"","_id":"ck4859y2w000dt0fyewnpn50g","content":"<h3 id=\"项目相关信息\"><a href=\"#项目相关信息\" class=\"headerlink\" title=\"项目相关信息\"></a>项目相关信息</h3><p>官方首页：<a href=\"http://code.google.com/p/guava-libraries\" target=\"_blank\" rel=\"noopener\">http://code.google.com/p/guava-libraries</a><br>英文文档：<a href=\"http://www.ostools.net/apidocs/apidoc?api=guava\" target=\"_blank\" rel=\"noopener\">http://www.ostools.net/apidocs/apidoc?api=guava</a><br>中文文档：<a href=\"https://www.kancloud.cn/wizardforcel/java-opensource-doc/112616\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/wizardforcel/java-opensource-doc/112616</a></p>\n<a id=\"more\"></a>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><ul>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/intro/\" target=\"_blank\" rel=\"noopener\">Guava 学习笔记：Google Guava 类库简介</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Optional/\" target=\"_blank\" rel=\"noopener\">Guava 学习笔记：Optional 优雅的使用null</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Preconditions/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Preconditions优雅的检验参数</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Object/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：复写的Object常用方法</a></li>\n<li><a href=\"https://www.cnblogs.com/peida/p/Guava_Ordering.html\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Ordering犀利的比较器</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Throwables/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：简化异常处理的Throwables类</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Immutable_Collections/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Immutable(不可变)集合</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Multiset/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava新增集合类型-Multiset</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Multimap/\" target=\"_blank\" rel=\"noopener\">Guava 学习笔记：Guava 新增集合类型 —— Multimap</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Bimap/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava新增集合类型-Bimap</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Table/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava新集合-Table等</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Cache/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava cache</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/EventBus/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：EventBus</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Range/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Range</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"项目相关信息\"><a href=\"#项目相关信息\" class=\"headerlink\" title=\"项目相关信息\"></a>项目相关信息</h3><p>官方首页：<a href=\"http://code.google.com/p/guava-libraries\" target=\"_blank\" rel=\"noopener\">http://code.google.com/p/guava-libraries</a><br>英文文档：<a href=\"http://www.ostools.net/apidocs/apidoc?api=guava\" target=\"_blank\" rel=\"noopener\">http://www.ostools.net/apidocs/apidoc?api=guava</a><br>中文文档：<a href=\"https://www.kancloud.cn/wizardforcel/java-opensource-doc/112616\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/wizardforcel/java-opensource-doc/112616</a></p>","more":"<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><ul>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/intro/\" target=\"_blank\" rel=\"noopener\">Guava 学习笔记：Google Guava 类库简介</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Optional/\" target=\"_blank\" rel=\"noopener\">Guava 学习笔记：Optional 优雅的使用null</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Preconditions/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Preconditions优雅的检验参数</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Object/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：复写的Object常用方法</a></li>\n<li><a href=\"https://www.cnblogs.com/peida/p/Guava_Ordering.html\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Ordering犀利的比较器</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Throwables/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：简化异常处理的Throwables类</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Immutable_Collections/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Immutable(不可变)集合</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Multiset/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava新增集合类型-Multiset</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Multimap/\" target=\"_blank\" rel=\"noopener\">Guava 学习笔记：Guava 新增集合类型 —— Multimap</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Bimap/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava新增集合类型-Bimap</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Table/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava新集合-Table等</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Cache/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Guava cache</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/EventBus/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：EventBus</a></li>\n<li><a href=\"http://www.iocoder.cn/Guava/peida/Range/\" target=\"_blank\" rel=\"noopener\">Guava学习笔记：Range</a></li>\n</ul>"},{"title":"《自己动手写JAVA虚拟机》学习笔记一【命令行工具】","date":"2019-02-11T09:23:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。\n\n## 准备工作\n\n### 安装JDK\n从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161\n\n### 安装GO\n从[GO语言官网](https://golang.org/dl/)下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。\n测试Go环境是否安装成功\n``` bash\n～$ go version\ngo version go1.11.2 darwin/amd64\n```\n<!-- more -->\n设置环境变量\n```bash\n#添加Go的运行环境路径\nexport PATH=$PATH:/usr/local/go/bin\n#添加Go工程的工作空间,可自行修改\nexport GOPATH=/home/XXX/XXX/jvmgo/go\n```\n执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,\n```base\n～$ go env\n```\n## 实现JAVA命令\n\njava命令常用选项及其用途\n\n| 选项 | 用途 |\n| :------ | :------ | \n| -version | 输出版本信息，然后退出 | \n| -?/-help\t | 输出帮助信息，然后退出 |\n| -cp/-classpath | 指定用户类路径 |\n| -Dproperty=value | 设置Java系统属性 |\n| -Xms | 设置初始堆空间大小 |\n| -Xmx | 设置最大堆空间大小 |\n| -Xss | 设置线程栈空间大小 |\n\n### 编写命令行工具\n\n首先创建项目结构\n```base\n|-jvmgo\n    |-ch01\n```\n在ch01目录下创建cmd.go文件\n```go\npackage main\n\nimport \"flag\"\nimport \"fmt\"\nimport \"os\"\n\n\n//用法: java [-options] class [args...] (执行类)\n//或  java [-options] -jar jarfile [args...] (执行 jar 文件)\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tclass string\n\targs []string\n}\n\n\n//把命令的用法打印到控制台\nfunc printUsage()  {\n\tfmt.Printf(\"Usage：%s [-options] class [args...]\\n\",os.Args[0])\n}\n\n//命令解析\nfunc parseCmd() *Cmd {\n\t\n\t//声明cmd为指向空的Cmd对象的指针\n\tcmd := &Cmd{}\n\n\t//定义flag参数\n\t//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息\n\tflag.Usage = printUsage\n\tflag.BoolVar(&cmd.helpFlag,\"help\",false,\"print help message\")\n\tflag.BoolVar(&cmd.helpFlag,\"?\",false,\"print help message\")\n\tflag.BoolVar(&cmd.versionFlag,\"version\",false,\"print version and exit\")\n\tflag.StringVar(&cmd.cpOption,\"classpath\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\t//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。\n\tflag.Parse()\n\t//flag.Args()可以捕获未被解析的参数\n\targs := flag.Args()\n\tif len(args) > 0{\n\t\tcmd.class = args[0]\n\t\tcmd.args = args[1:]\n\t}\n\n\treturn cmd\n}\n\n```\n### 测试代码\n\n在ch01目录下创建main.go文件\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcmd := parseCmd()\n\tif cmd.versionFlag {\n\t\tfmt.Println(\"version 0.0.1\")\n\t}else if cmd.helpFlag || cmd.class == \"\"{\n\t\tprintUsage()\n\t}else {\n\t\tstartJVM(cmd)\n\t}\n}\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t//还未开始写，暂时打印\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cmd.cpOption,cmd.class,cmd.args)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch01 \n$ ch01 -version\nversion 0.0.1\n```\n","source":"_posts/JVM1.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记一【命令行工具】\ndate: 2019-02-11 17:23:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。\n\n## 准备工作\n\n### 安装JDK\n从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161\n\n### 安装GO\n从[GO语言官网](https://golang.org/dl/)下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。\n测试Go环境是否安装成功\n``` bash\n～$ go version\ngo version go1.11.2 darwin/amd64\n```\n<!-- more -->\n设置环境变量\n```bash\n#添加Go的运行环境路径\nexport PATH=$PATH:/usr/local/go/bin\n#添加Go工程的工作空间,可自行修改\nexport GOPATH=/home/XXX/XXX/jvmgo/go\n```\n执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,\n```base\n～$ go env\n```\n## 实现JAVA命令\n\njava命令常用选项及其用途\n\n| 选项 | 用途 |\n| :------ | :------ | \n| -version | 输出版本信息，然后退出 | \n| -?/-help\t | 输出帮助信息，然后退出 |\n| -cp/-classpath | 指定用户类路径 |\n| -Dproperty=value | 设置Java系统属性 |\n| -Xms | 设置初始堆空间大小 |\n| -Xmx | 设置最大堆空间大小 |\n| -Xss | 设置线程栈空间大小 |\n\n### 编写命令行工具\n\n首先创建项目结构\n```base\n|-jvmgo\n    |-ch01\n```\n在ch01目录下创建cmd.go文件\n```go\npackage main\n\nimport \"flag\"\nimport \"fmt\"\nimport \"os\"\n\n\n//用法: java [-options] class [args...] (执行类)\n//或  java [-options] -jar jarfile [args...] (执行 jar 文件)\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tclass string\n\targs []string\n}\n\n\n//把命令的用法打印到控制台\nfunc printUsage()  {\n\tfmt.Printf(\"Usage：%s [-options] class [args...]\\n\",os.Args[0])\n}\n\n//命令解析\nfunc parseCmd() *Cmd {\n\t\n\t//声明cmd为指向空的Cmd对象的指针\n\tcmd := &Cmd{}\n\n\t//定义flag参数\n\t//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息\n\tflag.Usage = printUsage\n\tflag.BoolVar(&cmd.helpFlag,\"help\",false,\"print help message\")\n\tflag.BoolVar(&cmd.helpFlag,\"?\",false,\"print help message\")\n\tflag.BoolVar(&cmd.versionFlag,\"version\",false,\"print version and exit\")\n\tflag.StringVar(&cmd.cpOption,\"classpath\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\t//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。\n\tflag.Parse()\n\t//flag.Args()可以捕获未被解析的参数\n\targs := flag.Args()\n\tif len(args) > 0{\n\t\tcmd.class = args[0]\n\t\tcmd.args = args[1:]\n\t}\n\n\treturn cmd\n}\n\n```\n### 测试代码\n\n在ch01目录下创建main.go文件\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcmd := parseCmd()\n\tif cmd.versionFlag {\n\t\tfmt.Println(\"version 0.0.1\")\n\t}else if cmd.helpFlag || cmd.class == \"\"{\n\t\tprintUsage()\n\t}else {\n\t\tstartJVM(cmd)\n\t}\n}\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t//还未开始写，暂时打印\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cmd.cpOption,cmd.class,cmd.args)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch01 \n$ ch01 -version\nversion 0.0.1\n```\n","slug":"JVM1","published":1,"updated":"2019-07-30T11:37:16.775Z","layout":"post","photos":[],"link":"","_id":"ck4859y30000ht0fyhsbmm1di","content":"<p>最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161</p>\n<h3 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h3><p>从<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">GO语言官网</a>下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。<br>测试Go环境是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go version</span><br><span class=\"line\">go version go1.11.2 darwin/amd64</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<p>设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加Go的运行环境路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"><span class=\"comment\">#添加Go工程的工作空间,可自行修改</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/XXX/XXX/jvmgo/go</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go env</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现JAVA命令\"><a href=\"#实现JAVA命令\" class=\"headerlink\" title=\"实现JAVA命令\"></a>实现JAVA命令</h2><p>java命令常用选项及其用途</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-version</td>\n<td align=\"left\">输出版本信息，然后退出</td>\n</tr>\n<tr>\n<td align=\"left\">-?/-help</td>\n<td align=\"left\">输出帮助信息，然后退出</td>\n</tr>\n<tr>\n<td align=\"left\">-cp/-classpath</td>\n<td align=\"left\">指定用户类路径</td>\n</tr>\n<tr>\n<td align=\"left\">-Dproperty=value</td>\n<td align=\"left\">设置Java系统属性</td>\n</tr>\n<tr>\n<td align=\"left\">-Xms</td>\n<td align=\"left\">设置初始堆空间大小</td>\n</tr>\n<tr>\n<td align=\"left\">-Xmx</td>\n<td align=\"left\">设置最大堆空间大小</td>\n</tr>\n<tr>\n<td align=\"left\">-Xss</td>\n<td align=\"left\">设置线程栈空间大小</td>\n</tr>\n</tbody></table>\n<h3 id=\"编写命令行工具\"><a href=\"#编写命令行工具\" class=\"headerlink\" title=\"编写命令行工具\"></a>编写命令行工具</h3><p>首先创建项目结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br></pre></td></tr></table></figure>\n\n<p>在ch01目录下创建cmd.go文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用法: java [-options] class [args...] (执行类)</span></span><br><span class=\"line\"><span class=\"comment\">//或  java [-options] -jar jarfile [args...] (执行 jar 文件)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把命令的用法打印到控制台</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printUsage</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Usage：%s [-options] class [args...]\\n\"</span>,os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//声明cmd为指向空的Cmd对象的指针</span></span><br><span class=\"line\">\tcmd := &amp;Cmd&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义flag参数</span></span><br><span class=\"line\">\t<span class=\"comment\">//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息</span></span><br><span class=\"line\">\tflag.Usage = printUsage</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"help\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"?\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.versionFlag,<span class=\"string\">\"version\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print version and exit\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"classpath\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t<span class=\"comment\">//flag.Args()可以捕获未被解析的参数</span></span><br><span class=\"line\">\targs := flag.Args()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\t\tcmd.class = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tcmd.args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>在ch01目录下创建main.go文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := parseCmd()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cmd.versionFlag &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"version 0.0.1\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cmd.helpFlag || cmd.class == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tprintUsage()</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tstartJVM(cmd)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还未开始写，暂时打印</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译main.go，并测试-version</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch01 </span><br><span class=\"line\">$ ch01 -version</span><br><span class=\"line\">version 0.0.1</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161</p>\n<h3 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h3><p>从<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">GO语言官网</a>下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。<br>测试Go环境是否安装成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go version</span><br><span class=\"line\">go version go1.11.2 darwin/amd64</span><br></pre></td></tr></table></figure>","more":"<p>设置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加Go的运行环境路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"><span class=\"comment\">#添加Go工程的工作空间,可自行修改</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/XXX/XXX/jvmgo/go</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go env</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现JAVA命令\"><a href=\"#实现JAVA命令\" class=\"headerlink\" title=\"实现JAVA命令\"></a>实现JAVA命令</h2><p>java命令常用选项及其用途</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选项</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-version</td>\n<td align=\"left\">输出版本信息，然后退出</td>\n</tr>\n<tr>\n<td align=\"left\">-?/-help</td>\n<td align=\"left\">输出帮助信息，然后退出</td>\n</tr>\n<tr>\n<td align=\"left\">-cp/-classpath</td>\n<td align=\"left\">指定用户类路径</td>\n</tr>\n<tr>\n<td align=\"left\">-Dproperty=value</td>\n<td align=\"left\">设置Java系统属性</td>\n</tr>\n<tr>\n<td align=\"left\">-Xms</td>\n<td align=\"left\">设置初始堆空间大小</td>\n</tr>\n<tr>\n<td align=\"left\">-Xmx</td>\n<td align=\"left\">设置最大堆空间大小</td>\n</tr>\n<tr>\n<td align=\"left\">-Xss</td>\n<td align=\"left\">设置线程栈空间大小</td>\n</tr>\n</tbody></table>\n<h3 id=\"编写命令行工具\"><a href=\"#编写命令行工具\" class=\"headerlink\" title=\"编写命令行工具\"></a>编写命令行工具</h3><p>首先创建项目结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br></pre></td></tr></table></figure>\n\n<p>在ch01目录下创建cmd.go文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用法: java [-options] class [args...] (执行类)</span></span><br><span class=\"line\"><span class=\"comment\">//或  java [-options] -jar jarfile [args...] (执行 jar 文件)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把命令的用法打印到控制台</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printUsage</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Usage：%s [-options] class [args...]\\n\"</span>,os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//声明cmd为指向空的Cmd对象的指针</span></span><br><span class=\"line\">\tcmd := &amp;Cmd&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义flag参数</span></span><br><span class=\"line\">\t<span class=\"comment\">//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息</span></span><br><span class=\"line\">\tflag.Usage = printUsage</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"help\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"?\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.versionFlag,<span class=\"string\">\"version\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print version and exit\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"classpath\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t<span class=\"comment\">//flag.Args()可以捕获未被解析的参数</span></span><br><span class=\"line\">\targs := flag.Args()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\t\tcmd.class = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tcmd.args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>在ch01目录下创建main.go文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := parseCmd()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cmd.versionFlag &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"version 0.0.1\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cmd.helpFlag || cmd.class == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tprintUsage()</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tstartJVM(cmd)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还未开始写，暂时打印</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译main.go，并测试-version</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch01 </span><br><span class=\"line\">$ ch01 -version</span><br><span class=\"line\">version 0.0.1</span><br></pre></td></tr></table></figure>"},{"title":"《自己动手写JAVA虚拟机》学习笔记三【解析class文件】","date":"2019-02-14T03:38:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：\n```java\nClassFile {\n     u4             magic;//魔数\n     u2             minor_version;//主版本号\n     u2             major_version;//次版本号\n     u2             constant_pool_count;//常量池长度\n     cp_info        constant_pool[constant_pool_count-1];//常量池信息\n     u2             access_flags;//该类的访问修饰符\n     u2             this_class;//类索引\n     u2             super_class;//父类索引\n     u2             interfaces_count;//接口个数\n     u2             interfaces[interfaces_count];//接口详细信息\n     u2             fields_count;//属性个数\n     field_info     fields[fields_count];//属性详细信息\n     u2             methods_count;//方法个数\n     method_info    methods[methods_count];//方法详情\n     u2             attributes_count;//类文件属性个数\n     attribute_info attributes[attributes_count];//类文件属性详细信息\n}\n```\n<!-- more -->\n### 准备工作\n\n把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n    |-ch03\n        |-classfile\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n为了学习编译后的class文件，新建一个classFileTest.java然后编译\n```java\npublic class ClassFileTest {\n    public static final boolean FLAG = true;\n    public static final byte BYTE = 123;\n    public static final char X = 'X';\n    public static final short SHORT = 12345;\n    public static final int INT = 123456789;\n    public static final long LONG = 12345678901L;\n    public static final float PI = 3.14f;\n    public static final double E = 2.71828;\n    public static void main(String[] args) throws RuntimeException {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n用作者提供的[classpy](https://github.com/zxh0/classpy)的图形化工具，可以查看反编译后的class文件。","source":"_posts/JVM3.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记三【解析class文件】\ndate: 2019-02-14 11:38:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\njava虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：\n```java\nClassFile {\n     u4             magic;//魔数\n     u2             minor_version;//主版本号\n     u2             major_version;//次版本号\n     u2             constant_pool_count;//常量池长度\n     cp_info        constant_pool[constant_pool_count-1];//常量池信息\n     u2             access_flags;//该类的访问修饰符\n     u2             this_class;//类索引\n     u2             super_class;//父类索引\n     u2             interfaces_count;//接口个数\n     u2             interfaces[interfaces_count];//接口详细信息\n     u2             fields_count;//属性个数\n     field_info     fields[fields_count];//属性详细信息\n     u2             methods_count;//方法个数\n     method_info    methods[methods_count];//方法详情\n     u2             attributes_count;//类文件属性个数\n     attribute_info attributes[attributes_count];//类文件属性详细信息\n}\n```\n<!-- more -->\n### 准备工作\n\n把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n    |-ch03\n        |-classfile\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n为了学习编译后的class文件，新建一个classFileTest.java然后编译\n```java\npublic class ClassFileTest {\n    public static final boolean FLAG = true;\n    public static final byte BYTE = 123;\n    public static final char X = 'X';\n    public static final short SHORT = 12345;\n    public static final int INT = 123456789;\n    public static final long LONG = 12345678901L;\n    public static final float PI = 3.14f;\n    public static final double E = 2.71828;\n    public static void main(String[] args) throws RuntimeException {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n用作者提供的[classpy](https://github.com/zxh0/classpy)的图形化工具，可以查看反编译后的class文件。","slug":"JVM3","published":1,"updated":"2019-07-30T11:37:16.762Z","layout":"post","photos":[],"link":"","_id":"ck4859y31000jt0fymae8x1as","content":"<p>java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">     u4             magic;<span class=\"comment\">//魔数</span></span><br><span class=\"line\">     u2             minor_version;<span class=\"comment\">//主版本号</span></span><br><span class=\"line\">     u2             major_version;<span class=\"comment\">//次版本号</span></span><br><span class=\"line\">     u2             constant_pool_count;<span class=\"comment\">//常量池长度</span></span><br><span class=\"line\">     cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];<span class=\"comment\">//常量池信息</span></span><br><span class=\"line\">     u2             access_flags;<span class=\"comment\">//该类的访问修饰符</span></span><br><span class=\"line\">     u2             this_class;<span class=\"comment\">//类索引</span></span><br><span class=\"line\">     u2             super_class;<span class=\"comment\">//父类索引</span></span><br><span class=\"line\">     u2             interfaces_count;<span class=\"comment\">//接口个数</span></span><br><span class=\"line\">     u2             interfaces[interfaces_count];<span class=\"comment\">//接口详细信息</span></span><br><span class=\"line\">     u2             fields_count;<span class=\"comment\">//属性个数</span></span><br><span class=\"line\">     field_info     fields[fields_count];<span class=\"comment\">//属性详细信息</span></span><br><span class=\"line\">     u2             methods_count;<span class=\"comment\">//方法个数</span></span><br><span class=\"line\">     method_info    methods[methods_count];<span class=\"comment\">//方法详情</span></span><br><span class=\"line\">     u2             attributes_count;<span class=\"comment\">//类文件属性个数</span></span><br><span class=\"line\">     attribute_info attributes[attributes_count];<span class=\"comment\">//类文件属性详细信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch03</span><br><span class=\"line\">        |-classfile</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure>\n\n<p>为了学习编译后的class文件，新建一个classFileTest.java然后编译</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> FLAG = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> X = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> SHORT = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INT = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> LONG = <span class=\"number\">12345678901L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> PI = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> E = <span class=\"number\">2.71828</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RuntimeException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用作者提供的<a href=\"https://github.com/zxh0/classpy\" target=\"_blank\" rel=\"noopener\">classpy</a>的图形化工具，可以查看反编译后的class文件。</p>\n","site":{"data":{}},"excerpt":"<p>java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">     u4             magic;<span class=\"comment\">//魔数</span></span><br><span class=\"line\">     u2             minor_version;<span class=\"comment\">//主版本号</span></span><br><span class=\"line\">     u2             major_version;<span class=\"comment\">//次版本号</span></span><br><span class=\"line\">     u2             constant_pool_count;<span class=\"comment\">//常量池长度</span></span><br><span class=\"line\">     cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];<span class=\"comment\">//常量池信息</span></span><br><span class=\"line\">     u2             access_flags;<span class=\"comment\">//该类的访问修饰符</span></span><br><span class=\"line\">     u2             this_class;<span class=\"comment\">//类索引</span></span><br><span class=\"line\">     u2             super_class;<span class=\"comment\">//父类索引</span></span><br><span class=\"line\">     u2             interfaces_count;<span class=\"comment\">//接口个数</span></span><br><span class=\"line\">     u2             interfaces[interfaces_count];<span class=\"comment\">//接口详细信息</span></span><br><span class=\"line\">     u2             fields_count;<span class=\"comment\">//属性个数</span></span><br><span class=\"line\">     field_info     fields[fields_count];<span class=\"comment\">//属性详细信息</span></span><br><span class=\"line\">     u2             methods_count;<span class=\"comment\">//方法个数</span></span><br><span class=\"line\">     method_info    methods[methods_count];<span class=\"comment\">//方法详情</span></span><br><span class=\"line\">     u2             attributes_count;<span class=\"comment\">//类文件属性个数</span></span><br><span class=\"line\">     attribute_info attributes[attributes_count];<span class=\"comment\">//类文件属性详细信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch03</span><br><span class=\"line\">        |-classfile</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure>\n\n<p>为了学习编译后的class文件，新建一个classFileTest.java然后编译</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> FLAG = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> X = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> SHORT = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INT = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> LONG = <span class=\"number\">12345678901L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> PI = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> E = <span class=\"number\">2.71828</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RuntimeException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用作者提供的<a href=\"https://github.com/zxh0/classpy\" target=\"_blank\" rel=\"noopener\">classpy</a>的图形化工具，可以查看反编译后的class文件。</p>"},{"title":"Kafka-生产者","date":"2019-06-10T03:38:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"## Kafka生产者\nkafka数据生产流程如图：\n![](Kafka-Producer/cert_override.png)\n<!-- more -->\n1. 创建一个 ProducerRecord 对象,包括目标主题和要发送的内容\n2. 将对象序列化成字节数组\n3. 数据被传给分区：\n    * 是否指定了partition -> 直接到指定分区\n    * 是否指定了key -> 分区器使用该 key 进行 hash 操作，然后对 topic 对应的分区数量进行取模操作并返回一个分区。\n    * 没有指定key -> 则通过先产生随机数，之后在该数上自增的方式产生一个数，并转为正数之后进行取余操作。\n4. 添加到批次，并发送\n5. 服务器收到消息后返回响应\n    * 成功 -> 返回 RecordMetaData对象\n    * 失败 -> 返回错误信息\n","source":"_posts/Kafka-Producer.md","raw":"---\ntitle: Kafka-生产者\ndate: 2019-06-10 11:38:04\ntags:\n    - Kafka\n    - JAVA\n    - 学习笔记\ncategories: Kafka\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n## Kafka生产者\nkafka数据生产流程如图：\n![](Kafka-Producer/cert_override.png)\n<!-- more -->\n1. 创建一个 ProducerRecord 对象,包括目标主题和要发送的内容\n2. 将对象序列化成字节数组\n3. 数据被传给分区：\n    * 是否指定了partition -> 直接到指定分区\n    * 是否指定了key -> 分区器使用该 key 进行 hash 操作，然后对 topic 对应的分区数量进行取模操作并返回一个分区。\n    * 没有指定key -> 则通过先产生随机数，之后在该数上自增的方式产生一个数，并转为正数之后进行取余操作。\n4. 添加到批次，并发送\n5. 服务器收到消息后返回响应\n    * 成功 -> 返回 RecordMetaData对象\n    * 失败 -> 返回错误信息\n","slug":"Kafka-Producer","published":1,"updated":"2019-08-06T02:56:42.549Z","layout":"post","photos":[],"link":"","_id":"ck4859y34000ot0fynih21mp8","content":"<h2 id=\"Kafka生产者\"><a href=\"#Kafka生产者\" class=\"headerlink\" title=\"Kafka生产者\"></a>Kafka生产者</h2><p>kafka数据生产流程如图：<br><img src=\"/2019/06/10/Kafka-Producer/cert_override.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<ol>\n<li>创建一个 ProducerRecord 对象,包括目标主题和要发送的内容</li>\n<li>将对象序列化成字节数组</li>\n<li>数据被传给分区：<ul>\n<li>是否指定了partition -&gt; 直接到指定分区</li>\n<li>是否指定了key -&gt; 分区器使用该 key 进行 hash 操作，然后对 topic 对应的分区数量进行取模操作并返回一个分区。</li>\n<li>没有指定key -&gt; 则通过先产生随机数，之后在该数上自增的方式产生一个数，并转为正数之后进行取余操作。</li>\n</ul>\n</li>\n<li>添加到批次，并发送</li>\n<li>服务器收到消息后返回响应<ul>\n<li>成功 -&gt; 返回 RecordMetaData对象</li>\n<li>失败 -&gt; 返回错误信息</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Kafka生产者\"><a href=\"#Kafka生产者\" class=\"headerlink\" title=\"Kafka生产者\"></a>Kafka生产者</h2><p>kafka数据生产流程如图：<br><img src=\"/2019/06/10/Kafka-Producer/cert_override.png\" alt=\"\"></p>","more":"<ol>\n<li>创建一个 ProducerRecord 对象,包括目标主题和要发送的内容</li>\n<li>将对象序列化成字节数组</li>\n<li>数据被传给分区：<ul>\n<li>是否指定了partition -&gt; 直接到指定分区</li>\n<li>是否指定了key -&gt; 分区器使用该 key 进行 hash 操作，然后对 topic 对应的分区数量进行取模操作并返回一个分区。</li>\n<li>没有指定key -&gt; 则通过先产生随机数，之后在该数上自增的方式产生一个数，并转为正数之后进行取余操作。</li>\n</ul>\n</li>\n<li>添加到批次，并发送</li>\n<li>服务器收到消息后返回响应<ul>\n<li>成功 -&gt; 返回 RecordMetaData对象</li>\n<li>失败 -&gt; 返回错误信息</li>\n</ul>\n</li>\n</ol>"},{"title":"《Mysql技术内幕》学习笔记-LSN","author":"Guyuqing","copyright":true,"comments":0,"date":"2019-08-17T09:42:00.000Z","_content":"LSN(log sequence number)——日志序列号：递增产生，表示事务写入重做日志的字节总量，占用8个字节。\n# LSN存在什么地方？有什么含义？\n\n```bash\n---\nLOG\n---\nLog sequence number 15151135824   -- redo log buffer 的 lsn，存放在redo log buffer 中称： redo_mem_lsn\nLog flushed up to   15151135824   -- redo log file 的 lsn，存放在redo log 中称： redo_log_lsn\nPages flushed up to 15151135824   -- 最后一个刷到磁盘上的页的最新的 lsn  \nLast checkpoint at  15151135815   -- 共享表空间上的日志记录点，最后一次检查点，及崩溃恢复时指定的起点 , checkpoint 所在的 lsn, 存放在redo log第一个文件的头部，称： cp_lsn\n```\n![log](Mysql-LSN/LOG.png)\n\n# LSN 有什么用？\n主要用于MySQL重启恢复  \n\n# 恢复的算法\n假设： redo_log_lsn = 15000 , cp_lsn=10000 , 这时候MySQL crash了，重启后的恢复流程如下：\n1. cp_lsn = 10000 之前的redo 日志，不需要恢复： 因为checkpoint之前的日志已经可以确保刷新完毕  \n2. 那么 10000 <=  redo_log_LSN <= 15000 的日志需要结合page_lsn判断，哪些需要重做，哪些不需要重做。  \n    * redo_log_LSN 日志里面记录的page 操作，如果redo_log_LSN <= page_lsn   , 这些日志不需要重做，因为page已经是最新的  \n    * redo_log_LSN 日志里面记录的page 操作, 如果redo_log_LSN >= page_lsn   , 这些日志是需要应用到page 里面去的，这一系列操作我们称为恢复. \n","source":"_posts/Mysql-LSN.md","raw":"title: 《Mysql技术内幕》学习笔记-LSN\ntags:\n  - 学习笔记\n  - MySql\ncategories:\n  - Mysql\nauthor: Guyuqing\ncopyright: true\ncomments: false\ndate: 2019-08-17 17:42:00\n---\nLSN(log sequence number)——日志序列号：递增产生，表示事务写入重做日志的字节总量，占用8个字节。\n# LSN存在什么地方？有什么含义？\n\n```bash\n---\nLOG\n---\nLog sequence number 15151135824   -- redo log buffer 的 lsn，存放在redo log buffer 中称： redo_mem_lsn\nLog flushed up to   15151135824   -- redo log file 的 lsn，存放在redo log 中称： redo_log_lsn\nPages flushed up to 15151135824   -- 最后一个刷到磁盘上的页的最新的 lsn  \nLast checkpoint at  15151135815   -- 共享表空间上的日志记录点，最后一次检查点，及崩溃恢复时指定的起点 , checkpoint 所在的 lsn, 存放在redo log第一个文件的头部，称： cp_lsn\n```\n![log](Mysql-LSN/LOG.png)\n\n# LSN 有什么用？\n主要用于MySQL重启恢复  \n\n# 恢复的算法\n假设： redo_log_lsn = 15000 , cp_lsn=10000 , 这时候MySQL crash了，重启后的恢复流程如下：\n1. cp_lsn = 10000 之前的redo 日志，不需要恢复： 因为checkpoint之前的日志已经可以确保刷新完毕  \n2. 那么 10000 <=  redo_log_LSN <= 15000 的日志需要结合page_lsn判断，哪些需要重做，哪些不需要重做。  \n    * redo_log_LSN 日志里面记录的page 操作，如果redo_log_LSN <= page_lsn   , 这些日志不需要重做，因为page已经是最新的  \n    * redo_log_LSN 日志里面记录的page 操作, 如果redo_log_LSN >= page_lsn   , 这些日志是需要应用到page 里面去的，这一系列操作我们称为恢复. \n","slug":"Mysql-LSN","published":1,"updated":"2019-08-19T11:25:10.381Z","layout":"post","photos":[],"link":"","_id":"ck4859y35000pt0fyylafrkhm","content":"<p>LSN(log sequence number)——日志序列号：递增产生，表示事务写入重做日志的字节总量，占用8个字节。</p>\n<h1 id=\"LSN存在什么地方？有什么含义？\"><a href=\"#LSN存在什么地方？有什么含义？\" class=\"headerlink\" title=\"LSN存在什么地方？有什么含义？\"></a>LSN存在什么地方？有什么含义？</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">LOG</span><br><span class=\"line\">---</span><br><span class=\"line\">Log sequence number 15151135824   -- redo <span class=\"built_in\">log</span> buffer 的 lsn，存放在redo <span class=\"built_in\">log</span> buffer 中称： redo_mem_lsn</span><br><span class=\"line\">Log flushed up to   15151135824   -- redo <span class=\"built_in\">log</span> file 的 lsn，存放在redo <span class=\"built_in\">log</span> 中称： redo_log_lsn</span><br><span class=\"line\">Pages flushed up to 15151135824   -- 最后一个刷到磁盘上的页的最新的 lsn  </span><br><span class=\"line\">Last checkpoint at  15151135815   -- 共享表空间上的日志记录点，最后一次检查点，及崩溃恢复时指定的起点 , checkpoint 所在的 lsn, 存放在redo <span class=\"built_in\">log</span>第一个文件的头部，称： cp_lsn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/08/17/Mysql-LSN/LOG.png\" alt=\"log\"></p>\n<h1 id=\"LSN-有什么用？\"><a href=\"#LSN-有什么用？\" class=\"headerlink\" title=\"LSN 有什么用？\"></a>LSN 有什么用？</h1><p>主要用于MySQL重启恢复  </p>\n<h1 id=\"恢复的算法\"><a href=\"#恢复的算法\" class=\"headerlink\" title=\"恢复的算法\"></a>恢复的算法</h1><p>假设： redo_log_lsn = 15000 , cp_lsn=10000 , 这时候MySQL crash了，重启后的恢复流程如下：</p>\n<ol>\n<li>cp_lsn = 10000 之前的redo 日志，不需要恢复： 因为checkpoint之前的日志已经可以确保刷新完毕  </li>\n<li>那么 10000 &lt;=  redo_log_LSN &lt;= 15000 的日志需要结合page_lsn判断，哪些需要重做，哪些不需要重做。  <ul>\n<li>redo_log_LSN 日志里面记录的page 操作，如果redo_log_LSN &lt;= page_lsn   , 这些日志不需要重做，因为page已经是最新的  </li>\n<li>redo_log_LSN 日志里面记录的page 操作, 如果redo_log_LSN &gt;= page_lsn   , 这些日志是需要应用到page 里面去的，这一系列操作我们称为恢复. </li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>LSN(log sequence number)——日志序列号：递增产生，表示事务写入重做日志的字节总量，占用8个字节。</p>\n<h1 id=\"LSN存在什么地方？有什么含义？\"><a href=\"#LSN存在什么地方？有什么含义？\" class=\"headerlink\" title=\"LSN存在什么地方？有什么含义？\"></a>LSN存在什么地方？有什么含义？</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">LOG</span><br><span class=\"line\">---</span><br><span class=\"line\">Log sequence number 15151135824   -- redo <span class=\"built_in\">log</span> buffer 的 lsn，存放在redo <span class=\"built_in\">log</span> buffer 中称： redo_mem_lsn</span><br><span class=\"line\">Log flushed up to   15151135824   -- redo <span class=\"built_in\">log</span> file 的 lsn，存放在redo <span class=\"built_in\">log</span> 中称： redo_log_lsn</span><br><span class=\"line\">Pages flushed up to 15151135824   -- 最后一个刷到磁盘上的页的最新的 lsn  </span><br><span class=\"line\">Last checkpoint at  15151135815   -- 共享表空间上的日志记录点，最后一次检查点，及崩溃恢复时指定的起点 , checkpoint 所在的 lsn, 存放在redo <span class=\"built_in\">log</span>第一个文件的头部，称： cp_lsn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/08/17/Mysql-LSN/LOG.png\" alt=\"log\"></p>\n<h1 id=\"LSN-有什么用？\"><a href=\"#LSN-有什么用？\" class=\"headerlink\" title=\"LSN 有什么用？\"></a>LSN 有什么用？</h1><p>主要用于MySQL重启恢复  </p>\n<h1 id=\"恢复的算法\"><a href=\"#恢复的算法\" class=\"headerlink\" title=\"恢复的算法\"></a>恢复的算法</h1><p>假设： redo_log_lsn = 15000 , cp_lsn=10000 , 这时候MySQL crash了，重启后的恢复流程如下：</p>\n<ol>\n<li>cp_lsn = 10000 之前的redo 日志，不需要恢复： 因为checkpoint之前的日志已经可以确保刷新完毕  </li>\n<li>那么 10000 &lt;=  redo_log_LSN &lt;= 15000 的日志需要结合page_lsn判断，哪些需要重做，哪些不需要重做。  <ul>\n<li>redo_log_LSN 日志里面记录的page 操作，如果redo_log_LSN &lt;= page_lsn   , 这些日志不需要重做，因为page已经是最新的  </li>\n<li>redo_log_LSN 日志里面记录的page 操作, 如果redo_log_LSN &gt;= page_lsn   , 这些日志是需要应用到page 里面去的，这一系列操作我们称为恢复. </li>\n</ul>\n</li>\n</ol>\n"},{"title":"Kafka-MacOs安装","date":"2019-06-05T13:38:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"### MacOS Docker 安装\n\n安装和镜像加速参考<a href=\"https://www.runoob.com/docker/macos-docker-install.html\">docker安装教程</a>\n\n### Docker 下载Zookeeper 和 kafka 镜像\n```bash\n~ » docker pull zookeeper:latest\n~ » docker pull wurstmeister/kafka:latest\n~ » docker pull sheepkiller/kafka-manager\n```\n<!-- more -->\n### 启动容器\n1、创建网络：由于要涉及到zookeeper和kafka之间的通信，所以我们运用docker内部容器通信机制先新建一个网络。\n```bash\n~ » docker network create app\n\nd481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874\n```\n运行 docker network ls查看新建的网络\n```bash\n~ » docker network ls                  \n\nNETWORK ID          NAME                DRIVER              SCOPE\nd481270a0523        app                 bridge              local\n0ab6b1467267        bridge              bridge              local\ncd08298f526b        host                host                local\n86a734066770        none                null                local\n```\n运行docker network inspect app查看网络详细信息\n```bash\n~ » docker network inspect app                        \n[\n    {\n        \"Name\": \"app\",\n        \"Id\": \"d481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874\",\n        \"Created\": \"2019-07-19T06:57:10.768655482Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n```\n可以看到其连接的containers为空，说明还没有容器连接进来\n2、创建Zookeeper容器\n```bash\n~ » docker run --net=app --name zookeeper -p 2181 -t zookeeper\n```\n\n遇到了如下问题\n```bash\ndocker: Error response from daemon: Conflict. The container name \"/zookeeper\" is already in use by container \"26ffbd391e8c6e5e90b8f593e354f80768f179741e1de35640efacc6303fdad0\". You have to remove (or rename) that container to be able to reuse that name.\nSee 'docker run --help'.\n```\ndocker ps -l 查看发现已经创建的zookeeper 可以使用docker rm 删除\n```bash\n~ » docker ps -l                                       \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n26ffbd391e8c        zookeeper           \"/docker-entrypoint.…\"   8 minutes ago       Created                                 zookeeper\n\n~ » docker rm 26ffbd391e8c\n```\n重新执行创建命令\n\n{% note info %}\nrun，创建新容器，并为容器配置一些参数。\n\n-t，在容器内部创建一个tty或者伪终端。\n\n-i，允许主机终端按照容器内部的标准与其交互。\n\n-d，后台运行容器并打印容器名称。\n\n--name，容器名称。\n\n-p，端口映射，参数格式为：主机物理端口:容器内部端口。\n\n最后跟上的就是我们已经下载的镜像\n{% endnote %}\n\n3、创建Kafka容器\n```bash\n~ » docker run --net=app --name kafka -p 9092 \\\n--env HOST_IP=127.0.0.1 \\\n--env KAFKA_ADVERTISED_HOST_NAME=localhost  \\\n--env KAFKA_ADVERTISED_PORT=9092 \\\n--env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \\\n--link zookeeper \\\nwurstmeister/kafka:latest\n```\n{% note info %}\n\n-e，配置容器环境变量。\n\n--link，链接到另一个容器，参数格式为：目标容器名称:在本容器内的别名。\n\n这里的环境变量设置，其实是就是对即将创建的Kafka配置文件server.properties进行初始化。\n\n{% endnote %}\n\n4、创建kafka-manager\n```bash\n~ » docker run --net=app \\\n--name kafka-manager \\\n-p 9000:9000 \\\n-e ZK_HOSTS=zookeeper:2181 \\\nsheepkiller/kafka-manager\n```\n访问ip:9000即可\n\n5、测试Kafka\n进入kafka容器\n```bash\n~ » docker exec -it kafka /bin/bash\n```\n发送消息\n```bash\nbash-4.4# kafka-console-producer.sh --broker-list localhost:9092 --topic test\n>hello\n>AAAA\n>BBBB\n>hey\n```\n读取消息(需要打开另一个终端)\n```bash                             \nbash-4.4# kafka-console-consumer.sh \\\n> --bootstrap-server localhost:9092 \\\n> --topic test --from-beginning\nhello\nAAAA\nBBBB\nhey\n```\n测试成功！(＾－＾)V\n\n> 参考https://cloud.tencent.com/developer/news/371290","source":"_posts/Kafka-Install.md","raw":"---\ntitle: Kafka-MacOs安装\ndate: 2019-06-05 21:38:04\ntags:\n    - Kafka\n    - JAVA\n    - 学习笔记\ncategories: Kafka\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n### MacOS Docker 安装\n\n安装和镜像加速参考<a href=\"https://www.runoob.com/docker/macos-docker-install.html\">docker安装教程</a>\n\n### Docker 下载Zookeeper 和 kafka 镜像\n```bash\n~ » docker pull zookeeper:latest\n~ » docker pull wurstmeister/kafka:latest\n~ » docker pull sheepkiller/kafka-manager\n```\n<!-- more -->\n### 启动容器\n1、创建网络：由于要涉及到zookeeper和kafka之间的通信，所以我们运用docker内部容器通信机制先新建一个网络。\n```bash\n~ » docker network create app\n\nd481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874\n```\n运行 docker network ls查看新建的网络\n```bash\n~ » docker network ls                  \n\nNETWORK ID          NAME                DRIVER              SCOPE\nd481270a0523        app                 bridge              local\n0ab6b1467267        bridge              bridge              local\ncd08298f526b        host                host                local\n86a734066770        none                null                local\n```\n运行docker network inspect app查看网络详细信息\n```bash\n~ » docker network inspect app                        \n[\n    {\n        \"Name\": \"app\",\n        \"Id\": \"d481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874\",\n        \"Created\": \"2019-07-19T06:57:10.768655482Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n```\n可以看到其连接的containers为空，说明还没有容器连接进来\n2、创建Zookeeper容器\n```bash\n~ » docker run --net=app --name zookeeper -p 2181 -t zookeeper\n```\n\n遇到了如下问题\n```bash\ndocker: Error response from daemon: Conflict. The container name \"/zookeeper\" is already in use by container \"26ffbd391e8c6e5e90b8f593e354f80768f179741e1de35640efacc6303fdad0\". You have to remove (or rename) that container to be able to reuse that name.\nSee 'docker run --help'.\n```\ndocker ps -l 查看发现已经创建的zookeeper 可以使用docker rm 删除\n```bash\n~ » docker ps -l                                       \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n26ffbd391e8c        zookeeper           \"/docker-entrypoint.…\"   8 minutes ago       Created                                 zookeeper\n\n~ » docker rm 26ffbd391e8c\n```\n重新执行创建命令\n\n{% note info %}\nrun，创建新容器，并为容器配置一些参数。\n\n-t，在容器内部创建一个tty或者伪终端。\n\n-i，允许主机终端按照容器内部的标准与其交互。\n\n-d，后台运行容器并打印容器名称。\n\n--name，容器名称。\n\n-p，端口映射，参数格式为：主机物理端口:容器内部端口。\n\n最后跟上的就是我们已经下载的镜像\n{% endnote %}\n\n3、创建Kafka容器\n```bash\n~ » docker run --net=app --name kafka -p 9092 \\\n--env HOST_IP=127.0.0.1 \\\n--env KAFKA_ADVERTISED_HOST_NAME=localhost  \\\n--env KAFKA_ADVERTISED_PORT=9092 \\\n--env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \\\n--link zookeeper \\\nwurstmeister/kafka:latest\n```\n{% note info %}\n\n-e，配置容器环境变量。\n\n--link，链接到另一个容器，参数格式为：目标容器名称:在本容器内的别名。\n\n这里的环境变量设置，其实是就是对即将创建的Kafka配置文件server.properties进行初始化。\n\n{% endnote %}\n\n4、创建kafka-manager\n```bash\n~ » docker run --net=app \\\n--name kafka-manager \\\n-p 9000:9000 \\\n-e ZK_HOSTS=zookeeper:2181 \\\nsheepkiller/kafka-manager\n```\n访问ip:9000即可\n\n5、测试Kafka\n进入kafka容器\n```bash\n~ » docker exec -it kafka /bin/bash\n```\n发送消息\n```bash\nbash-4.4# kafka-console-producer.sh --broker-list localhost:9092 --topic test\n>hello\n>AAAA\n>BBBB\n>hey\n```\n读取消息(需要打开另一个终端)\n```bash                             \nbash-4.4# kafka-console-consumer.sh \\\n> --bootstrap-server localhost:9092 \\\n> --topic test --from-beginning\nhello\nAAAA\nBBBB\nhey\n```\n测试成功！(＾－＾)V\n\n> 参考https://cloud.tencent.com/developer/news/371290","slug":"Kafka-Install","published":1,"updated":"2019-08-02T02:57:51.036Z","layout":"post","photos":[],"link":"","_id":"ck4859y3a000tt0fycscho9bt","content":"<h3 id=\"MacOS-Docker-安装\"><a href=\"#MacOS-Docker-安装\" class=\"headerlink\" title=\"MacOS Docker 安装\"></a>MacOS Docker 安装</h3><p>安装和镜像加速参考<a href=\"https://www.runoob.com/docker/macos-docker-install.html\" target=\"_blank\" rel=\"noopener\">docker安装教程</a></p>\n<h3 id=\"Docker-下载Zookeeper-和-kafka-镜像\"><a href=\"#Docker-下载Zookeeper-和-kafka-镜像\" class=\"headerlink\" title=\"Docker 下载Zookeeper 和 kafka 镜像\"></a>Docker 下载Zookeeper 和 kafka 镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker pull zookeeper:latest</span><br><span class=\"line\">~ » docker pull wurstmeister/kafka:latest</span><br><span class=\"line\">~ » docker pull sheepkiller/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>1、创建网络：由于要涉及到zookeeper和kafka之间的通信，所以我们运用docker内部容器通信机制先新建一个网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker network create app</span><br><span class=\"line\"></span><br><span class=\"line\">d481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874</span><br></pre></td></tr></table></figure>\n\n<p>运行 docker network ls查看新建的网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker network ls                  </span><br><span class=\"line\"></span><br><span class=\"line\">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">d481270a0523        app                 bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0ab6b1467267        bridge              bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">cd08298f526b        host                host                <span class=\"built_in\">local</span></span><br><span class=\"line\">86a734066770        none                null                <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>运行docker network inspect app查看网络详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker network inspect app                        </span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"app\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Id\"</span>: <span class=\"string\">\"d481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Created\"</span>: <span class=\"string\">\"2019-07-19T06:57:10.768655482Z\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Scope\"</span>: <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Driver\"</span>: <span class=\"string\">\"bridge\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"EnableIPv6\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"IPAM\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Driver\"</span>: <span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Options\"</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"string\">\"Config\"</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"Subnet\"</span>: <span class=\"string\">\"172.18.0.0/16\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Gateway\"</span>: <span class=\"string\">\"172.18.0.1\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"Internal\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Attachable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Ingress\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ConfigFrom\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Network\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"ConfigOnly\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Containers\"</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"Options\"</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"Labels\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到其连接的containers为空，说明还没有容器连接进来<br>2、创建Zookeeper容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker run --net=app --name zookeeper -p 2181 -t zookeeper</span><br></pre></td></tr></table></figure>\n\n<p>遇到了如下问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker: Error response from daemon: Conflict. The container name <span class=\"string\">\"/zookeeper\"</span> is already <span class=\"keyword\">in</span> use by container <span class=\"string\">\"26ffbd391e8c6e5e90b8f593e354f80768f179741e1de35640efacc6303fdad0\"</span>. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class=\"line\">See <span class=\"string\">'docker run --help'</span>.</span><br></pre></td></tr></table></figure>\n\n<p>docker ps -l 查看发现已经创建的zookeeper 可以使用docker rm 删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker ps -l                                       </span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">26ffbd391e8c        zookeeper           <span class=\"string\">\"/docker-entrypoint.…\"</span>   8 minutes ago       Created                                 zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">~ » docker rm 26ffbd391e8c</span><br></pre></td></tr></table></figure>\n\n<p>重新执行创建命令</p>\n<div class=\"note info\"><p>run，创建新容器，并为容器配置一些参数。</p>\n<p>-t，在容器内部创建一个tty或者伪终端。</p>\n<p>-i，允许主机终端按照容器内部的标准与其交互。</p>\n<p>-d，后台运行容器并打印容器名称。</p>\n<p>–name，容器名称。</p>\n<p>-p，端口映射，参数格式为：主机物理端口:容器内部端口。</p>\n<p>最后跟上的就是我们已经下载的镜像</p></div>\n\n<p>3、创建Kafka容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker run --net=app --name kafka -p 9092 \\</span><br><span class=\"line\">--env HOST_IP=127.0.0.1 \\</span><br><span class=\"line\">--env KAFKA_ADVERTISED_HOST_NAME=localhost  \\</span><br><span class=\"line\">--env KAFKA_ADVERTISED_PORT=9092 \\</span><br><span class=\"line\">--env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \\</span><br><span class=\"line\">--link zookeeper \\</span><br><span class=\"line\">wurstmeister/kafka:latest</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>-e，配置容器环境变量。</p>\n<p>–link，链接到另一个容器，参数格式为：目标容器名称:在本容器内的别名。</p>\n<p>这里的环境变量设置，其实是就是对即将创建的Kafka配置文件server.properties进行初始化。</p></div>\n\n<p>4、创建kafka-manager</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker run --net=app \\</span><br><span class=\"line\">--name kafka-manager \\</span><br><span class=\"line\">-p 9000:9000 \\</span><br><span class=\"line\">-e ZK_HOSTS=zookeeper:2181 \\</span><br><span class=\"line\">sheepkiller/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>访问ip:9000即可</p>\n<p>5、测试Kafka<br>进入kafka容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker <span class=\"built_in\">exec</span> -it kafka /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>发送消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash-4.4<span class=\"comment\"># kafka-console-producer.sh --broker-list localhost:9092 --topic test</span></span><br><span class=\"line\">&gt;hello</span><br><span class=\"line\">&gt;AAAA</span><br><span class=\"line\">&gt;BBBB</span><br><span class=\"line\">&gt;hey</span><br></pre></td></tr></table></figure>\n\n<p>读取消息(需要打开另一个终端)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash-4.4<span class=\"comment\"># kafka-console-consumer.sh \\</span></span><br><span class=\"line\">&gt; --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">&gt; --topic <span class=\"built_in\">test</span> --from-beginning</span><br><span class=\"line\">hello</span><br><span class=\"line\">AAAA</span><br><span class=\"line\">BBBB</span><br><span class=\"line\">hey</span><br></pre></td></tr></table></figure>\n\n<p>测试成功！(＾－＾)V</p>\n<blockquote>\n<p>参考<a href=\"https://cloud.tencent.com/developer/news/371290\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/news/371290</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"MacOS-Docker-安装\"><a href=\"#MacOS-Docker-安装\" class=\"headerlink\" title=\"MacOS Docker 安装\"></a>MacOS Docker 安装</h3><p>安装和镜像加速参考<a href=\"https://www.runoob.com/docker/macos-docker-install.html\" target=\"_blank\" rel=\"noopener\">docker安装教程</a></p>\n<h3 id=\"Docker-下载Zookeeper-和-kafka-镜像\"><a href=\"#Docker-下载Zookeeper-和-kafka-镜像\" class=\"headerlink\" title=\"Docker 下载Zookeeper 和 kafka 镜像\"></a>Docker 下载Zookeeper 和 kafka 镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker pull zookeeper:latest</span><br><span class=\"line\">~ » docker pull wurstmeister/kafka:latest</span><br><span class=\"line\">~ » docker pull sheepkiller/kafka-manager</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>1、创建网络：由于要涉及到zookeeper和kafka之间的通信，所以我们运用docker内部容器通信机制先新建一个网络。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker network create app</span><br><span class=\"line\"></span><br><span class=\"line\">d481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874</span><br></pre></td></tr></table></figure>\n\n<p>运行 docker network ls查看新建的网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker network ls                  </span><br><span class=\"line\"></span><br><span class=\"line\">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">d481270a0523        app                 bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">0ab6b1467267        bridge              bridge              <span class=\"built_in\">local</span></span><br><span class=\"line\">cd08298f526b        host                host                <span class=\"built_in\">local</span></span><br><span class=\"line\">86a734066770        none                null                <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n\n<p>运行docker network inspect app查看网络详细信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker network inspect app                        </span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"app\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Id\"</span>: <span class=\"string\">\"d481270a05236007178e6ed0ce4b775c9d2aebb6c13bc050bb852bc46ca0b874\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Created\"</span>: <span class=\"string\">\"2019-07-19T06:57:10.768655482Z\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Scope\"</span>: <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Driver\"</span>: <span class=\"string\">\"bridge\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"EnableIPv6\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"IPAM\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Driver\"</span>: <span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Options\"</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"string\">\"Config\"</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"Subnet\"</span>: <span class=\"string\">\"172.18.0.0/16\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Gateway\"</span>: <span class=\"string\">\"172.18.0.1\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"Internal\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Attachable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Ingress\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ConfigFrom\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Network\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"ConfigOnly\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"Containers\"</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"Options\"</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"Labels\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到其连接的containers为空，说明还没有容器连接进来<br>2、创建Zookeeper容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker run --net=app --name zookeeper -p 2181 -t zookeeper</span><br></pre></td></tr></table></figure>\n\n<p>遇到了如下问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker: Error response from daemon: Conflict. The container name <span class=\"string\">\"/zookeeper\"</span> is already <span class=\"keyword\">in</span> use by container <span class=\"string\">\"26ffbd391e8c6e5e90b8f593e354f80768f179741e1de35640efacc6303fdad0\"</span>. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class=\"line\">See <span class=\"string\">'docker run --help'</span>.</span><br></pre></td></tr></table></figure>\n\n<p>docker ps -l 查看发现已经创建的zookeeper 可以使用docker rm 删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker ps -l                                       </span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">26ffbd391e8c        zookeeper           <span class=\"string\">\"/docker-entrypoint.…\"</span>   8 minutes ago       Created                                 zookeeper</span><br><span class=\"line\"></span><br><span class=\"line\">~ » docker rm 26ffbd391e8c</span><br></pre></td></tr></table></figure>\n\n<p>重新执行创建命令</p>\n<div class=\"note info\"><p>run，创建新容器，并为容器配置一些参数。</p>\n<p>-t，在容器内部创建一个tty或者伪终端。</p>\n<p>-i，允许主机终端按照容器内部的标准与其交互。</p>\n<p>-d，后台运行容器并打印容器名称。</p>\n<p>–name，容器名称。</p>\n<p>-p，端口映射，参数格式为：主机物理端口:容器内部端口。</p>\n<p>最后跟上的就是我们已经下载的镜像</p></div>\n\n<p>3、创建Kafka容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker run --net=app --name kafka -p 9092 \\</span><br><span class=\"line\">--env HOST_IP=127.0.0.1 \\</span><br><span class=\"line\">--env KAFKA_ADVERTISED_HOST_NAME=localhost  \\</span><br><span class=\"line\">--env KAFKA_ADVERTISED_PORT=9092 \\</span><br><span class=\"line\">--env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \\</span><br><span class=\"line\">--link zookeeper \\</span><br><span class=\"line\">wurstmeister/kafka:latest</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>-e，配置容器环境变量。</p>\n<p>–link，链接到另一个容器，参数格式为：目标容器名称:在本容器内的别名。</p>\n<p>这里的环境变量设置，其实是就是对即将创建的Kafka配置文件server.properties进行初始化。</p></div>\n\n<p>4、创建kafka-manager</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker run --net=app \\</span><br><span class=\"line\">--name kafka-manager \\</span><br><span class=\"line\">-p 9000:9000 \\</span><br><span class=\"line\">-e ZK_HOSTS=zookeeper:2181 \\</span><br><span class=\"line\">sheepkiller/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>访问ip:9000即可</p>\n<p>5、测试Kafka<br>进入kafka容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ » docker <span class=\"built_in\">exec</span> -it kafka /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>发送消息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash-4.4<span class=\"comment\"># kafka-console-producer.sh --broker-list localhost:9092 --topic test</span></span><br><span class=\"line\">&gt;hello</span><br><span class=\"line\">&gt;AAAA</span><br><span class=\"line\">&gt;BBBB</span><br><span class=\"line\">&gt;hey</span><br></pre></td></tr></table></figure>\n\n<p>读取消息(需要打开另一个终端)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash-4.4<span class=\"comment\"># kafka-console-consumer.sh \\</span></span><br><span class=\"line\">&gt; --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">&gt; --topic <span class=\"built_in\">test</span> --from-beginning</span><br><span class=\"line\">hello</span><br><span class=\"line\">AAAA</span><br><span class=\"line\">BBBB</span><br><span class=\"line\">hey</span><br></pre></td></tr></table></figure>\n\n<p>测试成功！(＾－＾)V</p>\n<blockquote>\n<p>参考<a href=\"https://cloud.tencent.com/developer/news/371290\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/news/371290</a></p>\n</blockquote>"},{"title":"《Mysql技术内幕》学习笔记-MySql体系结构和存储引擎","date":"2019-07-29T18:40:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"#### 数据库\n> 数据库是文件的集合，是依照某种数据模型组织起来并存放于二级存储器中的数据集合。\n> 在MySQL数据库中，数据库文件可以是frm、MYD、MYI、ibd结尾的文件。\n\n<!-- more -->\n#### 数据库实例\n> 数据库实例是`程序`，是位于用户与操作系统之间的一层数据管理软件，用户对数据库数据的任何操作，\n> 包括数据库定义、数据查询、数据维护、数据库运行控制等都是在数据库实例下进行的，应用程序只有通过数据库实例才能和数据库打交道。\n\n#### MySql体系结构\n![mysql体系结构图](Mysql01/01.jpg)\n\n从图中可以发现，MySQL由：连接池组件、管理服务和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲（Cache）组件、插件式存储引擎和物理文件组成。\nMySQL数据库区别于其他数据库的最重要的一个特点就是其插件式的`表存储引擎`。\n\n#### MySql存储引擎\nMySql数据库常用存储引擎：InnoDB、MyISAM、NDB、Memory(HEAP)、Archive、BDB(BerkeleyDB)、Federated、Maria等。\n\n|特性|InnoDB|MyISAM|NDB|Memory|Archive|BDB|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|存储限制|64TB|No|Yes|Yes|No|No|\n|事务|Yes|||||Yes|\n|锁粒度|Row|Table|Row|Table|Row|Page|\n|MVCC|Yes||Yes||Yes||\n|B树索引|Yes|Yes|Yes|Yes||Yes|\n|哈希索引|Yes||Yes|Yes|||\n|全文索引|5.6支持英文|Yes|||||\n|集群索引|Yes||||||\n|数据缓存|Yes||Yes|Yes|||\n|索引缓存|Yes|Yes|Yes|Yes|||\n|数据压缩||Yes|||Yes||\n|加密传输|Yes|Yes|Yes|Yes|Yes|Yes|\n|批量插入|相对低|高|高|高|非常高|高|\n|内存消耗|高|低|高|中|低|低|\n|存储空间消耗|高|低|低|N/A|非常低|低|\n|外键支持|Yes||||||\n|复制支持|Yes|Yes|Yes|Yes|Yes|Yes|\n|查询缓存|Yes|Yes|Yes|Yes|Yes|Yes|\n|备份恢复|Yes|Yes|Yes|Yes|Yes|Yes|\n|数据字典更新|Yes|Yes|Yes|Yes|Yes|Yes|\n|备份/时间点恢复|Yes|Yes|Yes|Yes|Yes|Yes|\n|集群支持|||Yes|||||\n\n","source":"_posts/Mysql01.md","raw":"---\ntitle: 《Mysql技术内幕》学习笔记-MySql体系结构和存储引擎\ndate: 2019-07-30 02:40:04\ntags:\n    - MySql\n    - 学习笔记\ncategories: Mysql\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n#### 数据库\n> 数据库是文件的集合，是依照某种数据模型组织起来并存放于二级存储器中的数据集合。\n> 在MySQL数据库中，数据库文件可以是frm、MYD、MYI、ibd结尾的文件。\n\n<!-- more -->\n#### 数据库实例\n> 数据库实例是`程序`，是位于用户与操作系统之间的一层数据管理软件，用户对数据库数据的任何操作，\n> 包括数据库定义、数据查询、数据维护、数据库运行控制等都是在数据库实例下进行的，应用程序只有通过数据库实例才能和数据库打交道。\n\n#### MySql体系结构\n![mysql体系结构图](Mysql01/01.jpg)\n\n从图中可以发现，MySQL由：连接池组件、管理服务和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲（Cache）组件、插件式存储引擎和物理文件组成。\nMySQL数据库区别于其他数据库的最重要的一个特点就是其插件式的`表存储引擎`。\n\n#### MySql存储引擎\nMySql数据库常用存储引擎：InnoDB、MyISAM、NDB、Memory(HEAP)、Archive、BDB(BerkeleyDB)、Federated、Maria等。\n\n|特性|InnoDB|MyISAM|NDB|Memory|Archive|BDB|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|存储限制|64TB|No|Yes|Yes|No|No|\n|事务|Yes|||||Yes|\n|锁粒度|Row|Table|Row|Table|Row|Page|\n|MVCC|Yes||Yes||Yes||\n|B树索引|Yes|Yes|Yes|Yes||Yes|\n|哈希索引|Yes||Yes|Yes|||\n|全文索引|5.6支持英文|Yes|||||\n|集群索引|Yes||||||\n|数据缓存|Yes||Yes|Yes|||\n|索引缓存|Yes|Yes|Yes|Yes|||\n|数据压缩||Yes|||Yes||\n|加密传输|Yes|Yes|Yes|Yes|Yes|Yes|\n|批量插入|相对低|高|高|高|非常高|高|\n|内存消耗|高|低|高|中|低|低|\n|存储空间消耗|高|低|低|N/A|非常低|低|\n|外键支持|Yes||||||\n|复制支持|Yes|Yes|Yes|Yes|Yes|Yes|\n|查询缓存|Yes|Yes|Yes|Yes|Yes|Yes|\n|备份恢复|Yes|Yes|Yes|Yes|Yes|Yes|\n|数据字典更新|Yes|Yes|Yes|Yes|Yes|Yes|\n|备份/时间点恢复|Yes|Yes|Yes|Yes|Yes|Yes|\n|集群支持|||Yes|||||\n\n","slug":"Mysql01","published":1,"updated":"2019-08-19T11:24:33.580Z","layout":"post","photos":[],"link":"","_id":"ck4859y3e000ut0fyts0xzyjh","content":"<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><blockquote>\n<p>数据库是文件的集合，是依照某种数据模型组织起来并存放于二级存储器中的数据集合。<br>在MySQL数据库中，数据库文件可以是frm、MYD、MYI、ibd结尾的文件。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"数据库实例\"><a href=\"#数据库实例\" class=\"headerlink\" title=\"数据库实例\"></a>数据库实例</h4><blockquote>\n<p>数据库实例是<code>程序</code>，是位于用户与操作系统之间的一层数据管理软件，用户对数据库数据的任何操作，<br>包括数据库定义、数据查询、数据维护、数据库运行控制等都是在数据库实例下进行的，应用程序只有通过数据库实例才能和数据库打交道。</p>\n</blockquote>\n<h4 id=\"MySql体系结构\"><a href=\"#MySql体系结构\" class=\"headerlink\" title=\"MySql体系结构\"></a>MySql体系结构</h4><p><img src=\"/2019/07/30/Mysql01/01.jpg\" alt=\"mysql体系结构图\"></p>\n<p>从图中可以发现，MySQL由：连接池组件、管理服务和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲（Cache）组件、插件式存储引擎和物理文件组成。<br>MySQL数据库区别于其他数据库的最重要的一个特点就是其插件式的<code>表存储引擎</code>。</p>\n<h4 id=\"MySql存储引擎\"><a href=\"#MySql存储引擎\" class=\"headerlink\" title=\"MySql存储引擎\"></a>MySql存储引擎</h4><p>MySql数据库常用存储引擎：InnoDB、MyISAM、NDB、Memory(HEAP)、Archive、BDB(BerkeleyDB)、Federated、Maria等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">特性</th>\n<th align=\"center\">InnoDB</th>\n<th align=\"center\">MyISAM</th>\n<th align=\"center\">NDB</th>\n<th align=\"center\">Memory</th>\n<th align=\"center\">Archive</th>\n<th align=\"center\">BDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">存储限制</td>\n<td align=\"center\">64TB</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\">事务</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">锁粒度</td>\n<td align=\"center\">Row</td>\n<td align=\"center\">Table</td>\n<td align=\"center\">Row</td>\n<td align=\"center\">Table</td>\n<td align=\"center\">Row</td>\n<td align=\"center\">Page</td>\n</tr>\n<tr>\n<td align=\"center\">MVCC</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">B树索引</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">哈希索引</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">全文索引</td>\n<td align=\"center\">5.6支持英文</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">集群索引</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">数据缓存</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">索引缓存</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">数据压缩</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">加密传输</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">批量插入</td>\n<td align=\"center\">相对低</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">非常高</td>\n<td align=\"center\">高</td>\n</tr>\n<tr>\n<td align=\"center\">内存消耗</td>\n<td align=\"center\">高</td>\n<td align=\"center\">低</td>\n<td align=\"center\">高</td>\n<td align=\"center\">中</td>\n<td align=\"center\">低</td>\n<td align=\"center\">低</td>\n</tr>\n<tr>\n<td align=\"center\">存储空间消耗</td>\n<td align=\"center\">高</td>\n<td align=\"center\">低</td>\n<td align=\"center\">低</td>\n<td align=\"center\">N/A</td>\n<td align=\"center\">非常低</td>\n<td align=\"center\">低</td>\n</tr>\n<tr>\n<td align=\"center\">外键支持</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">复制支持</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">查询缓存</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">备份恢复</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">数据字典更新</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">备份/时间点恢复</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">集群支持</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><blockquote>\n<p>数据库是文件的集合，是依照某种数据模型组织起来并存放于二级存储器中的数据集合。<br>在MySQL数据库中，数据库文件可以是frm、MYD、MYI、ibd结尾的文件。</p>\n</blockquote>","more":"<h4 id=\"数据库实例\"><a href=\"#数据库实例\" class=\"headerlink\" title=\"数据库实例\"></a>数据库实例</h4><blockquote>\n<p>数据库实例是<code>程序</code>，是位于用户与操作系统之间的一层数据管理软件，用户对数据库数据的任何操作，<br>包括数据库定义、数据查询、数据维护、数据库运行控制等都是在数据库实例下进行的，应用程序只有通过数据库实例才能和数据库打交道。</p>\n</blockquote>\n<h4 id=\"MySql体系结构\"><a href=\"#MySql体系结构\" class=\"headerlink\" title=\"MySql体系结构\"></a>MySql体系结构</h4><p><img src=\"/2019/07/30/Mysql01/01.jpg\" alt=\"mysql体系结构图\"></p>\n<p>从图中可以发现，MySQL由：连接池组件、管理服务和工具组件、SQL接口组件、查询分析器组件、优化器组件、缓冲（Cache）组件、插件式存储引擎和物理文件组成。<br>MySQL数据库区别于其他数据库的最重要的一个特点就是其插件式的<code>表存储引擎</code>。</p>\n<h4 id=\"MySql存储引擎\"><a href=\"#MySql存储引擎\" class=\"headerlink\" title=\"MySql存储引擎\"></a>MySql存储引擎</h4><p>MySql数据库常用存储引擎：InnoDB、MyISAM、NDB、Memory(HEAP)、Archive、BDB(BerkeleyDB)、Federated、Maria等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">特性</th>\n<th align=\"center\">InnoDB</th>\n<th align=\"center\">MyISAM</th>\n<th align=\"center\">NDB</th>\n<th align=\"center\">Memory</th>\n<th align=\"center\">Archive</th>\n<th align=\"center\">BDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">存储限制</td>\n<td align=\"center\">64TB</td>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n</tr>\n<tr>\n<td align=\"center\">事务</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">锁粒度</td>\n<td align=\"center\">Row</td>\n<td align=\"center\">Table</td>\n<td align=\"center\">Row</td>\n<td align=\"center\">Table</td>\n<td align=\"center\">Row</td>\n<td align=\"center\">Page</td>\n</tr>\n<tr>\n<td align=\"center\">MVCC</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">B树索引</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">哈希索引</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">全文索引</td>\n<td align=\"center\">5.6支持英文</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">集群索引</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">数据缓存</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">索引缓存</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">数据压缩</td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">加密传输</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">批量插入</td>\n<td align=\"center\">相对低</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">非常高</td>\n<td align=\"center\">高</td>\n</tr>\n<tr>\n<td align=\"center\">内存消耗</td>\n<td align=\"center\">高</td>\n<td align=\"center\">低</td>\n<td align=\"center\">高</td>\n<td align=\"center\">中</td>\n<td align=\"center\">低</td>\n<td align=\"center\">低</td>\n</tr>\n<tr>\n<td align=\"center\">存储空间消耗</td>\n<td align=\"center\">高</td>\n<td align=\"center\">低</td>\n<td align=\"center\">低</td>\n<td align=\"center\">N/A</td>\n<td align=\"center\">非常低</td>\n<td align=\"center\">低</td>\n</tr>\n<tr>\n<td align=\"center\">外键支持</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">复制支持</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">查询缓存</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">备份恢复</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">数据字典更新</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">备份/时间点恢复</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n</tr>\n<tr>\n<td align=\"center\">集群支持</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">Yes</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>"},{"title":"《Mysql技术内幕》学习笔记-Redo与Undo","author":"Guyuqing","copyright":true,"comments":0,"date":"2019-08-16T11:09:00.000Z","_content":"# redo log\n## redo 概念\n重做日志(redo log)：在InnoDB存储引擎中，大部分情况下 Redo 是`物理日志`，记录的是数据页的物理变化。\n## redo 结构\nRedo log可以简单分为以下两个部分：\n<!-- more -->\n1. 重做日志缓冲 (redo log buffer),是易失的，在内存中\n    * 日志会先写到redo log buffer ，根据制定条件刷新到redo log file\n    * 由log block组成  \n    * 每个log block 512字节，所以不需要 [double write](http://123.56.47.170:8080/2019/07/31/Mysql02/#%E4%B8%A4%E6%AC%A1%E5%86%99)，因为每次刷新都是原子的  \n2. 重做日志文件 (redo log file)，是持久的，保存在磁盘中\t\n\t* redo log的物理文件，一般有2个,大小可配置  \n\n## redo 写入时机\n* 在数据页修改完成之后，在脏页刷出磁盘之前，写入redo日志。注意的是**先修改数据，后写日志**\n* redo日志比数据页先写回磁盘\n* 聚集索引、非聚集索引、undo页面的修改，均需要记录Redo日志。\n\n## redo 的整体流程\n![redo](Mysql-RedoAndUndo/redo-buffer.png)\n\n## redo如何保证事务的持久性？\nInnoDB 通过 **Force Log at Commit** 机制实现事务的持久性，即当事务提交时，先将 redo log buffer 写入到 redo log file 进行持久化，待事务的commit操作完成时才算完成。\n这种做法也被称为 **Write-Ahead Log**(预先日志持久化)，在持久化一个数据页之前，先将内存中相应的日志页持久化。\n\n为了保证每次日志都写入redo log file，在每次将redo buffer写入redo log file之后，默认情况下，InnoDB存储引擎都需要调用一次 fsync操作,因为重做日志打开并没有 O_DIRECT选项，所以重做日志先写入到文件系统缓存。为了确保重做日志写入到磁盘，必须进行一次 fsync操作。fsync操作 将数据提交到硬盘中，强制硬盘同步，将一直阻塞到写入硬盘完成后返回，大量进行fsync操作就有性能瓶颈，因此磁盘的性能也影响了事务提交的性能，也就是数据库的性能。\n(O_DIRECT选项是在Linux系统中的选项，使用该选项后，对文件进行直接IO操作，不经过文件系统缓存，直接写入磁盘)\n\n# undo log\n## undo 概念\nundo log主要记录的是数据的逻辑变化，为了在发生错误时回滚之前的操作，需要将之前的操作都记录下来，然后在发生错误时才可以回滚。\n\n## undo 结构\n在InnoDB存储引擎中，undo存储在回滚段(Rollback Segment)中,每个回滚段记录了1024个undo log segment，而在每个undo log segment段中进行undo 页的申请，在5.6以前，Rollback Segment是在共享表空间里的，5.6.3之后，可通过 innodb_undo_tablespace设置undo存储的位置。\n\n## undo 写入时机\n* DML操作修改聚集索引前，记录undo日志\n* 非聚集索引记录的修改，**不**记录undo日志\n\n## undo 的整体流程\n![undo](Mysql-RedoAndUndo/undo-Segment.png)\nundo log 采用顺序IO写入磁盘共享表空间。\n\n## undo 类型\n* insert undo log：在insert 操作中产生的undo log，因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。\n* update undo log：在delete 和update操作产生的undo log，该undo log可能需要提供MVCC机制，因此不能再事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。\n\n<div style='display: none'>\n## DML的相关物理实现算法\n* 主键索引\n```text\n1. 对于delete   --需要undo绑定该记录才能进行回滚，所以只能打上标记，delete mark  \n2. 对于update  --原记录可以物理删除，因为可以在新插入进来的地方进行undo绑定  \n\t* 如果不能原地更新： delete(注意：这里是直接delete,而不是delete mark)  + insert \n\t* 如果可以原地更新，那么直接update就好    \n ```\n* 非聚集索\n```text\n1. 对于delete  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚\n\tdelete mark    \n2. 对于update  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚\n\tdelete mark + insert\n```\n</div>\n\n# redo & undo\n## undo log 是否是 redo log 的逆过程？\nundo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。\nredo log是物理日志，记录的是数据页的物理变化，显然undo log不是redo log的逆过程。\n\n## 事务实现过程\n事务B要将字段A的值由原来的1修改为3，要将B的值由原来的2修改为4，redo日志记录的是：\n```text\n假设有A、B两个数据，值分别为1,2.\n1. 事务B开始\n2. 记录A=1到undo log\n3. 修改A=3\n4. 记录A=3到 redo log\n5. 记录B=2到 undo log\n6. 修改B=4\n7. 记录B=4到redo log\n8. 将redo log写入磁盘\n9. 事务提交，将数据写入磁盘\n10.事物B结束\n\n```\n在insert/update/delete操作中，redo和undo分别记录的内容都不一样，量也不一样。在InnoDB内存中，一般的顺序如下：\n1. 写undo的redo\n2. 写undo\n3. 修改数据页\n4. 写Redo\n\n如果上面事务B回滚（当做新的事务C），则redo记录的是：\n```text\n1. 事务C开始\n2. 记录A=1到undo log\n3. 修改A=3\n4. 记录A=3到 redo log\n5. 记录B=2到 undo log\n6. 修改B=4\n7. 记录B=4到redo log\n   <!--回滚-->\n8. 修改B=2\n9. 记录B=2到redo log\n10.修改A=1\n11.记录A=1到redo log\n12.将redo log写入磁盘\n13.事务提交，将数据写入磁盘\n14.事物C结束\n```\n\n恢复策略：恢复时，先根据redo重做所有事务（包括未提交和回滚了的），再根据undo回滚未提交的事务。\n当系统发生宕机时，如果一个事务的 redo log 已经全部刷入磁盘，那么该事务一定可以恢复；如果一个事务的 redo log 没有全部刷入磁盘，那么就通过 undo log 将这个事务恢复到执行之前。\n\n如上，如果事务B异常未提交事务就宕机，恢复时，先根据redo日志将数据恢复为A=3&B=4，然后根据undo记录的A=1&B=2将数据恢复如初。\n\n<div style='display: none'>\n# 参考：\n* https://keithlan.github.io/2017/06/12/innodb_locks_redo/\n* https://juejin.im/post/5c3c5c0451882525487c498d\n* https://t.hao0.me/mysql/2016/11/05/mysql-innodb-05-tablespaces.html\n</div>","source":"_posts/Mysql-RedoAndUndo.md","raw":"title: 《Mysql技术内幕》学习笔记-Redo与Undo\ntags:\n  - 学习笔记\n  - MySql\ncategories:\n  - Mysql\nauthor: Guyuqing\ncopyright: true\ncomments: false\ndate: 2019-08-16 19:09:00\n---\n# redo log\n## redo 概念\n重做日志(redo log)：在InnoDB存储引擎中，大部分情况下 Redo 是`物理日志`，记录的是数据页的物理变化。\n## redo 结构\nRedo log可以简单分为以下两个部分：\n<!-- more -->\n1. 重做日志缓冲 (redo log buffer),是易失的，在内存中\n    * 日志会先写到redo log buffer ，根据制定条件刷新到redo log file\n    * 由log block组成  \n    * 每个log block 512字节，所以不需要 [double write](http://123.56.47.170:8080/2019/07/31/Mysql02/#%E4%B8%A4%E6%AC%A1%E5%86%99)，因为每次刷新都是原子的  \n2. 重做日志文件 (redo log file)，是持久的，保存在磁盘中\t\n\t* redo log的物理文件，一般有2个,大小可配置  \n\n## redo 写入时机\n* 在数据页修改完成之后，在脏页刷出磁盘之前，写入redo日志。注意的是**先修改数据，后写日志**\n* redo日志比数据页先写回磁盘\n* 聚集索引、非聚集索引、undo页面的修改，均需要记录Redo日志。\n\n## redo 的整体流程\n![redo](Mysql-RedoAndUndo/redo-buffer.png)\n\n## redo如何保证事务的持久性？\nInnoDB 通过 **Force Log at Commit** 机制实现事务的持久性，即当事务提交时，先将 redo log buffer 写入到 redo log file 进行持久化，待事务的commit操作完成时才算完成。\n这种做法也被称为 **Write-Ahead Log**(预先日志持久化)，在持久化一个数据页之前，先将内存中相应的日志页持久化。\n\n为了保证每次日志都写入redo log file，在每次将redo buffer写入redo log file之后，默认情况下，InnoDB存储引擎都需要调用一次 fsync操作,因为重做日志打开并没有 O_DIRECT选项，所以重做日志先写入到文件系统缓存。为了确保重做日志写入到磁盘，必须进行一次 fsync操作。fsync操作 将数据提交到硬盘中，强制硬盘同步，将一直阻塞到写入硬盘完成后返回，大量进行fsync操作就有性能瓶颈，因此磁盘的性能也影响了事务提交的性能，也就是数据库的性能。\n(O_DIRECT选项是在Linux系统中的选项，使用该选项后，对文件进行直接IO操作，不经过文件系统缓存，直接写入磁盘)\n\n# undo log\n## undo 概念\nundo log主要记录的是数据的逻辑变化，为了在发生错误时回滚之前的操作，需要将之前的操作都记录下来，然后在发生错误时才可以回滚。\n\n## undo 结构\n在InnoDB存储引擎中，undo存储在回滚段(Rollback Segment)中,每个回滚段记录了1024个undo log segment，而在每个undo log segment段中进行undo 页的申请，在5.6以前，Rollback Segment是在共享表空间里的，5.6.3之后，可通过 innodb_undo_tablespace设置undo存储的位置。\n\n## undo 写入时机\n* DML操作修改聚集索引前，记录undo日志\n* 非聚集索引记录的修改，**不**记录undo日志\n\n## undo 的整体流程\n![undo](Mysql-RedoAndUndo/undo-Segment.png)\nundo log 采用顺序IO写入磁盘共享表空间。\n\n## undo 类型\n* insert undo log：在insert 操作中产生的undo log，因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。\n* update undo log：在delete 和update操作产生的undo log，该undo log可能需要提供MVCC机制，因此不能再事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。\n\n<div style='display: none'>\n## DML的相关物理实现算法\n* 主键索引\n```text\n1. 对于delete   --需要undo绑定该记录才能进行回滚，所以只能打上标记，delete mark  \n2. 对于update  --原记录可以物理删除，因为可以在新插入进来的地方进行undo绑定  \n\t* 如果不能原地更新： delete(注意：这里是直接delete,而不是delete mark)  + insert \n\t* 如果可以原地更新，那么直接update就好    \n ```\n* 非聚集索\n```text\n1. 对于delete  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚\n\tdelete mark    \n2. 对于update  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚\n\tdelete mark + insert\n```\n</div>\n\n# redo & undo\n## undo log 是否是 redo log 的逆过程？\nundo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。\nredo log是物理日志，记录的是数据页的物理变化，显然undo log不是redo log的逆过程。\n\n## 事务实现过程\n事务B要将字段A的值由原来的1修改为3，要将B的值由原来的2修改为4，redo日志记录的是：\n```text\n假设有A、B两个数据，值分别为1,2.\n1. 事务B开始\n2. 记录A=1到undo log\n3. 修改A=3\n4. 记录A=3到 redo log\n5. 记录B=2到 undo log\n6. 修改B=4\n7. 记录B=4到redo log\n8. 将redo log写入磁盘\n9. 事务提交，将数据写入磁盘\n10.事物B结束\n\n```\n在insert/update/delete操作中，redo和undo分别记录的内容都不一样，量也不一样。在InnoDB内存中，一般的顺序如下：\n1. 写undo的redo\n2. 写undo\n3. 修改数据页\n4. 写Redo\n\n如果上面事务B回滚（当做新的事务C），则redo记录的是：\n```text\n1. 事务C开始\n2. 记录A=1到undo log\n3. 修改A=3\n4. 记录A=3到 redo log\n5. 记录B=2到 undo log\n6. 修改B=4\n7. 记录B=4到redo log\n   <!--回滚-->\n8. 修改B=2\n9. 记录B=2到redo log\n10.修改A=1\n11.记录A=1到redo log\n12.将redo log写入磁盘\n13.事务提交，将数据写入磁盘\n14.事物C结束\n```\n\n恢复策略：恢复时，先根据redo重做所有事务（包括未提交和回滚了的），再根据undo回滚未提交的事务。\n当系统发生宕机时，如果一个事务的 redo log 已经全部刷入磁盘，那么该事务一定可以恢复；如果一个事务的 redo log 没有全部刷入磁盘，那么就通过 undo log 将这个事务恢复到执行之前。\n\n如上，如果事务B异常未提交事务就宕机，恢复时，先根据redo日志将数据恢复为A=3&B=4，然后根据undo记录的A=1&B=2将数据恢复如初。\n\n<div style='display: none'>\n# 参考：\n* https://keithlan.github.io/2017/06/12/innodb_locks_redo/\n* https://juejin.im/post/5c3c5c0451882525487c498d\n* https://t.hao0.me/mysql/2016/11/05/mysql-innodb-05-tablespaces.html\n</div>","slug":"Mysql-RedoAndUndo","published":1,"updated":"2019-08-21T02:43:26.002Z","layout":"post","photos":[],"link":"","_id":"ck4859y3j000xt0fy4lky1513","content":"<h1 id=\"redo-log\"><a href=\"#redo-log\" class=\"headerlink\" title=\"redo log\"></a>redo log</h1><h2 id=\"redo-概念\"><a href=\"#redo-概念\" class=\"headerlink\" title=\"redo 概念\"></a>redo 概念</h2><p>重做日志(redo log)：在InnoDB存储引擎中，大部分情况下 Redo 是<code>物理日志</code>，记录的是数据页的物理变化。</p>\n<h2 id=\"redo-结构\"><a href=\"#redo-结构\" class=\"headerlink\" title=\"redo 结构\"></a>redo 结构</h2><p>Redo log可以简单分为以下两个部分：</p>\n<a id=\"more\"></a>\n<ol>\n<li>重做日志缓冲 (redo log buffer),是易失的，在内存中<ul>\n<li>日志会先写到redo log buffer ，根据制定条件刷新到redo log file</li>\n<li>由log block组成  </li>\n<li>每个log block 512字节，所以不需要 <a href=\"http://123.56.47.170:8080/2019/07/31/Mysql02/#%E4%B8%A4%E6%AC%A1%E5%86%99\" target=\"_blank\" rel=\"noopener\">double write</a>，因为每次刷新都是原子的  </li>\n</ul>\n</li>\n<li>重做日志文件 (redo log file)，是持久的，保存在磁盘中    <ul>\n<li>redo log的物理文件，一般有2个,大小可配置  </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"redo-写入时机\"><a href=\"#redo-写入时机\" class=\"headerlink\" title=\"redo 写入时机\"></a>redo 写入时机</h2><ul>\n<li>在数据页修改完成之后，在脏页刷出磁盘之前，写入redo日志。注意的是<strong>先修改数据，后写日志</strong></li>\n<li>redo日志比数据页先写回磁盘</li>\n<li>聚集索引、非聚集索引、undo页面的修改，均需要记录Redo日志。</li>\n</ul>\n<h2 id=\"redo-的整体流程\"><a href=\"#redo-的整体流程\" class=\"headerlink\" title=\"redo 的整体流程\"></a>redo 的整体流程</h2><p><img src=\"/2019/08/16/Mysql-RedoAndUndo/redo-buffer.png\" alt=\"redo\"></p>\n<h2 id=\"redo如何保证事务的持久性？\"><a href=\"#redo如何保证事务的持久性？\" class=\"headerlink\" title=\"redo如何保证事务的持久性？\"></a>redo如何保证事务的持久性？</h2><p>InnoDB 通过 <strong>Force Log at Commit</strong> 机制实现事务的持久性，即当事务提交时，先将 redo log buffer 写入到 redo log file 进行持久化，待事务的commit操作完成时才算完成。<br>这种做法也被称为 <strong>Write-Ahead Log</strong>(预先日志持久化)，在持久化一个数据页之前，先将内存中相应的日志页持久化。</p>\n<p>为了保证每次日志都写入redo log file，在每次将redo buffer写入redo log file之后，默认情况下，InnoDB存储引擎都需要调用一次 fsync操作,因为重做日志打开并没有 O_DIRECT选项，所以重做日志先写入到文件系统缓存。为了确保重做日志写入到磁盘，必须进行一次 fsync操作。fsync操作 将数据提交到硬盘中，强制硬盘同步，将一直阻塞到写入硬盘完成后返回，大量进行fsync操作就有性能瓶颈，因此磁盘的性能也影响了事务提交的性能，也就是数据库的性能。<br>(O_DIRECT选项是在Linux系统中的选项，使用该选项后，对文件进行直接IO操作，不经过文件系统缓存，直接写入磁盘)</p>\n<h1 id=\"undo-log\"><a href=\"#undo-log\" class=\"headerlink\" title=\"undo log\"></a>undo log</h1><h2 id=\"undo-概念\"><a href=\"#undo-概念\" class=\"headerlink\" title=\"undo 概念\"></a>undo 概念</h2><p>undo log主要记录的是数据的逻辑变化，为了在发生错误时回滚之前的操作，需要将之前的操作都记录下来，然后在发生错误时才可以回滚。</p>\n<h2 id=\"undo-结构\"><a href=\"#undo-结构\" class=\"headerlink\" title=\"undo 结构\"></a>undo 结构</h2><p>在InnoDB存储引擎中，undo存储在回滚段(Rollback Segment)中,每个回滚段记录了1024个undo log segment，而在每个undo log segment段中进行undo 页的申请，在5.6以前，Rollback Segment是在共享表空间里的，5.6.3之后，可通过 innodb_undo_tablespace设置undo存储的位置。</p>\n<h2 id=\"undo-写入时机\"><a href=\"#undo-写入时机\" class=\"headerlink\" title=\"undo 写入时机\"></a>undo 写入时机</h2><ul>\n<li>DML操作修改聚集索引前，记录undo日志</li>\n<li>非聚集索引记录的修改，<strong>不</strong>记录undo日志</li>\n</ul>\n<h2 id=\"undo-的整体流程\"><a href=\"#undo-的整体流程\" class=\"headerlink\" title=\"undo 的整体流程\"></a>undo 的整体流程</h2><p><img src=\"/2019/08/16/Mysql-RedoAndUndo/undo-Segment.png\" alt=\"undo\"><br>undo log 采用顺序IO写入磁盘共享表空间。</p>\n<h2 id=\"undo-类型\"><a href=\"#undo-类型\" class=\"headerlink\" title=\"undo 类型\"></a>undo 类型</h2><ul>\n<li>insert undo log：在insert 操作中产生的undo log，因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。</li>\n<li>update undo log：在delete 和update操作产生的undo log，该undo log可能需要提供MVCC机制，因此不能再事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。</li>\n</ul>\n<div style=\"display: none\">\n## DML的相关物理实现算法\n* 主键索引\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 对于delete   --需要undo绑定该记录才能进行回滚，所以只能打上标记，delete mark  </span><br><span class=\"line\">2. 对于update  --原记录可以物理删除，因为可以在新插入进来的地方进行undo绑定  </span><br><span class=\"line\">\t* 如果不能原地更新： delete(注意：这里是直接delete,而不是delete mark)  + insert </span><br><span class=\"line\">\t* 如果可以原地更新，那么直接update就好</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非聚集索<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 对于delete  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚</span><br><span class=\"line\">\tdelete mark    </span><br><span class=\"line\">2. 对于update  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚</span><br><span class=\"line\">\tdelete mark + insert</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</div>\n\n<h1 id=\"redo-amp-undo\"><a href=\"#redo-amp-undo\" class=\"headerlink\" title=\"redo &amp; undo\"></a>redo &amp; undo</h1><h2 id=\"undo-log-是否是-redo-log-的逆过程？\"><a href=\"#undo-log-是否是-redo-log-的逆过程？\" class=\"headerlink\" title=\"undo log 是否是 redo log 的逆过程？\"></a>undo log 是否是 redo log 的逆过程？</h2><p>undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。<br>redo log是物理日志，记录的是数据页的物理变化，显然undo log不是redo log的逆过程。</p>\n<h2 id=\"事务实现过程\"><a href=\"#事务实现过程\" class=\"headerlink\" title=\"事务实现过程\"></a>事务实现过程</h2><p>事务B要将字段A的值由原来的1修改为3，要将B的值由原来的2修改为4，redo日志记录的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设有A、B两个数据，值分别为1,2.</span><br><span class=\"line\">1. 事务B开始</span><br><span class=\"line\">2. 记录A=1到undo log</span><br><span class=\"line\">3. 修改A=3</span><br><span class=\"line\">4. 记录A=3到 redo log</span><br><span class=\"line\">5. 记录B=2到 undo log</span><br><span class=\"line\">6. 修改B=4</span><br><span class=\"line\">7. 记录B=4到redo log</span><br><span class=\"line\">8. 将redo log写入磁盘</span><br><span class=\"line\">9. 事务提交，将数据写入磁盘</span><br><span class=\"line\">10.事物B结束</span><br></pre></td></tr></table></figure>\n\n<p>在insert/update/delete操作中，redo和undo分别记录的内容都不一样，量也不一样。在InnoDB内存中，一般的顺序如下：</p>\n<ol>\n<li>写undo的redo</li>\n<li>写undo</li>\n<li>修改数据页</li>\n<li>写Redo</li>\n</ol>\n<p>如果上面事务B回滚（当做新的事务C），则redo记录的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 事务C开始</span><br><span class=\"line\">2. 记录A=1到undo log</span><br><span class=\"line\">3. 修改A=3</span><br><span class=\"line\">4. 记录A=3到 redo log</span><br><span class=\"line\">5. 记录B=2到 undo log</span><br><span class=\"line\">6. 修改B=4</span><br><span class=\"line\">7. 记录B=4到redo log</span><br><span class=\"line\">   &lt;!--回滚--&gt;</span><br><span class=\"line\">8. 修改B=2</span><br><span class=\"line\">9. 记录B=2到redo log</span><br><span class=\"line\">10.修改A=1</span><br><span class=\"line\">11.记录A=1到redo log</span><br><span class=\"line\">12.将redo log写入磁盘</span><br><span class=\"line\">13.事务提交，将数据写入磁盘</span><br><span class=\"line\">14.事物C结束</span><br></pre></td></tr></table></figure>\n\n<p>恢复策略：恢复时，先根据redo重做所有事务（包括未提交和回滚了的），再根据undo回滚未提交的事务。<br>当系统发生宕机时，如果一个事务的 redo log 已经全部刷入磁盘，那么该事务一定可以恢复；如果一个事务的 redo log 没有全部刷入磁盘，那么就通过 undo log 将这个事务恢复到执行之前。</p>\n<p>如上，如果事务B异常未提交事务就宕机，恢复时，先根据redo日志将数据恢复为A=3&amp;B=4，然后根据undo记录的A=1&amp;B=2将数据恢复如初。</p>\n<div style=\"display: none\">\n# 参考：\n* https://keithlan.github.io/2017/06/12/innodb_locks_redo/\n* https://juejin.im/post/5c3c5c0451882525487c498d\n* https://t.hao0.me/mysql/2016/11/05/mysql-innodb-05-tablespaces.html\n</div>","site":{"data":{}},"excerpt":"<h1 id=\"redo-log\"><a href=\"#redo-log\" class=\"headerlink\" title=\"redo log\"></a>redo log</h1><h2 id=\"redo-概念\"><a href=\"#redo-概念\" class=\"headerlink\" title=\"redo 概念\"></a>redo 概念</h2><p>重做日志(redo log)：在InnoDB存储引擎中，大部分情况下 Redo 是<code>物理日志</code>，记录的是数据页的物理变化。</p>\n<h2 id=\"redo-结构\"><a href=\"#redo-结构\" class=\"headerlink\" title=\"redo 结构\"></a>redo 结构</h2><p>Redo log可以简单分为以下两个部分：</p>","more":"<ol>\n<li>重做日志缓冲 (redo log buffer),是易失的，在内存中<ul>\n<li>日志会先写到redo log buffer ，根据制定条件刷新到redo log file</li>\n<li>由log block组成  </li>\n<li>每个log block 512字节，所以不需要 <a href=\"http://123.56.47.170:8080/2019/07/31/Mysql02/#%E4%B8%A4%E6%AC%A1%E5%86%99\" target=\"_blank\" rel=\"noopener\">double write</a>，因为每次刷新都是原子的  </li>\n</ul>\n</li>\n<li>重做日志文件 (redo log file)，是持久的，保存在磁盘中    <ul>\n<li>redo log的物理文件，一般有2个,大小可配置  </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"redo-写入时机\"><a href=\"#redo-写入时机\" class=\"headerlink\" title=\"redo 写入时机\"></a>redo 写入时机</h2><ul>\n<li>在数据页修改完成之后，在脏页刷出磁盘之前，写入redo日志。注意的是<strong>先修改数据，后写日志</strong></li>\n<li>redo日志比数据页先写回磁盘</li>\n<li>聚集索引、非聚集索引、undo页面的修改，均需要记录Redo日志。</li>\n</ul>\n<h2 id=\"redo-的整体流程\"><a href=\"#redo-的整体流程\" class=\"headerlink\" title=\"redo 的整体流程\"></a>redo 的整体流程</h2><p><img src=\"/2019/08/16/Mysql-RedoAndUndo/redo-buffer.png\" alt=\"redo\"></p>\n<h2 id=\"redo如何保证事务的持久性？\"><a href=\"#redo如何保证事务的持久性？\" class=\"headerlink\" title=\"redo如何保证事务的持久性？\"></a>redo如何保证事务的持久性？</h2><p>InnoDB 通过 <strong>Force Log at Commit</strong> 机制实现事务的持久性，即当事务提交时，先将 redo log buffer 写入到 redo log file 进行持久化，待事务的commit操作完成时才算完成。<br>这种做法也被称为 <strong>Write-Ahead Log</strong>(预先日志持久化)，在持久化一个数据页之前，先将内存中相应的日志页持久化。</p>\n<p>为了保证每次日志都写入redo log file，在每次将redo buffer写入redo log file之后，默认情况下，InnoDB存储引擎都需要调用一次 fsync操作,因为重做日志打开并没有 O_DIRECT选项，所以重做日志先写入到文件系统缓存。为了确保重做日志写入到磁盘，必须进行一次 fsync操作。fsync操作 将数据提交到硬盘中，强制硬盘同步，将一直阻塞到写入硬盘完成后返回，大量进行fsync操作就有性能瓶颈，因此磁盘的性能也影响了事务提交的性能，也就是数据库的性能。<br>(O_DIRECT选项是在Linux系统中的选项，使用该选项后，对文件进行直接IO操作，不经过文件系统缓存，直接写入磁盘)</p>\n<h1 id=\"undo-log\"><a href=\"#undo-log\" class=\"headerlink\" title=\"undo log\"></a>undo log</h1><h2 id=\"undo-概念\"><a href=\"#undo-概念\" class=\"headerlink\" title=\"undo 概念\"></a>undo 概念</h2><p>undo log主要记录的是数据的逻辑变化，为了在发生错误时回滚之前的操作，需要将之前的操作都记录下来，然后在发生错误时才可以回滚。</p>\n<h2 id=\"undo-结构\"><a href=\"#undo-结构\" class=\"headerlink\" title=\"undo 结构\"></a>undo 结构</h2><p>在InnoDB存储引擎中，undo存储在回滚段(Rollback Segment)中,每个回滚段记录了1024个undo log segment，而在每个undo log segment段中进行undo 页的申请，在5.6以前，Rollback Segment是在共享表空间里的，5.6.3之后，可通过 innodb_undo_tablespace设置undo存储的位置。</p>\n<h2 id=\"undo-写入时机\"><a href=\"#undo-写入时机\" class=\"headerlink\" title=\"undo 写入时机\"></a>undo 写入时机</h2><ul>\n<li>DML操作修改聚集索引前，记录undo日志</li>\n<li>非聚集索引记录的修改，<strong>不</strong>记录undo日志</li>\n</ul>\n<h2 id=\"undo-的整体流程\"><a href=\"#undo-的整体流程\" class=\"headerlink\" title=\"undo 的整体流程\"></a>undo 的整体流程</h2><p><img src=\"/2019/08/16/Mysql-RedoAndUndo/undo-Segment.png\" alt=\"undo\"><br>undo log 采用顺序IO写入磁盘共享表空间。</p>\n<h2 id=\"undo-类型\"><a href=\"#undo-类型\" class=\"headerlink\" title=\"undo 类型\"></a>undo 类型</h2><ul>\n<li>insert undo log：在insert 操作中产生的undo log，因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。</li>\n<li>update undo log：在delete 和update操作产生的undo log，该undo log可能需要提供MVCC机制，因此不能再事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。</li>\n</ul>\n<div style=\"display: none\">\n## DML的相关物理实现算法\n* 主键索引\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 对于delete   --需要undo绑定该记录才能进行回滚，所以只能打上标记，delete mark  </span><br><span class=\"line\">2. 对于update  --原记录可以物理删除，因为可以在新插入进来的地方进行undo绑定  </span><br><span class=\"line\">\t* 如果不能原地更新： delete(注意：这里是直接delete,而不是delete mark)  + insert </span><br><span class=\"line\">\t* 如果可以原地更新，那么直接update就好</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>非聚集索<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 对于delete  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚</span><br><span class=\"line\">\tdelete mark    </span><br><span class=\"line\">2. 对于update  --不能直接被物理删除，因为二级索引没有undo，只能通过打标记，然后回滚。否则如果被物理删除，则无法回滚</span><br><span class=\"line\">\tdelete mark + insert</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</div>\n\n<h1 id=\"redo-amp-undo\"><a href=\"#redo-amp-undo\" class=\"headerlink\" title=\"redo &amp; undo\"></a>redo &amp; undo</h1><h2 id=\"undo-log-是否是-redo-log-的逆过程？\"><a href=\"#undo-log-是否是-redo-log-的逆过程？\" class=\"headerlink\" title=\"undo log 是否是 redo log 的逆过程？\"></a>undo log 是否是 redo log 的逆过程？</h2><p>undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。<br>redo log是物理日志，记录的是数据页的物理变化，显然undo log不是redo log的逆过程。</p>\n<h2 id=\"事务实现过程\"><a href=\"#事务实现过程\" class=\"headerlink\" title=\"事务实现过程\"></a>事务实现过程</h2><p>事务B要将字段A的值由原来的1修改为3，要将B的值由原来的2修改为4，redo日志记录的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">假设有A、B两个数据，值分别为1,2.</span><br><span class=\"line\">1. 事务B开始</span><br><span class=\"line\">2. 记录A=1到undo log</span><br><span class=\"line\">3. 修改A=3</span><br><span class=\"line\">4. 记录A=3到 redo log</span><br><span class=\"line\">5. 记录B=2到 undo log</span><br><span class=\"line\">6. 修改B=4</span><br><span class=\"line\">7. 记录B=4到redo log</span><br><span class=\"line\">8. 将redo log写入磁盘</span><br><span class=\"line\">9. 事务提交，将数据写入磁盘</span><br><span class=\"line\">10.事物B结束</span><br></pre></td></tr></table></figure>\n\n<p>在insert/update/delete操作中，redo和undo分别记录的内容都不一样，量也不一样。在InnoDB内存中，一般的顺序如下：</p>\n<ol>\n<li>写undo的redo</li>\n<li>写undo</li>\n<li>修改数据页</li>\n<li>写Redo</li>\n</ol>\n<p>如果上面事务B回滚（当做新的事务C），则redo记录的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 事务C开始</span><br><span class=\"line\">2. 记录A=1到undo log</span><br><span class=\"line\">3. 修改A=3</span><br><span class=\"line\">4. 记录A=3到 redo log</span><br><span class=\"line\">5. 记录B=2到 undo log</span><br><span class=\"line\">6. 修改B=4</span><br><span class=\"line\">7. 记录B=4到redo log</span><br><span class=\"line\">   &lt;!--回滚--&gt;</span><br><span class=\"line\">8. 修改B=2</span><br><span class=\"line\">9. 记录B=2到redo log</span><br><span class=\"line\">10.修改A=1</span><br><span class=\"line\">11.记录A=1到redo log</span><br><span class=\"line\">12.将redo log写入磁盘</span><br><span class=\"line\">13.事务提交，将数据写入磁盘</span><br><span class=\"line\">14.事物C结束</span><br></pre></td></tr></table></figure>\n\n<p>恢复策略：恢复时，先根据redo重做所有事务（包括未提交和回滚了的），再根据undo回滚未提交的事务。<br>当系统发生宕机时，如果一个事务的 redo log 已经全部刷入磁盘，那么该事务一定可以恢复；如果一个事务的 redo log 没有全部刷入磁盘，那么就通过 undo log 将这个事务恢复到执行之前。</p>\n<p>如上，如果事务B异常未提交事务就宕机，恢复时，先根据redo日志将数据恢复为A=3&amp;B=4，然后根据undo记录的A=1&amp;B=2将数据恢复如初。</p>\n<div style=\"display: none\">\n# 参考：\n* https://keithlan.github.io/2017/06/12/innodb_locks_redo/\n* https://juejin.im/post/5c3c5c0451882525487c498d\n* https://t.hao0.me/mysql/2016/11/05/mysql-innodb-05-tablespaces.html\n</div>"},{"title":"《Mysql技术内幕》学习笔记-Mysql文件","author":"Guyuqing","copyright":true,"comments":0,"date":"2019-08-19T11:23:00.000Z","_content":"# 文件种类\n\n* [参数文件](#参数文件)：告诉MySQL实例启动时在哪里可以找到数据库文件，并且指定某些初始化参数，这些参数定义了某种内存结构的大小等设置，还会介绍各种参数的类型。\n\n* [日志文件](#日志文件)：用来记录MySQL实例对某种条件做出响应时写入的文件，如错误日志文件、二进制日志文件、慢查询日志文件、查询日志文件等。\n\n* [socket文件](#套接字文件)：当用UNIX域套接字方式进行连接时需要的文件。\n\n* [pid文件](#pid文件)：MySQL实例的进程ID文件。\n\n* [MySQL表结构文件](#表结构定义文件)：用来存放MySQL表结构定义文件。\n\n* [存储引擎文件](#innoDB存储引擎文件)：因为MySQL表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据。这些存储引擎真正存储了记录和索引等数据。本章主要介绍与InnoDB有关的存储引擎文件。”\n\n# 参数文件\n参数分为两类：\n* 动态参数：在 Mysql 实例运行中可以进行更改\n* 静态参数：在整个实例生命周期内都不得更改\n\n更改动态参数的语法如下：\n```sql\nSET\n| [global | session] system_var_name=expr\n| [@@global. | @@session. | @@] system_var_name = expr\n\n# 改变当前会话，不会改变全局\nSET read_buffer_size = 524288\n\n# 改变全局会话参数，不会改变当前\nSET @@global.read_buffer_size = 1048576;\n\n# 查询当前会话参数\nSELECT @@session.read_buffer_size;\n\n# 查询全局会话参数\nSELECT @@global.read_buffer_size;\n\n```\n`​global`：全局的，`session`：当前会话。 \n这种修改，并不最终修改配置文件my.cnf的参数值，所以重新启动后，参数还是按照配置文件中的加载。\n\n# 日志文件\nMySQL中常见的日志文件有：\n* 错误日志（error log）：对MySQL的启动、运行、关闭过程进行记录错误信息、警告信息。\n* 慢查询日志（slow query log）\n* 二进制日志（bin log）\n* 查询日志（log）\n\n## 慢查询日志\n在MySQL启动时设一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询日志文件中。\n\n<table>\n     <tr>\n         <th colspan=\"4\">参数</th>\n         <th colspan=\"4\">作用</th>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_slow_queries = on;</th>\n         <td colspan=\"4\">开启慢查询命令，默认启动慢查询</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\" >set global long_query_time = 1;</th>\n         <td colspan=\"4\">设置慢查询时间超过1s即被认为慢查询，默认10s</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_queries_not_using_indeces = on;</th>\n         <td colspan=\"4\">如果SQL语句没有使用索引，会记录到慢查询中</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_throttle_queries_not_using_indexs = on;</th>\n         <td colspan=\"4\">设置每分钟允许记录到slow log的且未使用索引的SQL语句次数，默认为0，表示没有限制。</td>\n     </tr>\n</table> \n\n# 套接字文件\n\n# pid文件\n\n# 表结构定义文件\n\n# innoDB存储引擎文件\n\n# 参考\n* MySQL技术内幕：InnoDB存储引擎(第2版)\n* https://www.jianshu.com/p/c1ffd6956e6a\n* https://www.cnblogs.com/BlueMountain-HaggenDazs/p/9297883.html","source":"_posts/Mysql03.md","raw":"title: 《Mysql技术内幕》学习笔记-Mysql文件\ntags:\n  - 学习笔记\n  - MySql\n  - InnoDB\ncategories:\n  - Mysql\nauthor: Guyuqing\ncopyright: true\ncomments: false\ndate: 2019-08-19 19:23:00\n---\n# 文件种类\n\n* [参数文件](#参数文件)：告诉MySQL实例启动时在哪里可以找到数据库文件，并且指定某些初始化参数，这些参数定义了某种内存结构的大小等设置，还会介绍各种参数的类型。\n\n* [日志文件](#日志文件)：用来记录MySQL实例对某种条件做出响应时写入的文件，如错误日志文件、二进制日志文件、慢查询日志文件、查询日志文件等。\n\n* [socket文件](#套接字文件)：当用UNIX域套接字方式进行连接时需要的文件。\n\n* [pid文件](#pid文件)：MySQL实例的进程ID文件。\n\n* [MySQL表结构文件](#表结构定义文件)：用来存放MySQL表结构定义文件。\n\n* [存储引擎文件](#innoDB存储引擎文件)：因为MySQL表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据。这些存储引擎真正存储了记录和索引等数据。本章主要介绍与InnoDB有关的存储引擎文件。”\n\n# 参数文件\n参数分为两类：\n* 动态参数：在 Mysql 实例运行中可以进行更改\n* 静态参数：在整个实例生命周期内都不得更改\n\n更改动态参数的语法如下：\n```sql\nSET\n| [global | session] system_var_name=expr\n| [@@global. | @@session. | @@] system_var_name = expr\n\n# 改变当前会话，不会改变全局\nSET read_buffer_size = 524288\n\n# 改变全局会话参数，不会改变当前\nSET @@global.read_buffer_size = 1048576;\n\n# 查询当前会话参数\nSELECT @@session.read_buffer_size;\n\n# 查询全局会话参数\nSELECT @@global.read_buffer_size;\n\n```\n`​global`：全局的，`session`：当前会话。 \n这种修改，并不最终修改配置文件my.cnf的参数值，所以重新启动后，参数还是按照配置文件中的加载。\n\n# 日志文件\nMySQL中常见的日志文件有：\n* 错误日志（error log）：对MySQL的启动、运行、关闭过程进行记录错误信息、警告信息。\n* 慢查询日志（slow query log）\n* 二进制日志（bin log）\n* 查询日志（log）\n\n## 慢查询日志\n在MySQL启动时设一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询日志文件中。\n\n<table>\n     <tr>\n         <th colspan=\"4\">参数</th>\n         <th colspan=\"4\">作用</th>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_slow_queries = on;</th>\n         <td colspan=\"4\">开启慢查询命令，默认启动慢查询</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\" >set global long_query_time = 1;</th>\n         <td colspan=\"4\">设置慢查询时间超过1s即被认为慢查询，默认10s</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_queries_not_using_indeces = on;</th>\n         <td colspan=\"4\">如果SQL语句没有使用索引，会记录到慢查询中</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_throttle_queries_not_using_indexs = on;</th>\n         <td colspan=\"4\">设置每分钟允许记录到slow log的且未使用索引的SQL语句次数，默认为0，表示没有限制。</td>\n     </tr>\n</table> \n\n# 套接字文件\n\n# pid文件\n\n# 表结构定义文件\n\n# innoDB存储引擎文件\n\n# 参考\n* MySQL技术内幕：InnoDB存储引擎(第2版)\n* https://www.jianshu.com/p/c1ffd6956e6a\n* https://www.cnblogs.com/BlueMountain-HaggenDazs/p/9297883.html","slug":"Mysql03","published":1,"updated":"2019-09-02T09:24:30.063Z","layout":"post","photos":[],"link":"","_id":"ck4859y3m0010t0fyihbt1gcj","content":"<h1 id=\"文件种类\"><a href=\"#文件种类\" class=\"headerlink\" title=\"文件种类\"></a>文件种类</h1><ul>\n<li><p><a href=\"#参数文件\">参数文件</a>：告诉MySQL实例启动时在哪里可以找到数据库文件，并且指定某些初始化参数，这些参数定义了某种内存结构的大小等设置，还会介绍各种参数的类型。</p>\n</li>\n<li><p><a href=\"#日志文件\">日志文件</a>：用来记录MySQL实例对某种条件做出响应时写入的文件，如错误日志文件、二进制日志文件、慢查询日志文件、查询日志文件等。</p>\n</li>\n<li><p><a href=\"#套接字文件\">socket文件</a>：当用UNIX域套接字方式进行连接时需要的文件。</p>\n</li>\n<li><p><a href=\"#pid文件\">pid文件</a>：MySQL实例的进程ID文件。</p>\n</li>\n<li><p><a href=\"#表结构定义文件\">MySQL表结构文件</a>：用来存放MySQL表结构定义文件。</p>\n</li>\n<li><p><a href=\"#innoDB存储引擎文件\">存储引擎文件</a>：因为MySQL表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据。这些存储引擎真正存储了记录和索引等数据。本章主要介绍与InnoDB有关的存储引擎文件。”</p>\n</li>\n</ul>\n<h1 id=\"参数文件\"><a href=\"#参数文件\" class=\"headerlink\" title=\"参数文件\"></a>参数文件</h1><p>参数分为两类：</p>\n<ul>\n<li>动态参数：在 Mysql 实例运行中可以进行更改</li>\n<li>静态参数：在整个实例生命周期内都不得更改</li>\n</ul>\n<p>更改动态参数的语法如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span></span><br><span class=\"line\">| [<span class=\"keyword\">global</span> | <span class=\"keyword\">session</span>] system_var_name=expr</span><br><span class=\"line\">| [@@global. | @@session. | @@] system_var_name = expr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变当前会话，不会改变全局</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> read_buffer_size = <span class=\"number\">524288</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变全局会话参数，不会改变当前</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @@global.read_buffer_size = <span class=\"number\">1048576</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询当前会话参数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @@session.read_buffer_size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询全局会话参数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @@global.read_buffer_size;</span><br></pre></td></tr></table></figure>\n\n<p><code>​global</code>：全局的，<code>session</code>：当前会话。<br>这种修改，并不最终修改配置文件my.cnf的参数值，所以重新启动后，参数还是按照配置文件中的加载。</p>\n<h1 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h1><p>MySQL中常见的日志文件有：</p>\n<ul>\n<li>错误日志（error log）：对MySQL的启动、运行、关闭过程进行记录错误信息、警告信息。</li>\n<li>慢查询日志（slow query log）</li>\n<li>二进制日志（bin log）</li>\n<li>查询日志（log）</li>\n</ul>\n<h2 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h2><p>在MySQL启动时设一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询日志文件中。</p>\n<table>\n     <tr>\n         <th colspan=\"4\">参数</th>\n         <th colspan=\"4\">作用</th>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_slow_queries = on;</th>\n         <td colspan=\"4\">开启慢查询命令，默认启动慢查询</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global long_query_time = 1;</th>\n         <td colspan=\"4\">设置慢查询时间超过1s即被认为慢查询，默认10s</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_queries_not_using_indeces = on;</th>\n         <td colspan=\"4\">如果SQL语句没有使用索引，会记录到慢查询中</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_throttle_queries_not_using_indexs = on;</th>\n         <td colspan=\"4\">设置每分钟允许记录到slow log的且未使用索引的SQL语句次数，默认为0，表示没有限制。</td>\n     </tr>\n</table> \n\n<h1 id=\"套接字文件\"><a href=\"#套接字文件\" class=\"headerlink\" title=\"套接字文件\"></a>套接字文件</h1><h1 id=\"pid文件\"><a href=\"#pid文件\" class=\"headerlink\" title=\"pid文件\"></a>pid文件</h1><h1 id=\"表结构定义文件\"><a href=\"#表结构定义文件\" class=\"headerlink\" title=\"表结构定义文件\"></a>表结构定义文件</h1><h1 id=\"innoDB存储引擎文件\"><a href=\"#innoDB存储引擎文件\" class=\"headerlink\" title=\"innoDB存储引擎文件\"></a>innoDB存储引擎文件</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li>MySQL技术内幕：InnoDB存储引擎(第2版)</li>\n<li><a href=\"https://www.jianshu.com/p/c1ffd6956e6a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c1ffd6956e6a</a></li>\n<li><a href=\"https://www.cnblogs.com/BlueMountain-HaggenDazs/p/9297883.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/BlueMountain-HaggenDazs/p/9297883.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"文件种类\"><a href=\"#文件种类\" class=\"headerlink\" title=\"文件种类\"></a>文件种类</h1><ul>\n<li><p><a href=\"#参数文件\">参数文件</a>：告诉MySQL实例启动时在哪里可以找到数据库文件，并且指定某些初始化参数，这些参数定义了某种内存结构的大小等设置，还会介绍各种参数的类型。</p>\n</li>\n<li><p><a href=\"#日志文件\">日志文件</a>：用来记录MySQL实例对某种条件做出响应时写入的文件，如错误日志文件、二进制日志文件、慢查询日志文件、查询日志文件等。</p>\n</li>\n<li><p><a href=\"#套接字文件\">socket文件</a>：当用UNIX域套接字方式进行连接时需要的文件。</p>\n</li>\n<li><p><a href=\"#pid文件\">pid文件</a>：MySQL实例的进程ID文件。</p>\n</li>\n<li><p><a href=\"#表结构定义文件\">MySQL表结构文件</a>：用来存放MySQL表结构定义文件。</p>\n</li>\n<li><p><a href=\"#innoDB存储引擎文件\">存储引擎文件</a>：因为MySQL表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据。这些存储引擎真正存储了记录和索引等数据。本章主要介绍与InnoDB有关的存储引擎文件。”</p>\n</li>\n</ul>\n<h1 id=\"参数文件\"><a href=\"#参数文件\" class=\"headerlink\" title=\"参数文件\"></a>参数文件</h1><p>参数分为两类：</p>\n<ul>\n<li>动态参数：在 Mysql 实例运行中可以进行更改</li>\n<li>静态参数：在整个实例生命周期内都不得更改</li>\n</ul>\n<p>更改动态参数的语法如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span></span><br><span class=\"line\">| [<span class=\"keyword\">global</span> | <span class=\"keyword\">session</span>] system_var_name=expr</span><br><span class=\"line\">| [@@global. | @@session. | @@] system_var_name = expr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变当前会话，不会改变全局</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> read_buffer_size = <span class=\"number\">524288</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改变全局会话参数，不会改变当前</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @@global.read_buffer_size = <span class=\"number\">1048576</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询当前会话参数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @@session.read_buffer_size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询全局会话参数</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @@global.read_buffer_size;</span><br></pre></td></tr></table></figure>\n\n<p><code>​global</code>：全局的，<code>session</code>：当前会话。<br>这种修改，并不最终修改配置文件my.cnf的参数值，所以重新启动后，参数还是按照配置文件中的加载。</p>\n<h1 id=\"日志文件\"><a href=\"#日志文件\" class=\"headerlink\" title=\"日志文件\"></a>日志文件</h1><p>MySQL中常见的日志文件有：</p>\n<ul>\n<li>错误日志（error log）：对MySQL的启动、运行、关闭过程进行记录错误信息、警告信息。</li>\n<li>慢查询日志（slow query log）</li>\n<li>二进制日志（bin log）</li>\n<li>查询日志（log）</li>\n</ul>\n<h2 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h2><p>在MySQL启动时设一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询日志文件中。</p>\n<table>\n     <tr>\n         <th colspan=\"4\">参数</th>\n         <th colspan=\"4\">作用</th>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_slow_queries = on;</th>\n         <td colspan=\"4\">开启慢查询命令，默认启动慢查询</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global long_query_time = 1;</th>\n         <td colspan=\"4\">设置慢查询时间超过1s即被认为慢查询，默认10s</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_queries_not_using_indeces = on;</th>\n         <td colspan=\"4\">如果SQL语句没有使用索引，会记录到慢查询中</td>\n     </tr>\n     <tr>\n         <th colspan=\"4\">set global log_throttle_queries_not_using_indexs = on;</th>\n         <td colspan=\"4\">设置每分钟允许记录到slow log的且未使用索引的SQL语句次数，默认为0，表示没有限制。</td>\n     </tr>\n</table> \n\n<h1 id=\"套接字文件\"><a href=\"#套接字文件\" class=\"headerlink\" title=\"套接字文件\"></a>套接字文件</h1><h1 id=\"pid文件\"><a href=\"#pid文件\" class=\"headerlink\" title=\"pid文件\"></a>pid文件</h1><h1 id=\"表结构定义文件\"><a href=\"#表结构定义文件\" class=\"headerlink\" title=\"表结构定义文件\"></a>表结构定义文件</h1><h1 id=\"innoDB存储引擎文件\"><a href=\"#innoDB存储引擎文件\" class=\"headerlink\" title=\"innoDB存储引擎文件\"></a>innoDB存储引擎文件</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li>MySQL技术内幕：InnoDB存储引擎(第2版)</li>\n<li><a href=\"https://www.jianshu.com/p/c1ffd6956e6a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c1ffd6956e6a</a></li>\n<li><a href=\"https://www.cnblogs.com/BlueMountain-HaggenDazs/p/9297883.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/BlueMountain-HaggenDazs/p/9297883.html</a></li>\n</ul>\n"},{"title":"《Mysql技术内幕》学习笔记-索引与算法","author":"Guyuqing","copyright":true,"comments":0,"date":"2019-10-17T08:25:00.000Z","_content":"InnoDB存储引擎支持以下几种常见的索引：\n\nB+树索引、全文索引、哈希索引\n\n# 二叉查找树\n\n在介绍B+树前，需要先了解一下二叉查找树。B+树是通过二叉查找树，再由平衡二叉树，B树演化而来。\n\n## 定义\n\n左孩子比父节点小，右孩子比父节点大，中序遍历可以得到键值的排序输出。\n\n## 插入\n![BST_insert](Mysql05/BST_insert.png)\n\n## 删除\n单孩子的情况：如果删除的节点有左孩子那就把左孩子顶上去，如果有右孩子就把右孩子顶上去\n![BST_delete](Mysql05/BST_delete1.png)\n\n左右都有孩子的情况：可以这么想象，如果我们要删除一个数组的元素，那么我们在删除后会将其后面的一个元素顶到被删除的位置。\n二叉树操作同样，我们根据`中序遍历`找到要删除结点的后一个结点，然后顶上去，原理跟`数组`一样。\n![BST_delete](Mysql05/BST_delete2.png)\n\n## 查找\n查找的平均时间复杂度log(N)，在最坏的情况下会出现`链表`的形式，复杂度退化到O(N)。\n![BST_delete](Mysql05/BST_linked.png)\n\n# 平衡二叉树\n\n当二叉查找树以`完全二叉树`的形式展现，这样我才能做到查找是严格的O(logN)，\n\n## 定义\n\n首先符合二叉查找树的定义，其次必须满足任何节点的两个子树的高度最大差为1。\n\n## 旋转\n节点再怎么失衡都逃不过4种情况\n\n### 左子树的左边节点\n\n![BBT1](Mysql05/BBT1.png)\n\n### 右子树的右边节点\n\n![BBT2](Mysql05/BBT2.png)\n\n### 左子树的右边节点\n\n![BBT3](Mysql05/BBT3.png)\n找到`失衡点`，失衡点的左子树进行[右子树的右边节点](#右子树的右边节点)情况旋转，然后进行[左子树的左边节点](#左子树的左边节点)旋转\n\n### 右子树的左边节点\n\n![BBT4](Mysql05/BBT4.png)\n\n## 插入&删除\n\n步骤同[二叉查找树](#二叉查找树)，只是在插入或删除节点之后多了一步[旋转](#旋转)的过程\n\n\n# B+树","source":"_posts/Mysql05.md","raw":"title: 《Mysql技术内幕》学习笔记-索引与算法\ntags:\n  - 学习笔记\n  - MySql\n  - InnoDB\ncategories:\n  - Mysql\nauthor: Guyuqing\ncopyright: true\ncomments: false\ndate: 2019-10-17 16:25:00\n---\nInnoDB存储引擎支持以下几种常见的索引：\n\nB+树索引、全文索引、哈希索引\n\n# 二叉查找树\n\n在介绍B+树前，需要先了解一下二叉查找树。B+树是通过二叉查找树，再由平衡二叉树，B树演化而来。\n\n## 定义\n\n左孩子比父节点小，右孩子比父节点大，中序遍历可以得到键值的排序输出。\n\n## 插入\n![BST_insert](Mysql05/BST_insert.png)\n\n## 删除\n单孩子的情况：如果删除的节点有左孩子那就把左孩子顶上去，如果有右孩子就把右孩子顶上去\n![BST_delete](Mysql05/BST_delete1.png)\n\n左右都有孩子的情况：可以这么想象，如果我们要删除一个数组的元素，那么我们在删除后会将其后面的一个元素顶到被删除的位置。\n二叉树操作同样，我们根据`中序遍历`找到要删除结点的后一个结点，然后顶上去，原理跟`数组`一样。\n![BST_delete](Mysql05/BST_delete2.png)\n\n## 查找\n查找的平均时间复杂度log(N)，在最坏的情况下会出现`链表`的形式，复杂度退化到O(N)。\n![BST_delete](Mysql05/BST_linked.png)\n\n# 平衡二叉树\n\n当二叉查找树以`完全二叉树`的形式展现，这样我才能做到查找是严格的O(logN)，\n\n## 定义\n\n首先符合二叉查找树的定义，其次必须满足任何节点的两个子树的高度最大差为1。\n\n## 旋转\n节点再怎么失衡都逃不过4种情况\n\n### 左子树的左边节点\n\n![BBT1](Mysql05/BBT1.png)\n\n### 右子树的右边节点\n\n![BBT2](Mysql05/BBT2.png)\n\n### 左子树的右边节点\n\n![BBT3](Mysql05/BBT3.png)\n找到`失衡点`，失衡点的左子树进行[右子树的右边节点](#右子树的右边节点)情况旋转，然后进行[左子树的左边节点](#左子树的左边节点)旋转\n\n### 右子树的左边节点\n\n![BBT4](Mysql05/BBT4.png)\n\n## 插入&删除\n\n步骤同[二叉查找树](#二叉查找树)，只是在插入或删除节点之后多了一步[旋转](#旋转)的过程\n\n\n# B+树","slug":"Mysql05","published":1,"updated":"2019-10-18T07:44:27.802Z","layout":"post","photos":[],"link":"","_id":"ck4859y3q0013t0fyyxk4qmtl","content":"<p>InnoDB存储引擎支持以下几种常见的索引：</p>\n<p>B+树索引、全文索引、哈希索引</p>\n<h1 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h1><p>在介绍B+树前，需要先了解一下二叉查找树。B+树是通过二叉查找树，再由平衡二叉树，B树演化而来。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>左孩子比父节点小，右孩子比父节点大，中序遍历可以得到键值的排序输出。</p>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h2><p><img src=\"/2019/10/17/Mysql05/BST_insert.png\" alt=\"BST_insert\"></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>单孩子的情况：如果删除的节点有左孩子那就把左孩子顶上去，如果有右孩子就把右孩子顶上去<br><img src=\"/2019/10/17/Mysql05/BST_delete1.png\" alt=\"BST_delete\"></p>\n<p>左右都有孩子的情况：可以这么想象，如果我们要删除一个数组的元素，那么我们在删除后会将其后面的一个元素顶到被删除的位置。<br>二叉树操作同样，我们根据<code>中序遍历</code>找到要删除结点的后一个结点，然后顶上去，原理跟<code>数组</code>一样。<br><img src=\"/2019/10/17/Mysql05/BST_delete2.png\" alt=\"BST_delete\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>查找的平均时间复杂度log(N)，在最坏的情况下会出现<code>链表</code>的形式，复杂度退化到O(N)。<br><img src=\"/2019/10/17/Mysql05/BST_linked.png\" alt=\"BST_delete\"></p>\n<h1 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h1><p>当二叉查找树以<code>完全二叉树</code>的形式展现，这样我才能做到查找是严格的O(logN)，</p>\n<h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>首先符合二叉查找树的定义，其次必须满足任何节点的两个子树的高度最大差为1。</p>\n<h2 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h2><p>节点再怎么失衡都逃不过4种情况</p>\n<h3 id=\"左子树的左边节点\"><a href=\"#左子树的左边节点\" class=\"headerlink\" title=\"左子树的左边节点\"></a>左子树的左边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT1.png\" alt=\"BBT1\"></p>\n<h3 id=\"右子树的右边节点\"><a href=\"#右子树的右边节点\" class=\"headerlink\" title=\"右子树的右边节点\"></a>右子树的右边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT2.png\" alt=\"BBT2\"></p>\n<h3 id=\"左子树的右边节点\"><a href=\"#左子树的右边节点\" class=\"headerlink\" title=\"左子树的右边节点\"></a>左子树的右边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT3.png\" alt=\"BBT3\"><br>找到<code>失衡点</code>，失衡点的左子树进行<a href=\"#右子树的右边节点\">右子树的右边节点</a>情况旋转，然后进行<a href=\"#左子树的左边节点\">左子树的左边节点</a>旋转</p>\n<h3 id=\"右子树的左边节点\"><a href=\"#右子树的左边节点\" class=\"headerlink\" title=\"右子树的左边节点\"></a>右子树的左边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT4.png\" alt=\"BBT4\"></p>\n<h2 id=\"插入-amp-删除\"><a href=\"#插入-amp-删除\" class=\"headerlink\" title=\"插入&amp;删除\"></a>插入&amp;删除</h2><p>步骤同<a href=\"#二叉查找树\">二叉查找树</a>，只是在插入或删除节点之后多了一步<a href=\"#旋转\">旋转</a>的过程</p>\n<h1 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h1>","site":{"data":{}},"excerpt":"","more":"<p>InnoDB存储引擎支持以下几种常见的索引：</p>\n<p>B+树索引、全文索引、哈希索引</p>\n<h1 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h1><p>在介绍B+树前，需要先了解一下二叉查找树。B+树是通过二叉查找树，再由平衡二叉树，B树演化而来。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>左孩子比父节点小，右孩子比父节点大，中序遍历可以得到键值的排序输出。</p>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h2><p><img src=\"/2019/10/17/Mysql05/BST_insert.png\" alt=\"BST_insert\"></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>单孩子的情况：如果删除的节点有左孩子那就把左孩子顶上去，如果有右孩子就把右孩子顶上去<br><img src=\"/2019/10/17/Mysql05/BST_delete1.png\" alt=\"BST_delete\"></p>\n<p>左右都有孩子的情况：可以这么想象，如果我们要删除一个数组的元素，那么我们在删除后会将其后面的一个元素顶到被删除的位置。<br>二叉树操作同样，我们根据<code>中序遍历</code>找到要删除结点的后一个结点，然后顶上去，原理跟<code>数组</code>一样。<br><img src=\"/2019/10/17/Mysql05/BST_delete2.png\" alt=\"BST_delete\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>查找的平均时间复杂度log(N)，在最坏的情况下会出现<code>链表</code>的形式，复杂度退化到O(N)。<br><img src=\"/2019/10/17/Mysql05/BST_linked.png\" alt=\"BST_delete\"></p>\n<h1 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h1><p>当二叉查找树以<code>完全二叉树</code>的形式展现，这样我才能做到查找是严格的O(logN)，</p>\n<h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>首先符合二叉查找树的定义，其次必须满足任何节点的两个子树的高度最大差为1。</p>\n<h2 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h2><p>节点再怎么失衡都逃不过4种情况</p>\n<h3 id=\"左子树的左边节点\"><a href=\"#左子树的左边节点\" class=\"headerlink\" title=\"左子树的左边节点\"></a>左子树的左边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT1.png\" alt=\"BBT1\"></p>\n<h3 id=\"右子树的右边节点\"><a href=\"#右子树的右边节点\" class=\"headerlink\" title=\"右子树的右边节点\"></a>右子树的右边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT2.png\" alt=\"BBT2\"></p>\n<h3 id=\"左子树的右边节点\"><a href=\"#左子树的右边节点\" class=\"headerlink\" title=\"左子树的右边节点\"></a>左子树的右边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT3.png\" alt=\"BBT3\"><br>找到<code>失衡点</code>，失衡点的左子树进行<a href=\"#右子树的右边节点\">右子树的右边节点</a>情况旋转，然后进行<a href=\"#左子树的左边节点\">左子树的左边节点</a>旋转</p>\n<h3 id=\"右子树的左边节点\"><a href=\"#右子树的左边节点\" class=\"headerlink\" title=\"右子树的左边节点\"></a>右子树的左边节点</h3><p><img src=\"/2019/10/17/Mysql05/BBT4.png\" alt=\"BBT4\"></p>\n<h2 id=\"插入-amp-删除\"><a href=\"#插入-amp-删除\" class=\"headerlink\" title=\"插入&amp;删除\"></a>插入&amp;删除</h2><p>步骤同<a href=\"#二叉查找树\">二叉查找树</a>，只是在插入或删除节点之后多了一步<a href=\"#旋转\">旋转</a>的过程</p>\n<h1 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h1>"},{"title":"泰国旅游攻略","date":"2019-07-12T09:49:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"password":12345,"_content":"## 准备工作\n### 一、签证\n* 所需资料\n    1. 护照原件（无皮损，且有180天以上的有效期）\n    2. 往返泰国的机票\n    3. 携带20,000以上泰铢的现金或者等值货币（约3700-4000元人民币，汇率会有所波动，建议携带足够现金）过关时抽查，如没有携带足够的现金，有可能会被拒签或遣返。\n    4. 1张2寸白底彩色照片（如没有带照片。可现场拍照，额外拍照费用100泰铢）\n<!-- more -->\n* 费用\n    1. 1000泰铢手续费（目前落地签免费）\n    2. 如没带照片，需现场拍照，加收100泰铢拍照费\n    3. 只收泰铢现多，旁有兑换点，但汇率比较低，建议办理落地签，提前在国内换好所需泰铢费用。(中国银行可预约兑换泰铢，汇率约为1：5，实时汇率请咨询银行）\n\n* 落地签办理流程\n    1. 在机场按照指示牌找到“`Visa on Arrival`” （落地签）柜台\n    2. 填写落地签申请表（柜台上就发放有表格，以及填写示例，最好`提前打印`下来填好）\n    3. 递交资料（包括申请表、照片、护照、往返机票等），工作人员审核后给排队号\n    4. 等叫号，上交资料和手续费，工作人员在你的护照上盖上落地签的章，病提供泰文收据等\n    5. 走到“`For Visa-on-Arrival Only`”的柜台，入境官会再检查你的护照等资料，然后把出入境卡的入境部分撕掉，将出境卡盖章之后订在护照上，你就可以跨过边检柜台，正式进入泰国境内了\n    6. 落地签的有效期是15天，即你可以在泰国逗留不超过15天的时间\n\n## 9.10北京出发\n\n\n北京南站->天津站： `C2077 20：50-21：20 二等座 54.5￥`\n![](Thailand-Raiders/1.png)\n\n### 天津\n\n天津站->天津滨海国际机场T1航站楼  地铁二号线 `45min` 约`3￥`\n![](Thailand-Raiders/tianjin-airport.png)\n\n约10点到达机场\n\n天津滨海国际机场T1航站楼 ->廊曼国际机场T1航站楼\n`SL963  23:50-03:35 +1 经济舱 `\n\n### 9.11泰国曼谷\n\n曼谷酒店位置：`455/4 Maha Chai Road`, Bangkok, Krung Thep Maha Nakhon 10200, Thailand\n![](Thailand-Raiders/2.png)\n![](Thailand-Raiders/455.jpeg)\n![](Thailand-Raiders/455-2.jpeg)\n![](Thailand-Raiders/455-3.jpeg)\n\n廊曼国际机场T1航站楼 ->曼谷酒店 `455/4 Maha Chai Road`\n淘宝下单接送机，或者携程下单（建议携程，航班延误可以2小时免费等）。\n到酒店睡觉啦啦啦啦\n\n#### 9.11 10:00\n浏览景点安排\n\n大皇宫   `3h  500泰铢 111.5￥` 长袖，长裙不能露膝盖\n卧佛寺  `0.5h  200泰铢 44￥`\n坐船 3泰铢\n郑王庙  `0.5h  30泰铢  7￥`\n考山路夜市吃吃吃 `2h` \n\n### 9.12 泰国曼谷\n退房**（留小费）**\n\n酒店->汽车站\nbegin\n![](Thailand-Raiders/3.png)\n1、步行到船站 船票单次`50🐷`\n![](Thailand-Raiders/4.png)\n2、坐船\n![](Thailand-Raiders/5.png)\n3、下船后步行到BST车站\n![](Thailand-Raiders/6.png)\n4、坐上BST，约8站到达Ekkamai ，2号出站口出站下楼梯再向后方走100m就到了\nend\n\n汽车站买票：窗口正上方写着`Pattaya`就可以买票了约`108🐷`一位上下浮动 厕所`3🐷`一次\n曼谷到芭提雅媒体7：00-20：00，每半小时一班车 `车程2h`\n\n### 9.12 芭提雅\n酒店位置：88/999,Moo.10 Building B Room No.999, Pattayasaisong Rd, Muang Pattaya, Amphoe Bang Lamung, Chang Wat Chon Buri 20150\n#### 双条车\n路线图\n![](Thailand-Raiders/10.jpeg)\n![](Thailand-Raiders/11.png)\n上车不要说话，说话会被误认为包车，10🐷/人\n\n#### 游玩路线\n\n芭提雅车站在North Pattaya Road路 Bus Terminal\n距酒店2.6公里，可以考虑步行\n![](Thailand-Raiders/7.png)\n\n东芭乐园 9：00-18：00 `800泰铢   178￥` 双条车\n![](Thailand-Raiders/8.png)\n\n四方水上市场 9：00-20：00\n![](Thailand-Raiders/9.png)\n\n蒂芬妮人妖秀  每天18：00、19：30、21：00共三场  `普通800🐷，vip1000🐷、金vip1200🐷   178￥` 双条车每人10🐷 或步行\n![](Thailand-Raiders/Tiffany.png)\n\n芭提雅海滩走一波 吃小吃\n\n### 9.13芭提雅\n格兰岛一日游：网上跟团即可\n海上滑翔、海底漫步、摩托艇、香蕉船、浮潜。\n\n### 9.14芭提雅\n购物中心逛一逛\n\n到Bus Terminal汽车站买票回曼谷：窗口正上方写着`Ekkamai`，最晚班次晚上11点\n\n### 9.14曼谷\n曼谷酒店位置：Ratchaprarop Road Ratchaprarop Road indraCondo/177/209 soi saengkran/ratchprarop road, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand\n\n![](Thailand-Raiders/WechatIMG38.jpeg)\n![](Thailand-Raiders/WechatIMG39.png)\n![](Thailand-Raiders/WechatIMG40.png)\n\n#### 9.15天津\n预约接机（提前两天预定）\n\n## 泰国必买\nBIG-C零食\n![](Thailand-Raiders/Screenshot_2019-08-31-11-46-03-072_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-46-08-364_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-46-00-652_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-45-53-237_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-45-57-687_com.xingin.xhs.png)\n711\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-14-972_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-18-389_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-20-912_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-23-188_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-25-297_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-30-499_com.xingin.xhs.png)\n\n### 必买药品\n![](Thailand-Raiders/Screenshot_2019-08-31-13-11-50-782_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-13-11-56-133_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-13-12-27-105_com.xingin.xhs.png)\n\n### 必买化妆品\n欧莱雅唇膏、小黑瓶\nONLY 小白瓶\nN7冰激凌面膜\n\n### 必逛\n华歌尔内衣Wacoal（曼谷尚泰商圈和暹罗挨着central world 三/四楼）\nLee\nLeVI'S（暹罗广场，国内五折）\neveryandboy泰国本土美妆店\n日本松本清（central world 三楼）\n![](Thailand-Raiders/Screenshot_2019-08-31-14-05-58-003_com.xingin.xhs.png)\n\n## 泰国机场退税取货\n\n![](Thailand-Raiders/Screenshot_2019-08-31-14-25-04-833_com.xingin.xhs.png)\n\n\n\n","source":"_posts/Thailand-Raiders.md","raw":"---\ntitle: 泰国旅游攻略\ndate: 2019-07-12 17:49:04\ntags:\n    - 旅游攻略\ncategories: 旅游\nauthor: Guyuqing\ncopyright: true\ncomments: false\npassword: 12345\n---\n## 准备工作\n### 一、签证\n* 所需资料\n    1. 护照原件（无皮损，且有180天以上的有效期）\n    2. 往返泰国的机票\n    3. 携带20,000以上泰铢的现金或者等值货币（约3700-4000元人民币，汇率会有所波动，建议携带足够现金）过关时抽查，如没有携带足够的现金，有可能会被拒签或遣返。\n    4. 1张2寸白底彩色照片（如没有带照片。可现场拍照，额外拍照费用100泰铢）\n<!-- more -->\n* 费用\n    1. 1000泰铢手续费（目前落地签免费）\n    2. 如没带照片，需现场拍照，加收100泰铢拍照费\n    3. 只收泰铢现多，旁有兑换点，但汇率比较低，建议办理落地签，提前在国内换好所需泰铢费用。(中国银行可预约兑换泰铢，汇率约为1：5，实时汇率请咨询银行）\n\n* 落地签办理流程\n    1. 在机场按照指示牌找到“`Visa on Arrival`” （落地签）柜台\n    2. 填写落地签申请表（柜台上就发放有表格，以及填写示例，最好`提前打印`下来填好）\n    3. 递交资料（包括申请表、照片、护照、往返机票等），工作人员审核后给排队号\n    4. 等叫号，上交资料和手续费，工作人员在你的护照上盖上落地签的章，病提供泰文收据等\n    5. 走到“`For Visa-on-Arrival Only`”的柜台，入境官会再检查你的护照等资料，然后把出入境卡的入境部分撕掉，将出境卡盖章之后订在护照上，你就可以跨过边检柜台，正式进入泰国境内了\n    6. 落地签的有效期是15天，即你可以在泰国逗留不超过15天的时间\n\n## 9.10北京出发\n\n\n北京南站->天津站： `C2077 20：50-21：20 二等座 54.5￥`\n![](Thailand-Raiders/1.png)\n\n### 天津\n\n天津站->天津滨海国际机场T1航站楼  地铁二号线 `45min` 约`3￥`\n![](Thailand-Raiders/tianjin-airport.png)\n\n约10点到达机场\n\n天津滨海国际机场T1航站楼 ->廊曼国际机场T1航站楼\n`SL963  23:50-03:35 +1 经济舱 `\n\n### 9.11泰国曼谷\n\n曼谷酒店位置：`455/4 Maha Chai Road`, Bangkok, Krung Thep Maha Nakhon 10200, Thailand\n![](Thailand-Raiders/2.png)\n![](Thailand-Raiders/455.jpeg)\n![](Thailand-Raiders/455-2.jpeg)\n![](Thailand-Raiders/455-3.jpeg)\n\n廊曼国际机场T1航站楼 ->曼谷酒店 `455/4 Maha Chai Road`\n淘宝下单接送机，或者携程下单（建议携程，航班延误可以2小时免费等）。\n到酒店睡觉啦啦啦啦\n\n#### 9.11 10:00\n浏览景点安排\n\n大皇宫   `3h  500泰铢 111.5￥` 长袖，长裙不能露膝盖\n卧佛寺  `0.5h  200泰铢 44￥`\n坐船 3泰铢\n郑王庙  `0.5h  30泰铢  7￥`\n考山路夜市吃吃吃 `2h` \n\n### 9.12 泰国曼谷\n退房**（留小费）**\n\n酒店->汽车站\nbegin\n![](Thailand-Raiders/3.png)\n1、步行到船站 船票单次`50🐷`\n![](Thailand-Raiders/4.png)\n2、坐船\n![](Thailand-Raiders/5.png)\n3、下船后步行到BST车站\n![](Thailand-Raiders/6.png)\n4、坐上BST，约8站到达Ekkamai ，2号出站口出站下楼梯再向后方走100m就到了\nend\n\n汽车站买票：窗口正上方写着`Pattaya`就可以买票了约`108🐷`一位上下浮动 厕所`3🐷`一次\n曼谷到芭提雅媒体7：00-20：00，每半小时一班车 `车程2h`\n\n### 9.12 芭提雅\n酒店位置：88/999,Moo.10 Building B Room No.999, Pattayasaisong Rd, Muang Pattaya, Amphoe Bang Lamung, Chang Wat Chon Buri 20150\n#### 双条车\n路线图\n![](Thailand-Raiders/10.jpeg)\n![](Thailand-Raiders/11.png)\n上车不要说话，说话会被误认为包车，10🐷/人\n\n#### 游玩路线\n\n芭提雅车站在North Pattaya Road路 Bus Terminal\n距酒店2.6公里，可以考虑步行\n![](Thailand-Raiders/7.png)\n\n东芭乐园 9：00-18：00 `800泰铢   178￥` 双条车\n![](Thailand-Raiders/8.png)\n\n四方水上市场 9：00-20：00\n![](Thailand-Raiders/9.png)\n\n蒂芬妮人妖秀  每天18：00、19：30、21：00共三场  `普通800🐷，vip1000🐷、金vip1200🐷   178￥` 双条车每人10🐷 或步行\n![](Thailand-Raiders/Tiffany.png)\n\n芭提雅海滩走一波 吃小吃\n\n### 9.13芭提雅\n格兰岛一日游：网上跟团即可\n海上滑翔、海底漫步、摩托艇、香蕉船、浮潜。\n\n### 9.14芭提雅\n购物中心逛一逛\n\n到Bus Terminal汽车站买票回曼谷：窗口正上方写着`Ekkamai`，最晚班次晚上11点\n\n### 9.14曼谷\n曼谷酒店位置：Ratchaprarop Road Ratchaprarop Road indraCondo/177/209 soi saengkran/ratchprarop road, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand\n\n![](Thailand-Raiders/WechatIMG38.jpeg)\n![](Thailand-Raiders/WechatIMG39.png)\n![](Thailand-Raiders/WechatIMG40.png)\n\n#### 9.15天津\n预约接机（提前两天预定）\n\n## 泰国必买\nBIG-C零食\n![](Thailand-Raiders/Screenshot_2019-08-31-11-46-03-072_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-46-08-364_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-46-00-652_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-45-53-237_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-11-45-57-687_com.xingin.xhs.png)\n711\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-14-972_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-18-389_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-20-912_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-23-188_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-25-297_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-12-05-30-499_com.xingin.xhs.png)\n\n### 必买药品\n![](Thailand-Raiders/Screenshot_2019-08-31-13-11-50-782_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-13-11-56-133_com.xingin.xhs.png)\n![](Thailand-Raiders/Screenshot_2019-08-31-13-12-27-105_com.xingin.xhs.png)\n\n### 必买化妆品\n欧莱雅唇膏、小黑瓶\nONLY 小白瓶\nN7冰激凌面膜\n\n### 必逛\n华歌尔内衣Wacoal（曼谷尚泰商圈和暹罗挨着central world 三/四楼）\nLee\nLeVI'S（暹罗广场，国内五折）\neveryandboy泰国本土美妆店\n日本松本清（central world 三楼）\n![](Thailand-Raiders/Screenshot_2019-08-31-14-05-58-003_com.xingin.xhs.png)\n\n## 泰国机场退税取货\n\n![](Thailand-Raiders/Screenshot_2019-08-31-14-25-04-833_com.xingin.xhs.png)\n\n\n\n","slug":"Thailand-Raiders","published":1,"updated":"2019-09-02T06:58:53.310Z","layout":"post","photos":[],"link":"","_id":"ck4859y3s0017t0fyzc60sa62","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"一、签证\"><a href=\"#一、签证\" class=\"headerlink\" title=\"一、签证\"></a>一、签证</h3><ul>\n<li><p>所需资料</p>\n<ol>\n<li>护照原件（无皮损，且有180天以上的有效期）</li>\n<li>往返泰国的机票</li>\n<li>携带20,000以上泰铢的现金或者等值货币（约3700-4000元人民币，汇率会有所波动，建议携带足够现金）过关时抽查，如没有携带足够的现金，有可能会被拒签或遣返。</li>\n<li>1张2寸白底彩色照片（如没有带照片。可现场拍照，额外拍照费用100泰铢）<a id=\"more\"></a></li>\n</ol>\n</li>\n<li><p>费用</p>\n<ol>\n<li>1000泰铢手续费（目前落地签免费）</li>\n<li>如没带照片，需现场拍照，加收100泰铢拍照费</li>\n<li>只收泰铢现多，旁有兑换点，但汇率比较低，建议办理落地签，提前在国内换好所需泰铢费用。(中国银行可预约兑换泰铢，汇率约为1：5，实时汇率请咨询银行）</li>\n</ol>\n</li>\n<li><p>落地签办理流程</p>\n<ol>\n<li>在机场按照指示牌找到“<code>Visa on Arrival</code>” （落地签）柜台</li>\n<li>填写落地签申请表（柜台上就发放有表格，以及填写示例，最好<code>提前打印</code>下来填好）</li>\n<li>递交资料（包括申请表、照片、护照、往返机票等），工作人员审核后给排队号</li>\n<li>等叫号，上交资料和手续费，工作人员在你的护照上盖上落地签的章，病提供泰文收据等</li>\n<li>走到“<code>For Visa-on-Arrival Only</code>”的柜台，入境官会再检查你的护照等资料，然后把出入境卡的入境部分撕掉，将出境卡盖章之后订在护照上，你就可以跨过边检柜台，正式进入泰国境内了</li>\n<li>落地签的有效期是15天，即你可以在泰国逗留不超过15天的时间</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"9-10北京出发\"><a href=\"#9-10北京出发\" class=\"headerlink\" title=\"9.10北京出发\"></a>9.10北京出发</h2><p>北京南站-&gt;天津站： <code>C2077 20：50-21：20 二等座 54.5￥</code><br><img src=\"/2019/07/12/Thailand-Raiders/1.png\" alt=\"\"></p>\n<h3 id=\"天津\"><a href=\"#天津\" class=\"headerlink\" title=\"天津\"></a>天津</h3><p>天津站-&gt;天津滨海国际机场T1航站楼  地铁二号线 <code>45min</code> 约<code>3￥</code><br><img src=\"/2019/07/12/Thailand-Raiders/tianjin-airport.png\" alt=\"\"></p>\n<p>约10点到达机场</p>\n<p>天津滨海国际机场T1航站楼 -&gt;廊曼国际机场T1航站楼<br><code>SL963  23:50-03:35 +1 经济舱</code></p>\n<h3 id=\"9-11泰国曼谷\"><a href=\"#9-11泰国曼谷\" class=\"headerlink\" title=\"9.11泰国曼谷\"></a>9.11泰国曼谷</h3><p>曼谷酒店位置：<code>455/4 Maha Chai Road</code>, Bangkok, Krung Thep Maha Nakhon 10200, Thailand<br><img src=\"/2019/07/12/Thailand-Raiders/2.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/455.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/455-2.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/455-3.jpeg\" alt=\"\"></p>\n<p>廊曼国际机场T1航站楼 -&gt;曼谷酒店 <code>455/4 Maha Chai Road</code><br>淘宝下单接送机，或者携程下单（建议携程，航班延误可以2小时免费等）。<br>到酒店睡觉啦啦啦啦</p>\n<h4 id=\"9-11-10-00\"><a href=\"#9-11-10-00\" class=\"headerlink\" title=\"9.11 10:00\"></a>9.11 10:00</h4><p>浏览景点安排</p>\n<p>大皇宫   <code>3h  500泰铢 111.5￥</code> 长袖，长裙不能露膝盖<br>卧佛寺  <code>0.5h  200泰铢 44￥</code><br>坐船 3泰铢<br>郑王庙  <code>0.5h  30泰铢  7￥</code><br>考山路夜市吃吃吃 <code>2h</code> </p>\n<h3 id=\"9-12-泰国曼谷\"><a href=\"#9-12-泰国曼谷\" class=\"headerlink\" title=\"9.12 泰国曼谷\"></a>9.12 泰国曼谷</h3><p>退房<strong>（留小费）</strong></p>\n<p>酒店-&gt;汽车站<br>begin<br><img src=\"/2019/07/12/Thailand-Raiders/3.png\" alt=\"\"><br>1、步行到船站 船票单次<code>50🐷</code><br><img src=\"/2019/07/12/Thailand-Raiders/4.png\" alt=\"\"><br>2、坐船<br><img src=\"/2019/07/12/Thailand-Raiders/5.png\" alt=\"\"><br>3、下船后步行到BST车站<br><img src=\"/2019/07/12/Thailand-Raiders/6.png\" alt=\"\"><br>4、坐上BST，约8站到达Ekkamai ，2号出站口出站下楼梯再向后方走100m就到了<br>end</p>\n<p>汽车站买票：窗口正上方写着<code>Pattaya</code>就可以买票了约<code>108🐷</code>一位上下浮动 厕所<code>3🐷</code>一次<br>曼谷到芭提雅媒体7：00-20：00，每半小时一班车 <code>车程2h</code></p>\n<h3 id=\"9-12-芭提雅\"><a href=\"#9-12-芭提雅\" class=\"headerlink\" title=\"9.12 芭提雅\"></a>9.12 芭提雅</h3><p>酒店位置：88/999,Moo.10 Building B Room No.999, Pattayasaisong Rd, Muang Pattaya, Amphoe Bang Lamung, Chang Wat Chon Buri 20150</p>\n<h4 id=\"双条车\"><a href=\"#双条车\" class=\"headerlink\" title=\"双条车\"></a>双条车</h4><p>路线图<br><img src=\"/2019/07/12/Thailand-Raiders/10.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/11.png\" alt=\"\"><br>上车不要说话，说话会被误认为包车，10🐷/人</p>\n<h4 id=\"游玩路线\"><a href=\"#游玩路线\" class=\"headerlink\" title=\"游玩路线\"></a>游玩路线</h4><p>芭提雅车站在North Pattaya Road路 Bus Terminal<br>距酒店2.6公里，可以考虑步行<br><img src=\"/2019/07/12/Thailand-Raiders/7.png\" alt=\"\"></p>\n<p>东芭乐园 9：00-18：00 <code>800泰铢   178￥</code> 双条车<br><img src=\"/2019/07/12/Thailand-Raiders/8.png\" alt=\"\"></p>\n<p>四方水上市场 9：00-20：00<br><img src=\"/2019/07/12/Thailand-Raiders/9.png\" alt=\"\"></p>\n<p>蒂芬妮人妖秀  每天18：00、19：30、21：00共三场  <code>普通800🐷，vip1000🐷、金vip1200🐷   178￥</code> 双条车每人10🐷 或步行<br><img src=\"/2019/07/12/Thailand-Raiders/Tiffany.png\" alt=\"\"></p>\n<p>芭提雅海滩走一波 吃小吃</p>\n<h3 id=\"9-13芭提雅\"><a href=\"#9-13芭提雅\" class=\"headerlink\" title=\"9.13芭提雅\"></a>9.13芭提雅</h3><p>格兰岛一日游：网上跟团即可<br>海上滑翔、海底漫步、摩托艇、香蕉船、浮潜。</p>\n<h3 id=\"9-14芭提雅\"><a href=\"#9-14芭提雅\" class=\"headerlink\" title=\"9.14芭提雅\"></a>9.14芭提雅</h3><p>购物中心逛一逛</p>\n<p>到Bus Terminal汽车站买票回曼谷：窗口正上方写着<code>Ekkamai</code>，最晚班次晚上11点</p>\n<h3 id=\"9-14曼谷\"><a href=\"#9-14曼谷\" class=\"headerlink\" title=\"9.14曼谷\"></a>9.14曼谷</h3><p>曼谷酒店位置：Ratchaprarop Road Ratchaprarop Road indraCondo/177/209 soi saengkran/ratchprarop road, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand</p>\n<p><img src=\"/2019/07/12/Thailand-Raiders/WechatIMG38.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/WechatIMG39.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/WechatIMG40.png\" alt=\"\"></p>\n<h4 id=\"9-15天津\"><a href=\"#9-15天津\" class=\"headerlink\" title=\"9.15天津\"></a>9.15天津</h4><p>预约接机（提前两天预定）</p>\n<h2 id=\"泰国必买\"><a href=\"#泰国必买\" class=\"headerlink\" title=\"泰国必买\"></a>泰国必买</h2><p>BIG-C零食<br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-46-03-072_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-46-08-364_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-46-00-652_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-45-53-237_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-45-57-687_com.xingin.xhs.png\" alt=\"\"><br>711<br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-14-972_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-18-389_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-20-912_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-23-188_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-25-297_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-30-499_com.xingin.xhs.png\" alt=\"\"></p>\n<h3 id=\"必买药品\"><a href=\"#必买药品\" class=\"headerlink\" title=\"必买药品\"></a>必买药品</h3><p><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-13-11-50-782_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-13-11-56-133_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-13-12-27-105_com.xingin.xhs.png\" alt=\"\"></p>\n<h3 id=\"必买化妆品\"><a href=\"#必买化妆品\" class=\"headerlink\" title=\"必买化妆品\"></a>必买化妆品</h3><p>欧莱雅唇膏、小黑瓶<br>ONLY 小白瓶<br>N7冰激凌面膜</p>\n<h3 id=\"必逛\"><a href=\"#必逛\" class=\"headerlink\" title=\"必逛\"></a>必逛</h3><p>华歌尔内衣Wacoal（曼谷尚泰商圈和暹罗挨着central world 三/四楼）<br>Lee<br>LeVI’S（暹罗广场，国内五折）<br>everyandboy泰国本土美妆店<br>日本松本清（central world 三楼）<br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-14-05-58-003_com.xingin.xhs.png\" alt=\"\"></p>\n<h2 id=\"泰国机场退税取货\"><a href=\"#泰国机场退税取货\" class=\"headerlink\" title=\"泰国机场退税取货\"></a>泰国机场退税取货</h2><p><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-14-25-04-833_com.xingin.xhs.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"一、签证\"><a href=\"#一、签证\" class=\"headerlink\" title=\"一、签证\"></a>一、签证</h3><ul>\n<li><p>所需资料</p>\n<ol>\n<li>护照原件（无皮损，且有180天以上的有效期）</li>\n<li>往返泰国的机票</li>\n<li>携带20,000以上泰铢的现金或者等值货币（约3700-4000元人民币，汇率会有所波动，建议携带足够现金）过关时抽查，如没有携带足够的现金，有可能会被拒签或遣返。</li>\n<li>1张2寸白底彩色照片（如没有带照片。可现场拍照，额外拍照费用100泰铢）</li></ol></li></ul>","more":"\n\n\n<li><p>费用</p>\n<ol>\n<li>1000泰铢手续费（目前落地签免费）</li>\n<li>如没带照片，需现场拍照，加收100泰铢拍照费</li>\n<li>只收泰铢现多，旁有兑换点，但汇率比较低，建议办理落地签，提前在国内换好所需泰铢费用。(中国银行可预约兑换泰铢，汇率约为1：5，实时汇率请咨询银行）</li>\n</ol>\n</li>\n<li><p>落地签办理流程</p>\n<ol>\n<li>在机场按照指示牌找到“<code>Visa on Arrival</code>” （落地签）柜台</li>\n<li>填写落地签申请表（柜台上就发放有表格，以及填写示例，最好<code>提前打印</code>下来填好）</li>\n<li>递交资料（包括申请表、照片、护照、往返机票等），工作人员审核后给排队号</li>\n<li>等叫号，上交资料和手续费，工作人员在你的护照上盖上落地签的章，病提供泰文收据等</li>\n<li>走到“<code>For Visa-on-Arrival Only</code>”的柜台，入境官会再检查你的护照等资料，然后把出入境卡的入境部分撕掉，将出境卡盖章之后订在护照上，你就可以跨过边检柜台，正式进入泰国境内了</li>\n<li>落地签的有效期是15天，即你可以在泰国逗留不超过15天的时间</li>\n</ol>\n</li>\n\n<h2 id=\"9-10北京出发\"><a href=\"#9-10北京出发\" class=\"headerlink\" title=\"9.10北京出发\"></a>9.10北京出发</h2><p>北京南站-&gt;天津站： <code>C2077 20：50-21：20 二等座 54.5￥</code><br><img src=\"/2019/07/12/Thailand-Raiders/1.png\" alt=\"\"></p>\n<h3 id=\"天津\"><a href=\"#天津\" class=\"headerlink\" title=\"天津\"></a>天津</h3><p>天津站-&gt;天津滨海国际机场T1航站楼  地铁二号线 <code>45min</code> 约<code>3￥</code><br><img src=\"/2019/07/12/Thailand-Raiders/tianjin-airport.png\" alt=\"\"></p>\n<p>约10点到达机场</p>\n<p>天津滨海国际机场T1航站楼 -&gt;廊曼国际机场T1航站楼<br><code>SL963  23:50-03:35 +1 经济舱</code></p>\n<h3 id=\"9-11泰国曼谷\"><a href=\"#9-11泰国曼谷\" class=\"headerlink\" title=\"9.11泰国曼谷\"></a>9.11泰国曼谷</h3><p>曼谷酒店位置：<code>455/4 Maha Chai Road</code>, Bangkok, Krung Thep Maha Nakhon 10200, Thailand<br><img src=\"/2019/07/12/Thailand-Raiders/2.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/455.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/455-2.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/455-3.jpeg\" alt=\"\"></p>\n<p>廊曼国际机场T1航站楼 -&gt;曼谷酒店 <code>455/4 Maha Chai Road</code><br>淘宝下单接送机，或者携程下单（建议携程，航班延误可以2小时免费等）。<br>到酒店睡觉啦啦啦啦</p>\n<h4 id=\"9-11-10-00\"><a href=\"#9-11-10-00\" class=\"headerlink\" title=\"9.11 10:00\"></a>9.11 10:00</h4><p>浏览景点安排</p>\n<p>大皇宫   <code>3h  500泰铢 111.5￥</code> 长袖，长裙不能露膝盖<br>卧佛寺  <code>0.5h  200泰铢 44￥</code><br>坐船 3泰铢<br>郑王庙  <code>0.5h  30泰铢  7￥</code><br>考山路夜市吃吃吃 <code>2h</code> </p>\n<h3 id=\"9-12-泰国曼谷\"><a href=\"#9-12-泰国曼谷\" class=\"headerlink\" title=\"9.12 泰国曼谷\"></a>9.12 泰国曼谷</h3><p>退房<strong>（留小费）</strong></p>\n<p>酒店-&gt;汽车站<br>begin<br><img src=\"/2019/07/12/Thailand-Raiders/3.png\" alt=\"\"><br>1、步行到船站 船票单次<code>50🐷</code><br><img src=\"/2019/07/12/Thailand-Raiders/4.png\" alt=\"\"><br>2、坐船<br><img src=\"/2019/07/12/Thailand-Raiders/5.png\" alt=\"\"><br>3、下船后步行到BST车站<br><img src=\"/2019/07/12/Thailand-Raiders/6.png\" alt=\"\"><br>4、坐上BST，约8站到达Ekkamai ，2号出站口出站下楼梯再向后方走100m就到了<br>end</p>\n<p>汽车站买票：窗口正上方写着<code>Pattaya</code>就可以买票了约<code>108🐷</code>一位上下浮动 厕所<code>3🐷</code>一次<br>曼谷到芭提雅媒体7：00-20：00，每半小时一班车 <code>车程2h</code></p>\n<h3 id=\"9-12-芭提雅\"><a href=\"#9-12-芭提雅\" class=\"headerlink\" title=\"9.12 芭提雅\"></a>9.12 芭提雅</h3><p>酒店位置：88/999,Moo.10 Building B Room No.999, Pattayasaisong Rd, Muang Pattaya, Amphoe Bang Lamung, Chang Wat Chon Buri 20150</p>\n<h4 id=\"双条车\"><a href=\"#双条车\" class=\"headerlink\" title=\"双条车\"></a>双条车</h4><p>路线图<br><img src=\"/2019/07/12/Thailand-Raiders/10.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/11.png\" alt=\"\"><br>上车不要说话，说话会被误认为包车，10🐷/人</p>\n<h4 id=\"游玩路线\"><a href=\"#游玩路线\" class=\"headerlink\" title=\"游玩路线\"></a>游玩路线</h4><p>芭提雅车站在North Pattaya Road路 Bus Terminal<br>距酒店2.6公里，可以考虑步行<br><img src=\"/2019/07/12/Thailand-Raiders/7.png\" alt=\"\"></p>\n<p>东芭乐园 9：00-18：00 <code>800泰铢   178￥</code> 双条车<br><img src=\"/2019/07/12/Thailand-Raiders/8.png\" alt=\"\"></p>\n<p>四方水上市场 9：00-20：00<br><img src=\"/2019/07/12/Thailand-Raiders/9.png\" alt=\"\"></p>\n<p>蒂芬妮人妖秀  每天18：00、19：30、21：00共三场  <code>普通800🐷，vip1000🐷、金vip1200🐷   178￥</code> 双条车每人10🐷 或步行<br><img src=\"/2019/07/12/Thailand-Raiders/Tiffany.png\" alt=\"\"></p>\n<p>芭提雅海滩走一波 吃小吃</p>\n<h3 id=\"9-13芭提雅\"><a href=\"#9-13芭提雅\" class=\"headerlink\" title=\"9.13芭提雅\"></a>9.13芭提雅</h3><p>格兰岛一日游：网上跟团即可<br>海上滑翔、海底漫步、摩托艇、香蕉船、浮潜。</p>\n<h3 id=\"9-14芭提雅\"><a href=\"#9-14芭提雅\" class=\"headerlink\" title=\"9.14芭提雅\"></a>9.14芭提雅</h3><p>购物中心逛一逛</p>\n<p>到Bus Terminal汽车站买票回曼谷：窗口正上方写着<code>Ekkamai</code>，最晚班次晚上11点</p>\n<h3 id=\"9-14曼谷\"><a href=\"#9-14曼谷\" class=\"headerlink\" title=\"9.14曼谷\"></a>9.14曼谷</h3><p>曼谷酒店位置：Ratchaprarop Road Ratchaprarop Road indraCondo/177/209 soi saengkran/ratchprarop road, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand, Khet Ratchathewi, Krung Thep Maha Nakhon 10400, Thailand</p>\n<p><img src=\"/2019/07/12/Thailand-Raiders/WechatIMG38.jpeg\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/WechatIMG39.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/WechatIMG40.png\" alt=\"\"></p>\n<h4 id=\"9-15天津\"><a href=\"#9-15天津\" class=\"headerlink\" title=\"9.15天津\"></a>9.15天津</h4><p>预约接机（提前两天预定）</p>\n<h2 id=\"泰国必买\"><a href=\"#泰国必买\" class=\"headerlink\" title=\"泰国必买\"></a>泰国必买</h2><p>BIG-C零食<br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-46-03-072_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-46-08-364_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-46-00-652_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-45-53-237_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-11-45-57-687_com.xingin.xhs.png\" alt=\"\"><br>711<br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-14-972_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-18-389_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-20-912_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-23-188_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-25-297_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-12-05-30-499_com.xingin.xhs.png\" alt=\"\"></p>\n<h3 id=\"必买药品\"><a href=\"#必买药品\" class=\"headerlink\" title=\"必买药品\"></a>必买药品</h3><p><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-13-11-50-782_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-13-11-56-133_com.xingin.xhs.png\" alt=\"\"><br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-13-12-27-105_com.xingin.xhs.png\" alt=\"\"></p>\n<h3 id=\"必买化妆品\"><a href=\"#必买化妆品\" class=\"headerlink\" title=\"必买化妆品\"></a>必买化妆品</h3><p>欧莱雅唇膏、小黑瓶<br>ONLY 小白瓶<br>N7冰激凌面膜</p>\n<h3 id=\"必逛\"><a href=\"#必逛\" class=\"headerlink\" title=\"必逛\"></a>必逛</h3><p>华歌尔内衣Wacoal（曼谷尚泰商圈和暹罗挨着central world 三/四楼）<br>Lee<br>LeVI’S（暹罗广场，国内五折）<br>everyandboy泰国本土美妆店<br>日本松本清（central world 三楼）<br><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-14-05-58-003_com.xingin.xhs.png\" alt=\"\"></p>\n<h2 id=\"泰国机场退税取货\"><a href=\"#泰国机场退税取货\" class=\"headerlink\" title=\"泰国机场退税取货\"></a>泰国机场退税取货</h2><p><img src=\"/2019/07/12/Thailand-Raiders/Screenshot_2019-08-31-14-25-04-833_com.xingin.xhs.png\" alt=\"\"></p>"},{"title":"设计模式-观察者模式","date":"2019-12-13T11:39:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"## 认识观察者模式\n我们看看报纸和杂志的订阅是怎么回事:\n1. 报社的业务就是出版报纸。\n2. 向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。只要你是他们的订户，你就会一直收到新报纸。\n<!-- more -->\n3. 当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。\n4. 只要报社还在运营，就会一直有人(或单位)向他们订阅报 纸或取消订阅报纸。\n\n## 观察者模式\n出版者+订阅者=观察者模式\n出版者改称为“主题”(Subject)，订阅者改称为“观察者”(Observer)。\n观察者模式：定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。\n\n## 示例\n\n建立气象站：\n该气象站必须建立在WeatherData对象上，由WeatherData对象负责追踪目前的天气状况(温度、\n湿度、气压)。希望能建立一个应用，有三种布告板，分别显示目前的状况、气象统计及简单的预报。 \n当WeatherObject对象获得最新的测量数据时，三种布告板 必须实时更新。\n而且，这是一个可以扩展的气象站，Weather-O-Rama气象 站希望公布一组API，好让其他开发人员可以写出自己的气象布告板，并插入此应用中。\n![](Design-Pattern-Observer/1.png)\n\n```java\npublic interface Subject {\n    // 注册\n    public void registerObserver(Observer o);\n    // 移除\n    public void removeObserver(Observer o);\n    // 通知\n    public void notifyObservers();\n}\n```\n\n```java\npublic interface Observer {\n    public void update(float temp, float humidity, float pressure);\n}\n```\n\n```java\npublic interface DisplayElement {\n    // 显示布告板\n    public void display();\n}\n```\n\n```java\nimport java.util.ArrayList;\n\n\npublic class WeatherData implements Subject{\n    private ArrayList observers;\n    // 温度\n    private float temperature;\n    // 湿度\n    private float humidity;\n    // 气压\n    private float pressure;\n\n    public WeatherData() {\n        observers = new ArrayList();\n    }\n\n    @Override\n    public void registerObserver(Observer o) {\n        observers.add(o);\n    }\n\n    @Override\n    public void removeObserver(Observer o) {\n        int i = observers.indexOf(o);\n        if (i >= 0) {\n            observers.remove(i);\n        }\n    }\n\n    @Override\n    public void notifyObservers() {\n        for (int i = 0; i < observers.size(); i++) {\n            Observer observer = (Observer)observers.get(i);\n            observer.update(temperature, humidity, pressure);\n        }\n\n    }\n    // 当从气象站得到更新观测值时，我们通知观察者。\n    public void measurementsChanged() {\n        notifyObservers();\n    }\n\n    public void setMeasurements(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        measurementsChanged();\n    }\n\n    //其他方法省略\n}\n```\n布告板\n\n```java\n\npublic class CurrentConditionsDisplay implements Observer, DisplayElement{\n    private float temperature;\n\n    private float humidity;\n\n    private Subject weatherData;\n\n    public CurrentConditionsDisplay(Subject weatherData) {\n        this.weatherData = weatherData;\n        weatherData.registerObserver(this);\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Current conditions: \" + temperature + \"F degrees and \" + humidity + \"% humidity\");\n    }\n\n    @Override\n    public void update(float temp, float humidity, float pressure) {\n        this.temperature = temp;\n        this.humidity = humidity;\n        display();\n    }\n}\n```\n气象站测试类\n\n```java\npublic class WeatherStation {\n    public static void main(String[] args) {\n        WeatherData weatherData = new WeatherData();\n        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);\n//        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);\n//        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);\n        weatherData.setMeasurements(80, 65, 30.4f);\n        weatherData.setMeasurements(82, 70, 29.2f);\n        weatherData.setMeasurements(78, 90, 29.2f);\n    }\n}\n```\n\n运行结果\n\n```bash\nCurrent conditions: 80.0F degrees and 65.0% humidity\nCurrent conditions: 82.0F degrees and 70.0% humidity\nCurrent conditions: 78.0F degrees and 90.0% humidity\n```\n\n## JAVA内置的观察者模式\nJava API有内置的观察者模式。java.util包(package)内包含最基本的Observer接口与Observable类。\n![](Design-Pattern-Observer/2.png)\n\nObserver接口\n```java\npackage java.util;\n\npublic interface Observer {\n\n    void update(Observable o, Object arg);\n}\n\n```\n\nObservable类\n```java\n\npackage java.util;\n\npublic class Observable {\n    private boolean changed = false;// 数据更新标记\n    private Vector<Observer> obs; // 观察者列表\n\n    //构造函数\n    public Observable() {\n        obs = new Vector<>();\n    }\n    \n    //添加观察者\n    public synchronized void addObserver(Observer o) {\n        if (o == null)\n            throw new NullPointerException();\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    // 删除某一个观察者\n    public synchronized void deleteObserver(Observer o) {\n        obs.removeElement(o);\n    }\n\n    // 通知观察者\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n\n    // 如果changed = true 意味着数据被修改，通知每个观察者。\n    public void notifyObservers(Object arg) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n            if (!changed)\n                return;\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n    // 删除所有观察者\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n\n    // 设置changed值\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    // 清除changed值\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n\n    // 获取changed值\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n\n    // 返回观察者个数\n    public synchronized int countObservers() {\n        return obs.size();\n    }\n}\n\n```\n\n```java\nimport java.util.Observable;\n\npublic class WeatherData extends Observable {\n    // 温度\n    private float temperature;\n    // 湿度\n    private float humidity;\n    // 气压\n    private float pressure;\n\n    public WeatherData() {\n    }\n\n    // 当从气象站得到更新观测值时，我们通知观察者。\n    public void measurementsChanged() {\n        setChanged();\n        notifyObservers();\n    }\n\n    public void setMeasurements(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        measurementsChanged();\n    }\n\n    //使用“拉”的做法\n    public float getTemperature() {\n        return temperature;\n    }\n\n    public float getHumidity() {\n        return humidity;\n    }\n\n    public float getPressure() {\n        return pressure;\n    }\n\n    //其他方法省略\n}\n```\n\n```java\nimport java.util.Observable;\nimport java.util.Observer;\n\npublic class CurrentConditionsDisplay implements Observer, DisplayElement{\n    private float temperature;\n\n    private float humidity;\n\n    Observable observable;\n\n    public CurrentConditionsDisplay(Observable observable) {\n        this.observable = observable;\n        observable.addObserver(this);\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Current conditions: \" + temperature + \"F degrees and \" + humidity + \"% humidity\");\n    }\n\n\n    @Override\n    public void update(Observable o, Object arg) {\n        if (o instanceof WeatherData) {\n            WeatherData weatherData = (WeatherData)o;\n            this.temperature = weatherData.getTemperature();\n            this.humidity = weatherData.getHumidity();\n            display();\n        }\n    }\n}\n```\n\n测试代码和测试结果同上\n\n### java.util.Observable的缺点\njava.util.Observable的实现 有许多问题，限制了它的使用和复用。\n* 观察者是一个“类”而不是一个“接 口”\n    * 你必须设计一个类继承它。如果某类想同时 具有Observable类和另一个超类的行为，就会陷入两难，毕竟Java不支持多重继承。\n* Observable将关键的方法保护起来\n    * setChanged()方法被保护起来了(被定义成 protected)。这意味着:除非你继承自Observable，否则你无法创建Observable实例并组合到你自己的对象中来。这个设计违反了第二个设计原 则:“多用组合，少用继承”。\n\n## 要点\n* 观察者模式定义了对象之间一对多的关系。\n* 主题(也就是可观察者)用一个共同的接口来更新观察者。\n* 观察者和可观察者之间用松耦合方式结合(loosecoupl- ing)，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。\n* 使用此模式时，你可从被观察者处推(push)或拉(pull)数据(然而，推的方式被认为更“正确”)。\n* 有多个观察者时，不可以依赖特定的通知次序。\n* Java有多种观察者模式的实现，包括了通用的java.util.Observable。\n* 要注意java.util.Observable实现上所带来的一些问题。\n* 如果有必要的话，可以实现自己的Observable。\n* Swing大量使用观察者模式，许多GUI框架也是如此。\n* 此模式也被应用在许多地方，例如:JavaBeans、RMI。\n\n\n","source":"_posts/Design-Pattern-Observer.md","raw":"---\ntitle: 设计模式-观察者模式\ndate: 2019-12-13 19:39:04\ntags:\n    - 设计模式\ncategories: 设计模式\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n## 认识观察者模式\n我们看看报纸和杂志的订阅是怎么回事:\n1. 报社的业务就是出版报纸。\n2. 向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。只要你是他们的订户，你就会一直收到新报纸。\n<!-- more -->\n3. 当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。\n4. 只要报社还在运营，就会一直有人(或单位)向他们订阅报 纸或取消订阅报纸。\n\n## 观察者模式\n出版者+订阅者=观察者模式\n出版者改称为“主题”(Subject)，订阅者改称为“观察者”(Observer)。\n观察者模式：定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。\n\n## 示例\n\n建立气象站：\n该气象站必须建立在WeatherData对象上，由WeatherData对象负责追踪目前的天气状况(温度、\n湿度、气压)。希望能建立一个应用，有三种布告板，分别显示目前的状况、气象统计及简单的预报。 \n当WeatherObject对象获得最新的测量数据时，三种布告板 必须实时更新。\n而且，这是一个可以扩展的气象站，Weather-O-Rama气象 站希望公布一组API，好让其他开发人员可以写出自己的气象布告板，并插入此应用中。\n![](Design-Pattern-Observer/1.png)\n\n```java\npublic interface Subject {\n    // 注册\n    public void registerObserver(Observer o);\n    // 移除\n    public void removeObserver(Observer o);\n    // 通知\n    public void notifyObservers();\n}\n```\n\n```java\npublic interface Observer {\n    public void update(float temp, float humidity, float pressure);\n}\n```\n\n```java\npublic interface DisplayElement {\n    // 显示布告板\n    public void display();\n}\n```\n\n```java\nimport java.util.ArrayList;\n\n\npublic class WeatherData implements Subject{\n    private ArrayList observers;\n    // 温度\n    private float temperature;\n    // 湿度\n    private float humidity;\n    // 气压\n    private float pressure;\n\n    public WeatherData() {\n        observers = new ArrayList();\n    }\n\n    @Override\n    public void registerObserver(Observer o) {\n        observers.add(o);\n    }\n\n    @Override\n    public void removeObserver(Observer o) {\n        int i = observers.indexOf(o);\n        if (i >= 0) {\n            observers.remove(i);\n        }\n    }\n\n    @Override\n    public void notifyObservers() {\n        for (int i = 0; i < observers.size(); i++) {\n            Observer observer = (Observer)observers.get(i);\n            observer.update(temperature, humidity, pressure);\n        }\n\n    }\n    // 当从气象站得到更新观测值时，我们通知观察者。\n    public void measurementsChanged() {\n        notifyObservers();\n    }\n\n    public void setMeasurements(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        measurementsChanged();\n    }\n\n    //其他方法省略\n}\n```\n布告板\n\n```java\n\npublic class CurrentConditionsDisplay implements Observer, DisplayElement{\n    private float temperature;\n\n    private float humidity;\n\n    private Subject weatherData;\n\n    public CurrentConditionsDisplay(Subject weatherData) {\n        this.weatherData = weatherData;\n        weatherData.registerObserver(this);\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Current conditions: \" + temperature + \"F degrees and \" + humidity + \"% humidity\");\n    }\n\n    @Override\n    public void update(float temp, float humidity, float pressure) {\n        this.temperature = temp;\n        this.humidity = humidity;\n        display();\n    }\n}\n```\n气象站测试类\n\n```java\npublic class WeatherStation {\n    public static void main(String[] args) {\n        WeatherData weatherData = new WeatherData();\n        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);\n//        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);\n//        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);\n        weatherData.setMeasurements(80, 65, 30.4f);\n        weatherData.setMeasurements(82, 70, 29.2f);\n        weatherData.setMeasurements(78, 90, 29.2f);\n    }\n}\n```\n\n运行结果\n\n```bash\nCurrent conditions: 80.0F degrees and 65.0% humidity\nCurrent conditions: 82.0F degrees and 70.0% humidity\nCurrent conditions: 78.0F degrees and 90.0% humidity\n```\n\n## JAVA内置的观察者模式\nJava API有内置的观察者模式。java.util包(package)内包含最基本的Observer接口与Observable类。\n![](Design-Pattern-Observer/2.png)\n\nObserver接口\n```java\npackage java.util;\n\npublic interface Observer {\n\n    void update(Observable o, Object arg);\n}\n\n```\n\nObservable类\n```java\n\npackage java.util;\n\npublic class Observable {\n    private boolean changed = false;// 数据更新标记\n    private Vector<Observer> obs; // 观察者列表\n\n    //构造函数\n    public Observable() {\n        obs = new Vector<>();\n    }\n    \n    //添加观察者\n    public synchronized void addObserver(Observer o) {\n        if (o == null)\n            throw new NullPointerException();\n        if (!obs.contains(o)) {\n            obs.addElement(o);\n        }\n    }\n\n    // 删除某一个观察者\n    public synchronized void deleteObserver(Observer o) {\n        obs.removeElement(o);\n    }\n\n    // 通知观察者\n    public void notifyObservers() {\n        notifyObservers(null);\n    }\n\n    // 如果changed = true 意味着数据被修改，通知每个观察者。\n    public void notifyObservers(Object arg) {\n        Object[] arrLocal;\n\n        synchronized (this) {\n            if (!changed)\n                return;\n            arrLocal = obs.toArray();\n            clearChanged();\n        }\n\n        for (int i = arrLocal.length-1; i>=0; i--)\n            ((Observer)arrLocal[i]).update(this, arg);\n    }\n\n    // 删除所有观察者\n    public synchronized void deleteObservers() {\n        obs.removeAllElements();\n    }\n\n    // 设置changed值\n    protected synchronized void setChanged() {\n        changed = true;\n    }\n\n    // 清除changed值\n    protected synchronized void clearChanged() {\n        changed = false;\n    }\n\n    // 获取changed值\n    public synchronized boolean hasChanged() {\n        return changed;\n    }\n\n    // 返回观察者个数\n    public synchronized int countObservers() {\n        return obs.size();\n    }\n}\n\n```\n\n```java\nimport java.util.Observable;\n\npublic class WeatherData extends Observable {\n    // 温度\n    private float temperature;\n    // 湿度\n    private float humidity;\n    // 气压\n    private float pressure;\n\n    public WeatherData() {\n    }\n\n    // 当从气象站得到更新观测值时，我们通知观察者。\n    public void measurementsChanged() {\n        setChanged();\n        notifyObservers();\n    }\n\n    public void setMeasurements(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        measurementsChanged();\n    }\n\n    //使用“拉”的做法\n    public float getTemperature() {\n        return temperature;\n    }\n\n    public float getHumidity() {\n        return humidity;\n    }\n\n    public float getPressure() {\n        return pressure;\n    }\n\n    //其他方法省略\n}\n```\n\n```java\nimport java.util.Observable;\nimport java.util.Observer;\n\npublic class CurrentConditionsDisplay implements Observer, DisplayElement{\n    private float temperature;\n\n    private float humidity;\n\n    Observable observable;\n\n    public CurrentConditionsDisplay(Observable observable) {\n        this.observable = observable;\n        observable.addObserver(this);\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Current conditions: \" + temperature + \"F degrees and \" + humidity + \"% humidity\");\n    }\n\n\n    @Override\n    public void update(Observable o, Object arg) {\n        if (o instanceof WeatherData) {\n            WeatherData weatherData = (WeatherData)o;\n            this.temperature = weatherData.getTemperature();\n            this.humidity = weatherData.getHumidity();\n            display();\n        }\n    }\n}\n```\n\n测试代码和测试结果同上\n\n### java.util.Observable的缺点\njava.util.Observable的实现 有许多问题，限制了它的使用和复用。\n* 观察者是一个“类”而不是一个“接 口”\n    * 你必须设计一个类继承它。如果某类想同时 具有Observable类和另一个超类的行为，就会陷入两难，毕竟Java不支持多重继承。\n* Observable将关键的方法保护起来\n    * setChanged()方法被保护起来了(被定义成 protected)。这意味着:除非你继承自Observable，否则你无法创建Observable实例并组合到你自己的对象中来。这个设计违反了第二个设计原 则:“多用组合，少用继承”。\n\n## 要点\n* 观察者模式定义了对象之间一对多的关系。\n* 主题(也就是可观察者)用一个共同的接口来更新观察者。\n* 观察者和可观察者之间用松耦合方式结合(loosecoupl- ing)，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。\n* 使用此模式时，你可从被观察者处推(push)或拉(pull)数据(然而，推的方式被认为更“正确”)。\n* 有多个观察者时，不可以依赖特定的通知次序。\n* Java有多种观察者模式的实现，包括了通用的java.util.Observable。\n* 要注意java.util.Observable实现上所带来的一些问题。\n* 如果有必要的话，可以实现自己的Observable。\n* Swing大量使用观察者模式，许多GUI框架也是如此。\n* 此模式也被应用在许多地方，例如:JavaBeans、RMI。\n\n\n","slug":"Design-Pattern-Observer","published":1,"updated":"2019-12-13T11:12:58.271Z","layout":"post","photos":[],"link":"","_id":"ck4859y92003kt0fym8za61n9","content":"<h2 id=\"认识观察者模式\"><a href=\"#认识观察者模式\" class=\"headerlink\" title=\"认识观察者模式\"></a>认识观察者模式</h2><p>我们看看报纸和杂志的订阅是怎么回事:</p>\n<ol>\n<li>报社的业务就是出版报纸。</li>\n<li>向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。只要你是他们的订户，你就会一直收到新报纸。<a id=\"more\"></a></li>\n<li>当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。</li>\n<li>只要报社还在运营，就会一直有人(或单位)向他们订阅报 纸或取消订阅报纸。</li>\n</ol>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>出版者+订阅者=观察者模式<br>出版者改称为“主题”(Subject)，订阅者改称为“观察者”(Observer)。<br>观察者模式：定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>建立气象站：<br>该气象站必须建立在WeatherData对象上，由WeatherData对象负责追踪目前的天气状况(温度、<br>湿度、气压)。希望能建立一个应用，有三种布告板，分别显示目前的状况、气象统计及简单的预报。<br>当WeatherObject对象获得最新的测量数据时，三种布告板 必须实时更新。<br>而且，这是一个可以扩展的气象站，Weather-O-Rama气象 站希望公布一组API，好让其他开发人员可以写出自己的气象布告板，并插入此应用中。<br><img src=\"/2019/12/13/Design-Pattern-Observer/1.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 移除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 通知</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DisplayElement</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显示布告板</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeatherData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList observers;</span><br><span class=\"line\">    <span class=\"comment\">// 温度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"comment\">// 湿度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"comment\">// 气压</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeatherData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        observers = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        observers.add(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = observers.indexOf(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            observers.remove(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; observers.size(); i++) &#123;</span><br><span class=\"line\">            Observer observer = (Observer)observers.get(i);</span><br><span class=\"line\">            observer.update(temperature, humidity, pressure);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当从气象站得到更新观测值时，我们通知观察者。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> temperature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temperature = temperature;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//其他方法省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>布告板</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject weatherData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionsDisplay</span><span class=\"params\">(Subject weatherData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.weatherData = weatherData;</span><br><span class=\"line\">        weatherData.registerObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions: \"</span> + temperature + <span class=\"string\">\"F degrees and \"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temperature = temp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</span><br><span class=\"line\">        display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>气象站测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeatherStation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        WeatherData weatherData = <span class=\"keyword\">new</span> WeatherData();</span><br><span class=\"line\">        CurrentConditionsDisplay currentDisplay = <span class=\"keyword\">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class=\"line\"><span class=\"comment\">//        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);</span></span><br><span class=\"line\"><span class=\"comment\">//        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);</span></span><br><span class=\"line\">        weatherData.setMeasurements(<span class=\"number\">80</span>, <span class=\"number\">65</span>, <span class=\"number\">30.4f</span>);</span><br><span class=\"line\">        weatherData.setMeasurements(<span class=\"number\">82</span>, <span class=\"number\">70</span>, <span class=\"number\">29.2f</span>);</span><br><span class=\"line\">        weatherData.setMeasurements(<span class=\"number\">78</span>, <span class=\"number\">90</span>, <span class=\"number\">29.2f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current conditions: 80.0F degrees and 65.0% humidity</span><br><span class=\"line\">Current conditions: 82.0F degrees and 70.0% humidity</span><br><span class=\"line\">Current conditions: 78.0F degrees and 90.0% humidity</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JAVA内置的观察者模式\"><a href=\"#JAVA内置的观察者模式\" class=\"headerlink\" title=\"JAVA内置的观察者模式\"></a>JAVA内置的观察者模式</h2><p>Java API有内置的观察者模式。java.util包(package)内包含最基本的Observer接口与Observable类。<br><img src=\"/2019/12/13/Design-Pattern-Observer/2.png\" alt=\"\"></p>\n<p>Observer接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Observable类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;<span class=\"comment\">// 数据更新标记</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs; <span class=\"comment\">// 观察者列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//添加观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除某一个观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通知观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果changed = true 意味着数据被修改，通知每个观察者。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!changed)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">            ((Observer)arrLocal[i]).update(<span class=\"keyword\">this</span>, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除所有观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置changed值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清除changed值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取changed值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回观察者个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">countObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeatherData</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 温度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"comment\">// 湿度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"comment\">// 气压</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeatherData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当从气象站得到更新观测值时，我们通知观察者。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        setChanged();</span><br><span class=\"line\">        notifyObservers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> temperature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temperature = temperature;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用“拉”的做法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getTemperature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temperature;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getHumidity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> humidity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getPressure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pressure;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//其他方法省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\"></span><br><span class=\"line\">    Observable observable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionsDisplay</span><span class=\"params\">(Observable observable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observable = observable;</span><br><span class=\"line\">        observable.addObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions: \"</span> + temperature + <span class=\"string\">\"F degrees and \"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            WeatherData weatherData = (WeatherData)o;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.temperature = weatherData.getTemperature();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.humidity = weatherData.getHumidity();</span><br><span class=\"line\">            display();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码和测试结果同上</p>\n<h3 id=\"java-util-Observable的缺点\"><a href=\"#java-util-Observable的缺点\" class=\"headerlink\" title=\"java.util.Observable的缺点\"></a>java.util.Observable的缺点</h3><p>java.util.Observable的实现 有许多问题，限制了它的使用和复用。</p>\n<ul>\n<li>观察者是一个“类”而不是一个“接 口”<ul>\n<li>你必须设计一个类继承它。如果某类想同时 具有Observable类和另一个超类的行为，就会陷入两难，毕竟Java不支持多重继承。</li>\n</ul>\n</li>\n<li>Observable将关键的方法保护起来<ul>\n<li>setChanged()方法被保护起来了(被定义成 protected)。这意味着:除非你继承自Observable，否则你无法创建Observable实例并组合到你自己的对象中来。这个设计违反了第二个设计原 则:“多用组合，少用继承”。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>观察者模式定义了对象之间一对多的关系。</li>\n<li>主题(也就是可观察者)用一个共同的接口来更新观察者。</li>\n<li>观察者和可观察者之间用松耦合方式结合(loosecoupl- ing)，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。</li>\n<li>使用此模式时，你可从被观察者处推(push)或拉(pull)数据(然而，推的方式被认为更“正确”)。</li>\n<li>有多个观察者时，不可以依赖特定的通知次序。</li>\n<li>Java有多种观察者模式的实现，包括了通用的java.util.Observable。</li>\n<li>要注意java.util.Observable实现上所带来的一些问题。</li>\n<li>如果有必要的话，可以实现自己的Observable。</li>\n<li>Swing大量使用观察者模式，许多GUI框架也是如此。</li>\n<li>此模式也被应用在许多地方，例如:JavaBeans、RMI。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"认识观察者模式\"><a href=\"#认识观察者模式\" class=\"headerlink\" title=\"认识观察者模式\"></a>认识观察者模式</h2><p>我们看看报纸和杂志的订阅是怎么回事:</p>\n<ol>\n<li>报社的业务就是出版报纸。</li>\n<li>向某家报社订阅报纸，只要他们有新报纸出版，就会给你送来。只要你是他们的订户，你就会一直收到新报纸。</li></ol>","more":"\n<li>当你不想再看报纸的时候，取消订阅，他们就不会再送新报纸来。</li>\n<li>只要报社还在运营，就会一直有人(或单位)向他们订阅报 纸或取消订阅报纸。</li>\n\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p>出版者+订阅者=观察者模式<br>出版者改称为“主题”(Subject)，订阅者改称为“观察者”(Observer)。<br>观察者模式：定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>建立气象站：<br>该气象站必须建立在WeatherData对象上，由WeatherData对象负责追踪目前的天气状况(温度、<br>湿度、气压)。希望能建立一个应用，有三种布告板，分别显示目前的状况、气象统计及简单的预报。<br>当WeatherObject对象获得最新的测量数据时，三种布告板 必须实时更新。<br>而且，这是一个可以扩展的气象站，Weather-O-Rama气象 站希望公布一组API，好让其他开发人员可以写出自己的气象布告板，并插入此应用中。<br><img src=\"/2019/12/13/Design-Pattern-Observer/1.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 移除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 通知</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DisplayElement</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显示布告板</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeatherData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList observers;</span><br><span class=\"line\">    <span class=\"comment\">// 温度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"comment\">// 湿度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"comment\">// 气压</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeatherData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        observers = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        observers.add(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = observers.indexOf(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            observers.remove(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; observers.size(); i++) &#123;</span><br><span class=\"line\">            Observer observer = (Observer)observers.get(i);</span><br><span class=\"line\">            observer.update(temperature, humidity, pressure);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当从气象站得到更新观测值时，我们通知观察者。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> temperature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temperature = temperature;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//其他方法省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>布告板</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Subject weatherData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionsDisplay</span><span class=\"params\">(Subject weatherData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.weatherData = weatherData;</span><br><span class=\"line\">        weatherData.registerObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions: \"</span> + temperature + <span class=\"string\">\"F degrees and \"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temperature = temp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</span><br><span class=\"line\">        display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>气象站测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeatherStation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        WeatherData weatherData = <span class=\"keyword\">new</span> WeatherData();</span><br><span class=\"line\">        CurrentConditionsDisplay currentDisplay = <span class=\"keyword\">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class=\"line\"><span class=\"comment\">//        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);</span></span><br><span class=\"line\"><span class=\"comment\">//        ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);</span></span><br><span class=\"line\">        weatherData.setMeasurements(<span class=\"number\">80</span>, <span class=\"number\">65</span>, <span class=\"number\">30.4f</span>);</span><br><span class=\"line\">        weatherData.setMeasurements(<span class=\"number\">82</span>, <span class=\"number\">70</span>, <span class=\"number\">29.2f</span>);</span><br><span class=\"line\">        weatherData.setMeasurements(<span class=\"number\">78</span>, <span class=\"number\">90</span>, <span class=\"number\">29.2f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current conditions: 80.0F degrees and 65.0% humidity</span><br><span class=\"line\">Current conditions: 82.0F degrees and 70.0% humidity</span><br><span class=\"line\">Current conditions: 78.0F degrees and 90.0% humidity</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JAVA内置的观察者模式\"><a href=\"#JAVA内置的观察者模式\" class=\"headerlink\" title=\"JAVA内置的观察者模式\"></a>JAVA内置的观察者模式</h2><p>Java API有内置的观察者模式。java.util包(package)内包含最基本的Observer接口与Observable类。<br><img src=\"/2019/12/13/Design-Pattern-Observer/2.png\" alt=\"\"></p>\n<p>Observer接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Observable类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> java.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> changed = <span class=\"keyword\">false</span>;<span class=\"comment\">// 数据更新标记</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Observer&gt; obs; <span class=\"comment\">// 观察者列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Observable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs = <span class=\"keyword\">new</span> Vector&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//添加观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obs.contains(o)) &#123;</span><br><span class=\"line\">            obs.addElement(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除某一个观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</span><br><span class=\"line\">        obs.removeElement(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通知观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        notifyObservers(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果changed = true 意味着数据被修改，通知每个观察者。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">(Object arg)</span> </span>&#123;</span><br><span class=\"line\">        Object[] arrLocal;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!changed)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            arrLocal = obs.toArray();</span><br><span class=\"line\">            clearChanged();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arrLocal.length-<span class=\"number\">1</span>; i&gt;=<span class=\"number\">0</span>; i--)</span><br><span class=\"line\">            ((Observer)arrLocal[i]).update(<span class=\"keyword\">this</span>, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除所有观察者</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        obs.removeAllElements();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置changed值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 清除changed值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        changed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取changed值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> changed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回观察者个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">countObservers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obs.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeatherData</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 温度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"comment\">// 湿度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"comment\">// 气压</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeatherData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当从气象站得到更新观测值时，我们通知观察者。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        setChanged();</span><br><span class=\"line\">        notifyObservers();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> temperature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temperature = temperature;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</span><br><span class=\"line\">        measurementsChanged();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用“拉”的做法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getTemperature</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temperature;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getHumidity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> humidity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">getPressure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pressure;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//其他方法省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Observer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionsDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\"></span><br><span class=\"line\">    Observable observable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionsDisplay</span><span class=\"params\">(Observable observable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.observable = observable;</span><br><span class=\"line\">        observable.addObserver(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions: \"</span> + temperature + <span class=\"string\">\"F degrees and \"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Observable o, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o <span class=\"keyword\">instanceof</span> WeatherData) &#123;</span><br><span class=\"line\">            WeatherData weatherData = (WeatherData)o;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.temperature = weatherData.getTemperature();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.humidity = weatherData.getHumidity();</span><br><span class=\"line\">            display();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试代码和测试结果同上</p>\n<h3 id=\"java-util-Observable的缺点\"><a href=\"#java-util-Observable的缺点\" class=\"headerlink\" title=\"java.util.Observable的缺点\"></a>java.util.Observable的缺点</h3><p>java.util.Observable的实现 有许多问题，限制了它的使用和复用。</p>\n<ul>\n<li>观察者是一个“类”而不是一个“接 口”<ul>\n<li>你必须设计一个类继承它。如果某类想同时 具有Observable类和另一个超类的行为，就会陷入两难，毕竟Java不支持多重继承。</li>\n</ul>\n</li>\n<li>Observable将关键的方法保护起来<ul>\n<li>setChanged()方法被保护起来了(被定义成 protected)。这意味着:除非你继承自Observable，否则你无法创建Observable实例并组合到你自己的对象中来。这个设计违反了第二个设计原 则:“多用组合，少用继承”。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ul>\n<li>观察者模式定义了对象之间一对多的关系。</li>\n<li>主题(也就是可观察者)用一个共同的接口来更新观察者。</li>\n<li>观察者和可观察者之间用松耦合方式结合(loosecoupl- ing)，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。</li>\n<li>使用此模式时，你可从被观察者处推(push)或拉(pull)数据(然而，推的方式被认为更“正确”)。</li>\n<li>有多个观察者时，不可以依赖特定的通知次序。</li>\n<li>Java有多种观察者模式的实现，包括了通用的java.util.Observable。</li>\n<li>要注意java.util.Observable实现上所带来的一些问题。</li>\n<li>如果有必要的话，可以实现自己的Observable。</li>\n<li>Swing大量使用观察者模式，许多GUI框架也是如此。</li>\n<li>此模式也被应用在许多地方，例如:JavaBeans、RMI。</li>\n</ul>"},{"title":"Mac下利用Github Pages快速搭建免费博客","date":"2019-01-30T11:30:04.000Z","author":"Guyuqing","copyright":true,"comments":1,"_content":"本博客利用Hexo + Next + GitHubPages 搭建博客。\n\n## 准备工作\n\n### 安装node.js\n\n``` bash\n$ brew install node\n```\n\n### 安装 git\n\n``` bash\n$ brew install git\n```\n<!-- more -->\n\n### 安装yarn\n\n``` bash\n$ npm install yarn\n```\n\n如果安装失败用\n\n``` bash\n$ brew install yarn\n```\n\n### 安装hexo\n\n进入你的项目目录，举个例子我的目录是blog\n\n``` bash\n$ cd blog\n```\n\n然后用 yarn 安装 hexo\n\n``` bash\n$ yarn add hexo -S\n```\n\n如果安装失败用\n\n``` bash\n$ npm install hexo-cli -g\n$ npm install hexo-server --save\n```\n详细可见[官方文档](https://hexo.io/zh-cn/docs/)\n\n## 搭建本地博客\n\n### 项目初始化\n\n进入你的项目目录,初始化hexo\n\n``` bash\n$ cd blog\n$ hexo init\n```\n### 安装依赖\n\n``` bash\n$ yarn install\n```\n### 启动本地服务\n\n``` bash\n$ hexo server\n```\n在浏览器输入 `localhost:4000` 即可\n\n## 关联 GitHub\n### 创建项目\n\n![创建项目](Github-Pages-Blog/create-project.png)\n\n项目名称一定一定是 `[用户名].github.io`\n![创建项目](Github-Pages-Blog/create-repository.png)\n\n### 设置\n\n![设置](Github-Pages-Blog/setting.png)\n\n在设置中找到GitHub Pages ，分支选择master，点击choose a theme\n\n![设置github-pages](Github-Pages-Blog/github-pages.png)\n\n选择喜欢的主题，点击select theme即可\n![选择主题](Github-Pages-Blog/select-theme.png)\n\n到这里就可以访问你的主页啦  `https://[用户名].github.io/`,接下来复制你的项目链接\n\n![复制项目链接](Github-Pages-Blog/copy-url.png)\n\n到你的本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n![hexo设置git](Github-Pages-Blog/deploy-position.png)\n\n### 站点配置\n站点配置包括修改博客名称，描述，作者等等，建议直接查看[官方教程](https://hexo.io/zh-cn/docs/configuration)\n\n### 关联\n\n安装 hexo-deployer-git 插件\n``` bash\n$ yarn add hexo-deployer-git -S\n```\n如果失败的话尝试下面的方法\n``` bash\n$ npm install --save hexo-deployer-git\n```\n在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo\n``` bash\n$  hexo d -g\n```\n这时访问你的github主页`https://[用户名].github.io/`就可以啦\n\n## NexT主题配置\nNexT 是一个高质量并且优雅的Hexo 主题。\n详细可见[官方文档](https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md)\n\n### 安装NexT主题\n在你的项目文件夹下，执行以下命令，安装NexT主题\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n更改项目根目录下`_config.yml` 文件，如下\n![更改主题](Github-Pages-Blog/change-theme.png)\n\n重新生成本地文件并推送到github\n``` bash\n$  hexo d -g\n```\n访问你的github主页`https://[用户名].github.io/`就可以看到啦\n\n### 主题配置\n\n`themes/next`文件夹下的`_config.yml`是主题的配置文件\nnext内置了4种主题方案，选择你喜欢的方案解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\nMenu Settings是控制图中菜单的位置，根据需要解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\nmenu:\n  home: / || home\n#  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n#  archives: /archives/ || archive\n#  schedule: /schedule/ || calendar\n#  sitemap: /sitemap.xml || sitemap\n#  commonweal: /404.html || heartbeat\n```\n![更改菜单](Github-Pages-Blog/blog-icon.png)\n还有很多很多的配置请参考[官方教程](http://theme-next.iissnan.com/getting-started.html#install-next-theme),[主题个性配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html),[主题美化](http://yearito.cn/posts/hexo-theme-beautify.html)\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n也可以在本地启动服务器，在浏览器输入 `localhost:4000` 观看效果\n``` bash\n$ hexo server\n```\n## 创建文章\n\n### 添加【标签】页面\n\n新建标签页面\n``` bash\n$ hexo new page tags\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: tags\ntype: \"tags\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `tags: /tags/ || tags` 这行注释\n新建测试文章\n``` bash\n$ hexo new 'test'\n```\n在测试文章的头部添加tags信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。\n![标签](Github-Pages-Blog/tags.png)\n\n### 添加【分类】页面\n新建标签页面\n``` bash\n$ hexo new page categories\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `categories: /categories/ || th` 这行注释\n在测试文章的头部添加categories信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\ncategories: Testing\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。\n![分类](Github-Pages-Blog/categories.png)\n\n### 给博客添加图片\n在项目目录下执行\n\n``` bash\n$ npm install hexo-asset-image --save\n```\n\n在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹\n``` bash\n$ hexo new '文章名'\n```\n将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：\n``` markdown\n ![文字](xxxx/图片名.jpg)\n```\n文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n### 添加Valine评论系统\n\n首先需要去注册一个[Leancloud](https://leancloud.cn/)账号,验证邮箱\n然后随便创建一个应用，按如图所示找到`appid`，`appkey`\n![评论](Github-Pages-Blog/valine.png)\n\n按下图修改`themes/next`文件夹下的`_config.yml`主题配置文件，重新启动服务器就可以啦\n``` yaml\n # Valine.\n # You can get your appid and appkey from https://leancloud.cn\n # more info please open https://valine.js.org\n valine:\n   enable: true\n   appid: your appid  # your leancloud application appid\n   appkey: your appkey # your leancloud application appkey\n   notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n   verify: false # Verification code\n   placeholder: 描述  # comment box placeholder\n   avatar: monsterid # gravatar style\n   guest_info: nick,mail # custom comment header\n   pageSize: 10 # pagination size\n```\n如果要删除评论请到[Leancloud](https://leancloud.cn/)里删除哦\n![删除评论](Github-Pages-Blog/comment-delete.png)\n\n### hexo添加多作者\n在项目目录下执行\n\n``` bash\n$ npm install hexo-generator-author --save\n```\n\n在文章的头部添加author信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\nauthor: Alice\n```\n\n修改/layout/_macro/下的post.swig文件 +为新添加的行\n```swig\n         <div class=\"post-meta\">\n+          <span itemprop=\"about\" itemscope itemtype=\"https://schema.org/Thing\">\n+            <a href=\"/authors/{{ post.author }}\" itemprop=\"url\" rel=\"index\">\n+              <span itemprop=\"name\">{{ post.author }}</span>\n+            </a>\n+          </span>\n           <span class=\"post-time\">\n             <span class=\"post-meta-item-icon\">\n               <i class=\"fa fa-calendar-o\"></i>\n\n```\n在/layout下新创建author.swig文件\n```swig\n\n{% extends '_layout.swig' %}\n{% import '_macro/post-collapse.swig' as post_template %}\n{% import '_macro/sidebar.swig' as sidebar_template %}\n\n{% block title %} {{ __('title.author') }}: {{ page.author }} | {{ config.title }} {% endblock %}\n\n{% block content %}\n\n  <div class=\"post-block category\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n\n        <{% if theme.seo %}h2{% else %}h1{% endif %}>{#\n        #}{{ page.author }}{#\n        #}<small>{{  __('title.author')  }}</small>\n        </{% if theme.seo %}h2{% else %}h1{% endif %}>\n      </div>\n\n      {% for post in page.posts %}\n        {{ post_template.render(post) }}\n      {% endfor %}\n    </div>\n\n  </div>\n\n  {% include '_partials/pagination.swig' %}\n\n{% endblock %}\n\n{% block sidebar %}\n  {{ sidebar_template.render(false) }}\n{% endblock %}\n\n```\n\n修改/layout下page.swig文件\n```swig\n\n     {{ __('title.category') + page_title_suffix }}\n   {% elif page.type === \"tags\" %}\n     {{ __('title.tag') + page_title_suffix }}\n+  {% elif page.type === \"authors\" %}\n+    {{ __('title.author') + page_title_suffix }}\n   {% else %}\n     {{ page.title + page_title_suffix }}\n   {% endif %}\n\n。。。。。。。\n           {{ list_categories() }}\n         </div>\n       </div>\n+    {% elif page.type === 'authors' %}\n+      <div class=\"author-all-page\">\n+        <div class=\"author-all-title\">\n+            {{ _p('counter.authors', site.authors.length) }}\n+        </div>\n+        <div class=\"author-all\">\n+          {{ list_authors() }}\n+        </div>\n+      </div>\n     {% else %}\n       {{ page.content }}\n     {% endif %}\n```\n修改{项目名称}/themes/next下zh-Hans.yml文件\n```yml\ntitle:\n  archive: 归档\n  category: 分类\n  tag: 标签\n  schedule: 日程表\n  author : 作者\n  \n。。。\n\ncounter:\n\n  authors:\n    zero: 暂无分类\n    one: 目前共计 1 个分类\n    other: \"目前共计 %d 个作者\"\n\n```\n\n在{项目名称}/themes/next/source/css/_common/components/pages/添加authors.styl，复制categories.styl内容将categorie改成author\n\n在同级文件pages.styl中添加@import \"authors\";\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n\n###博文压缩\n```bash\n$ npm install gulp -g\n$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save\n```\n在项目根目录下创建`gulpfile.js`并填入以下内容：\n```js\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n    .pipe(htmlclean())\n    .pipe(htmlmin({\n         removeComments: true,\n         minifyJS: true,\n         minifyCSS: true,\n         minifyURLs: true,\n    }))\n    .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html','minify-css','minify-js'\n]);\n```\n\n生成博文是执行 hexo g && gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。","source":"_posts/Github-Pages-Blog.md","raw":"---\ntitle: Mac下利用Github Pages快速搭建免费博客\ndate: 2019-01-30 19:30:04\ntags:\n    - github\n    - hexo\n    - 教程\n    - blog\ncategories: blog\nauthor: Guyuqing\ncopyright: true\ncomments: true\n---\n本博客利用Hexo + Next + GitHubPages 搭建博客。\n\n## 准备工作\n\n### 安装node.js\n\n``` bash\n$ brew install node\n```\n\n### 安装 git\n\n``` bash\n$ brew install git\n```\n<!-- more -->\n\n### 安装yarn\n\n``` bash\n$ npm install yarn\n```\n\n如果安装失败用\n\n``` bash\n$ brew install yarn\n```\n\n### 安装hexo\n\n进入你的项目目录，举个例子我的目录是blog\n\n``` bash\n$ cd blog\n```\n\n然后用 yarn 安装 hexo\n\n``` bash\n$ yarn add hexo -S\n```\n\n如果安装失败用\n\n``` bash\n$ npm install hexo-cli -g\n$ npm install hexo-server --save\n```\n详细可见[官方文档](https://hexo.io/zh-cn/docs/)\n\n## 搭建本地博客\n\n### 项目初始化\n\n进入你的项目目录,初始化hexo\n\n``` bash\n$ cd blog\n$ hexo init\n```\n### 安装依赖\n\n``` bash\n$ yarn install\n```\n### 启动本地服务\n\n``` bash\n$ hexo server\n```\n在浏览器输入 `localhost:4000` 即可\n\n## 关联 GitHub\n### 创建项目\n\n![创建项目](Github-Pages-Blog/create-project.png)\n\n项目名称一定一定是 `[用户名].github.io`\n![创建项目](Github-Pages-Blog/create-repository.png)\n\n### 设置\n\n![设置](Github-Pages-Blog/setting.png)\n\n在设置中找到GitHub Pages ，分支选择master，点击choose a theme\n\n![设置github-pages](Github-Pages-Blog/github-pages.png)\n\n选择喜欢的主题，点击select theme即可\n![选择主题](Github-Pages-Blog/select-theme.png)\n\n到这里就可以访问你的主页啦  `https://[用户名].github.io/`,接下来复制你的项目链接\n\n![复制项目链接](Github-Pages-Blog/copy-url.png)\n\n到你的本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n![hexo设置git](Github-Pages-Blog/deploy-position.png)\n\n### 站点配置\n站点配置包括修改博客名称，描述，作者等等，建议直接查看[官方教程](https://hexo.io/zh-cn/docs/configuration)\n\n### 关联\n\n安装 hexo-deployer-git 插件\n``` bash\n$ yarn add hexo-deployer-git -S\n```\n如果失败的话尝试下面的方法\n``` bash\n$ npm install --save hexo-deployer-git\n```\n在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo\n``` bash\n$  hexo d -g\n```\n这时访问你的github主页`https://[用户名].github.io/`就可以啦\n\n## NexT主题配置\nNexT 是一个高质量并且优雅的Hexo 主题。\n详细可见[官方文档](https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md)\n\n### 安装NexT主题\n在你的项目文件夹下，执行以下命令，安装NexT主题\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n更改项目根目录下`_config.yml` 文件，如下\n![更改主题](Github-Pages-Blog/change-theme.png)\n\n重新生成本地文件并推送到github\n``` bash\n$  hexo d -g\n```\n访问你的github主页`https://[用户名].github.io/`就可以看到啦\n\n### 主题配置\n\n`themes/next`文件夹下的`_config.yml`是主题的配置文件\nnext内置了4种主题方案，选择你喜欢的方案解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\nMenu Settings是控制图中菜单的位置，根据需要解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\nmenu:\n  home: / || home\n#  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n#  archives: /archives/ || archive\n#  schedule: /schedule/ || calendar\n#  sitemap: /sitemap.xml || sitemap\n#  commonweal: /404.html || heartbeat\n```\n![更改菜单](Github-Pages-Blog/blog-icon.png)\n还有很多很多的配置请参考[官方教程](http://theme-next.iissnan.com/getting-started.html#install-next-theme),[主题个性配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html),[主题美化](http://yearito.cn/posts/hexo-theme-beautify.html)\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n也可以在本地启动服务器，在浏览器输入 `localhost:4000` 观看效果\n``` bash\n$ hexo server\n```\n## 创建文章\n\n### 添加【标签】页面\n\n新建标签页面\n``` bash\n$ hexo new page tags\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: tags\ntype: \"tags\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `tags: /tags/ || tags` 这行注释\n新建测试文章\n``` bash\n$ hexo new 'test'\n```\n在测试文章的头部添加tags信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。\n![标签](Github-Pages-Blog/tags.png)\n\n### 添加【分类】页面\n新建标签页面\n``` bash\n$ hexo new page categories\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `categories: /categories/ || th` 这行注释\n在测试文章的头部添加categories信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\ncategories: Testing\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。\n![分类](Github-Pages-Blog/categories.png)\n\n### 给博客添加图片\n在项目目录下执行\n\n``` bash\n$ npm install hexo-asset-image --save\n```\n\n在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹\n``` bash\n$ hexo new '文章名'\n```\n将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：\n``` markdown\n ![文字](xxxx/图片名.jpg)\n```\n文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n### 添加Valine评论系统\n\n首先需要去注册一个[Leancloud](https://leancloud.cn/)账号,验证邮箱\n然后随便创建一个应用，按如图所示找到`appid`，`appkey`\n![评论](Github-Pages-Blog/valine.png)\n\n按下图修改`themes/next`文件夹下的`_config.yml`主题配置文件，重新启动服务器就可以啦\n``` yaml\n # Valine.\n # You can get your appid and appkey from https://leancloud.cn\n # more info please open https://valine.js.org\n valine:\n   enable: true\n   appid: your appid  # your leancloud application appid\n   appkey: your appkey # your leancloud application appkey\n   notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n   verify: false # Verification code\n   placeholder: 描述  # comment box placeholder\n   avatar: monsterid # gravatar style\n   guest_info: nick,mail # custom comment header\n   pageSize: 10 # pagination size\n```\n如果要删除评论请到[Leancloud](https://leancloud.cn/)里删除哦\n![删除评论](Github-Pages-Blog/comment-delete.png)\n\n### hexo添加多作者\n在项目目录下执行\n\n``` bash\n$ npm install hexo-generator-author --save\n```\n\n在文章的头部添加author信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\nauthor: Alice\n```\n\n修改/layout/_macro/下的post.swig文件 +为新添加的行\n```swig\n         <div class=\"post-meta\">\n+          <span itemprop=\"about\" itemscope itemtype=\"https://schema.org/Thing\">\n+            <a href=\"/authors/{{ post.author }}\" itemprop=\"url\" rel=\"index\">\n+              <span itemprop=\"name\">{{ post.author }}</span>\n+            </a>\n+          </span>\n           <span class=\"post-time\">\n             <span class=\"post-meta-item-icon\">\n               <i class=\"fa fa-calendar-o\"></i>\n\n```\n在/layout下新创建author.swig文件\n```swig\n\n{% extends '_layout.swig' %}\n{% import '_macro/post-collapse.swig' as post_template %}\n{% import '_macro/sidebar.swig' as sidebar_template %}\n\n{% block title %} {{ __('title.author') }}: {{ page.author }} | {{ config.title }} {% endblock %}\n\n{% block content %}\n\n  <div class=\"post-block category\">\n\n    <div id=\"posts\" class=\"posts-collapse\">\n      <div class=\"collection-title\">\n\n        <{% if theme.seo %}h2{% else %}h1{% endif %}>{#\n        #}{{ page.author }}{#\n        #}<small>{{  __('title.author')  }}</small>\n        </{% if theme.seo %}h2{% else %}h1{% endif %}>\n      </div>\n\n      {% for post in page.posts %}\n        {{ post_template.render(post) }}\n      {% endfor %}\n    </div>\n\n  </div>\n\n  {% include '_partials/pagination.swig' %}\n\n{% endblock %}\n\n{% block sidebar %}\n  {{ sidebar_template.render(false) }}\n{% endblock %}\n\n```\n\n修改/layout下page.swig文件\n```swig\n\n     {{ __('title.category') + page_title_suffix }}\n   {% elif page.type === \"tags\" %}\n     {{ __('title.tag') + page_title_suffix }}\n+  {% elif page.type === \"authors\" %}\n+    {{ __('title.author') + page_title_suffix }}\n   {% else %}\n     {{ page.title + page_title_suffix }}\n   {% endif %}\n\n。。。。。。。\n           {{ list_categories() }}\n         </div>\n       </div>\n+    {% elif page.type === 'authors' %}\n+      <div class=\"author-all-page\">\n+        <div class=\"author-all-title\">\n+            {{ _p('counter.authors', site.authors.length) }}\n+        </div>\n+        <div class=\"author-all\">\n+          {{ list_authors() }}\n+        </div>\n+      </div>\n     {% else %}\n       {{ page.content }}\n     {% endif %}\n```\n修改{项目名称}/themes/next下zh-Hans.yml文件\n```yml\ntitle:\n  archive: 归档\n  category: 分类\n  tag: 标签\n  schedule: 日程表\n  author : 作者\n  \n。。。\n\ncounter:\n\n  authors:\n    zero: 暂无分类\n    one: 目前共计 1 个分类\n    other: \"目前共计 %d 个作者\"\n\n```\n\n在{项目名称}/themes/next/source/css/_common/components/pages/添加authors.styl，复制categories.styl内容将categorie改成author\n\n在同级文件pages.styl中添加@import \"authors\";\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n\n###博文压缩\n```bash\n$ npm install gulp -g\n$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save\n```\n在项目根目录下创建`gulpfile.js`并填入以下内容：\n```js\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n    .pipe(htmlclean())\n    .pipe(htmlmin({\n         removeComments: true,\n         minifyJS: true,\n         minifyCSS: true,\n         minifyURLs: true,\n    }))\n    .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 执行 gulp 命令时执行的任务\ngulp.task('default', [\n    'minify-html','minify-css','minify-js'\n]);\n```\n\n生成博文是执行 hexo g && gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。","slug":"Github-Pages-Blog","published":1,"updated":"2019-07-30T11:37:16.785Z","layout":"post","photos":[],"link":"","_id":"ck4859y93003lt0fyvlndcm24","content":"<p>本博客利用Hexo + Next + GitHubPages 搭建博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install git</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"安装yarn\"><a href=\"#安装yarn\" class=\"headerlink\" title=\"安装yarn\"></a>安装yarn</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yarn</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>进入你的项目目录，举个例子我的目录是blog</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n\n<p>然后用 yarn 安装 hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo -S</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<p>详细可见<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"搭建本地博客\"><a href=\"#搭建本地博客\" class=\"headerlink\" title=\"搭建本地博客\"></a>搭建本地博客</h2><h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><p>进入你的项目目录,初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器输入 <code>localhost:4000</code> 即可</p>\n<h2 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/create-project.png\" alt=\"创建项目\"></p>\n<p>项目名称一定一定是 <code>[用户名].github.io</code><br><img src=\"/2019/01/30/Github-Pages-Blog/create-repository.png\" alt=\"创建项目\"></p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/setting.png\" alt=\"设置\"></p>\n<p>在设置中找到GitHub Pages ，分支选择master，点击choose a theme</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/github-pages.png\" alt=\"设置github-pages\"></p>\n<p>选择喜欢的主题，点击select theme即可<br><img src=\"/2019/01/30/Github-Pages-Blog/select-theme.png\" alt=\"选择主题\"></p>\n<p>到这里就可以访问你的主页啦  <code>https://[用户名].github.io/</code>,接下来复制你的项目链接</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/copy-url.png\" alt=\"复制项目链接\"></p>\n<p>到你的本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/deploy-position.png\" alt=\"hexo设置git\"></p>\n<h3 id=\"站点配置\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置</h3><p>站点配置包括修改博客名称，描述，作者等等，建议直接查看<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>安装 hexo-deployer-git 插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git -S</span><br></pre></td></tr></table></figure>\n\n<p>如果失败的话尝试下面的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<p>在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>这时访问你的github主页<code>https://[用户名].github.io/</code>就可以啦</p>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><p>NexT 是一个高质量并且优雅的Hexo 主题。<br>详细可见<a href=\"https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在你的项目文件夹下，执行以下命令，安装NexT主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>\n\n<p>更改项目根目录下<code>_config.yml</code> 文件，如下<br><img src=\"/2019/01/30/Github-Pages-Blog/change-theme.png\" alt=\"更改主题\"></p>\n<p>重新生成本地文件并推送到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>访问你的github主页<code>https://[用户名].github.io/</code>就可以看到啦</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p><code>themes/next</code>文件夹下的<code>_config.yml</code>是主题的配置文件<br>next内置了4种主题方案，选择你喜欢的方案解开注释即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n\n<p>Menu Settings是控制图中菜单的位置，根据需要解开注释即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"comment\">#  about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"comment\">#  archives: /archives/ || archive</span></span><br><span class=\"line\"><span class=\"comment\">#  schedule: /schedule/ || calendar</span></span><br><span class=\"line\"><span class=\"comment\">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"comment\">#  commonweal: /404.html || heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/01/30/Github-Pages-Blog/blog-icon.png\" alt=\"更改菜单\"><br>还有很多很多的配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" target=\"_blank\" rel=\"noopener\">官方教程</a>,<a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"noopener\">主题个性配置教程</a>,<a href=\"http://yearito.cn/posts/hexo-theme-beautify.html\" target=\"_blank\" rel=\"noopener\">主题美化</a></p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>也可以在本地启动服务器，在浏览器输入 <code>localhost:4000</code> 观看效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h2><h3 id=\"添加【标签】页面\"><a href=\"#添加【标签】页面\" class=\"headerlink\" title=\"添加【标签】页面\"></a>添加【标签】页面</h3><p>新建标签页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>tags: /tags/ || tags</code> 这行注释<br>新建测试文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'test'</span></span><br></pre></td></tr></table></figure>\n\n<p>在测试文章的头部添加tags信息，如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/tags.png\" alt=\"标签\"></p>\n<h3 id=\"添加【分类】页面\"><a href=\"#添加【分类】页面\" class=\"headerlink\" title=\"添加【分类】页面\"></a>添加【分类】页面</h3><p>新建标签页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">type: \"categories\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>categories: /categories/ || th</code> 这行注释<br>在测试文章的头部添加categories信息，如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">categories: Testing</span><br></pre></td></tr></table></figure>\n\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/categories.png\" alt=\"分类\"></p>\n<h3 id=\"给博客添加图片\"><a href=\"#给博客添加图片\" class=\"headerlink\" title=\"给博客添加图片\"></a>给博客添加图片</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n\n<p>在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'文章名'</span></span><br></pre></td></tr></table></figure>\n\n<p>将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文字</span>](<span class=\"link\">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<h3 id=\"添加Valine评论系统\"><a href=\"#添加Valine评论系统\" class=\"headerlink\" title=\"添加Valine评论系统\"></a>添加Valine评论系统</h3><p>首先需要去注册一个<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>账号,验证邮箱<br>然后随便创建一个应用，按如图所示找到<code>appid</code>，<code>appkey</code><br><img src=\"/2019/01/30/Github-Pages-Blog/valine.png\" alt=\"评论\"></p>\n<p>按下图修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，重新启动服务器就可以啦</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Valine.</span></span><br><span class=\"line\"><span class=\"comment\"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class=\"line\"><span class=\"comment\"># more info please open https://valine.js.org</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"string\">your</span> <span class=\"string\">appid</span>  <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"string\">your</span> <span class=\"string\">appkey</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">描述</span>  <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要删除评论请到<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>里删除哦<br><img src=\"/2019/01/30/Github-Pages-Blog/comment-delete.png\" alt=\"删除评论\"></p>\n<h3 id=\"hexo添加多作者\"><a href=\"#hexo添加多作者\" class=\"headerlink\" title=\"hexo添加多作者\"></a>hexo添加多作者</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-author --save</span><br></pre></td></tr></table></figure>\n\n<p>在文章的头部添加author信息，如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">author: Alice</span><br></pre></td></tr></table></figure>\n\n<p>修改/layout/_macro/下的post.swig文件 +为新添加的行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         &lt;div class=&quot;post-meta&quot;&gt;</span><br><span class=\"line\">+          &lt;span itemprop=&quot;about&quot; itemscope itemtype=&quot;https://schema.org/Thing&quot;&gt;</span><br><span class=\"line\">+            &lt;a href=&quot;/authors/&#123;&#123; post.author &#125;&#125;&quot; itemprop=&quot;url&quot; rel=&quot;index&quot;&gt;</span><br><span class=\"line\">+              &lt;span itemprop=&quot;name&quot;&gt;&#123;&#123; post.author &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">+            &lt;/a&gt;</span><br><span class=\"line\">+          &lt;/span&gt;</span><br><span class=\"line\">           &lt;span class=&quot;post-time&quot;&gt;</span><br><span class=\"line\">             &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class=\"line\">               &lt;i class=&quot;fa fa-calendar-o&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在/layout下新创建author.swig文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/post-collapse.swig&apos; as post_template %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125; &#123;&#123; __(&apos;title.author&apos;) &#125;&#125;: &#123;&#123; page.author &#125;&#125; | &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;post-block category&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div id=&quot;posts&quot; class=&quot;posts-collapse&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;collection-title&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;&#123;#</span><br><span class=\"line\">        #&#125;&#123;&#123; page.author &#125;&#125;&#123;#</span><br><span class=\"line\">        #&#125;&lt;small&gt;&#123;&#123;  __(&apos;title.author&apos;)  &#125;&#125;&lt;/small&gt;</span><br><span class=\"line\">        &lt;/&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;% for post in page.posts %&#125;</span><br><span class=\"line\">        &#123;&#123; post_template.render(post) &#125;&#125;</span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block sidebar %&#125;</span><br><span class=\"line\">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改/layout下page.swig文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     &#123;&#123; __(&apos;title.category&apos;) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">   &#123;% elif page.type === &quot;tags&quot; %&#125;</span><br><span class=\"line\">     &#123;&#123; __(&apos;title.tag&apos;) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">+  &#123;% elif page.type === &quot;authors&quot; %&#125;</span><br><span class=\"line\">+    &#123;&#123; __(&apos;title.author&apos;) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">   &#123;% else %&#125;</span><br><span class=\"line\">     &#123;&#123; page.title + page_title_suffix &#125;&#125;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">。。。。。。。</span><br><span class=\"line\">           &#123;&#123; list_categories() &#125;&#125;</span><br><span class=\"line\">         &lt;/div&gt;</span><br><span class=\"line\">       &lt;/div&gt;</span><br><span class=\"line\">+    &#123;% elif page.type === &apos;authors&apos; %&#125;</span><br><span class=\"line\">+      &lt;div class=&quot;author-all-page&quot;&gt;</span><br><span class=\"line\">+        &lt;div class=&quot;author-all-title&quot;&gt;</span><br><span class=\"line\">+            &#123;&#123; _p(&apos;counter.authors&apos;, site.authors.length) &#125;&#125;</span><br><span class=\"line\">+        &lt;/div&gt;</span><br><span class=\"line\">+        &lt;div class=&quot;author-all&quot;&gt;</span><br><span class=\"line\">+          &#123;&#123; list_authors() &#125;&#125;</span><br><span class=\"line\">+        &lt;/div&gt;</span><br><span class=\"line\">+      &lt;/div&gt;</span><br><span class=\"line\">     &#123;% else %&#125;</span><br><span class=\"line\">       &#123;&#123; page.content &#125;&#125;</span><br><span class=\"line\">     &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改{项目名称}/themes/next下zh-Hans.yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span></span><br><span class=\"line\"><span class=\"attr\">  archive:</span> <span class=\"string\">归档</span></span><br><span class=\"line\"><span class=\"attr\">  category:</span> <span class=\"string\">分类</span></span><br><span class=\"line\"><span class=\"attr\">  tag:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">日程表</span></span><br><span class=\"line\">  <span class=\"string\">author</span> <span class=\"string\">:</span> <span class=\"string\">作者</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"string\">。。。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">counter:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  authors:</span></span><br><span class=\"line\"><span class=\"attr\">    zero:</span> <span class=\"string\">暂无分类</span></span><br><span class=\"line\"><span class=\"attr\">    one:</span> <span class=\"string\">目前共计</span> <span class=\"number\">1</span> <span class=\"string\">个分类</span></span><br><span class=\"line\"><span class=\"attr\">    other:</span> <span class=\"string\">\"目前共计 %d 个作者\"</span></span><br></pre></td></tr></table></figure>\n\n<p>在{项目名称}/themes/next/source/css/_common/components/pages/添加authors.styl，复制categories.styl内容将categorie改成author</p>\n<p>在同级文件pages.styl中添加@import “authors”;</p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>###博文压缩</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp -g</span><br><span class=\"line\">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>\n\n<p>在项目根目录下创建<code>gulpfile.js</code>并填入以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">        .pipe(minifycss())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">    .pipe(htmlclean())</span><br><span class=\"line\">    .pipe(htmlmin(&#123;</span><br><span class=\"line\">         removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public/js 目录 js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.js'</span>)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行 gulp 命令时执行的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'minify-html'</span>,<span class=\"string\">'minify-css'</span>,<span class=\"string\">'minify-js'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。</p>\n","site":{"data":{}},"excerpt":"<p>本博客利用Hexo + Next + GitHubPages 搭建博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install git</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"安装yarn\"><a href=\"#安装yarn\" class=\"headerlink\" title=\"安装yarn\"></a>安装yarn</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yarn</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>进入你的项目目录，举个例子我的目录是blog</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n\n<p>然后用 yarn 安装 hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo -S</span><br></pre></td></tr></table></figure>\n\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<p>详细可见<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"搭建本地博客\"><a href=\"#搭建本地博客\" class=\"headerlink\" title=\"搭建本地博客\"></a>搭建本地博客</h2><h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><p>进入你的项目目录,初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器输入 <code>localhost:4000</code> 即可</p>\n<h2 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/create-project.png\" alt=\"创建项目\"></p>\n<p>项目名称一定一定是 <code>[用户名].github.io</code><br><img src=\"/2019/01/30/Github-Pages-Blog/create-repository.png\" alt=\"创建项目\"></p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/setting.png\" alt=\"设置\"></p>\n<p>在设置中找到GitHub Pages ，分支选择master，点击choose a theme</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/github-pages.png\" alt=\"设置github-pages\"></p>\n<p>选择喜欢的主题，点击select theme即可<br><img src=\"/2019/01/30/Github-Pages-Blog/select-theme.png\" alt=\"选择主题\"></p>\n<p>到这里就可以访问你的主页啦  <code>https://[用户名].github.io/</code>,接下来复制你的项目链接</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/copy-url.png\" alt=\"复制项目链接\"></p>\n<p>到你的本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/deploy-position.png\" alt=\"hexo设置git\"></p>\n<h3 id=\"站点配置\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置</h3><p>站点配置包括修改博客名称，描述，作者等等，建议直接查看<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>安装 hexo-deployer-git 插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git -S</span><br></pre></td></tr></table></figure>\n\n<p>如果失败的话尝试下面的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<p>在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>这时访问你的github主页<code>https://[用户名].github.io/</code>就可以啦</p>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><p>NexT 是一个高质量并且优雅的Hexo 主题。<br>详细可见<a href=\"https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在你的项目文件夹下，执行以下命令，安装NexT主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>\n\n<p>更改项目根目录下<code>_config.yml</code> 文件，如下<br><img src=\"/2019/01/30/Github-Pages-Blog/change-theme.png\" alt=\"更改主题\"></p>\n<p>重新生成本地文件并推送到github</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>访问你的github主页<code>https://[用户名].github.io/</code>就可以看到啦</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p><code>themes/next</code>文件夹下的<code>_config.yml</code>是主题的配置文件<br>next内置了4种主题方案，选择你喜欢的方案解开注释即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n\n<p>Menu Settings是控制图中菜单的位置，根据需要解开注释即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"comment\">#  about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"comment\">#  archives: /archives/ || archive</span></span><br><span class=\"line\"><span class=\"comment\">#  schedule: /schedule/ || calendar</span></span><br><span class=\"line\"><span class=\"comment\">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"comment\">#  commonweal: /404.html || heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/01/30/Github-Pages-Blog/blog-icon.png\" alt=\"更改菜单\"><br>还有很多很多的配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" target=\"_blank\" rel=\"noopener\">官方教程</a>,<a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"noopener\">主题个性配置教程</a>,<a href=\"http://yearito.cn/posts/hexo-theme-beautify.html\" target=\"_blank\" rel=\"noopener\">主题美化</a></p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>也可以在本地启动服务器，在浏览器输入 <code>localhost:4000</code> 观看效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h2><h3 id=\"添加【标签】页面\"><a href=\"#添加【标签】页面\" class=\"headerlink\" title=\"添加【标签】页面\"></a>添加【标签】页面</h3><p>新建标签页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>tags: /tags/ || tags</code> 这行注释<br>新建测试文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'test'</span></span><br></pre></td></tr></table></figure>\n\n<p>在测试文章的头部添加tags信息，如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/tags.png\" alt=\"标签\"></p>\n<h3 id=\"添加【分类】页面\"><a href=\"#添加【分类】页面\" class=\"headerlink\" title=\"添加【分类】页面\"></a>添加【分类】页面</h3><p>新建标签页面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">type: \"categories\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>categories: /categories/ || th</code> 这行注释<br>在测试文章的头部添加categories信息，如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">categories: Testing</span><br></pre></td></tr></table></figure>\n\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/categories.png\" alt=\"分类\"></p>\n<h3 id=\"给博客添加图片\"><a href=\"#给博客添加图片\" class=\"headerlink\" title=\"给博客添加图片\"></a>给博客添加图片</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n\n<p>在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'文章名'</span></span><br></pre></td></tr></table></figure>\n\n<p>将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文字</span>](<span class=\"link\">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure>\n\n<p>文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<h3 id=\"添加Valine评论系统\"><a href=\"#添加Valine评论系统\" class=\"headerlink\" title=\"添加Valine评论系统\"></a>添加Valine评论系统</h3><p>首先需要去注册一个<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>账号,验证邮箱<br>然后随便创建一个应用，按如图所示找到<code>appid</code>，<code>appkey</code><br><img src=\"/2019/01/30/Github-Pages-Blog/valine.png\" alt=\"评论\"></p>\n<p>按下图修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，重新启动服务器就可以啦</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Valine.</span></span><br><span class=\"line\"><span class=\"comment\"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class=\"line\"><span class=\"comment\"># more info please open https://valine.js.org</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"string\">your</span> <span class=\"string\">appid</span>  <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"string\">your</span> <span class=\"string\">appkey</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">描述</span>  <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要删除评论请到<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>里删除哦<br><img src=\"/2019/01/30/Github-Pages-Blog/comment-delete.png\" alt=\"删除评论\"></p>\n<h3 id=\"hexo添加多作者\"><a href=\"#hexo添加多作者\" class=\"headerlink\" title=\"hexo添加多作者\"></a>hexo添加多作者</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-author --save</span><br></pre></td></tr></table></figure>\n\n<p>在文章的头部添加author信息，如下：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">author: Alice</span><br></pre></td></tr></table></figure>\n\n<p>修改/layout/_macro/下的post.swig文件 +为新添加的行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         &lt;div class=&quot;post-meta&quot;&gt;</span><br><span class=\"line\">+          &lt;span itemprop=&quot;about&quot; itemscope itemtype=&quot;https://schema.org/Thing&quot;&gt;</span><br><span class=\"line\">+            &lt;a href=&quot;/authors/&#123;&#123; post.author &#125;&#125;&quot; itemprop=&quot;url&quot; rel=&quot;index&quot;&gt;</span><br><span class=\"line\">+              &lt;span itemprop=&quot;name&quot;&gt;&#123;&#123; post.author &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">+            &lt;/a&gt;</span><br><span class=\"line\">+          &lt;/span&gt;</span><br><span class=\"line\">           &lt;span class=&quot;post-time&quot;&gt;</span><br><span class=\"line\">             &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class=\"line\">               &lt;i class=&quot;fa fa-calendar-o&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在/layout下新创建author.swig文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;% extends &apos;_layout.swig&apos; %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/post-collapse.swig&apos; as post_template %&#125;</span><br><span class=\"line\">&#123;% import &apos;_macro/sidebar.swig&apos; as sidebar_template %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125; &#123;&#123; __(&apos;title.author&apos;) &#125;&#125;: &#123;&#123; page.author &#125;&#125; | &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;div class=&quot;post-block category&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div id=&quot;posts&quot; class=&quot;posts-collapse&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;collection-title&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;&#123;#</span><br><span class=\"line\">        #&#125;&#123;&#123; page.author &#125;&#125;&#123;#</span><br><span class=\"line\">        #&#125;&lt;small&gt;&#123;&#123;  __(&apos;title.author&apos;)  &#125;&#125;&lt;/small&gt;</span><br><span class=\"line\">        &lt;/&#123;% if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;% endif %&#125;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;% for post in page.posts %&#125;</span><br><span class=\"line\">        &#123;&#123; post_template.render(post) &#125;&#125;</span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;% include &apos;_partials/pagination.swig&apos; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block sidebar %&#125;</span><br><span class=\"line\">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改/layout下page.swig文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     &#123;&#123; __(&apos;title.category&apos;) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">   &#123;% elif page.type === &quot;tags&quot; %&#125;</span><br><span class=\"line\">     &#123;&#123; __(&apos;title.tag&apos;) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">+  &#123;% elif page.type === &quot;authors&quot; %&#125;</span><br><span class=\"line\">+    &#123;&#123; __(&apos;title.author&apos;) + page_title_suffix &#125;&#125;</span><br><span class=\"line\">   &#123;% else %&#125;</span><br><span class=\"line\">     &#123;&#123; page.title + page_title_suffix &#125;&#125;</span><br><span class=\"line\">   &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">。。。。。。。</span><br><span class=\"line\">           &#123;&#123; list_categories() &#125;&#125;</span><br><span class=\"line\">         &lt;/div&gt;</span><br><span class=\"line\">       &lt;/div&gt;</span><br><span class=\"line\">+    &#123;% elif page.type === &apos;authors&apos; %&#125;</span><br><span class=\"line\">+      &lt;div class=&quot;author-all-page&quot;&gt;</span><br><span class=\"line\">+        &lt;div class=&quot;author-all-title&quot;&gt;</span><br><span class=\"line\">+            &#123;&#123; _p(&apos;counter.authors&apos;, site.authors.length) &#125;&#125;</span><br><span class=\"line\">+        &lt;/div&gt;</span><br><span class=\"line\">+        &lt;div class=&quot;author-all&quot;&gt;</span><br><span class=\"line\">+          &#123;&#123; list_authors() &#125;&#125;</span><br><span class=\"line\">+        &lt;/div&gt;</span><br><span class=\"line\">+      &lt;/div&gt;</span><br><span class=\"line\">     &#123;% else %&#125;</span><br><span class=\"line\">       &#123;&#123; page.content &#125;&#125;</span><br><span class=\"line\">     &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改{项目名称}/themes/next下zh-Hans.yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span></span><br><span class=\"line\"><span class=\"attr\">  archive:</span> <span class=\"string\">归档</span></span><br><span class=\"line\"><span class=\"attr\">  category:</span> <span class=\"string\">分类</span></span><br><span class=\"line\"><span class=\"attr\">  tag:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"attr\">  schedule:</span> <span class=\"string\">日程表</span></span><br><span class=\"line\">  <span class=\"string\">author</span> <span class=\"string\">:</span> <span class=\"string\">作者</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"string\">。。。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">counter:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">  authors:</span></span><br><span class=\"line\"><span class=\"attr\">    zero:</span> <span class=\"string\">暂无分类</span></span><br><span class=\"line\"><span class=\"attr\">    one:</span> <span class=\"string\">目前共计</span> <span class=\"number\">1</span> <span class=\"string\">个分类</span></span><br><span class=\"line\"><span class=\"attr\">    other:</span> <span class=\"string\">\"目前共计 %d 个作者\"</span></span><br></pre></td></tr></table></figure>\n\n<p>在{项目名称}/themes/next/source/css/_common/components/pages/添加authors.styl，复制categories.styl内容将categorie改成author</p>\n<p>在同级文件pages.styl中添加@import “authors”;</p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>###博文压缩</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp -g</span><br><span class=\"line\">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure>\n\n<p>在项目根目录下创建<code>gulpfile.js</code>并填入以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-uglify'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlmin = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlclean = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-htmlclean'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 css</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.css'</span>)</span><br><span class=\"line\">        .pipe(minifycss())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public 目录 html</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-html'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.html'</span>)</span><br><span class=\"line\">    .pipe(htmlclean())</span><br><span class=\"line\">    .pipe(htmlmin(&#123;</span><br><span class=\"line\">         removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">         minifyURLs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public'</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 压缩 public/js 目录 js</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'minify-js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./public/**/*.js'</span>)</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">'./public'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行 gulp 命令时执行的任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, [</span><br><span class=\"line\">    <span class=\"string\">'minify-html'</span>,<span class=\"string\">'minify-css'</span>,<span class=\"string\">'minify-js'</span></span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n\n<p>生成博文是执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。</p>"},{"title":"《自己动手写JAVA虚拟机》学习笔记二【搜索class文件】","date":"2019-02-12T08:14:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"```java\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello, world!\");\n    }\n}\n```\n运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？\n\n## 类路径\n类路径可以分为以下三种：\n * 启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。\n * 扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。\n * 用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。\n\n<!-- more -->\n### 准备工作\n\n把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n修改cmd结构体，添加XjreOption字段\n```go\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tXjreOption string\n\tclass string\n\targs []string\n}\n```\nparseCmd()函数也对应添加Xjre\n```go\n//命令解析\nfunc parseCmd() *Cmd {\n    ...//其他代码不变\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.XjreOption,\"Xjre\",\"\",\"path to jre\")\n\t//解析命令行参数到定义的flag\n\tflag.Parse()\n\t...//其他代码不变\n}\n```\n### 实现类路径 \n\n采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。\n\n首先定义一个Entry接口\n```go\n//获取系统分隔符，windows是;类UNIX系统是:号\nconst pathListSeparator = string(os.PathListSeparator)\n\ntype Entry interface {\n\t//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀\n\t//例如读取java.lang.Object入参是java/lang/Object.class\n\treadClass(classname string) ([]byte, Entry, error)\n\n\t//toString\n\tString() string\n}\n```\nEntry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry\n#### DirEntry\nDirEntry相对简单些，表示目录形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"io/ioutil\"\n)\n\ntype DirEntry struct {\n\t//存放目录的绝对路径\n\tabsDir string\n}\n\n//相当于构造函数\nfunc newDirEntry(path string) *DirEntry {\n\t//将参数转换成绝对路径\n\tabsDir, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &DirEntry{absDir}\n}\n//读取class文件\nfunc (self *DirEntry) readClass (className string) ([]byte, Entry, error) {\n\t//把目录和class名拼成完成路径\n\tfileName := filepath.Join(self.absDir,className)\n\t//读取class文件内容\n\tdata, err := ioutil.ReadFile(fileName)\n\treturn data,self,err\n}\n\n//直接返回目录\nfunc (self *DirEntry) String() string{\n\treturn self.absDir\n}\n```\n#### ZipEntry\nZipEntry表示ZIP或者JAR文件形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"archive/zip\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\n\ntype ZipEntry struct {\n\t//存放目录的绝对路径\n\tabsPath string\n}\n\n//相当于构造函数\nfunc newZipEntry(path string) *ZipEntry {\n\t//将参数转换成绝对路径\n\tabsPath, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &ZipEntry{absPath}\n}\n\n//读取class文件\nfunc (self *ZipEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//打开zip文件\n\tr, err := zip.OpenReader(self.absPath)\n\tif err != nil {\n\t\treturn nil,nil,err\n\t}\n\tdefer r.Close()\n\n\t//遍历zip包里的文件\n\tfor _, f := range r.File {\n\t\t//找到class文件\n\t\tif f.Name == classname {\n\t\t\t//打开class文件\n\t\t\trc , err := f.Open()\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\tdefer rc.Close()\n\t\t\t//读取class文件内容\n\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\treturn data,self,err\n\t\t}\n\t}\n\t//未找到class文件\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n\n//直接返回目录\nfunc (self *ZipEntry) String() string {\n\treturn self.absPath\n}\n```\n#### CompositeEntry\nCompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice\n\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"errors\"\n)\n\ntype CompositeEntry []Entry\n\n\n//将每个小路径转换成具体的Entry\nfunc newCompositeEntry(pathList string) CompositeEntry {\n\tvar compositeEntry []Entry\n\t//将路径按照分隔符进行分割\n\tfor _, path := range strings.Split(pathList,pathListSeparator){\n\t\tentry := newEntry(path)\n\t\tcompositeEntry = append(compositeEntry,entry)\n\t}\n\treturn compositeEntry\n}\n\nfunc (self CompositeEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//遍历entry数据\n\tfor _, entry := range self{\n\t\t//读取class文件，依次调用每一个子路径的readClass方法\n\t\tdata, from, err := entry.readClass(classname)\n\t\tif err == nil{\n\t\t\treturn data,from,err\n\t\t}\n\t}\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n//调用每个子路径的String方法，用分隔符拼接起来\nfunc (self CompositeEntry) String() string {\n\tstrs := make([]string,len(self))\n\tfor i, entry := range self{\n\t\tstrs[i] = entry.String()\n\t}\n\treturn strings.Join(strs,pathListSeparator)\n}\n```\n#### WildcardEntry\nWildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc newWildcardEntry(path string) CompositeEntry {\n\t//去掉尾部的*\n\tbaseDir := path[:len(path)-1]\n\tvar compositeEntry []Entry\n\twalkFn := func(path string, info os.FileInfo, err error) error{\n\t\tif err != nil{\n\t\t\treturn err\n\t\t}\n\t\t//如果不是目录，返回跳过标识\n\t\tif info.IsDir() && path != baseDir {\n\t\t\treturn filepath.SkipDir\n\t\t}\n\t\t//选出jar文件\n\t\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\"){\n\t\t\tjarEntry := newZipEntry(path)\n\t\t\tcompositeEntry = append(compositeEntry,jarEntry)\n\t\t}\n\t\treturn nil\n\t}\n\t//遍历baseDir路径，创建zipEntry\n\tfilepath.Walk(baseDir,walkFn)\n\t//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)\n\treturn compositeEntry\n}\n```\n#### Entry\n四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。\n````go\nfunc newEntry(path string) Entry {\n\t//如果路径中含有分隔符\n\tif strings.Contains(path,pathListSeparator){\n\t\treturn newCompositeEntry(path)\n\t}\n\t//如果路径末尾是*\n\tif strings.HasSuffix(path,\"*\"){\n\t\treturn newWildcardEntry(path)\n\t}\n\t//如果路径以jar或者zip结尾\n\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\")||\n\t\tstrings.HasSuffix(path,\".zip\") || strings.HasSuffix(path,\".ZIP\"){\n\t\t\treturn newZipEntry(path)\n\t}\n\treturn newDirEntry(path)\n}\n````\n#### 实现Classpath\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"os\"\n\t\"fmt\"\n)\n\ntype Classpath struct {\n\tbootClasspath Entry\n\textClasspath Entry\n\tuserClasspath Entry\n}\n//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径\nfunc Parse(jreOption,cpOption string) *Classpath  {\n\tcp := &Classpath{}\n\t//解析启动类路径和扩展类路径\n\tcp.parseBootAndExtClasspath(jreOption)\n\n\t//解析用户类路径\n\tcp.parseUserClasspath(cpOption)\n\treturn cp\n}\n\nfunc getJreDir(jreOption string) string {\n\t//优先使用用户输入的-Xjre作为目录\n\tif jreOption != \"\" && exists(jreOption){\n\t\treturn jreOption\n\t}\n\t//在当前目录下寻找jre目录\n\tif exists(\"./jre\") {\n\t\treturn \"./jre\"\n\t}\n\t//尝试使用JAVA_HOME环境变量\n\tif jh := os.Getenv(\"JAVA_HOME\"); jh != \"\"{\n\t\treturn filepath.Join(jh,\"jre\")\n\t}\n\tpanic(\"Can not find jre folder\")\n}\n\n//判断目录是否存在\nfunc exists(path string) bool {\n\tif _, err := os.Stat(path); err != nil{\n\t\tif os.IsNotExist(err){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (self *Classpath) parseBootAndExtClasspath(jreOption string) {\n\t// 获取jre目录\n\tjreDir := getJreDir(jreOption)\n\t//jre/lib/*\n\tjreLibPath := filepath.Join(jreDir,\"lib\",\"*\")\n\tself.bootClasspath = newWildcardEntry(jreLibPath)\n\t//jre/lib/ext/*\n\tjreExtPath := filepath.Join(jreDir,\"lib\",\"ext\",\"*\")\n\tself.extClasspath = newWildcardEntry(jreExtPath)\n}\n\n//解析用户类路径\nfunc (self *Classpath) parseUserClasspath(cpOption string) {\n\t// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径\n\tif cpOption == \"\"{\n\t\tcpOption = \".\"\n\t}\n\tself.userClasspath = newEntry(cpOption)\n}\n\n//寻找class方法\nfunc (self *Classpath) ReadClass(classname string) ([]byte, Entry, error) {\n\t//访问ReadClass方法只需传递类名，不用包含\".class\"后缀\n\tclassname = classname + \".class\"\n\t// 从bootClasspath寻找class文件\n\tif data, entry, err := self.bootClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从extClasspath寻找class文件\n\tif data, entry, err := self.extClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从userClasspath寻找class文件\n\treturn self.userClasspath.readClass(classname)\n}\n\nfunc (self *Classpath) String() string {\n\treturn self.userClasspath.String()\n}\n```\n### 测试代码\n\n完善main.go中的startJVM\n```go\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t// 获取Classpath\n\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cp,cmd.class,cmd.args)\n\t// 将.替换成/(java.lang.String -> java/lang/String)\n\tclassName := strings.Replace(cmd.class,\".\",\"/\",-1)\n\t// 读取class\n\tclassData, _, err := cp.ReadClass(className)\n\tif err != nil {\n\t\tfmt.Printf(\"Could not find or load main class %s\\n\",cmd.class)\n\t\treturn\n\t}\n\tfmt.Printf(\"class data : %v\\n\",classData)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch02 \n$ ch02 java.lang.String\n# 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容\n$ ch02 -Xjre /opt  java.lang.Object \n# 传递错误-Xjre会打印出Could not find or load main class java.lang.Object\n```\n","source":"_posts/JVM2.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记二【搜索class文件】\ndate: 2019-02-12 16:14:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n```java\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello, world!\");\n    }\n}\n```\n运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？\n\n## 类路径\n类路径可以分为以下三种：\n * 启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。\n * 扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。\n * 用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。\n\n<!-- more -->\n### 准备工作\n\n把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n修改cmd结构体，添加XjreOption字段\n```go\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tXjreOption string\n\tclass string\n\targs []string\n}\n```\nparseCmd()函数也对应添加Xjre\n```go\n//命令解析\nfunc parseCmd() *Cmd {\n    ...//其他代码不变\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.XjreOption,\"Xjre\",\"\",\"path to jre\")\n\t//解析命令行参数到定义的flag\n\tflag.Parse()\n\t...//其他代码不变\n}\n```\n### 实现类路径 \n\n采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。\n\n首先定义一个Entry接口\n```go\n//获取系统分隔符，windows是;类UNIX系统是:号\nconst pathListSeparator = string(os.PathListSeparator)\n\ntype Entry interface {\n\t//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀\n\t//例如读取java.lang.Object入参是java/lang/Object.class\n\treadClass(classname string) ([]byte, Entry, error)\n\n\t//toString\n\tString() string\n}\n```\nEntry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry\n#### DirEntry\nDirEntry相对简单些，表示目录形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"io/ioutil\"\n)\n\ntype DirEntry struct {\n\t//存放目录的绝对路径\n\tabsDir string\n}\n\n//相当于构造函数\nfunc newDirEntry(path string) *DirEntry {\n\t//将参数转换成绝对路径\n\tabsDir, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &DirEntry{absDir}\n}\n//读取class文件\nfunc (self *DirEntry) readClass (className string) ([]byte, Entry, error) {\n\t//把目录和class名拼成完成路径\n\tfileName := filepath.Join(self.absDir,className)\n\t//读取class文件内容\n\tdata, err := ioutil.ReadFile(fileName)\n\treturn data,self,err\n}\n\n//直接返回目录\nfunc (self *DirEntry) String() string{\n\treturn self.absDir\n}\n```\n#### ZipEntry\nZipEntry表示ZIP或者JAR文件形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"archive/zip\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\n\ntype ZipEntry struct {\n\t//存放目录的绝对路径\n\tabsPath string\n}\n\n//相当于构造函数\nfunc newZipEntry(path string) *ZipEntry {\n\t//将参数转换成绝对路径\n\tabsPath, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &ZipEntry{absPath}\n}\n\n//读取class文件\nfunc (self *ZipEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//打开zip文件\n\tr, err := zip.OpenReader(self.absPath)\n\tif err != nil {\n\t\treturn nil,nil,err\n\t}\n\tdefer r.Close()\n\n\t//遍历zip包里的文件\n\tfor _, f := range r.File {\n\t\t//找到class文件\n\t\tif f.Name == classname {\n\t\t\t//打开class文件\n\t\t\trc , err := f.Open()\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\tdefer rc.Close()\n\t\t\t//读取class文件内容\n\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\treturn data,self,err\n\t\t}\n\t}\n\t//未找到class文件\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n\n//直接返回目录\nfunc (self *ZipEntry) String() string {\n\treturn self.absPath\n}\n```\n#### CompositeEntry\nCompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice\n\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"errors\"\n)\n\ntype CompositeEntry []Entry\n\n\n//将每个小路径转换成具体的Entry\nfunc newCompositeEntry(pathList string) CompositeEntry {\n\tvar compositeEntry []Entry\n\t//将路径按照分隔符进行分割\n\tfor _, path := range strings.Split(pathList,pathListSeparator){\n\t\tentry := newEntry(path)\n\t\tcompositeEntry = append(compositeEntry,entry)\n\t}\n\treturn compositeEntry\n}\n\nfunc (self CompositeEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//遍历entry数据\n\tfor _, entry := range self{\n\t\t//读取class文件，依次调用每一个子路径的readClass方法\n\t\tdata, from, err := entry.readClass(classname)\n\t\tif err == nil{\n\t\t\treturn data,from,err\n\t\t}\n\t}\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n//调用每个子路径的String方法，用分隔符拼接起来\nfunc (self CompositeEntry) String() string {\n\tstrs := make([]string,len(self))\n\tfor i, entry := range self{\n\t\tstrs[i] = entry.String()\n\t}\n\treturn strings.Join(strs,pathListSeparator)\n}\n```\n#### WildcardEntry\nWildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc newWildcardEntry(path string) CompositeEntry {\n\t//去掉尾部的*\n\tbaseDir := path[:len(path)-1]\n\tvar compositeEntry []Entry\n\twalkFn := func(path string, info os.FileInfo, err error) error{\n\t\tif err != nil{\n\t\t\treturn err\n\t\t}\n\t\t//如果不是目录，返回跳过标识\n\t\tif info.IsDir() && path != baseDir {\n\t\t\treturn filepath.SkipDir\n\t\t}\n\t\t//选出jar文件\n\t\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\"){\n\t\t\tjarEntry := newZipEntry(path)\n\t\t\tcompositeEntry = append(compositeEntry,jarEntry)\n\t\t}\n\t\treturn nil\n\t}\n\t//遍历baseDir路径，创建zipEntry\n\tfilepath.Walk(baseDir,walkFn)\n\t//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)\n\treturn compositeEntry\n}\n```\n#### Entry\n四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。\n````go\nfunc newEntry(path string) Entry {\n\t//如果路径中含有分隔符\n\tif strings.Contains(path,pathListSeparator){\n\t\treturn newCompositeEntry(path)\n\t}\n\t//如果路径末尾是*\n\tif strings.HasSuffix(path,\"*\"){\n\t\treturn newWildcardEntry(path)\n\t}\n\t//如果路径以jar或者zip结尾\n\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\")||\n\t\tstrings.HasSuffix(path,\".zip\") || strings.HasSuffix(path,\".ZIP\"){\n\t\t\treturn newZipEntry(path)\n\t}\n\treturn newDirEntry(path)\n}\n````\n#### 实现Classpath\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"os\"\n\t\"fmt\"\n)\n\ntype Classpath struct {\n\tbootClasspath Entry\n\textClasspath Entry\n\tuserClasspath Entry\n}\n//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径\nfunc Parse(jreOption,cpOption string) *Classpath  {\n\tcp := &Classpath{}\n\t//解析启动类路径和扩展类路径\n\tcp.parseBootAndExtClasspath(jreOption)\n\n\t//解析用户类路径\n\tcp.parseUserClasspath(cpOption)\n\treturn cp\n}\n\nfunc getJreDir(jreOption string) string {\n\t//优先使用用户输入的-Xjre作为目录\n\tif jreOption != \"\" && exists(jreOption){\n\t\treturn jreOption\n\t}\n\t//在当前目录下寻找jre目录\n\tif exists(\"./jre\") {\n\t\treturn \"./jre\"\n\t}\n\t//尝试使用JAVA_HOME环境变量\n\tif jh := os.Getenv(\"JAVA_HOME\"); jh != \"\"{\n\t\treturn filepath.Join(jh,\"jre\")\n\t}\n\tpanic(\"Can not find jre folder\")\n}\n\n//判断目录是否存在\nfunc exists(path string) bool {\n\tif _, err := os.Stat(path); err != nil{\n\t\tif os.IsNotExist(err){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (self *Classpath) parseBootAndExtClasspath(jreOption string) {\n\t// 获取jre目录\n\tjreDir := getJreDir(jreOption)\n\t//jre/lib/*\n\tjreLibPath := filepath.Join(jreDir,\"lib\",\"*\")\n\tself.bootClasspath = newWildcardEntry(jreLibPath)\n\t//jre/lib/ext/*\n\tjreExtPath := filepath.Join(jreDir,\"lib\",\"ext\",\"*\")\n\tself.extClasspath = newWildcardEntry(jreExtPath)\n}\n\n//解析用户类路径\nfunc (self *Classpath) parseUserClasspath(cpOption string) {\n\t// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径\n\tif cpOption == \"\"{\n\t\tcpOption = \".\"\n\t}\n\tself.userClasspath = newEntry(cpOption)\n}\n\n//寻找class方法\nfunc (self *Classpath) ReadClass(classname string) ([]byte, Entry, error) {\n\t//访问ReadClass方法只需传递类名，不用包含\".class\"后缀\n\tclassname = classname + \".class\"\n\t// 从bootClasspath寻找class文件\n\tif data, entry, err := self.bootClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从extClasspath寻找class文件\n\tif data, entry, err := self.extClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从userClasspath寻找class文件\n\treturn self.userClasspath.readClass(classname)\n}\n\nfunc (self *Classpath) String() string {\n\treturn self.userClasspath.String()\n}\n```\n### 测试代码\n\n完善main.go中的startJVM\n```go\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t// 获取Classpath\n\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cp,cmd.class,cmd.args)\n\t// 将.替换成/(java.lang.String -> java/lang/String)\n\tclassName := strings.Replace(cmd.class,\".\",\"/\",-1)\n\t// 读取class\n\tclassData, _, err := cp.ReadClass(className)\n\tif err != nil {\n\t\tfmt.Printf(\"Could not find or load main class %s\\n\",cmd.class)\n\t\treturn\n\t}\n\tfmt.Printf(\"class data : %v\\n\",classData)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch02 \n$ ch02 java.lang.String\n# 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容\n$ ch02 -Xjre /opt  java.lang.Object \n# 传递错误-Xjre会打印出Could not find or load main class java.lang.Object\n```\n","slug":"JVM2","published":1,"updated":"2019-07-30T11:37:16.772Z","layout":"post","photos":[],"link":"","_id":"ck4859y95003nt0fy0uoxgqzp","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？</p>\n<h2 id=\"类路径\"><a href=\"#类路径\" class=\"headerlink\" title=\"类路径\"></a>类路径</h2><p>类路径可以分为以下三种：</p>\n<ul>\n<li>启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。</li>\n<li>扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。</li>\n<li>用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure>\n\n<p>修改cmd结构体，添加XjreOption字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tXjreOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>parseCmd()函数也对应添加Xjre</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.XjreOption,<span class=\"string\">\"Xjre\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"path to jre\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//解析命令行参数到定义的flag</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现类路径\"><a href=\"#实现类路径\" class=\"headerlink\" title=\"实现类路径\"></a>实现类路径</h3><p>采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。</p>\n<p>首先定义一个Entry接口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取系统分隔符，windows是;类UNIX系统是:号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathListSeparator = <span class=\"keyword\">string</span>(os.PathListSeparator)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Entry <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀</span></span><br><span class=\"line\">\t<span class=\"comment\">//例如读取java.lang.Object入参是java/lang/Object.class</span></span><br><span class=\"line\">\treadClass(classname <span class=\"keyword\">string</span>) ([]<span class=\"keyword\">byte</span>, Entry, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//toString</span></span><br><span class=\"line\">\tString() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Entry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry</p>\n<h4 id=\"DirEntry\"><a href=\"#DirEntry\" class=\"headerlink\" title=\"DirEntry\"></a>DirEntry</h4><p>DirEntry相对简单些，表示目录形式的类路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DirEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newDirEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DirEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsDir, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;DirEntry&#123;absDir&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">readClass</span> <span class=\"params\">(className <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//把目录和class名拼成完成路径</span></span><br><span class=\"line\">\tfileName := filepath.Join(self.absDir,className)</span><br><span class=\"line\">\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\tdata, err := ioutil.ReadFile(fileName)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZipEntry\"><a href=\"#ZipEntry\" class=\"headerlink\" title=\"ZipEntry\"></a>ZipEntry</h4><p>ZipEntry表示ZIP或者JAR文件形式的类路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"archive/zip\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ZipEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsPath <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newZipEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">ZipEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ZipEntry&#123;absPath&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打开zip文件</span></span><br><span class=\"line\">\tr, err := zip.OpenReader(self.absPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历zip包里的文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> r.File &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找到class文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f.Name == classname &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打开class文件</span></span><br><span class=\"line\">\t\t\trc , err := f.Open()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> rc.Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\t\t\tdata, err := ioutil.ReadAll(rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//未找到class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absPath</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CompositeEntry\"><a href=\"#CompositeEntry\" class=\"headerlink\" title=\"CompositeEntry\"></a>CompositeEntry</h4><p>CompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CompositeEntry []Entry</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将每个小路径转换成具体的Entry</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCompositeEntry</span><span class=\"params\">(pathList <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\t<span class=\"comment\">//将路径按照分隔符进行分割</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, path := <span class=\"keyword\">range</span> strings.Split(pathList,pathListSeparator)&#123;</span><br><span class=\"line\">\t\tentry := newEntry(path)</span><br><span class=\"line\">\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,entry)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历entry数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//读取class文件，依次调用每一个子路径的readClass方法</span></span><br><span class=\"line\">\t\tdata, from, err := entry.readClass(classname)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,from,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用每个子路径的String方法，用分隔符拼接起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tstrs := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"built_in\">len</span>(self))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\tstrs[i] = entry.String()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(strs,pathListSeparator)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"WildcardEntry\"><a href=\"#WildcardEntry\" class=\"headerlink\" title=\"WildcardEntry\"></a>WildcardEntry</h4><p>WildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWildcardEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//去掉尾部的*</span></span><br><span class=\"line\">\tbaseDir := path[:<span class=\"built_in\">len</span>(path)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\twalkFn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是目录，返回跳过标识</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &amp;&amp; path != baseDir &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> filepath.SkipDir</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//选出jar文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)&#123;</span><br><span class=\"line\">\t\t\tjarEntry := newZipEntry(path)</span><br><span class=\"line\">\t\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,jarEntry)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历baseDir路径，创建zipEntry</span></span><br><span class=\"line\">\tfilepath.Walk(baseDir,walkFn)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">Entry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径中含有分隔符</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.Contains(path,pathListSeparator)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newCompositeEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径末尾是*</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\"*\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newWildcardEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径以jar或者zip结尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)||</span><br><span class=\"line\">\t\tstrings.HasSuffix(path,<span class=\"string\">\".zip\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".ZIP\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> newZipEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newDirEntry(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现Classpath\"><a href=\"#实现Classpath\" class=\"headerlink\" title=\"实现Classpath\"></a>实现Classpath</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Classpath <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbootClasspath Entry</span><br><span class=\"line\">\textClasspath Entry</span><br><span class=\"line\">\tuserClasspath Entry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(jreOption,cpOption <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Classpath</span></span>  &#123;</span><br><span class=\"line\">\tcp := &amp;Classpath&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//解析启动类路径和扩展类路径</span></span><br><span class=\"line\">\tcp.parseBootAndExtClasspath(jreOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\">\tcp.parseUserClasspath(cpOption)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getJreDir</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//优先使用用户输入的-Xjre作为目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jreOption != <span class=\"string\">\"\"</span> &amp;&amp; exists(jreOption)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jreOption</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//在当前目录下寻找jre目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exists(<span class=\"string\">\"./jre\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"./jre\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试使用JAVA_HOME环境变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jh := os.Getenv(<span class=\"string\">\"JAVA_HOME\"</span>); jh != <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filepath.Join(jh,<span class=\"string\">\"jre\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not find jre folder\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断目录是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">exists</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stat(path); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.IsNotExist(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseBootAndExtClasspath</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取jre目录</span></span><br><span class=\"line\">\tjreDir := getJreDir(jreOption)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/*</span></span><br><span class=\"line\">\tjreLibPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.bootClasspath = newWildcardEntry(jreLibPath)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/ext/*</span></span><br><span class=\"line\">\tjreExtPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"ext\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.extClasspath = newWildcardEntry(jreExtPath)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseUserClasspath</span><span class=\"params\">(cpOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cpOption == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tcpOption = <span class=\"string\">\".\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tself.userClasspath = newEntry(cpOption)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//寻找class方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">ReadClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//访问ReadClass方法只需传递类名，不用包含\".class\"后缀</span></span><br><span class=\"line\">\tclassname = classname + <span class=\"string\">\".class\"</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从bootClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.bootClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从extClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.extClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从userClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.readClass(classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>完善main.go中的startJVM</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取Classpath</span></span><br><span class=\"line\">\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cp,cmd.class,cmd.args)</span><br><span class=\"line\">\t<span class=\"comment\">// 将.替换成/(java.lang.String -&gt; java/lang/String)</span></span><br><span class=\"line\">\tclassName := strings.Replace(cmd.class,<span class=\"string\">\".\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 读取class</span></span><br><span class=\"line\">\tclassData, _, err := cp.ReadClass(className)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Could not find or load main class %s\\n\"</span>,cmd.class)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"class data : %v\\n\"</span>,classData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译main.go，并测试-version</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch02 </span><br><span class=\"line\">$ ch02 java.lang.String</span><br><span class=\"line\"><span class=\"comment\"># 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容</span></span><br><span class=\"line\">$ ch02 -Xjre /opt  java.lang.Object </span><br><span class=\"line\"><span class=\"comment\"># 传递错误-Xjre会打印出Could not find or load main class java.lang.Object</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？</p>\n<h2 id=\"类路径\"><a href=\"#类路径\" class=\"headerlink\" title=\"类路径\"></a>类路径</h2><p>类路径可以分为以下三种：</p>\n<ul>\n<li>启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。</li>\n<li>扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。</li>\n<li>用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。</li>\n</ul>","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure>\n\n<p>修改cmd结构体，添加XjreOption字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tXjreOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>parseCmd()函数也对应添加Xjre</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.XjreOption,<span class=\"string\">\"Xjre\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"path to jre\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//解析命令行参数到定义的flag</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现类路径\"><a href=\"#实现类路径\" class=\"headerlink\" title=\"实现类路径\"></a>实现类路径</h3><p>采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。</p>\n<p>首先定义一个Entry接口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取系统分隔符，windows是;类UNIX系统是:号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathListSeparator = <span class=\"keyword\">string</span>(os.PathListSeparator)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Entry <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀</span></span><br><span class=\"line\">\t<span class=\"comment\">//例如读取java.lang.Object入参是java/lang/Object.class</span></span><br><span class=\"line\">\treadClass(classname <span class=\"keyword\">string</span>) ([]<span class=\"keyword\">byte</span>, Entry, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//toString</span></span><br><span class=\"line\">\tString() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Entry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry</p>\n<h4 id=\"DirEntry\"><a href=\"#DirEntry\" class=\"headerlink\" title=\"DirEntry\"></a>DirEntry</h4><p>DirEntry相对简单些，表示目录形式的类路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DirEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newDirEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DirEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsDir, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;DirEntry&#123;absDir&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">readClass</span> <span class=\"params\">(className <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//把目录和class名拼成完成路径</span></span><br><span class=\"line\">\tfileName := filepath.Join(self.absDir,className)</span><br><span class=\"line\">\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\tdata, err := ioutil.ReadFile(fileName)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZipEntry\"><a href=\"#ZipEntry\" class=\"headerlink\" title=\"ZipEntry\"></a>ZipEntry</h4><p>ZipEntry表示ZIP或者JAR文件形式的类路径</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"archive/zip\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ZipEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsPath <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newZipEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">ZipEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ZipEntry&#123;absPath&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打开zip文件</span></span><br><span class=\"line\">\tr, err := zip.OpenReader(self.absPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历zip包里的文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> r.File &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找到class文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f.Name == classname &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打开class文件</span></span><br><span class=\"line\">\t\t\trc , err := f.Open()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> rc.Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\t\t\tdata, err := ioutil.ReadAll(rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//未找到class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absPath</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CompositeEntry\"><a href=\"#CompositeEntry\" class=\"headerlink\" title=\"CompositeEntry\"></a>CompositeEntry</h4><p>CompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CompositeEntry []Entry</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将每个小路径转换成具体的Entry</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCompositeEntry</span><span class=\"params\">(pathList <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\t<span class=\"comment\">//将路径按照分隔符进行分割</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, path := <span class=\"keyword\">range</span> strings.Split(pathList,pathListSeparator)&#123;</span><br><span class=\"line\">\t\tentry := newEntry(path)</span><br><span class=\"line\">\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,entry)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历entry数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//读取class文件，依次调用每一个子路径的readClass方法</span></span><br><span class=\"line\">\t\tdata, from, err := entry.readClass(classname)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,from,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用每个子路径的String方法，用分隔符拼接起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tstrs := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"built_in\">len</span>(self))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\tstrs[i] = entry.String()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(strs,pathListSeparator)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"WildcardEntry\"><a href=\"#WildcardEntry\" class=\"headerlink\" title=\"WildcardEntry\"></a>WildcardEntry</h4><p>WildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWildcardEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//去掉尾部的*</span></span><br><span class=\"line\">\tbaseDir := path[:<span class=\"built_in\">len</span>(path)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\twalkFn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是目录，返回跳过标识</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &amp;&amp; path != baseDir &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> filepath.SkipDir</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//选出jar文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)&#123;</span><br><span class=\"line\">\t\t\tjarEntry := newZipEntry(path)</span><br><span class=\"line\">\t\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,jarEntry)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历baseDir路径，创建zipEntry</span></span><br><span class=\"line\">\tfilepath.Walk(baseDir,walkFn)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">Entry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径中含有分隔符</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.Contains(path,pathListSeparator)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newCompositeEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径末尾是*</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\"*\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newWildcardEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径以jar或者zip结尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)||</span><br><span class=\"line\">\t\tstrings.HasSuffix(path,<span class=\"string\">\".zip\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".ZIP\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> newZipEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newDirEntry(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现Classpath\"><a href=\"#实现Classpath\" class=\"headerlink\" title=\"实现Classpath\"></a>实现Classpath</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Classpath <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbootClasspath Entry</span><br><span class=\"line\">\textClasspath Entry</span><br><span class=\"line\">\tuserClasspath Entry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(jreOption,cpOption <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Classpath</span></span>  &#123;</span><br><span class=\"line\">\tcp := &amp;Classpath&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//解析启动类路径和扩展类路径</span></span><br><span class=\"line\">\tcp.parseBootAndExtClasspath(jreOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\">\tcp.parseUserClasspath(cpOption)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getJreDir</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//优先使用用户输入的-Xjre作为目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jreOption != <span class=\"string\">\"\"</span> &amp;&amp; exists(jreOption)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jreOption</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//在当前目录下寻找jre目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exists(<span class=\"string\">\"./jre\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"./jre\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试使用JAVA_HOME环境变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jh := os.Getenv(<span class=\"string\">\"JAVA_HOME\"</span>); jh != <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filepath.Join(jh,<span class=\"string\">\"jre\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not find jre folder\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断目录是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">exists</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stat(path); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.IsNotExist(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseBootAndExtClasspath</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取jre目录</span></span><br><span class=\"line\">\tjreDir := getJreDir(jreOption)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/*</span></span><br><span class=\"line\">\tjreLibPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.bootClasspath = newWildcardEntry(jreLibPath)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/ext/*</span></span><br><span class=\"line\">\tjreExtPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"ext\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.extClasspath = newWildcardEntry(jreExtPath)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseUserClasspath</span><span class=\"params\">(cpOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cpOption == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tcpOption = <span class=\"string\">\".\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tself.userClasspath = newEntry(cpOption)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//寻找class方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">ReadClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//访问ReadClass方法只需传递类名，不用包含\".class\"后缀</span></span><br><span class=\"line\">\tclassname = classname + <span class=\"string\">\".class\"</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从bootClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.bootClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从extClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.extClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从userClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.readClass(classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>完善main.go中的startJVM</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取Classpath</span></span><br><span class=\"line\">\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cp,cmd.class,cmd.args)</span><br><span class=\"line\">\t<span class=\"comment\">// 将.替换成/(java.lang.String -&gt; java/lang/String)</span></span><br><span class=\"line\">\tclassName := strings.Replace(cmd.class,<span class=\"string\">\".\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 读取class</span></span><br><span class=\"line\">\tclassData, _, err := cp.ReadClass(className)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Could not find or load main class %s\\n\"</span>,cmd.class)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"class data : %v\\n\"</span>,classData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译main.go，并测试-version</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch02 </span><br><span class=\"line\">$ ch02 java.lang.String</span><br><span class=\"line\"><span class=\"comment\"># 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容</span></span><br><span class=\"line\">$ ch02 -Xjre /opt  java.lang.Object </span><br><span class=\"line\"><span class=\"comment\"># 传递错误-Xjre会打印出Could not find or load main class java.lang.Object</span></span><br></pre></td></tr></table></figure>"},{"title":"JAVA-CAS","date":"2019-10-23T06:41:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"# CAS\n\n在看线程池源码的时候发现有很多CAS操作，那么什么是CAS？\n<!-- more -->\n## 定义\nCAS是英文单词 Compare And Swap 的缩写，翻译过来就是比较并替换，它是一种原子操作，同时 CAS 是一种乐观机制。\njava.util.concurrent 包很多功能都是建立在 CAS 之上，如 ReenterLock 内部的 AQS，各种原子类，其底层都用 CAS来实现原子操作。\n\n## 如何解决并发安全问题\n在我们认识 CAS 之前，我们是通过什么来解决并发带来的安全问题呢？\nvolatile 关键字可以保证变量的可见性，但保证不了原子性；\nsynchronized 关键字利用 JVM 字节码层面来实现同步机制，它是一个悲观锁机制。\n\n```java\npublic class Test {\n  public volatile int i;\n  public void add() {\n    i++;\n  }\n}\n```\n使用 `javap -c Test.class` 命令查看看add方法的字节码指令\n```java\npublic void add();\n    Code:\n       0: aload_0\n       1: dup\n       2: getfield      #2                  // Field n:I\n       5: iconst_1\n       6: iadd\n       7: putfield      #2                  // Field n:I\n      10: return\n\n```\ni++被拆分成了几个指令：\n    1. 执行getfield拿到原始i；\n    2. 执行iadd进行加1操作；\n    3. 执行putfield写把累加后的值写回i；\n\n当线程 1 执行到加 1 步骤时，由于还没有执行赋值改变变量的值，这时候并不会刷新主内存区中的变量，\n如果此时线程 2 正好要拷贝该变量的值到自己私有缓存中，问题就出现了，当线程 2 拷贝完以后，线程1正好执行赋值运算，立马更新主内存区的值，那么此时线程 2 的副本就是旧的了，脏读又出现了。\n\n怎么解决这个问题呢？\n在 add 方法加上 synchronized 修饰解决。\n\n```java\npublic class Test {\n  public volatile int i;\n  public synchronized void add() {\n    i++;\n  }\n}\n```\n这个方案当然可行，但是大大降低了性能。\n\n## CAS原理\nCAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。\n更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。\n\n### 源码分析\n\n下面以`AtomicInteger`的实现为例，分析一下CAS是如何实现的。\n\n```java\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // setup to use Unsafe.compareAndSwapInt for updates\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    private volatile int value;\n    // 省略部分代码\n}\n\n```\n**Unsafe**：是CAS的核心类，它可以提供硬件级别的原子操作，它可以获取某个属性在内存中的位置，也可以修改对象的字段值，其底层是用 C/C++ \n**valueOffset**：表示该变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的。\n**value**：用volatile修饰，保证了多线程之间的内存可见性。\n\n\n看看`AtomicInteger`如何实现并发下的累加操作：\n```java\n    // AtomicInteger.getAndAdd\n    public final int getAndAdd(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta);\n    }\n    \n    // unsafe.getAndAddInt\n    public final int getAndAddInt(Object var1, long var2, int var4) {\n        int var5;\n        do {\n            var5 = this.getIntVolatile(var1, var2);\n        } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n        return var5;\n    }\n```\n假设线程A和线程B同时执行getAndAdd操作（分别跑在不同CPU上）：\n\nAtomicInteger里面的value原始值为 n，根据Java内存模型，线程A和线程B各自持有一份value的副本，值为n。\n1. 线程A通过`getIntVolatile(var1, var2)`拿到value值 n，这时线程A被挂起。\n2. 线程B也通过`getIntVolatile(var1, var2)`方法获取到value值 n，运气好，线程B没有被挂起，并执行compareAndSwapInt方法比较内存值也为 n，成功修改内存值为 m。\n3. 这时线程A恢复，执行`compareAndSwapInt`方法比较，发现自己手里的值(n)和内存的值(m)不一致，说明该值已经被其它线程提前修改过了，那只能重新来一遍了。\n4. 重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总是能够看到，线程A继续执行`compareAndSwapInt`进行比较替换，直到成功。\n\n继续深入看看Unsafe类中的compareAndSwapInt方法实现。\n```java\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n```\nJava 并没有直接实现 CAS，CAS 相关的实现是通过 C++ 内联汇编的形式实现的。Java 代码需通过 JNI 才能调用，位于 unsafe.cpp，\n在OpenJDK8里的路径为: openjdk/hotspot/src/share/vm/prims/unsafe.cpp。\n```C\nUNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))\n  UnsafeWrapper(\"Unsafe_CompareAndSwapInt\");\n  oop p = JNIHandles::resolve(obj);\n  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);\n  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;\nUNSAFE_END\n```\n逻辑执行流程：\n1. obj是AtomicInteger对象，通过 JNIHandles::resolve() 获取obj在内存中OOP实例p\n2. 根据成员变量value反射后计算出的内存偏移值offset去内存中取指针addr\n3. 获得更新值x、指针addr、期待值e三个参数后，调用Atomic::cmpxchg(x, addr, e)\n4. 通过Atomic::cmpxchg(x, addr, e)实现CAS\n对应OpenJDK8的路径是: openjdk/hotspot/src/share/vm/runtime/atomic.cpp\n\n\n```C\njbyte Atomic::cmpxchg(jbyte exchange_value, volatile jbyte* dest, jbyte compare_value) {\n  assert(sizeof(jbyte) == 1, \"assumption.\");\n  uintptr_t dest_addr = (uintptr_t)dest;\n  uintptr_t offset = dest_addr % sizeof(jint);\n  volatile jint* dest_int = (volatile jint*)(dest_addr - offset);\n  jint cur = *dest_int;\n  jbyte* cur_as_bytes = (jbyte*)(&cur);\n  jint new_val = cur;\n  jbyte* new_val_as_bytes = (jbyte*)(&new_val);\n  new_val_as_bytes[offset] = exchange_value;\n  while (cur_as_bytes[offset] == compare_value) {\n    jint res = cmpxchg(new_val, dest_int, cur);\n    if (res == cur) break;\n    cur = res;\n    new_val = cur;\n    new_val_as_bytes[offset] = exchange_value;\n  }\n  return cur_as_bytes[offset];\n}\n```\n\n其中的cmpxchg为核心内容. 但是这句代码根据操作系统和处理器的不同, 使用不同的底层代码. \n\n```C\n#include \"runtime/atomic.inline.hpp\"\n```\n\natomic.inline.hpp中定义如下，可见不同不同操作系统, 不同的处理器, 都要走不同的cmpxchg()方法的实现.\n\n```C\n#include \"runtime/atomic.hpp\"\n\n// Linux\n#ifdef TARGET_OS_ARCH_linux_x86\n# include \"atomic_linux_x86.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_sparc\n# include \"atomic_linux_sparc.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_zero\n# include \"atomic_linux_zero.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_arm\n# include \"atomic_linux_arm.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_ppc\n# include \"atomic_linux_ppc.inline.hpp\"\n#endif\n\n// Solaris\n#ifdef TARGET_OS_ARCH_solaris_x86\n# include \"atomic_solaris_x86.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_solaris_sparc\n# include \"atomic_solaris_sparc.inline.hpp\"\n#endif\n\n// Windows\n#ifdef TARGET_OS_ARCH_windows_x86\n# include \"atomic_windows_x86.inline.hpp\"\n#endif\n\n// ..省略\n```\n以其中的linux操作系统 x86处理器为例, atomic_linux_x86.inline.hpp\n在OpenJDK中路径如下: openjdk/hotspot/src/os_cpu/linux_x86/vm/atomic_linux_x86.inline.hpp\n\n```C\n#define LOCK_IF_MP(mp) \"cmp $0, \" #mp \"; je 1f; lock; 1: \"\n\ninline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value) {\n  int mp = os::is_MP();\n  __asm__ volatile (LOCK_IF_MP(%4) \"cmpxchgl %1,(%3)\"\n                    : \"=a\" (exchange_value)\n                    : \"r\" (exchange_value), \"a\" (compare_value), \"r\" (dest), \"r\" (mp)\n                    : \"cc\", \"memory\");\n  return exchange_value;\n}\n```\n已经开始内联汇编了，头疼\n\n`__asm__`：表示汇编的开始\n`volatile`：表示禁止编译器优化\n`cmpxchgl`：就是汇编中x86的比较并交换指令了。\n`LOCK_IF_MP`：是个内联函数，根据当前系统是否为多核处理器决定是否为cmpxchg1指令添加lock前缀。\n\n\n简单说下C内联汇编的语法格式：\n```C\n__asm__ volatile(\"Instruction List\"\n \n: Output\n \n: Input\n \n: Clobber/Modify);\n```\n**instruction list**：它是汇编指令列表\n**Clobber/Modify**：寄存器/内存修改标示。有时候,当你想通知GCC当前内联汇编语句可能会对某些寄存器或内存进行修改,希望GCC在编译时能够将这一点考虑进去;那么你就可以在Clobber/Modify部分声明这些寄存器或内存\n\n所以上述汇编指令解释为：\n嵌入式汇编规定把输出和输入寄存器按统一顺序编号，顺序是从输出寄存器序列从左到右从上到下以%0开始，分别记为%0、%1···%9。也就是说，输出的eax是%0，输入的exchange_value、compare_value、dest、mp分别是%1、%2、%3、%4。\n然后看asm里的第一行指令，**cmpxchgl %1,(%3)**，比较eax(compare_value在eax中)与dest的值，如果相等，那么将**exchange_value**的值赋值给dest；否则，将dest的值赋值给eax。\n然后看输出: \"=a\" (**exchange_value**) 表示把eax中存的值(compare_value)写入**exchange_value**变量中。\n        \n`Atomic::cmpxchg`这个函数最终返回值是exchange_value，也就有两种情况：\n1. 如果cmpxchgl执行时compare_value和dest指针指向内存值相等则会使得dest指针指向内存值变成**exchange_value**，最终eax存的compare_value赋值给了**exchange_value**变量，即函数最终返回的值是原先的compare_value。\n   此时Unsafe_CompareAndSwapInt的返回值(jint)(Atomic::cmpxchg(x, addr, e)) == e就是true，表明CAS成功。\n\n2. 如果cmpxchgl执行时compare_value和(dest)不等则会把当前dest指针指向内存的值写入eax，最终输出时赋值给**exchange_value**变量作为返回值，\n   导致(jint)(Atomic::cmpxchg(x, addr, e)) == e得到false，表明CAS失败。\n\n\n### lock前缀\n在单处理器系统中是不需要加lock的，因为能够在单条指令中完成的操作都可以认为是原子操作，中断只能发生在指令与指令之间。\n在多处理器系统中,由于系统中有多个处理器在独立的运行，即使在能单条指令中完成的操作也可能受到干扰。\n\n在所有的 X86 CPU 上都具有锁定一个特定内存地址的能力，当这个特定内存地址被锁定后，它就可以阻止其他的系统总线读取或修改这个内存地址。这种能力是通过 LOCK 指令前缀再加上前面的汇编指令来实现的。当使用 LOCK 指令前缀时，它会使 CPU 宣告一个 LOCK# 信号，这样就能确保在多处理器系统或多线程竞争的环境下互斥地使用这个内存地址。当指令执行完毕，这个锁定动作也就会消失。\n\n## 缺点\n1. CPU开销较大：在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。\n2. 不能保证代码块的原子性：CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证多个变量共同进行原子性的更新，就得使用Synchronized了。\n3. ABA问题：这是CAS机制最大的问题所在。\n\n## ABA问题\n线程 1 从内存位置 V 取出 A，这时候线程 2 也从内存位置 V 取出 A，此时线程 1 处于挂起状态，线程 2 将位置 V 的值改成 B，最后再改成 A，\n这时候线程 1 再执行，发现位置 V 的值没有变化，尽管线程 1 也更改成功了，但内存地址V中的变量已经经历了A->B->A的改变。\n\n举个例子：\n假设有一个遵循CAS原理的提款机，小灰有100元存款，要用这个提款机来提款50元。\n由于提款机硬件出了点小问题，小灰的提款操作被同时提交两次，开启了两个线程，两个线程都是获取当前值100元，要更新成50元。\n理想情况下，应该一个线程更新成功，另一个线程更新失败，小灰的存款只被扣一次。\n线程1首先执行成功，把余额从100改成50。线程2因为某种原因阻塞了。这时候，小灰的妈妈刚好给小灰汇款50元。\n线程2仍然是阻塞状态，线程3执行成功，把余额从50改成100。\n线程2恢复运行，由于阻塞之前已经获得了“当前值”100，并且经过compare检测，此时存款实际值也是100，所以成功把变量值100更新成了50。\n小灰凭空少了50元钱。\n\n所以真正要做到严谨的CAS机制，我们在Compare阶段不仅要比较期望值A和地址V中的实际值，还要比较变量的版本号是否一致。\n在Java当中，`AtomicStampedReference`类就实现了用版本号做比较的CAS机制。\n\n```java\n    private static class Pair<T> {\n        final T reference;\n        final int stamp;\n        private Pair(T reference, int stamp) {\n            this.reference = reference;\n            this.stamp = stamp;\n        }\n        static <T> Pair<T> of(T reference, int stamp) {\n            return new Pair<T>(reference, stamp);\n        }\n    }\n```\nAtomicStampedReference 的内部类 Pair, reference 维护对象的引用，stamp 维护修改的版本号。\n\n```java\n    public boolean compareAndSet(V   expectedReference,\n                                 V   newReference,\n                                 int expectedStamp,\n                                 int newStamp) {\n        Pair<V> current = pair;\n        return\n            expectedReference == current.reference &&\n            expectedStamp == current.stamp &&\n            ((newReference == current.reference &&\n              newStamp == current.stamp) ||\n             casPair(current, Pair.of(newReference, newStamp)));\n    }\n```\n从 compareAndSet 方法得知，如果要更改内存中的值，不但要值相同，还要版本号相同。\n\n\n## 参考\n* https://www.jianshu.com/p/0e312402f6ca\n* https://blog.csdn.net/dlh0313/article/details/52172833\n* https://www.cnblogs.com/noKing/p/9094983.html\n* https://www.jianshu.com/p/fb6e91b013cc\n* https://objcoding.com/2018/11/29/cas/\n* https://mp.weixin.qq.com/s/nRnQKhiSUrDKu3mz3vItWg\n","source":"_posts/Java-Cas.md","raw":"---\ntitle: JAVA-CAS\ndate: 2019-10-23 14:41:04\ntags:\n    - JAVA\n    - CAS\n    - 学习笔记\ncategories: JAVA\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n# CAS\n\n在看线程池源码的时候发现有很多CAS操作，那么什么是CAS？\n<!-- more -->\n## 定义\nCAS是英文单词 Compare And Swap 的缩写，翻译过来就是比较并替换，它是一种原子操作，同时 CAS 是一种乐观机制。\njava.util.concurrent 包很多功能都是建立在 CAS 之上，如 ReenterLock 内部的 AQS，各种原子类，其底层都用 CAS来实现原子操作。\n\n## 如何解决并发安全问题\n在我们认识 CAS 之前，我们是通过什么来解决并发带来的安全问题呢？\nvolatile 关键字可以保证变量的可见性，但保证不了原子性；\nsynchronized 关键字利用 JVM 字节码层面来实现同步机制，它是一个悲观锁机制。\n\n```java\npublic class Test {\n  public volatile int i;\n  public void add() {\n    i++;\n  }\n}\n```\n使用 `javap -c Test.class` 命令查看看add方法的字节码指令\n```java\npublic void add();\n    Code:\n       0: aload_0\n       1: dup\n       2: getfield      #2                  // Field n:I\n       5: iconst_1\n       6: iadd\n       7: putfield      #2                  // Field n:I\n      10: return\n\n```\ni++被拆分成了几个指令：\n    1. 执行getfield拿到原始i；\n    2. 执行iadd进行加1操作；\n    3. 执行putfield写把累加后的值写回i；\n\n当线程 1 执行到加 1 步骤时，由于还没有执行赋值改变变量的值，这时候并不会刷新主内存区中的变量，\n如果此时线程 2 正好要拷贝该变量的值到自己私有缓存中，问题就出现了，当线程 2 拷贝完以后，线程1正好执行赋值运算，立马更新主内存区的值，那么此时线程 2 的副本就是旧的了，脏读又出现了。\n\n怎么解决这个问题呢？\n在 add 方法加上 synchronized 修饰解决。\n\n```java\npublic class Test {\n  public volatile int i;\n  public synchronized void add() {\n    i++;\n  }\n}\n```\n这个方案当然可行，但是大大降低了性能。\n\n## CAS原理\nCAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。\n更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。\n\n### 源码分析\n\n下面以`AtomicInteger`的实现为例，分析一下CAS是如何实现的。\n\n```java\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // setup to use Unsafe.compareAndSwapInt for updates\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n    private static final long valueOffset;\n\n    static {\n        try {\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n\n    private volatile int value;\n    // 省略部分代码\n}\n\n```\n**Unsafe**：是CAS的核心类，它可以提供硬件级别的原子操作，它可以获取某个属性在内存中的位置，也可以修改对象的字段值，其底层是用 C/C++ \n**valueOffset**：表示该变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的。\n**value**：用volatile修饰，保证了多线程之间的内存可见性。\n\n\n看看`AtomicInteger`如何实现并发下的累加操作：\n```java\n    // AtomicInteger.getAndAdd\n    public final int getAndAdd(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta);\n    }\n    \n    // unsafe.getAndAddInt\n    public final int getAndAddInt(Object var1, long var2, int var4) {\n        int var5;\n        do {\n            var5 = this.getIntVolatile(var1, var2);\n        } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\n        return var5;\n    }\n```\n假设线程A和线程B同时执行getAndAdd操作（分别跑在不同CPU上）：\n\nAtomicInteger里面的value原始值为 n，根据Java内存模型，线程A和线程B各自持有一份value的副本，值为n。\n1. 线程A通过`getIntVolatile(var1, var2)`拿到value值 n，这时线程A被挂起。\n2. 线程B也通过`getIntVolatile(var1, var2)`方法获取到value值 n，运气好，线程B没有被挂起，并执行compareAndSwapInt方法比较内存值也为 n，成功修改内存值为 m。\n3. 这时线程A恢复，执行`compareAndSwapInt`方法比较，发现自己手里的值(n)和内存的值(m)不一致，说明该值已经被其它线程提前修改过了，那只能重新来一遍了。\n4. 重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总是能够看到，线程A继续执行`compareAndSwapInt`进行比较替换，直到成功。\n\n继续深入看看Unsafe类中的compareAndSwapInt方法实现。\n```java\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n```\nJava 并没有直接实现 CAS，CAS 相关的实现是通过 C++ 内联汇编的形式实现的。Java 代码需通过 JNI 才能调用，位于 unsafe.cpp，\n在OpenJDK8里的路径为: openjdk/hotspot/src/share/vm/prims/unsafe.cpp。\n```C\nUNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))\n  UnsafeWrapper(\"Unsafe_CompareAndSwapInt\");\n  oop p = JNIHandles::resolve(obj);\n  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);\n  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;\nUNSAFE_END\n```\n逻辑执行流程：\n1. obj是AtomicInteger对象，通过 JNIHandles::resolve() 获取obj在内存中OOP实例p\n2. 根据成员变量value反射后计算出的内存偏移值offset去内存中取指针addr\n3. 获得更新值x、指针addr、期待值e三个参数后，调用Atomic::cmpxchg(x, addr, e)\n4. 通过Atomic::cmpxchg(x, addr, e)实现CAS\n对应OpenJDK8的路径是: openjdk/hotspot/src/share/vm/runtime/atomic.cpp\n\n\n```C\njbyte Atomic::cmpxchg(jbyte exchange_value, volatile jbyte* dest, jbyte compare_value) {\n  assert(sizeof(jbyte) == 1, \"assumption.\");\n  uintptr_t dest_addr = (uintptr_t)dest;\n  uintptr_t offset = dest_addr % sizeof(jint);\n  volatile jint* dest_int = (volatile jint*)(dest_addr - offset);\n  jint cur = *dest_int;\n  jbyte* cur_as_bytes = (jbyte*)(&cur);\n  jint new_val = cur;\n  jbyte* new_val_as_bytes = (jbyte*)(&new_val);\n  new_val_as_bytes[offset] = exchange_value;\n  while (cur_as_bytes[offset] == compare_value) {\n    jint res = cmpxchg(new_val, dest_int, cur);\n    if (res == cur) break;\n    cur = res;\n    new_val = cur;\n    new_val_as_bytes[offset] = exchange_value;\n  }\n  return cur_as_bytes[offset];\n}\n```\n\n其中的cmpxchg为核心内容. 但是这句代码根据操作系统和处理器的不同, 使用不同的底层代码. \n\n```C\n#include \"runtime/atomic.inline.hpp\"\n```\n\natomic.inline.hpp中定义如下，可见不同不同操作系统, 不同的处理器, 都要走不同的cmpxchg()方法的实现.\n\n```C\n#include \"runtime/atomic.hpp\"\n\n// Linux\n#ifdef TARGET_OS_ARCH_linux_x86\n# include \"atomic_linux_x86.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_sparc\n# include \"atomic_linux_sparc.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_zero\n# include \"atomic_linux_zero.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_arm\n# include \"atomic_linux_arm.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_linux_ppc\n# include \"atomic_linux_ppc.inline.hpp\"\n#endif\n\n// Solaris\n#ifdef TARGET_OS_ARCH_solaris_x86\n# include \"atomic_solaris_x86.inline.hpp\"\n#endif\n#ifdef TARGET_OS_ARCH_solaris_sparc\n# include \"atomic_solaris_sparc.inline.hpp\"\n#endif\n\n// Windows\n#ifdef TARGET_OS_ARCH_windows_x86\n# include \"atomic_windows_x86.inline.hpp\"\n#endif\n\n// ..省略\n```\n以其中的linux操作系统 x86处理器为例, atomic_linux_x86.inline.hpp\n在OpenJDK中路径如下: openjdk/hotspot/src/os_cpu/linux_x86/vm/atomic_linux_x86.inline.hpp\n\n```C\n#define LOCK_IF_MP(mp) \"cmp $0, \" #mp \"; je 1f; lock; 1: \"\n\ninline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value) {\n  int mp = os::is_MP();\n  __asm__ volatile (LOCK_IF_MP(%4) \"cmpxchgl %1,(%3)\"\n                    : \"=a\" (exchange_value)\n                    : \"r\" (exchange_value), \"a\" (compare_value), \"r\" (dest), \"r\" (mp)\n                    : \"cc\", \"memory\");\n  return exchange_value;\n}\n```\n已经开始内联汇编了，头疼\n\n`__asm__`：表示汇编的开始\n`volatile`：表示禁止编译器优化\n`cmpxchgl`：就是汇编中x86的比较并交换指令了。\n`LOCK_IF_MP`：是个内联函数，根据当前系统是否为多核处理器决定是否为cmpxchg1指令添加lock前缀。\n\n\n简单说下C内联汇编的语法格式：\n```C\n__asm__ volatile(\"Instruction List\"\n \n: Output\n \n: Input\n \n: Clobber/Modify);\n```\n**instruction list**：它是汇编指令列表\n**Clobber/Modify**：寄存器/内存修改标示。有时候,当你想通知GCC当前内联汇编语句可能会对某些寄存器或内存进行修改,希望GCC在编译时能够将这一点考虑进去;那么你就可以在Clobber/Modify部分声明这些寄存器或内存\n\n所以上述汇编指令解释为：\n嵌入式汇编规定把输出和输入寄存器按统一顺序编号，顺序是从输出寄存器序列从左到右从上到下以%0开始，分别记为%0、%1···%9。也就是说，输出的eax是%0，输入的exchange_value、compare_value、dest、mp分别是%1、%2、%3、%4。\n然后看asm里的第一行指令，**cmpxchgl %1,(%3)**，比较eax(compare_value在eax中)与dest的值，如果相等，那么将**exchange_value**的值赋值给dest；否则，将dest的值赋值给eax。\n然后看输出: \"=a\" (**exchange_value**) 表示把eax中存的值(compare_value)写入**exchange_value**变量中。\n        \n`Atomic::cmpxchg`这个函数最终返回值是exchange_value，也就有两种情况：\n1. 如果cmpxchgl执行时compare_value和dest指针指向内存值相等则会使得dest指针指向内存值变成**exchange_value**，最终eax存的compare_value赋值给了**exchange_value**变量，即函数最终返回的值是原先的compare_value。\n   此时Unsafe_CompareAndSwapInt的返回值(jint)(Atomic::cmpxchg(x, addr, e)) == e就是true，表明CAS成功。\n\n2. 如果cmpxchgl执行时compare_value和(dest)不等则会把当前dest指针指向内存的值写入eax，最终输出时赋值给**exchange_value**变量作为返回值，\n   导致(jint)(Atomic::cmpxchg(x, addr, e)) == e得到false，表明CAS失败。\n\n\n### lock前缀\n在单处理器系统中是不需要加lock的，因为能够在单条指令中完成的操作都可以认为是原子操作，中断只能发生在指令与指令之间。\n在多处理器系统中,由于系统中有多个处理器在独立的运行，即使在能单条指令中完成的操作也可能受到干扰。\n\n在所有的 X86 CPU 上都具有锁定一个特定内存地址的能力，当这个特定内存地址被锁定后，它就可以阻止其他的系统总线读取或修改这个内存地址。这种能力是通过 LOCK 指令前缀再加上前面的汇编指令来实现的。当使用 LOCK 指令前缀时，它会使 CPU 宣告一个 LOCK# 信号，这样就能确保在多处理器系统或多线程竞争的环境下互斥地使用这个内存地址。当指令执行完毕，这个锁定动作也就会消失。\n\n## 缺点\n1. CPU开销较大：在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。\n2. 不能保证代码块的原子性：CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证多个变量共同进行原子性的更新，就得使用Synchronized了。\n3. ABA问题：这是CAS机制最大的问题所在。\n\n## ABA问题\n线程 1 从内存位置 V 取出 A，这时候线程 2 也从内存位置 V 取出 A，此时线程 1 处于挂起状态，线程 2 将位置 V 的值改成 B，最后再改成 A，\n这时候线程 1 再执行，发现位置 V 的值没有变化，尽管线程 1 也更改成功了，但内存地址V中的变量已经经历了A->B->A的改变。\n\n举个例子：\n假设有一个遵循CAS原理的提款机，小灰有100元存款，要用这个提款机来提款50元。\n由于提款机硬件出了点小问题，小灰的提款操作被同时提交两次，开启了两个线程，两个线程都是获取当前值100元，要更新成50元。\n理想情况下，应该一个线程更新成功，另一个线程更新失败，小灰的存款只被扣一次。\n线程1首先执行成功，把余额从100改成50。线程2因为某种原因阻塞了。这时候，小灰的妈妈刚好给小灰汇款50元。\n线程2仍然是阻塞状态，线程3执行成功，把余额从50改成100。\n线程2恢复运行，由于阻塞之前已经获得了“当前值”100，并且经过compare检测，此时存款实际值也是100，所以成功把变量值100更新成了50。\n小灰凭空少了50元钱。\n\n所以真正要做到严谨的CAS机制，我们在Compare阶段不仅要比较期望值A和地址V中的实际值，还要比较变量的版本号是否一致。\n在Java当中，`AtomicStampedReference`类就实现了用版本号做比较的CAS机制。\n\n```java\n    private static class Pair<T> {\n        final T reference;\n        final int stamp;\n        private Pair(T reference, int stamp) {\n            this.reference = reference;\n            this.stamp = stamp;\n        }\n        static <T> Pair<T> of(T reference, int stamp) {\n            return new Pair<T>(reference, stamp);\n        }\n    }\n```\nAtomicStampedReference 的内部类 Pair, reference 维护对象的引用，stamp 维护修改的版本号。\n\n```java\n    public boolean compareAndSet(V   expectedReference,\n                                 V   newReference,\n                                 int expectedStamp,\n                                 int newStamp) {\n        Pair<V> current = pair;\n        return\n            expectedReference == current.reference &&\n            expectedStamp == current.stamp &&\n            ((newReference == current.reference &&\n              newStamp == current.stamp) ||\n             casPair(current, Pair.of(newReference, newStamp)));\n    }\n```\n从 compareAndSet 方法得知，如果要更改内存中的值，不但要值相同，还要版本号相同。\n\n\n## 参考\n* https://www.jianshu.com/p/0e312402f6ca\n* https://blog.csdn.net/dlh0313/article/details/52172833\n* https://www.cnblogs.com/noKing/p/9094983.html\n* https://www.jianshu.com/p/fb6e91b013cc\n* https://objcoding.com/2018/11/29/cas/\n* https://mp.weixin.qq.com/s/nRnQKhiSUrDKu3mz3vItWg\n","slug":"Java-Cas","published":1,"updated":"2019-12-13T11:13:27.636Z","layout":"post","photos":[],"link":"","_id":"ck4859y97003qt0fyx99lwk3g","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>在看线程池源码的时候发现有很多CAS操作，那么什么是CAS？</p>\n<a id=\"more\"></a>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>CAS是英文单词 Compare And Swap 的缩写，翻译过来就是比较并替换，它是一种原子操作，同时 CAS 是一种乐观机制。<br>java.util.concurrent 包很多功能都是建立在 CAS 之上，如 ReenterLock 内部的 AQS，各种原子类，其底层都用 CAS来实现原子操作。</p>\n<h2 id=\"如何解决并发安全问题\"><a href=\"#如何解决并发安全问题\" class=\"headerlink\" title=\"如何解决并发安全问题\"></a>如何解决并发安全问题</h2><p>在我们认识 CAS 之前，我们是通过什么来解决并发带来的安全问题呢？<br>volatile 关键字可以保证变量的可见性，但保证不了原子性；<br>synchronized 关键字利用 JVM 字节码层面来实现同步机制，它是一个悲观锁机制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>javap -c Test.class</code> 命令查看看add方法的字节码指令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       <span class=\"number\">1</span>: dup</span><br><span class=\"line\">       2: getfield      #2                  // Field n:I</span><br><span class=\"line\">       <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">       <span class=\"number\">6</span>: iadd</span><br><span class=\"line\">       7: putfield      #2                  // Field n:I</span><br><span class=\"line\">      <span class=\"number\">10</span>: <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<p>i++被拆分成了几个指令：<br>    1. 执行getfield拿到原始i；<br>    2. 执行iadd进行加1操作；<br>    3. 执行putfield写把累加后的值写回i；</p>\n<p>当线程 1 执行到加 1 步骤时，由于还没有执行赋值改变变量的值，这时候并不会刷新主内存区中的变量，<br>如果此时线程 2 正好要拷贝该变量的值到自己私有缓存中，问题就出现了，当线程 2 拷贝完以后，线程1正好执行赋值运算，立马更新主内存区的值，那么此时线程 2 的副本就是旧的了，脏读又出现了。</p>\n<p>怎么解决这个问题呢？<br>在 add 方法加上 synchronized 修饰解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方案当然可行，但是大大降低了性能。</p>\n<h2 id=\"CAS原理\"><a href=\"#CAS原理\" class=\"headerlink\" title=\"CAS原理\"></a>CAS原理</h2><p>CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。<br>更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>下面以<code>AtomicInteger</code>的实现为例，分析一下CAS是如何实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(<span class=\"string\">\"value\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Unsafe</strong>：是CAS的核心类，它可以提供硬件级别的原子操作，它可以获取某个属性在内存中的位置，也可以修改对象的字段值，其底层是用 C/C++<br><strong>valueOffset</strong>：表示该变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的。<br><strong>value</strong>：用volatile修饰，保证了多线程之间的内存可见性。</p>\n<p>看看<code>AtomicInteger</code>如何实现并发下的累加操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AtomicInteger.getAndAdd</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> delta)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, delta);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsafe.getAndAddInt</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"keyword\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设线程A和线程B同时执行getAndAdd操作（分别跑在不同CPU上）：</p>\n<p>AtomicInteger里面的value原始值为 n，根据Java内存模型，线程A和线程B各自持有一份value的副本，值为n。</p>\n<ol>\n<li>线程A通过<code>getIntVolatile(var1, var2)</code>拿到value值 n，这时线程A被挂起。</li>\n<li>线程B也通过<code>getIntVolatile(var1, var2)</code>方法获取到value值 n，运气好，线程B没有被挂起，并执行compareAndSwapInt方法比较内存值也为 n，成功修改内存值为 m。</li>\n<li>这时线程A恢复，执行<code>compareAndSwapInt</code>方法比较，发现自己手里的值(n)和内存的值(m)不一致，说明该值已经被其它线程提前修改过了，那只能重新来一遍了。</li>\n<li>重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总是能够看到，线程A继续执行<code>compareAndSwapInt</code>进行比较替换，直到成功。</li>\n</ol>\n<p>继续深入看看Unsafe类中的compareAndSwapInt方法实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4, <span class=\"keyword\">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>Java 并没有直接实现 CAS，CAS 相关的实现是通过 C++ 内联汇编的形式实现的。Java 代码需通过 JNI 才能调用，位于 unsafe.cpp，<br>在OpenJDK8里的路径为: openjdk/hotspot/src/share/vm/prims/unsafe.cpp。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class=\"line\">  UnsafeWrapper(<span class=\"string\">\"Unsafe_CompareAndSwapInt\"</span>);</span><br><span class=\"line\">  oop p = JNIHandles::resolve(obj);</span><br><span class=\"line\">  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (jint)(Atomic::cmpxchg(x, addr, e)) == e;</span><br><span class=\"line\">UNSAFE_END</span><br></pre></td></tr></table></figure>\n\n<p>逻辑执行流程：</p>\n<ol>\n<li>obj是AtomicInteger对象，通过 JNIHandles::resolve() 获取obj在内存中OOP实例p</li>\n<li>根据成员变量value反射后计算出的内存偏移值offset去内存中取指针addr</li>\n<li>获得更新值x、指针addr、期待值e三个参数后，调用Atomic::cmpxchg(x, addr, e)</li>\n<li>通过Atomic::cmpxchg(x, addr, e)实现CAS<br>对应OpenJDK8的路径是: openjdk/hotspot/src/share/vm/runtime/atomic.cpp</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jbyte Atomic::cmpxchg(jbyte exchange_value, <span class=\"keyword\">volatile</span> jbyte* dest, jbyte compare_value) &#123;</span><br><span class=\"line\">  assert(<span class=\"keyword\">sizeof</span>(jbyte) == <span class=\"number\">1</span>, <span class=\"string\">\"assumption.\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">uintptr_t</span> dest_addr = (<span class=\"keyword\">uintptr_t</span>)dest;</span><br><span class=\"line\">  <span class=\"keyword\">uintptr_t</span> offset = dest_addr % <span class=\"keyword\">sizeof</span>(jint);</span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> jint* dest_int = (<span class=\"keyword\">volatile</span> jint*)(dest_addr - offset);</span><br><span class=\"line\">  jint cur = *dest_int;</span><br><span class=\"line\">  jbyte* cur_as_bytes = (jbyte*)(&amp;cur);</span><br><span class=\"line\">  jint new_val = cur;</span><br><span class=\"line\">  jbyte* new_val_as_bytes = (jbyte*)(&amp;new_val);</span><br><span class=\"line\">  new_val_as_bytes[offset] = exchange_value;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur_as_bytes[offset] == compare_value) &#123;</span><br><span class=\"line\">    jint res = cmpxchg(new_val, dest_int, cur);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res == cur) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    cur = res;</span><br><span class=\"line\">    new_val = cur;</span><br><span class=\"line\">    new_val_as_bytes[offset] = exchange_value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cur_as_bytes[offset];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的cmpxchg为核心内容. 但是这句代码根据操作系统和处理器的不同, 使用不同的底层代码. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"runtime/atomic.inline.hpp\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>atomic.inline.hpp中定义如下，可见不同不同操作系统, 不同的处理器, 都要走不同的cmpxchg()方法的实现.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"runtime/atomic.hpp\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Linux</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_x86</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_x86.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_sparc</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_sparc.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_zero</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_zero.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_arm</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_arm.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_ppc</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_ppc.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Solaris</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_solaris_x86</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_solaris_x86.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_solaris_sparc</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_solaris_sparc.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Windows</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_windows_x86</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_windows_x86.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..省略</span></span><br></pre></td></tr></table></figure>\n\n<p>以其中的linux操作系统 x86处理器为例, atomic_linux_x86.inline.hpp<br>在OpenJDK中路径如下: openjdk/hotspot/src/os_cpu/linux_x86/vm/atomic_linux_x86.inline.hpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOCK_IF_MP(mp) <span class=\"meta-string\">\"cmp $0, \"</span> #mp <span class=\"meta-string\">\"; je 1f; lock; 1: \"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> jint     Atomic::cmpxchg    (jint     exchange_value, <span class=\"keyword\">volatile</span> jint*     dest, jint     compare_value) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mp = os::is_MP();</span><br><span class=\"line\">  __<span class=\"function\">asm__ <span class=\"title\">volatile</span> <span class=\"params\">(LOCK_IF_MP(%<span class=\"number\">4</span>) <span class=\"string\">\"cmpxchgl %1,(%3)\"</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    : <span class=\"string\">\"=a\"</span> (exchange_value)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    : <span class=\"string\">\"r\"</span> (exchange_value), <span class=\"string\">\"a\"</span> (compare_value), <span class=\"string\">\"r\"</span> (dest), <span class=\"string\">\"r\"</span> (mp)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    : <span class=\"string\">\"cc\"</span>, <span class=\"string\">\"memory\"</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> exchange_value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已经开始内联汇编了，头疼</p>\n<p><code>__asm__</code>：表示汇编的开始<br><code>volatile</code>：表示禁止编译器优化<br><code>cmpxchgl</code>：就是汇编中x86的比较并交换指令了。<br><code>LOCK_IF_MP</code>：是个内联函数，根据当前系统是否为多核处理器决定是否为cmpxchg1指令添加lock前缀。</p>\n<p>简单说下C内联汇编的语法格式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">asm__ <span class=\"title\">volatile</span><span class=\"params\">(<span class=\"string\">\"Instruction List\"</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">: Output</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">: Input</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">: Clobber/Modify)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>instruction list</strong>：它是汇编指令列表<br><strong>Clobber/Modify</strong>：寄存器/内存修改标示。有时候,当你想通知GCC当前内联汇编语句可能会对某些寄存器或内存进行修改,希望GCC在编译时能够将这一点考虑进去;那么你就可以在Clobber/Modify部分声明这些寄存器或内存</p>\n<p>所以上述汇编指令解释为：<br>嵌入式汇编规定把输出和输入寄存器按统一顺序编号，顺序是从输出寄存器序列从左到右从上到下以%0开始，分别记为%0、%1···%9。也就是说，输出的eax是%0，输入的exchange_value、compare_value、dest、mp分别是%1、%2、%3、%4。<br>然后看asm里的第一行指令，<strong>cmpxchgl %1,(%3)</strong>，比较eax(compare_value在eax中)与dest的值，如果相等，那么将<strong>exchange_value</strong>的值赋值给dest；否则，将dest的值赋值给eax。<br>然后看输出: “=a” (<strong>exchange_value</strong>) 表示把eax中存的值(compare_value)写入<strong>exchange_value</strong>变量中。</p>\n<p><code>Atomic::cmpxchg</code>这个函数最终返回值是exchange_value，也就有两种情况：</p>\n<ol>\n<li><p>如果cmpxchgl执行时compare_value和dest指针指向内存值相等则会使得dest指针指向内存值变成<strong>exchange_value</strong>，最终eax存的compare_value赋值给了<strong>exchange_value</strong>变量，即函数最终返回的值是原先的compare_value。<br>此时Unsafe_CompareAndSwapInt的返回值(jint)(Atomic::cmpxchg(x, addr, e)) == e就是true，表明CAS成功。</p>\n</li>\n<li><p>如果cmpxchgl执行时compare_value和(dest)不等则会把当前dest指针指向内存的值写入eax，最终输出时赋值给<strong>exchange_value</strong>变量作为返回值，<br>导致(jint)(Atomic::cmpxchg(x, addr, e)) == e得到false，表明CAS失败。</p>\n</li>\n</ol>\n<h3 id=\"lock前缀\"><a href=\"#lock前缀\" class=\"headerlink\" title=\"lock前缀\"></a>lock前缀</h3><p>在单处理器系统中是不需要加lock的，因为能够在单条指令中完成的操作都可以认为是原子操作，中断只能发生在指令与指令之间。<br>在多处理器系统中,由于系统中有多个处理器在独立的运行，即使在能单条指令中完成的操作也可能受到干扰。</p>\n<p>在所有的 X86 CPU 上都具有锁定一个特定内存地址的能力，当这个特定内存地址被锁定后，它就可以阻止其他的系统总线读取或修改这个内存地址。这种能力是通过 LOCK 指令前缀再加上前面的汇编指令来实现的。当使用 LOCK 指令前缀时，它会使 CPU 宣告一个 LOCK# 信号，这样就能确保在多处理器系统或多线程竞争的环境下互斥地使用这个内存地址。当指令执行完毕，这个锁定动作也就会消失。</p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>CPU开销较大：在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。</li>\n<li>不能保证代码块的原子性：CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证多个变量共同进行原子性的更新，就得使用Synchronized了。</li>\n<li>ABA问题：这是CAS机制最大的问题所在。</li>\n</ol>\n<h2 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h2><p>线程 1 从内存位置 V 取出 A，这时候线程 2 也从内存位置 V 取出 A，此时线程 1 处于挂起状态，线程 2 将位置 V 的值改成 B，最后再改成 A，<br>这时候线程 1 再执行，发现位置 V 的值没有变化，尽管线程 1 也更改成功了，但内存地址V中的变量已经经历了A-&gt;B-&gt;A的改变。</p>\n<p>举个例子：<br>假设有一个遵循CAS原理的提款机，小灰有100元存款，要用这个提款机来提款50元。<br>由于提款机硬件出了点小问题，小灰的提款操作被同时提交两次，开启了两个线程，两个线程都是获取当前值100元，要更新成50元。<br>理想情况下，应该一个线程更新成功，另一个线程更新失败，小灰的存款只被扣一次。<br>线程1首先执行成功，把余额从100改成50。线程2因为某种原因阻塞了。这时候，小灰的妈妈刚好给小灰汇款50元。<br>线程2仍然是阻塞状态，线程3执行成功，把余额从50改成100。<br>线程2恢复运行，由于阻塞之前已经获得了“当前值”100，并且经过compare检测，此时存款实际值也是100，所以成功把变量值100更新成了50。<br>小灰凭空少了50元钱。</p>\n<p>所以真正要做到严谨的CAS机制，我们在Compare阶段不仅要比较期望值A和地址V中的实际值，还要比较变量的版本号是否一致。<br>在Java当中，<code>AtomicStampedReference</code>类就实现了用版本号做比较的CAS机制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> T reference;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> stamp;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Pair</span><span class=\"params\">(T reference, <span class=\"keyword\">int</span> stamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reference = reference;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stamp = stamp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Pair&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T reference, <span class=\"keyword\">int</span> stamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pair&lt;T&gt;(reference, stamp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AtomicStampedReference 的内部类 Pair, reference 维护对象的引用，stamp 维护修改的版本号。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(V   expectedReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             V   newReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">int</span> expectedStamp,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">int</span> newStamp)</span> </span>&#123;</span><br><span class=\"line\">    Pair&lt;V&gt; current = pair;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">        expectedReference == current.reference &amp;&amp;</span><br><span class=\"line\">        expectedStamp == current.stamp &amp;&amp;</span><br><span class=\"line\">        ((newReference == current.reference &amp;&amp;</span><br><span class=\"line\">          newStamp == current.stamp) ||</span><br><span class=\"line\">         casPair(current, Pair.of(newReference, newStamp)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从 compareAndSet 方法得知，如果要更改内存中的值，不但要值相同，还要版本号相同。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/0e312402f6ca\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0e312402f6ca</a></li>\n<li><a href=\"https://blog.csdn.net/dlh0313/article/details/52172833\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dlh0313/article/details/52172833</a></li>\n<li><a href=\"https://www.cnblogs.com/noKing/p/9094983.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/noKing/p/9094983.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/fb6e91b013cc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fb6e91b013cc</a></li>\n<li><a href=\"https://objcoding.com/2018/11/29/cas/\" target=\"_blank\" rel=\"noopener\">https://objcoding.com/2018/11/29/cas/</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/nRnQKhiSUrDKu3mz3vItWg\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/nRnQKhiSUrDKu3mz3vItWg</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><p>在看线程池源码的时候发现有很多CAS操作，那么什么是CAS？</p>","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>CAS是英文单词 Compare And Swap 的缩写，翻译过来就是比较并替换，它是一种原子操作，同时 CAS 是一种乐观机制。<br>java.util.concurrent 包很多功能都是建立在 CAS 之上，如 ReenterLock 内部的 AQS，各种原子类，其底层都用 CAS来实现原子操作。</p>\n<h2 id=\"如何解决并发安全问题\"><a href=\"#如何解决并发安全问题\" class=\"headerlink\" title=\"如何解决并发安全问题\"></a>如何解决并发安全问题</h2><p>在我们认识 CAS 之前，我们是通过什么来解决并发带来的安全问题呢？<br>volatile 关键字可以保证变量的可见性，但保证不了原子性；<br>synchronized 关键字利用 JVM 字节码层面来实现同步机制，它是一个悲观锁机制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>javap -c Test.class</code> 命令查看看add方法的字节码指令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">       <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">       <span class=\"number\">1</span>: dup</span><br><span class=\"line\">       2: getfield      #2                  // Field n:I</span><br><span class=\"line\">       <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">       <span class=\"number\">6</span>: iadd</span><br><span class=\"line\">       7: putfield      #2                  // Field n:I</span><br><span class=\"line\">      <span class=\"number\">10</span>: <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<p>i++被拆分成了几个指令：<br>    1. 执行getfield拿到原始i；<br>    2. 执行iadd进行加1操作；<br>    3. 执行putfield写把累加后的值写回i；</p>\n<p>当线程 1 执行到加 1 步骤时，由于还没有执行赋值改变变量的值，这时候并不会刷新主内存区中的变量，<br>如果此时线程 2 正好要拷贝该变量的值到自己私有缓存中，问题就出现了，当线程 2 拷贝完以后，线程1正好执行赋值运算，立马更新主内存区的值，那么此时线程 2 的副本就是旧的了，脏读又出现了。</p>\n<p>怎么解决这个问题呢？<br>在 add 方法加上 synchronized 修饰解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方案当然可行，但是大大降低了性能。</p>\n<h2 id=\"CAS原理\"><a href=\"#CAS原理\" class=\"headerlink\" title=\"CAS原理\"></a>CAS原理</h2><p>CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。<br>更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存值修改为 B 并返回 true，否则什么都不做，并返回 false。</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>下面以<code>AtomicInteger</code>的实现为例，分析一下CAS是如何实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(<span class=\"string\">\"value\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Unsafe</strong>：是CAS的核心类，它可以提供硬件级别的原子操作，它可以获取某个属性在内存中的位置，也可以修改对象的字段值，其底层是用 C/C++<br><strong>valueOffset</strong>：表示该变量值在内存中的偏移地址，因为Unsafe就是根据内存偏移地址获取数据的。<br><strong>value</strong>：用volatile修饰，保证了多线程之间的内存可见性。</p>\n<p>看看<code>AtomicInteger</code>如何实现并发下的累加操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AtomicInteger.getAndAdd</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> delta)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"keyword\">this</span>, valueOffset, delta);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unsafe.getAndAddInt</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"keyword\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设线程A和线程B同时执行getAndAdd操作（分别跑在不同CPU上）：</p>\n<p>AtomicInteger里面的value原始值为 n，根据Java内存模型，线程A和线程B各自持有一份value的副本，值为n。</p>\n<ol>\n<li>线程A通过<code>getIntVolatile(var1, var2)</code>拿到value值 n，这时线程A被挂起。</li>\n<li>线程B也通过<code>getIntVolatile(var1, var2)</code>方法获取到value值 n，运气好，线程B没有被挂起，并执行compareAndSwapInt方法比较内存值也为 n，成功修改内存值为 m。</li>\n<li>这时线程A恢复，执行<code>compareAndSwapInt</code>方法比较，发现自己手里的值(n)和内存的值(m)不一致，说明该值已经被其它线程提前修改过了，那只能重新来一遍了。</li>\n<li>重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总是能够看到，线程A继续执行<code>compareAndSwapInt</code>进行比较替换，直到成功。</li>\n</ol>\n<p>继续深入看看Unsafe类中的compareAndSwapInt方法实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4, <span class=\"keyword\">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>Java 并没有直接实现 CAS，CAS 相关的实现是通过 C++ 内联汇编的形式实现的。Java 代码需通过 JNI 才能调用，位于 unsafe.cpp，<br>在OpenJDK8里的路径为: openjdk/hotspot/src/share/vm/prims/unsafe.cpp。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class=\"line\">  UnsafeWrapper(<span class=\"string\">\"Unsafe_CompareAndSwapInt\"</span>);</span><br><span class=\"line\">  oop p = JNIHandles::resolve(obj);</span><br><span class=\"line\">  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (jint)(Atomic::cmpxchg(x, addr, e)) == e;</span><br><span class=\"line\">UNSAFE_END</span><br></pre></td></tr></table></figure>\n\n<p>逻辑执行流程：</p>\n<ol>\n<li>obj是AtomicInteger对象，通过 JNIHandles::resolve() 获取obj在内存中OOP实例p</li>\n<li>根据成员变量value反射后计算出的内存偏移值offset去内存中取指针addr</li>\n<li>获得更新值x、指针addr、期待值e三个参数后，调用Atomic::cmpxchg(x, addr, e)</li>\n<li>通过Atomic::cmpxchg(x, addr, e)实现CAS<br>对应OpenJDK8的路径是: openjdk/hotspot/src/share/vm/runtime/atomic.cpp</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jbyte Atomic::cmpxchg(jbyte exchange_value, <span class=\"keyword\">volatile</span> jbyte* dest, jbyte compare_value) &#123;</span><br><span class=\"line\">  assert(<span class=\"keyword\">sizeof</span>(jbyte) == <span class=\"number\">1</span>, <span class=\"string\">\"assumption.\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">uintptr_t</span> dest_addr = (<span class=\"keyword\">uintptr_t</span>)dest;</span><br><span class=\"line\">  <span class=\"keyword\">uintptr_t</span> offset = dest_addr % <span class=\"keyword\">sizeof</span>(jint);</span><br><span class=\"line\">  <span class=\"keyword\">volatile</span> jint* dest_int = (<span class=\"keyword\">volatile</span> jint*)(dest_addr - offset);</span><br><span class=\"line\">  jint cur = *dest_int;</span><br><span class=\"line\">  jbyte* cur_as_bytes = (jbyte*)(&amp;cur);</span><br><span class=\"line\">  jint new_val = cur;</span><br><span class=\"line\">  jbyte* new_val_as_bytes = (jbyte*)(&amp;new_val);</span><br><span class=\"line\">  new_val_as_bytes[offset] = exchange_value;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur_as_bytes[offset] == compare_value) &#123;</span><br><span class=\"line\">    jint res = cmpxchg(new_val, dest_int, cur);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res == cur) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    cur = res;</span><br><span class=\"line\">    new_val = cur;</span><br><span class=\"line\">    new_val_as_bytes[offset] = exchange_value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cur_as_bytes[offset];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中的cmpxchg为核心内容. 但是这句代码根据操作系统和处理器的不同, 使用不同的底层代码. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"runtime/atomic.inline.hpp\"</span></span></span><br></pre></td></tr></table></figure>\n\n<p>atomic.inline.hpp中定义如下，可见不同不同操作系统, 不同的处理器, 都要走不同的cmpxchg()方法的实现.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"runtime/atomic.hpp\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Linux</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_x86</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_x86.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_sparc</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_sparc.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_zero</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_zero.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_arm</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_arm.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_linux_ppc</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_linux_ppc.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Solaris</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_solaris_x86</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_solaris_x86.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_solaris_sparc</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_solaris_sparc.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Windows</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TARGET_OS_ARCH_windows_x86</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"atomic_windows_x86.inline.hpp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..省略</span></span><br></pre></td></tr></table></figure>\n\n<p>以其中的linux操作系统 x86处理器为例, atomic_linux_x86.inline.hpp<br>在OpenJDK中路径如下: openjdk/hotspot/src/os_cpu/linux_x86/vm/atomic_linux_x86.inline.hpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOCK_IF_MP(mp) <span class=\"meta-string\">\"cmp $0, \"</span> #mp <span class=\"meta-string\">\"; je 1f; lock; 1: \"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> jint     Atomic::cmpxchg    (jint     exchange_value, <span class=\"keyword\">volatile</span> jint*     dest, jint     compare_value) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mp = os::is_MP();</span><br><span class=\"line\">  __<span class=\"function\">asm__ <span class=\"title\">volatile</span> <span class=\"params\">(LOCK_IF_MP(%<span class=\"number\">4</span>) <span class=\"string\">\"cmpxchgl %1,(%3)\"</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    : <span class=\"string\">\"=a\"</span> (exchange_value)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    : <span class=\"string\">\"r\"</span> (exchange_value), <span class=\"string\">\"a\"</span> (compare_value), <span class=\"string\">\"r\"</span> (dest), <span class=\"string\">\"r\"</span> (mp)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    : <span class=\"string\">\"cc\"</span>, <span class=\"string\">\"memory\"</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> exchange_value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>已经开始内联汇编了，头疼</p>\n<p><code>__asm__</code>：表示汇编的开始<br><code>volatile</code>：表示禁止编译器优化<br><code>cmpxchgl</code>：就是汇编中x86的比较并交换指令了。<br><code>LOCK_IF_MP</code>：是个内联函数，根据当前系统是否为多核处理器决定是否为cmpxchg1指令添加lock前缀。</p>\n<p>简单说下C内联汇编的语法格式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"function\">asm__ <span class=\"title\">volatile</span><span class=\"params\">(<span class=\"string\">\"Instruction List\"</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">: Output</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">: Input</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">: Clobber/Modify)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>instruction list</strong>：它是汇编指令列表<br><strong>Clobber/Modify</strong>：寄存器/内存修改标示。有时候,当你想通知GCC当前内联汇编语句可能会对某些寄存器或内存进行修改,希望GCC在编译时能够将这一点考虑进去;那么你就可以在Clobber/Modify部分声明这些寄存器或内存</p>\n<p>所以上述汇编指令解释为：<br>嵌入式汇编规定把输出和输入寄存器按统一顺序编号，顺序是从输出寄存器序列从左到右从上到下以%0开始，分别记为%0、%1···%9。也就是说，输出的eax是%0，输入的exchange_value、compare_value、dest、mp分别是%1、%2、%3、%4。<br>然后看asm里的第一行指令，<strong>cmpxchgl %1,(%3)</strong>，比较eax(compare_value在eax中)与dest的值，如果相等，那么将<strong>exchange_value</strong>的值赋值给dest；否则，将dest的值赋值给eax。<br>然后看输出: “=a” (<strong>exchange_value</strong>) 表示把eax中存的值(compare_value)写入<strong>exchange_value</strong>变量中。</p>\n<p><code>Atomic::cmpxchg</code>这个函数最终返回值是exchange_value，也就有两种情况：</p>\n<ol>\n<li><p>如果cmpxchgl执行时compare_value和dest指针指向内存值相等则会使得dest指针指向内存值变成<strong>exchange_value</strong>，最终eax存的compare_value赋值给了<strong>exchange_value</strong>变量，即函数最终返回的值是原先的compare_value。<br>此时Unsafe_CompareAndSwapInt的返回值(jint)(Atomic::cmpxchg(x, addr, e)) == e就是true，表明CAS成功。</p>\n</li>\n<li><p>如果cmpxchgl执行时compare_value和(dest)不等则会把当前dest指针指向内存的值写入eax，最终输出时赋值给<strong>exchange_value</strong>变量作为返回值，<br>导致(jint)(Atomic::cmpxchg(x, addr, e)) == e得到false，表明CAS失败。</p>\n</li>\n</ol>\n<h3 id=\"lock前缀\"><a href=\"#lock前缀\" class=\"headerlink\" title=\"lock前缀\"></a>lock前缀</h3><p>在单处理器系统中是不需要加lock的，因为能够在单条指令中完成的操作都可以认为是原子操作，中断只能发生在指令与指令之间。<br>在多处理器系统中,由于系统中有多个处理器在独立的运行，即使在能单条指令中完成的操作也可能受到干扰。</p>\n<p>在所有的 X86 CPU 上都具有锁定一个特定内存地址的能力，当这个特定内存地址被锁定后，它就可以阻止其他的系统总线读取或修改这个内存地址。这种能力是通过 LOCK 指令前缀再加上前面的汇编指令来实现的。当使用 LOCK 指令前缀时，它会使 CPU 宣告一个 LOCK# 信号，这样就能确保在多处理器系统或多线程竞争的环境下互斥地使用这个内存地址。当指令执行完毕，这个锁定动作也就会消失。</p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>CPU开销较大：在并发量比较高的情况下，如果许多线程反复尝试更新某一个变量，却又一直更新不成功，循环往复，会给CPU带来很大的压力。</li>\n<li>不能保证代码块的原子性：CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证多个变量共同进行原子性的更新，就得使用Synchronized了。</li>\n<li>ABA问题：这是CAS机制最大的问题所在。</li>\n</ol>\n<h2 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h2><p>线程 1 从内存位置 V 取出 A，这时候线程 2 也从内存位置 V 取出 A，此时线程 1 处于挂起状态，线程 2 将位置 V 的值改成 B，最后再改成 A，<br>这时候线程 1 再执行，发现位置 V 的值没有变化，尽管线程 1 也更改成功了，但内存地址V中的变量已经经历了A-&gt;B-&gt;A的改变。</p>\n<p>举个例子：<br>假设有一个遵循CAS原理的提款机，小灰有100元存款，要用这个提款机来提款50元。<br>由于提款机硬件出了点小问题，小灰的提款操作被同时提交两次，开启了两个线程，两个线程都是获取当前值100元，要更新成50元。<br>理想情况下，应该一个线程更新成功，另一个线程更新失败，小灰的存款只被扣一次。<br>线程1首先执行成功，把余额从100改成50。线程2因为某种原因阻塞了。这时候，小灰的妈妈刚好给小灰汇款50元。<br>线程2仍然是阻塞状态，线程3执行成功，把余额从50改成100。<br>线程2恢复运行，由于阻塞之前已经获得了“当前值”100，并且经过compare检测，此时存款实际值也是100，所以成功把变量值100更新成了50。<br>小灰凭空少了50元钱。</p>\n<p>所以真正要做到严谨的CAS机制，我们在Compare阶段不仅要比较期望值A和地址V中的实际值，还要比较变量的版本号是否一致。<br>在Java当中，<code>AtomicStampedReference</code>类就实现了用版本号做比较的CAS机制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> T reference;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> stamp;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Pair</span><span class=\"params\">(T reference, <span class=\"keyword\">int</span> stamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reference = reference;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stamp = stamp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Pair&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T reference, <span class=\"keyword\">int</span> stamp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pair&lt;T&gt;(reference, stamp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AtomicStampedReference 的内部类 Pair, reference 维护对象的引用，stamp 维护修改的版本号。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(V   expectedReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             V   newReference,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">int</span> expectedStamp,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             <span class=\"keyword\">int</span> newStamp)</span> </span>&#123;</span><br><span class=\"line\">    Pair&lt;V&gt; current = pair;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">        expectedReference == current.reference &amp;&amp;</span><br><span class=\"line\">        expectedStamp == current.stamp &amp;&amp;</span><br><span class=\"line\">        ((newReference == current.reference &amp;&amp;</span><br><span class=\"line\">          newStamp == current.stamp) ||</span><br><span class=\"line\">         casPair(current, Pair.of(newReference, newStamp)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从 compareAndSet 方法得知，如果要更改内存中的值，不但要值相同，还要版本号相同。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/0e312402f6ca\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0e312402f6ca</a></li>\n<li><a href=\"https://blog.csdn.net/dlh0313/article/details/52172833\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dlh0313/article/details/52172833</a></li>\n<li><a href=\"https://www.cnblogs.com/noKing/p/9094983.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/noKing/p/9094983.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/fb6e91b013cc\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fb6e91b013cc</a></li>\n<li><a href=\"https://objcoding.com/2018/11/29/cas/\" target=\"_blank\" rel=\"noopener\">https://objcoding.com/2018/11/29/cas/</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/nRnQKhiSUrDKu3mz3vItWg\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/nRnQKhiSUrDKu3mz3vItWg</a></li>\n</ul>"},{"title":"redis-sds动态字符串【学习笔记】","date":"2019-03-27T07:56:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"## SDS定义\n\n```c\n/*\n * 类型别名，用于指向 sdshdr 的 buf 属性\n */\ntypedef char *sds;\n\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n\n```\n<!-- more -->\n## SDS常用函数\n\n### sdslen-sds长度\n```c\n/*\n * 返回 sds 实际保存的字符串的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->len;\n}\n\n```\ns 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址\nchar buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。\n具体结构如下图\n![sdshdr](Redis-sds/sdshdr.png)\n### sdsavail-sds可用free空间长度\n```c\n/*\n * 返回 sds 可用空间的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n\n### sdsnewlen-根据字符串长度创建sds\n```c\n/**\n * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds\n * @param init 初始化字符串指针\n * @param initlen 初始化字符串的长度\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    // T = O(N)\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1);\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n### sdsnew-创建sds\n```c\n/**\n * 根据给定字符串 init ，创建一个包含同样字符串的 sds\n * @param init 如果输入为 NULL ，那么创建一个空白 sds\n * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n### sdsempty-创建空sds\n```c\n/**\n * 创建并返回一个只保存了空字符串 \"\" 的 sds\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(1)\n */\nsds sdsempty(void) {\n    return sdsnewlen(\"\",0);\n}\n```\n### sdsdup-复制sds创建副本\n```c\n/**\n * 复制给定 sds 创建副本\n * @param s sds\n * @return 创建成功返回输入 sds 的副本\n *  T = O(N)\n */\nsds sdsdup(const sds s) {\n    return sdsnewlen(s, sdslen(s));\n}\n```\n### sdsfree-释放sds\n```c\n/**\n * 释放给定的 sds\n * @param s \n * T = O(N)\n */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    zfree(s-sizeof(struct sdshdr));\n}\n```\n### sdsgrowzero-扩充sds未使用空间补0\n```c\n/**\n * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。\n * @param s\n * @param len 指定长度\n * @return 扩充成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdsgrowzero(sds s, size_t len) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    size_t totlen, curlen = sh->len;\n\n    // 如果 len 比字符串的现有长度小，\n    // 那么直接返回，不做动作\n    if (len <= curlen) return s;\n\n    // 扩展 sds\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len-curlen);\n    // 如果内存不足，直接返回\n    if (s == NULL) return NULL;\n\n    // 将新分配的空间用 0 填充，防止出现垃圾内容\n    // T = O(N)\n    sh = (void*)(s-(sizeof(struct sdshdr)));\n    memset(s+curlen,0,(len-curlen+1));\n\n    // 更新属性\n    totlen = sh->len+sh->free;\n    sh->len = len;\n    sh->free = totlen-sh->len;\n\n    // 返回新的 sds\n    return s;\n}\n\n/**\n * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，\n * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）\n * @param s \n * @param addlen \n * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL\n * T = O(N)\n */\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n\n    struct sdshdr *sh, *newsh;\n\n    // 获取 s 目前的空余空间长度\n    size_t free = sdsavail(s);\n\n    size_t len, newlen;\n\n    // s 目前的空余空间已经足够，无须再进行扩展，直接返回\n    if (free >= addlen) return s;\n\n    // 获取 s 目前已占用空间的长度\n    len = sdslen(s);\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // s 最少需要的长度\n    newlen = (len+addlen);\n\n    // 根据新长度，为 s 分配新空间所需的大小\n    if (newlen < SDS_MAX_PREALLOC)\n        // 如果新长度小于 SDS_MAX_PREALLOC \n        // 那么为它分配两倍于所需长度的空间\n        newlen *= 2;\n    else\n        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC\n        newlen += SDS_MAX_PREALLOC;\n    // T = O(N)\n    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);\n\n    // 内存不足，分配失败，返回\n    if (newsh == NULL) return NULL;\n\n    // 更新 sds 的空余长度\n    newsh->free = newlen - len;\n\n    // 返回 sds\n    return newsh->buf;\n}\n\n/*\n * 最大预分配长度\n */\n#define SDS_MAX_PREALLOC (1024*1024)\n```\n\n### sdscatlen-根据字符串长度将字符串追加到sds末尾\n```c\n/**\n *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾\n * @param s\n * @param t 字符串t\n * @param len t的长度\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatlen(sds s, const void *t, size_t len) {\n    \n    struct sdshdr *sh;\n    \n    // 原有字符串长度\n    size_t curlen = sdslen(s);\n\n    // 扩展 sds 空间\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len);\n\n    // 内存不足？直接返回\n    if (s == NULL) return NULL;\n\n    // 复制 t 中的内容到字符串后部\n    // T = O(N)\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n    memcpy(s+curlen, t, len);\n\n    // 更新属性\n    sh->len = curlen+len;\n    sh->free = sh->free-len;\n\n    // 添加新结尾符号\n    s[curlen+len] = '\\0';\n\n    // 返回新 sds\n    return s;\n}\n```\n### sdscat-将字符串追加到sds末尾\n```c\n/**\n * 将给定字符串 t 追加到 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n *  T = O(N)\n */\nsds sdscat(sds s, const char *t) {\n    return sdscatlen(s, t, strlen(t));\n}\n```\n\n### sdscatsds-将sds追加到另一个sds末尾\n```c\n/**\n * 将另一个 sds 追加到一个 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatsds(sds s, const sds t) {\n    return sdscatlen(s, t, sdslen(t));\n}\n```\n### sdscpylen-将字符串前len复制到sds\n```c\n/**\n * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符\n * 如果 sds 的长度少于 len 个字符，那么扩展 sds\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpylen(sds s, const char *t, size_t len) {\n\n    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // sds 现有 buf 的长度\n    size_t totlen = sh->free+sh->len;\n\n    // 如果 s 的 buf 长度不满足 len ，那么扩展它\n    if (totlen < len) {\n        // T = O(N)\n        s = sdsMakeRoomFor(s,len-sh->len);\n        if (s == NULL) return NULL;\n        sh = (void*) (s-(sizeof(struct sdshdr)));\n        totlen = sh->free+sh->len;\n    }\n\n    // 复制内容\n    // T = O(N)\n    memcpy(s, t, len);\n\n    // 添加终结符号\n    s[len] = '\\0';\n\n    // 更新属性\n    sh->len = len;\n    sh->free = totlen-len;\n\n    // 返回新的 sds\n    return s;\n}\n```\n### sdscpy-将字符串复制到 sds 当中\n```c\n/**\n * 将字符串复制到 sds 当中,覆盖原有的字符\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpy(sds s, const char *t) {\n    return sdscpylen(s, t, strlen(t));\n}\n```","source":"_posts/Redis-sds.md","raw":"---\ntitle: redis-sds动态字符串【学习笔记】\ndate: 2019-03-27 15:56:04\ntags:\n    - redis\n    - 源码\ncategories: redis\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n## SDS定义\n\n```c\n/*\n * 类型别名，用于指向 sdshdr 的 buf 属性\n */\ntypedef char *sds;\n\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n\n```\n<!-- more -->\n## SDS常用函数\n\n### sdslen-sds长度\n```c\n/*\n * 返回 sds 实际保存的字符串的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->len;\n}\n\n```\ns 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址\nchar buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。\n具体结构如下图\n![sdshdr](Redis-sds/sdshdr.png)\n### sdsavail-sds可用free空间长度\n```c\n/*\n * 返回 sds 可用空间的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n\n### sdsnewlen-根据字符串长度创建sds\n```c\n/**\n * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds\n * @param init 初始化字符串指针\n * @param initlen 初始化字符串的长度\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    // T = O(N)\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1);\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n### sdsnew-创建sds\n```c\n/**\n * 根据给定字符串 init ，创建一个包含同样字符串的 sds\n * @param init 如果输入为 NULL ，那么创建一个空白 sds\n * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n### sdsempty-创建空sds\n```c\n/**\n * 创建并返回一个只保存了空字符串 \"\" 的 sds\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(1)\n */\nsds sdsempty(void) {\n    return sdsnewlen(\"\",0);\n}\n```\n### sdsdup-复制sds创建副本\n```c\n/**\n * 复制给定 sds 创建副本\n * @param s sds\n * @return 创建成功返回输入 sds 的副本\n *  T = O(N)\n */\nsds sdsdup(const sds s) {\n    return sdsnewlen(s, sdslen(s));\n}\n```\n### sdsfree-释放sds\n```c\n/**\n * 释放给定的 sds\n * @param s \n * T = O(N)\n */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    zfree(s-sizeof(struct sdshdr));\n}\n```\n### sdsgrowzero-扩充sds未使用空间补0\n```c\n/**\n * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。\n * @param s\n * @param len 指定长度\n * @return 扩充成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdsgrowzero(sds s, size_t len) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    size_t totlen, curlen = sh->len;\n\n    // 如果 len 比字符串的现有长度小，\n    // 那么直接返回，不做动作\n    if (len <= curlen) return s;\n\n    // 扩展 sds\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len-curlen);\n    // 如果内存不足，直接返回\n    if (s == NULL) return NULL;\n\n    // 将新分配的空间用 0 填充，防止出现垃圾内容\n    // T = O(N)\n    sh = (void*)(s-(sizeof(struct sdshdr)));\n    memset(s+curlen,0,(len-curlen+1));\n\n    // 更新属性\n    totlen = sh->len+sh->free;\n    sh->len = len;\n    sh->free = totlen-sh->len;\n\n    // 返回新的 sds\n    return s;\n}\n\n/**\n * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，\n * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）\n * @param s \n * @param addlen \n * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL\n * T = O(N)\n */\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n\n    struct sdshdr *sh, *newsh;\n\n    // 获取 s 目前的空余空间长度\n    size_t free = sdsavail(s);\n\n    size_t len, newlen;\n\n    // s 目前的空余空间已经足够，无须再进行扩展，直接返回\n    if (free >= addlen) return s;\n\n    // 获取 s 目前已占用空间的长度\n    len = sdslen(s);\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // s 最少需要的长度\n    newlen = (len+addlen);\n\n    // 根据新长度，为 s 分配新空间所需的大小\n    if (newlen < SDS_MAX_PREALLOC)\n        // 如果新长度小于 SDS_MAX_PREALLOC \n        // 那么为它分配两倍于所需长度的空间\n        newlen *= 2;\n    else\n        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC\n        newlen += SDS_MAX_PREALLOC;\n    // T = O(N)\n    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);\n\n    // 内存不足，分配失败，返回\n    if (newsh == NULL) return NULL;\n\n    // 更新 sds 的空余长度\n    newsh->free = newlen - len;\n\n    // 返回 sds\n    return newsh->buf;\n}\n\n/*\n * 最大预分配长度\n */\n#define SDS_MAX_PREALLOC (1024*1024)\n```\n\n### sdscatlen-根据字符串长度将字符串追加到sds末尾\n```c\n/**\n *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾\n * @param s\n * @param t 字符串t\n * @param len t的长度\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatlen(sds s, const void *t, size_t len) {\n    \n    struct sdshdr *sh;\n    \n    // 原有字符串长度\n    size_t curlen = sdslen(s);\n\n    // 扩展 sds 空间\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len);\n\n    // 内存不足？直接返回\n    if (s == NULL) return NULL;\n\n    // 复制 t 中的内容到字符串后部\n    // T = O(N)\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n    memcpy(s+curlen, t, len);\n\n    // 更新属性\n    sh->len = curlen+len;\n    sh->free = sh->free-len;\n\n    // 添加新结尾符号\n    s[curlen+len] = '\\0';\n\n    // 返回新 sds\n    return s;\n}\n```\n### sdscat-将字符串追加到sds末尾\n```c\n/**\n * 将给定字符串 t 追加到 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n *  T = O(N)\n */\nsds sdscat(sds s, const char *t) {\n    return sdscatlen(s, t, strlen(t));\n}\n```\n\n### sdscatsds-将sds追加到另一个sds末尾\n```c\n/**\n * 将另一个 sds 追加到一个 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatsds(sds s, const sds t) {\n    return sdscatlen(s, t, sdslen(t));\n}\n```\n### sdscpylen-将字符串前len复制到sds\n```c\n/**\n * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符\n * 如果 sds 的长度少于 len 个字符，那么扩展 sds\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpylen(sds s, const char *t, size_t len) {\n\n    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // sds 现有 buf 的长度\n    size_t totlen = sh->free+sh->len;\n\n    // 如果 s 的 buf 长度不满足 len ，那么扩展它\n    if (totlen < len) {\n        // T = O(N)\n        s = sdsMakeRoomFor(s,len-sh->len);\n        if (s == NULL) return NULL;\n        sh = (void*) (s-(sizeof(struct sdshdr)));\n        totlen = sh->free+sh->len;\n    }\n\n    // 复制内容\n    // T = O(N)\n    memcpy(s, t, len);\n\n    // 添加终结符号\n    s[len] = '\\0';\n\n    // 更新属性\n    sh->len = len;\n    sh->free = totlen-len;\n\n    // 返回新的 sds\n    return s;\n}\n```\n### sdscpy-将字符串复制到 sds 当中\n```c\n/**\n * 将字符串复制到 sds 当中,覆盖原有的字符\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpy(sds s, const char *t) {\n    return sdscpylen(s, t, strlen(t));\n}\n```","slug":"Redis-sds","published":1,"updated":"2019-07-30T11:37:16.777Z","layout":"post","photos":[],"link":"","_id":"ck4859y99003tt0fyqzh5afwk","content":"<h2 id=\"SDS定义\"><a href=\"#SDS定义\" class=\"headerlink\" title=\"SDS定义\"></a>SDS定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型别名，用于指向 sdshdr 的 buf 属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *sds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h2 id=\"SDS常用函数\"><a href=\"#SDS常用函数\" class=\"headerlink\" title=\"SDS常用函数\"></a>SDS常用函数</h2><h3 id=\"sdslen-sds长度\"><a href=\"#sdslen-sds长度\" class=\"headerlink\" title=\"sdslen-sds长度\"></a>sdslen-sds长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>s 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址<br>char buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。<br>具体结构如下图<br><img src=\"/2019/03/27/Redis-sds/sdshdr.png\" alt=\"sdshdr\"></p>\n<h3 id=\"sdsavail-sds可用free空间长度\"><a href=\"#sdsavail-sds可用free空间长度\" class=\"headerlink\" title=\"sdsavail-sds可用free空间长度\"></a>sdsavail-sds可用free空间长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsnewlen-根据字符串长度创建sds\"><a href=\"#sdsnewlen-根据字符串长度创建sds\" class=\"headerlink\" title=\"sdsnewlen-根据字符串长度创建sds\"></a>sdsnewlen-根据字符串长度创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 初始化字符串指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param initlen 初始化字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsnew-创建sds\"><a href=\"#sdsnew-创建sds\" class=\"headerlink\" title=\"sdsnew-创建sds\"></a>sdsnew-创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定字符串 init ，创建一个包含同样字符串的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 如果输入为 NULL ，那么创建一个空白 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsempty-创建空sds\"><a href=\"#sdsempty-创建空sds\" class=\"headerlink\" title=\"sdsempty-创建空sds\"></a>sdsempty-创建空sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建并返回一个只保存了空字符串 \"\" 的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(<span class=\"string\">\"\"</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsdup-复制sds创建副本\"><a href=\"#sdsdup-复制sds创建副本\" class=\"headerlink\" title=\"sdsdup-复制sds创建副本\"></a>sdsdup-复制sds创建副本</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制给定 sds 创建副本</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回输入 sds 的副本</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(s, sdslen(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsfree-释放sds\"><a href=\"#sdsfree-释放sds\" class=\"headerlink\" title=\"sdsfree-释放sds\"></a>sdsfree-释放sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放给定的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    zfree(s-<span class=\"keyword\">sizeof</span>(struct sdshdr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsgrowzero-扩充sds未使用空间补0\"><a href=\"#sdsgrowzero-扩充sds未使用空间补0\" class=\"headerlink\" title=\"sdsgrowzero-扩充sds未使用空间补0\"></a>sdsgrowzero-扩充sds未使用空间补0</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len 指定长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩充成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen, curlen = sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 len 比字符串的现有长度小，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么直接返回，不做动作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= curlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len-curlen);</span><br><span class=\"line\">    <span class=\"comment\">// 如果内存不足，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新分配的空间用 0 填充，防止出现垃圾内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*)(s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s+curlen,<span class=\"number\">0</span>,(len-curlen+<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    totlen = sh-&gt;len+sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，</span></span><br><span class=\"line\"><span class=\"comment\"> * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * @param addlen </span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsMakeRoomFor</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> addlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>, *<span class=\"title\">newsh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前的空余空间长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">free</span> = sdsavail(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len, newlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 目前的空余空间已经足够，无须再进行扩展，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt;= addlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前已占用空间的长度</span></span><br><span class=\"line\">    len = sdslen(s);</span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 最少需要的长度</span></span><br><span class=\"line\">    newlen = (len+addlen);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据新长度，为 s 分配新空间所需的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class=\"line\">        <span class=\"comment\">// 如果新长度小于 SDS_MAX_PREALLOC </span></span><br><span class=\"line\">        <span class=\"comment\">// 那么为它分配两倍于所需长度的空间</span></span><br><span class=\"line\">        newlen *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">// 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC</span></span><br><span class=\"line\">        newlen += SDS_MAX_PREALLOC;</span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    newsh = zrealloc(sh, <span class=\"keyword\">sizeof</span>(struct sdshdr)+newlen+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足，分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 sds 的空余长度</span></span><br><span class=\"line\">    newsh-&gt;<span class=\"built_in\">free</span> = newlen - len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newsh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大预分配长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_MAX_PREALLOC (1024*1024)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"><a href=\"#sdscatlen-根据字符串长度将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"></a>sdscatlen-根据字符串长度将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param t 字符串t</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len t的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 原有字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> curlen = sdslen(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds 空间</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足？直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制 t 中的内容到字符串后部</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s+curlen, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = curlen+len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = sh-&gt;<span class=\"built_in\">free</span>-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加新结尾符号</span></span><br><span class=\"line\">    s[curlen+len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscat-将字符串追加到sds末尾\"><a href=\"#sdscat-将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscat-将字符串追加到sds末尾\"></a>sdscat-将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将给定字符串 t 追加到 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscatsds-将sds追加到另一个sds末尾\"><a href=\"#sdscatsds-将sds追加到另一个sds末尾\" class=\"headerlink\" title=\"sdscatsds-将sds追加到另一个sds末尾\"></a>sdscatsds-将sds追加到另一个sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将另一个 sds 追加到一个 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, sdslen(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscpylen-将字符串前len复制到sds\"><a href=\"#sdscpylen-将字符串前len复制到sds\" class=\"headerlink\" title=\"sdscpylen-将字符串前len复制到sds\"></a>sdscpylen-将字符串前len复制到sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 sds 的长度少于 len 个字符，那么扩展 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*) (<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sds 现有 buf 的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 s 的 buf 长度不满足 len ，那么扩展它</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (totlen &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">        s = sdsMakeRoomFor(s,len-sh-&gt;len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">        totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加终结符号</span></span><br><span class=\"line\">    s[len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscpy-将字符串复制到-sds-当中\"><a href=\"#sdscpy-将字符串复制到-sds-当中\" class=\"headerlink\" title=\"sdscpy-将字符串复制到 sds 当中\"></a>sdscpy-将字符串复制到 sds 当中</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串复制到 sds 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscpylen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"SDS定义\"><a href=\"#SDS定义\" class=\"headerlink\" title=\"SDS定义\"></a>SDS定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型别名，用于指向 sdshdr 的 buf 属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *sds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"SDS常用函数\"><a href=\"#SDS常用函数\" class=\"headerlink\" title=\"SDS常用函数\"></a>SDS常用函数</h2><h3 id=\"sdslen-sds长度\"><a href=\"#sdslen-sds长度\" class=\"headerlink\" title=\"sdslen-sds长度\"></a>sdslen-sds长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>s 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址<br>char buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。<br>具体结构如下图<br><img src=\"/2019/03/27/Redis-sds/sdshdr.png\" alt=\"sdshdr\"></p>\n<h3 id=\"sdsavail-sds可用free空间长度\"><a href=\"#sdsavail-sds可用free空间长度\" class=\"headerlink\" title=\"sdsavail-sds可用free空间长度\"></a>sdsavail-sds可用free空间长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsnewlen-根据字符串长度创建sds\"><a href=\"#sdsnewlen-根据字符串长度创建sds\" class=\"headerlink\" title=\"sdsnewlen-根据字符串长度创建sds\"></a>sdsnewlen-根据字符串长度创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 初始化字符串指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param initlen 初始化字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsnew-创建sds\"><a href=\"#sdsnew-创建sds\" class=\"headerlink\" title=\"sdsnew-创建sds\"></a>sdsnew-创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定字符串 init ，创建一个包含同样字符串的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 如果输入为 NULL ，那么创建一个空白 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsempty-创建空sds\"><a href=\"#sdsempty-创建空sds\" class=\"headerlink\" title=\"sdsempty-创建空sds\"></a>sdsempty-创建空sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建并返回一个只保存了空字符串 \"\" 的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(<span class=\"string\">\"\"</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsdup-复制sds创建副本\"><a href=\"#sdsdup-复制sds创建副本\" class=\"headerlink\" title=\"sdsdup-复制sds创建副本\"></a>sdsdup-复制sds创建副本</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制给定 sds 创建副本</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回输入 sds 的副本</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(s, sdslen(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsfree-释放sds\"><a href=\"#sdsfree-释放sds\" class=\"headerlink\" title=\"sdsfree-释放sds\"></a>sdsfree-释放sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放给定的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    zfree(s-<span class=\"keyword\">sizeof</span>(struct sdshdr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdsgrowzero-扩充sds未使用空间补0\"><a href=\"#sdsgrowzero-扩充sds未使用空间补0\" class=\"headerlink\" title=\"sdsgrowzero-扩充sds未使用空间补0\"></a>sdsgrowzero-扩充sds未使用空间补0</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len 指定长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩充成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen, curlen = sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 len 比字符串的现有长度小，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么直接返回，不做动作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= curlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len-curlen);</span><br><span class=\"line\">    <span class=\"comment\">// 如果内存不足，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新分配的空间用 0 填充，防止出现垃圾内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*)(s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s+curlen,<span class=\"number\">0</span>,(len-curlen+<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    totlen = sh-&gt;len+sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，</span></span><br><span class=\"line\"><span class=\"comment\"> * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * @param addlen </span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsMakeRoomFor</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> addlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>, *<span class=\"title\">newsh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前的空余空间长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">free</span> = sdsavail(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len, newlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 目前的空余空间已经足够，无须再进行扩展，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt;= addlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前已占用空间的长度</span></span><br><span class=\"line\">    len = sdslen(s);</span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 最少需要的长度</span></span><br><span class=\"line\">    newlen = (len+addlen);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据新长度，为 s 分配新空间所需的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class=\"line\">        <span class=\"comment\">// 如果新长度小于 SDS_MAX_PREALLOC </span></span><br><span class=\"line\">        <span class=\"comment\">// 那么为它分配两倍于所需长度的空间</span></span><br><span class=\"line\">        newlen *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">// 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC</span></span><br><span class=\"line\">        newlen += SDS_MAX_PREALLOC;</span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    newsh = zrealloc(sh, <span class=\"keyword\">sizeof</span>(struct sdshdr)+newlen+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足，分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 sds 的空余长度</span></span><br><span class=\"line\">    newsh-&gt;<span class=\"built_in\">free</span> = newlen - len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newsh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大预分配长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_MAX_PREALLOC (1024*1024)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"><a href=\"#sdscatlen-根据字符串长度将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"></a>sdscatlen-根据字符串长度将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param t 字符串t</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len t的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 原有字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> curlen = sdslen(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds 空间</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足？直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制 t 中的内容到字符串后部</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s+curlen, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = curlen+len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = sh-&gt;<span class=\"built_in\">free</span>-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加新结尾符号</span></span><br><span class=\"line\">    s[curlen+len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscat-将字符串追加到sds末尾\"><a href=\"#sdscat-将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscat-将字符串追加到sds末尾\"></a>sdscat-将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将给定字符串 t 追加到 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscatsds-将sds追加到另一个sds末尾\"><a href=\"#sdscatsds-将sds追加到另一个sds末尾\" class=\"headerlink\" title=\"sdscatsds-将sds追加到另一个sds末尾\"></a>sdscatsds-将sds追加到另一个sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将另一个 sds 追加到一个 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, sdslen(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscpylen-将字符串前len复制到sds\"><a href=\"#sdscpylen-将字符串前len复制到sds\" class=\"headerlink\" title=\"sdscpylen-将字符串前len复制到sds\"></a>sdscpylen-将字符串前len复制到sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 sds 的长度少于 len 个字符，那么扩展 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*) (<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sds 现有 buf 的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 s 的 buf 长度不满足 len ，那么扩展它</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (totlen &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">        s = sdsMakeRoomFor(s,len-sh-&gt;len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">        totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加终结符号</span></span><br><span class=\"line\">    s[len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sdscpy-将字符串复制到-sds-当中\"><a href=\"#sdscpy-将字符串复制到-sds-当中\" class=\"headerlink\" title=\"sdscpy-将字符串复制到 sds 当中\"></a>sdscpy-将字符串复制到 sds 当中</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串复制到 sds 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscpylen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"redis-list双向链表【学习笔记】","date":"2019-03-28T08:18:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"## list定义\n```c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n<!-- more -->\n![list](Redis-adlist/list.png)\n## list常用函数\n\n### listCreate-创建新链表\n```c\n/**\n * 创建一个新的链表\n * @return  创建成功返回链表，失败返回 NULL\n * T = O(1)\n */\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n\n### listRelease-释放整个链表\n```c\n/**\n * 释放整个链表，以及链表中所有节点\n * @param list\n * T = O(N)\n */\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n### listAddNodeHead-添加新节点到链表头\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表头\n * @param list\n * @param value\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listAddNodeTail-添加新节点到链表尾\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表尾\n * @param list\n * @param value 新节点\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeTail(list *list, void *value)\n{\n    listNode *node;\n\n    // 为新节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 目标链表为空\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 目标链表非空\n    } else {\n        node->prev = list->tail;\n        node->next = NULL;\n        list->tail->next = node;\n        list->tail = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listInsertNode-将新节点添加到老节点之前或之后\n```c\n/**\n * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后\n * 如果 after 为 0 ，将新节点插入到 old_node 之前。\n * 如果 after 为 1 ，将新节点插入到 old_node 之后。\n * @param list 链表\n * @param old_node 老节点\n * @param value 值\n * @param after\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listInsertNode(list *list, listNode *old_node, void *value, int after) {\n    listNode *node;\n\n    // 创建新节点\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值\n    node->value = value;\n\n    // 将新节点添加到给定节点之后\n    if (after) {\n        node->prev = old_node;\n        node->next = old_node->next;\n        // 给定节点是原表尾节点\n        if (list->tail == old_node) {\n            list->tail = node;\n        }\n    // 将新节点添加到给定节点之前\n    } else {\n        node->next = old_node;\n        node->prev = old_node->prev;\n        // 给定节点是原表头节点\n        if (list->head == old_node) {\n            list->head = node;\n        }\n    }\n\n    // 更新新节点的前置指针\n    if (node->prev != NULL) {\n        node->prev->next = node;\n    }\n    // 更新新节点的后置指针\n    if (node->next != NULL) {\n        node->next->prev = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listDelNode-删除指定节点\n```c\n/**\n * 从链表 list 中删除给定节点 node \n * 对节点私有值(private value of the node)的释放工作由调用者进行。\n * @param list \n * @param node \n * T = O(1)\n */\nvoid listDelNode(list *list, listNode *node)\n{\n    // 调整前置节点的指针\n    if (node->prev)\n        node->prev->next = node->next;\n    else\n        list->head = node->next;\n\n    // 调整后置节点的指针\n    if (node->next)\n        node->next->prev = node->prev;\n    else\n        list->tail = node->prev;\n\n    // 释放值\n    if (list->free) list->free(node->value);\n\n    // 释放节点\n    zfree(node);\n\n    // 链表数减一\n    list->len--;\n}\n\n```\n### listGetIterator-生成链表的迭代器\n```c\n/**\n * 为给定链表创建一个迭代器，\n * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n * @param list 链表\n * @param direction 迭代方向 \n *        AL_START_HEAD ：从表头向表尾迭代\n *        AL_START_TAIL ：从表尾想表头迭代\n * @return 迭代器\n * T = O(1)\n */\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n### listNext-返回迭代器当前所指向的节点\n```c\n/**\n * 返回迭代器当前所指向的节点。\n * 删除当前节点是允许的，但不能修改链表里的其他节点。\n * @param iter 迭代器\n * @return 函数要么返回一个节点，要么返回 NULL \n * T = O(1)\n */\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n### listDup-复制整个链表\n```c\n/**\n * 复制整个链表。\n * 无论复制是成功还是失败，输入节点都不会修改。\n * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，\n * 否则，新节点将和旧节点共享同一个指针。\n * @param orig\n * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。\n * T = O(N)\n */\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n### listSearchKey-查找值为key的节点\n```c\n/**\n * 查找链表 list 中值和 key 匹配的节点。\n * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，\n * 那么直接通过对比值的指针来决定是否匹配。\n * @param list 链表\n * @param key 值\n * @return 如果匹配成功，那么第一个匹配的节点会被返回。\n *         如果没有匹配任何节点，那么返回 NULL 。\n */\nlistNode *listSearchKey(list *list, void *key)\n{\n    listIter *iter;\n    listNode *node;\n\n    // 迭代整个链表\n    iter = listGetIterator(list, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        \n        // 对比\n        if (list->match) {\n            if (list->match(node->value, key)) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        } else {\n            if (key == node->value) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        }\n    }\n    \n    listReleaseIterator(iter);\n\n    // 未找到\n    return NULL;\n}\n```\n### listIndex-返回链表在指定索引上的值\n```c\n/**\n * 返回链表在给定索引上的值。\n * @param list \n * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。\n * @return 如果索引超出范围（out of range），返回 NULL 。\n * T = O(N)\n */\nlistNode *listIndex(list *list, long index) {\n    listNode *n;\n\n    // 如果索引为负数，从表尾开始查找\n    if (index < 0) {\n        index = (-index)-1;\n        n = list->tail;\n        while(index-- && n) n = n->prev;\n    // 如果索引为正数，从表头开始查找\n    } else {\n        n = list->head;\n        while(index-- && n) n = n->next;\n    }\n\n    return n;\n}\n```\n### listRewind-设置正向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewind(list *list, listIter *li) {\n    li->next = list->head;\n    li->direction = AL_START_HEAD;\n}\n```\n### listRewindTail-设置反向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewindTail(list *list, listIter *li) {\n    li->next = list->tail;\n    li->direction = AL_START_TAIL;\n}\n```\n### listRotate-将链表尾移动到表头\n```c\n/\n * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。\n * @param list \n * T = O(1)\n */\nvoid listRotate(list *list) {\n    listNode *tail = list->tail;\n\n    if (listLength(list) <= 1) return;\n\n    // 取出表尾节点\n    list->tail = tail->prev;\n    list->tail->next = NULL;\n\n    // 插入到表头\n    list->head->prev = tail;\n    tail->prev = NULL;\n    tail->next = list->head;\n    list->head = tail;\n}\n```","source":"_posts/Redis-adlist.md","raw":"---\ntitle: redis-list双向链表【学习笔记】\ndate: 2019-03-28 16:18:04\ntags:\n    - redis\n    - 源码\ncategories: redis\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n## list定义\n```c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n<!-- more -->\n![list](Redis-adlist/list.png)\n## list常用函数\n\n### listCreate-创建新链表\n```c\n/**\n * 创建一个新的链表\n * @return  创建成功返回链表，失败返回 NULL\n * T = O(1)\n */\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n\n### listRelease-释放整个链表\n```c\n/**\n * 释放整个链表，以及链表中所有节点\n * @param list\n * T = O(N)\n */\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n### listAddNodeHead-添加新节点到链表头\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表头\n * @param list\n * @param value\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listAddNodeTail-添加新节点到链表尾\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表尾\n * @param list\n * @param value 新节点\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeTail(list *list, void *value)\n{\n    listNode *node;\n\n    // 为新节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 目标链表为空\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 目标链表非空\n    } else {\n        node->prev = list->tail;\n        node->next = NULL;\n        list->tail->next = node;\n        list->tail = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listInsertNode-将新节点添加到老节点之前或之后\n```c\n/**\n * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后\n * 如果 after 为 0 ，将新节点插入到 old_node 之前。\n * 如果 after 为 1 ，将新节点插入到 old_node 之后。\n * @param list 链表\n * @param old_node 老节点\n * @param value 值\n * @param after\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listInsertNode(list *list, listNode *old_node, void *value, int after) {\n    listNode *node;\n\n    // 创建新节点\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值\n    node->value = value;\n\n    // 将新节点添加到给定节点之后\n    if (after) {\n        node->prev = old_node;\n        node->next = old_node->next;\n        // 给定节点是原表尾节点\n        if (list->tail == old_node) {\n            list->tail = node;\n        }\n    // 将新节点添加到给定节点之前\n    } else {\n        node->next = old_node;\n        node->prev = old_node->prev;\n        // 给定节点是原表头节点\n        if (list->head == old_node) {\n            list->head = node;\n        }\n    }\n\n    // 更新新节点的前置指针\n    if (node->prev != NULL) {\n        node->prev->next = node;\n    }\n    // 更新新节点的后置指针\n    if (node->next != NULL) {\n        node->next->prev = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listDelNode-删除指定节点\n```c\n/**\n * 从链表 list 中删除给定节点 node \n * 对节点私有值(private value of the node)的释放工作由调用者进行。\n * @param list \n * @param node \n * T = O(1)\n */\nvoid listDelNode(list *list, listNode *node)\n{\n    // 调整前置节点的指针\n    if (node->prev)\n        node->prev->next = node->next;\n    else\n        list->head = node->next;\n\n    // 调整后置节点的指针\n    if (node->next)\n        node->next->prev = node->prev;\n    else\n        list->tail = node->prev;\n\n    // 释放值\n    if (list->free) list->free(node->value);\n\n    // 释放节点\n    zfree(node);\n\n    // 链表数减一\n    list->len--;\n}\n\n```\n### listGetIterator-生成链表的迭代器\n```c\n/**\n * 为给定链表创建一个迭代器，\n * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n * @param list 链表\n * @param direction 迭代方向 \n *        AL_START_HEAD ：从表头向表尾迭代\n *        AL_START_TAIL ：从表尾想表头迭代\n * @return 迭代器\n * T = O(1)\n */\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n### listNext-返回迭代器当前所指向的节点\n```c\n/**\n * 返回迭代器当前所指向的节点。\n * 删除当前节点是允许的，但不能修改链表里的其他节点。\n * @param iter 迭代器\n * @return 函数要么返回一个节点，要么返回 NULL \n * T = O(1)\n */\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n### listDup-复制整个链表\n```c\n/**\n * 复制整个链表。\n * 无论复制是成功还是失败，输入节点都不会修改。\n * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，\n * 否则，新节点将和旧节点共享同一个指针。\n * @param orig\n * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。\n * T = O(N)\n */\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n### listSearchKey-查找值为key的节点\n```c\n/**\n * 查找链表 list 中值和 key 匹配的节点。\n * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，\n * 那么直接通过对比值的指针来决定是否匹配。\n * @param list 链表\n * @param key 值\n * @return 如果匹配成功，那么第一个匹配的节点会被返回。\n *         如果没有匹配任何节点，那么返回 NULL 。\n */\nlistNode *listSearchKey(list *list, void *key)\n{\n    listIter *iter;\n    listNode *node;\n\n    // 迭代整个链表\n    iter = listGetIterator(list, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        \n        // 对比\n        if (list->match) {\n            if (list->match(node->value, key)) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        } else {\n            if (key == node->value) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        }\n    }\n    \n    listReleaseIterator(iter);\n\n    // 未找到\n    return NULL;\n}\n```\n### listIndex-返回链表在指定索引上的值\n```c\n/**\n * 返回链表在给定索引上的值。\n * @param list \n * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。\n * @return 如果索引超出范围（out of range），返回 NULL 。\n * T = O(N)\n */\nlistNode *listIndex(list *list, long index) {\n    listNode *n;\n\n    // 如果索引为负数，从表尾开始查找\n    if (index < 0) {\n        index = (-index)-1;\n        n = list->tail;\n        while(index-- && n) n = n->prev;\n    // 如果索引为正数，从表头开始查找\n    } else {\n        n = list->head;\n        while(index-- && n) n = n->next;\n    }\n\n    return n;\n}\n```\n### listRewind-设置正向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewind(list *list, listIter *li) {\n    li->next = list->head;\n    li->direction = AL_START_HEAD;\n}\n```\n### listRewindTail-设置反向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewindTail(list *list, listIter *li) {\n    li->next = list->tail;\n    li->direction = AL_START_TAIL;\n}\n```\n### listRotate-将链表尾移动到表头\n```c\n/\n * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。\n * @param list \n * T = O(1)\n */\nvoid listRotate(list *list) {\n    listNode *tail = list->tail;\n\n    if (listLength(list) <= 1) return;\n\n    // 取出表尾节点\n    list->tail = tail->prev;\n    list->tail->next = NULL;\n\n    // 插入到表头\n    list->head->prev = tail;\n    tail->prev = NULL;\n    tail->next = list->head;\n    list->head = tail;\n}\n```","slug":"Redis-adlist","published":1,"updated":"2019-07-30T11:37:16.764Z","layout":"post","photos":[],"link":"","_id":"ck4859y9a003vt0fywpon18c5","content":"<h2 id=\"list定义\"><a href=\"#list定义\" class=\"headerlink\" title=\"list定义\"></a>list定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<p><img src=\"/2019/03/28/Redis-adlist/list.png\" alt=\"list\"></p>\n<h2 id=\"list常用函数\"><a href=\"#list常用函数\" class=\"headerlink\" title=\"list常用函数\"></a>list常用函数</h2><h3 id=\"listCreate-创建新链表\"><a href=\"#listCreate-创建新链表\" class=\"headerlink\" title=\"listCreate-创建新链表\"></a>listCreate-创建新链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个新的链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  创建成功返回链表，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRelease-释放整个链表\"><a href=\"#listRelease-释放整个链表\" class=\"headerlink\" title=\"listRelease-释放整个链表\"></a>listRelease-释放整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放整个链表，以及链表中所有节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listAddNodeHead-添加新节点到链表头\"><a href=\"#listAddNodeHead-添加新节点到链表头\" class=\"headerlink\" title=\"listAddNodeHead-添加新节点到链表头\"></a>listAddNodeHead-添加新节点到链表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表头</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listAddNodeTail-添加新节点到链表尾\"><a href=\"#listAddNodeTail-添加新节点到链表尾\" class=\"headerlink\" title=\"listAddNodeTail-添加新节点到链表尾\"></a>listAddNodeTail-添加新节点到链表尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 新节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为新节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 目标链表为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 目标链表非空</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail-&gt;next = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listInsertNode-将新节点添加到老节点之前或之后\"><a href=\"#listInsertNode-将新节点添加到老节点之前或之后\" class=\"headerlink\" title=\"listInsertNode-将新节点添加到老节点之前或之后\"></a>listInsertNode-将新节点添加到老节点之前或之后</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 0 ，将新节点插入到 old_node 之前。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 1 ，将新节点插入到 old_node 之后。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param old_node 老节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param after</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listInsertNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *old_node, <span class=\"keyword\">void</span> *value, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (after) &#123;</span><br><span class=\"line\">        node-&gt;prev = old_node;</span><br><span class=\"line\">        node-&gt;next = old_node-&gt;next;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;tail == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之前</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;next = old_node;</span><br><span class=\"line\">        node-&gt;prev = old_node-&gt;prev;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;head == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的前置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的后置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listDelNode-删除指定节点\"><a href=\"#listDelNode-删除指定节点\" class=\"headerlink\" title=\"listDelNode-删除指定节点\"></a>listDelNode-删除指定节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从链表 list 中删除给定节点 node </span></span><br><span class=\"line\"><span class=\"comment\"> * 对节点私有值(private value of the node)的释放工作由调用者进行。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param node </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listDelNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调整前置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev)</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调整后置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next)</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node-&gt;prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(node-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放节点</span></span><br><span class=\"line\">    zfree(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表数减一</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listGetIterator-生成链表的迭代器\"><a href=\"#listGetIterator-生成链表的迭代器\" class=\"headerlink\" title=\"listGetIterator-生成链表的迭代器\"></a>listGetIterator-生成链表的迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 为给定链表创建一个迭代器，</span></span><br><span class=\"line\"><span class=\"comment\"> * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param direction 迭代方向 </span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_HEAD ：从表头向表尾迭代</span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_TAIL ：从表尾想表头迭代</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listNext-返回迭代器当前所指向的节点\"><a href=\"#listNext-返回迭代器当前所指向的节点\" class=\"headerlink\" title=\"listNext-返回迭代器当前所指向的节点\"></a>listNext-返回迭代器当前所指向的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回迭代器当前所指向的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除当前节点是允许的，但不能修改链表里的其他节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param iter 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 函数要么返回一个节点，要么返回 NULL </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listDup-复制整个链表\"><a href=\"#listDup-复制整个链表\" class=\"headerlink\" title=\"listDup-复制整个链表\"></a>listDup-复制整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制整个链表。</span></span><br><span class=\"line\"><span class=\"comment\"> * 无论复制是成功还是失败，输入节点都不会修改。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则，新节点将和旧节点共享同一个指针。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param orig</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listSearchKey-查找值为key的节点\"><a href=\"#listSearchKey-查找值为key的节点\" class=\"headerlink\" title=\"listSearchKey-查找值为key的节点\"></a>listSearchKey-查找值为key的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找链表 list 中值和 key 匹配的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，</span></span><br><span class=\"line\"><span class=\"comment\"> * 那么直接通过对比值的指针来决定是否匹配。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果匹配成功，那么第一个匹配的节点会被返回。</span></span><br><span class=\"line\"><span class=\"comment\"> *         如果没有匹配任何节点，那么返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listSearchKey</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个链表</span></span><br><span class=\"line\">    iter = listGetIterator(<span class=\"built_in\">list</span>, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 对比</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match(node-&gt;value, key)) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == node-&gt;value) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listIndex-返回链表在指定索引上的值\"><a href=\"#listIndex-返回链表在指定索引上的值\" class=\"headerlink\" title=\"listIndex-返回链表在指定索引上的值\"></a>listIndex-返回链表在指定索引上的值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回链表在给定索引上的值。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果索引超出范围（out of range），返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listIndex</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">    listNode *n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为负数，从表尾开始查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        index = (-index)<span class=\"number\">-1</span>;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;prev;</span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为正数，从表头开始查找</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRewind-设置正向迭代器\"><a href=\"#listRewind-设置正向迭代器\" class=\"headerlink\" title=\"listRewind-设置正向迭代器\"></a>listRewind-设置正向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewind</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    li-&gt;direction = AL_START_HEAD;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRewindTail-设置反向迭代器\"><a href=\"#listRewindTail-设置反向迭代器\" class=\"headerlink\" title=\"listRewindTail-设置反向迭代器\"></a>listRewindTail-设置反向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewindTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">    li-&gt;direction = AL_START_TAIL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRotate-将链表尾移动到表头\"><a href=\"#listRotate-将链表尾移动到表头\" class=\"headerlink\" title=\"listRotate-将链表尾移动到表头\"></a>listRotate-将链表尾移动到表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/</span><br><span class=\"line\"> * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。</span><br><span class=\"line\"> * @param <span class=\"built_in\">list</span> </span><br><span class=\"line\"> * T = O(<span class=\"number\">1</span>)</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">void</span> listRotate(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">    listNode *tail = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listLength(<span class=\"built_in\">list</span>) &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出表尾节点</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail = tail-&gt;prev;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入到表头</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head-&gt;prev = tail;</span><br><span class=\"line\">    tail-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    tail-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = tail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"list定义\"><a href=\"#list定义\" class=\"headerlink\" title=\"list定义\"></a>list定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>","more":"<p><img src=\"/2019/03/28/Redis-adlist/list.png\" alt=\"list\"></p>\n<h2 id=\"list常用函数\"><a href=\"#list常用函数\" class=\"headerlink\" title=\"list常用函数\"></a>list常用函数</h2><h3 id=\"listCreate-创建新链表\"><a href=\"#listCreate-创建新链表\" class=\"headerlink\" title=\"listCreate-创建新链表\"></a>listCreate-创建新链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个新的链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  创建成功返回链表，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRelease-释放整个链表\"><a href=\"#listRelease-释放整个链表\" class=\"headerlink\" title=\"listRelease-释放整个链表\"></a>listRelease-释放整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放整个链表，以及链表中所有节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listAddNodeHead-添加新节点到链表头\"><a href=\"#listAddNodeHead-添加新节点到链表头\" class=\"headerlink\" title=\"listAddNodeHead-添加新节点到链表头\"></a>listAddNodeHead-添加新节点到链表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表头</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listAddNodeTail-添加新节点到链表尾\"><a href=\"#listAddNodeTail-添加新节点到链表尾\" class=\"headerlink\" title=\"listAddNodeTail-添加新节点到链表尾\"></a>listAddNodeTail-添加新节点到链表尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 新节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为新节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 目标链表为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 目标链表非空</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail-&gt;next = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listInsertNode-将新节点添加到老节点之前或之后\"><a href=\"#listInsertNode-将新节点添加到老节点之前或之后\" class=\"headerlink\" title=\"listInsertNode-将新节点添加到老节点之前或之后\"></a>listInsertNode-将新节点添加到老节点之前或之后</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 0 ，将新节点插入到 old_node 之前。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 1 ，将新节点插入到 old_node 之后。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param old_node 老节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param after</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listInsertNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *old_node, <span class=\"keyword\">void</span> *value, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (after) &#123;</span><br><span class=\"line\">        node-&gt;prev = old_node;</span><br><span class=\"line\">        node-&gt;next = old_node-&gt;next;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;tail == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之前</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;next = old_node;</span><br><span class=\"line\">        node-&gt;prev = old_node-&gt;prev;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;head == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的前置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的后置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listDelNode-删除指定节点\"><a href=\"#listDelNode-删除指定节点\" class=\"headerlink\" title=\"listDelNode-删除指定节点\"></a>listDelNode-删除指定节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从链表 list 中删除给定节点 node </span></span><br><span class=\"line\"><span class=\"comment\"> * 对节点私有值(private value of the node)的释放工作由调用者进行。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param node </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listDelNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调整前置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev)</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调整后置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next)</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node-&gt;prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(node-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放节点</span></span><br><span class=\"line\">    zfree(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表数减一</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listGetIterator-生成链表的迭代器\"><a href=\"#listGetIterator-生成链表的迭代器\" class=\"headerlink\" title=\"listGetIterator-生成链表的迭代器\"></a>listGetIterator-生成链表的迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 为给定链表创建一个迭代器，</span></span><br><span class=\"line\"><span class=\"comment\"> * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param direction 迭代方向 </span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_HEAD ：从表头向表尾迭代</span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_TAIL ：从表尾想表头迭代</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listNext-返回迭代器当前所指向的节点\"><a href=\"#listNext-返回迭代器当前所指向的节点\" class=\"headerlink\" title=\"listNext-返回迭代器当前所指向的节点\"></a>listNext-返回迭代器当前所指向的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回迭代器当前所指向的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除当前节点是允许的，但不能修改链表里的其他节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param iter 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 函数要么返回一个节点，要么返回 NULL </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listDup-复制整个链表\"><a href=\"#listDup-复制整个链表\" class=\"headerlink\" title=\"listDup-复制整个链表\"></a>listDup-复制整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制整个链表。</span></span><br><span class=\"line\"><span class=\"comment\"> * 无论复制是成功还是失败，输入节点都不会修改。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则，新节点将和旧节点共享同一个指针。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param orig</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listSearchKey-查找值为key的节点\"><a href=\"#listSearchKey-查找值为key的节点\" class=\"headerlink\" title=\"listSearchKey-查找值为key的节点\"></a>listSearchKey-查找值为key的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找链表 list 中值和 key 匹配的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，</span></span><br><span class=\"line\"><span class=\"comment\"> * 那么直接通过对比值的指针来决定是否匹配。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果匹配成功，那么第一个匹配的节点会被返回。</span></span><br><span class=\"line\"><span class=\"comment\"> *         如果没有匹配任何节点，那么返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listSearchKey</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个链表</span></span><br><span class=\"line\">    iter = listGetIterator(<span class=\"built_in\">list</span>, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 对比</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match(node-&gt;value, key)) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == node-&gt;value) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listIndex-返回链表在指定索引上的值\"><a href=\"#listIndex-返回链表在指定索引上的值\" class=\"headerlink\" title=\"listIndex-返回链表在指定索引上的值\"></a>listIndex-返回链表在指定索引上的值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回链表在给定索引上的值。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果索引超出范围（out of range），返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listIndex</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">    listNode *n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为负数，从表尾开始查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        index = (-index)<span class=\"number\">-1</span>;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;prev;</span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为正数，从表头开始查找</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRewind-设置正向迭代器\"><a href=\"#listRewind-设置正向迭代器\" class=\"headerlink\" title=\"listRewind-设置正向迭代器\"></a>listRewind-设置正向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewind</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    li-&gt;direction = AL_START_HEAD;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRewindTail-设置反向迭代器\"><a href=\"#listRewindTail-设置反向迭代器\" class=\"headerlink\" title=\"listRewindTail-设置反向迭代器\"></a>listRewindTail-设置反向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewindTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">    li-&gt;direction = AL_START_TAIL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"listRotate-将链表尾移动到表头\"><a href=\"#listRotate-将链表尾移动到表头\" class=\"headerlink\" title=\"listRotate-将链表尾移动到表头\"></a>listRotate-将链表尾移动到表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/</span><br><span class=\"line\"> * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。</span><br><span class=\"line\"> * @param <span class=\"built_in\">list</span> </span><br><span class=\"line\"> * T = O(<span class=\"number\">1</span>)</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">void</span> listRotate(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">    listNode *tail = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listLength(<span class=\"built_in\">list</span>) &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出表尾节点</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail = tail-&gt;prev;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入到表头</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head-&gt;prev = tail;</span><br><span class=\"line\">    tail-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    tail-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = tail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Kafka背景及架构介绍","date":"2019-05-25T03:38:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"## Kafka创建背景\nkafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。\n<!-- more -->\n## Kafka简介\nKafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。\n\nkafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。\n\n每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。\n\n## Kafka架构\n\n### 一、名词解释\n* **Broker**：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成\n* **Topic**：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic\n* **Partition**：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的\n* **Producer**：生产者，负责发布消息到broker\n* **Consumer**：消费者，从broker读取消息\n* **ConsumerGroup**：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息\n* **replica**：partition 的副本，保障 partition 的高可用。\n* **leader**：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。\n* **follower**：replica 中的一个角色，从 leader 中复制数据。\n* **controller**：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等\n* **zookeeper**：Kafka 通过 zookeeper 来存储集群的 meta 信息。\n\n### 二、架构图\n#### 总体数据流\n![](Kafka-Background/1.png)\nProducers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。\n\n#### 生产者\n![](Kafka-Background/2.png)\n①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。\n\n②调用send() 方法进行消息发送。\n\n③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。\n\n④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。\n\n⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。\n\n③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。\n\nkey的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区\n\n#### topic\n![](Kafka-Background/3.jpg)\n从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。\n\nTopic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。\n\n#### partition\n![](Kafka-Background/4.jpg)\n\n每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。\n\nkafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。\n\n分区的原因：\n\n* 方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;\n* 可以提高并发，因为可以以 Partition 为单位读写了。\n\n#### Replication\n同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。\n\n没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。\n\n引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。\n\n### 消费者\n![](Kafka-Background/5.jpeg)\n订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。\n\n同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，`就是一个partition，只能被消费组里的一个消费者消费`，但是可以同时被多个消费组消费。\n\n因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。\n\n### Kafka Zookeeper 节点\n![](Kafka-Background/6.png)\n\n\n## Kafka常见的应用场景\n#### 1.消息队列\n比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。\n\n#### 2.行为跟踪\n行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。\n\n#### 3.元信息监控\n与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。\n\n#### 4.日志收集\n日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。\n\n#### 5.流处理\n保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。\n\n#### 6.持久性日志（commit log）\nKafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。\n\n#### 7.事件源\n将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。\n\n`实际应用中，适用最多最广泛的自然是MQ的功能。`\n\n## Kafka用作MQ时与常用MQ的对比\n\n**RabbitMQ**——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。\n\n**ZeroMQ**——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，`介于应用层和传输层之间`（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。\n\n**RocketMQ**——阿里开源的一款高性能、高吞吐量的分布式消息中间件。\n\n**ActiveMQ**——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。\n\n\n特性 | Kafka | RabbitMQ | ZeroMQ | RocketMQ | ActiveMQ\n:-: | :-: | :-: | :-: | :-: | :-:\n开发语言 | Scala | Erlang | C | Java | Java\n支持协议 | 自行设计的基于TCP层的协议 | AMQP | TCP、UDP | 自行设计 | OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS\n消息存储 | 内存、磁盘、数据库。支持大量堆积。 | 内存、磁盘。支持少量堆积。 | 消息发送端的内存或者磁盘中。不支持持久化。 | 磁盘。支持大量堆积。 | 内存、磁盘、数据库。支持少量堆积。\n消息事务 | 支持 | 支持 | 不支持 | 支持 | 支持\n负载均衡\t| 支持 | 支持但支持的不好\t | 去中心化，不支持负载均衡。本身只是一个多线程网络库。 | 支持 | 支持，可以基于zookeeper实现\n集群方式 | 天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。 | 支持简单集群，’复制’模式，对高级集群模式支持不好。 | 去中心化，不支持集群。 | ‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master | 支持简单集群模式，比如’主-备’，对高级集群模式支持不好。\n可用性 | 非常高（分布式） | 高（主从） | 高 | 非常高（分布式） | 高（主从）\n消息重复 | 支持at least once、at most once | 支持at least once、at most once | 只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once | 支持at least once | 支持at least once\n吞吐量TPS | 极大 | 比较大 | 极大 | 大（发送端不是批量发送） | 比较大\n时效性 | ms以内 | us级 |   | ms级 | ms级\n订阅形式和消息分发 | 基于topic以及按照topic进行正则匹配的发布订阅模式。 | 提供了4种方式：direct, topic ,Headers和fanout。 | 点对点(p2p) | 基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式 | 点对点(p2p)、广播（发布-订阅）\n顺序消息 | 支持 | 不支持 | 不支持 | 支持 | 不支持\n消息确认 | 支持 | 支持 | 支持 | 支持 | 支持\n消息回溯\t| 支持指定分区offset位置的回溯 | 不支持 | 不支持 | 支持指定时间点的回溯 | 不支持\n消费失败重试 | 不支持，但可以通过指定分区offset位置实现。 | 不支持，但是可以利用消息确认机制实现。 | 不支持 | 支持 | 不支持\n并发度 | 高 | 极高 | 高 | 高 | 高\n资料文档 | 中。有kafka作者自己写的书，网上资料也有一些。 | 多。有一些不错的书，网上资料多。 | 少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。 | 少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。 | 多。没有专门写activemq的书，网上资料多。\n\n### 常用MQ的优缺点\n\n#### Kafka\n##### 优点\n* 性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。\n* 时效性：ms级\n* 可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用\n* 消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;\n* 有优秀的第三方Kafka Web管理界面Kafka-Manager；\n* 在日志领域比较成熟，被多家公司和多个开源项目使用；\n* 功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用\n\n##### 缺点\n* Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长\n* 使用短轮询方式，实时性取决于轮询间隔时间；\n* 消费失败不支持重试；\n* 支持消息顺序，但是一台代理宕机后，就会产生消息乱序；\n* 社区更新较慢；\n\n#### RabbitMQ\n##### 优点\n* 由于erlang语言的特性，mq 性能较好，高并发；\n* 吞吐量到万级，MQ功能比较完备 \n* 健壮、稳定、易用、跨平台、支持多种语言、文档齐全；\n* 开源提供的管理界面非常棒，用起来很好用\n* 社区活跃度高；\n\n##### 缺点\n* erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。\n* RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。\n* 需要学习比较复杂的接口和协议，学习和维护成本较高。\n\n#### ZeroMQ\n##### 优点\n* 吞吐量：百万级\n* 扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。\n\n##### 缺点\n* 原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。\n* 在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：十万级\n* 可用性：非常高，分布式架构\n* 消息可靠性：经过参数优化配置，消息可以做到0丢失\n* 功能支持：MQ功能较为完善，还是分布式的，扩展性好\n* 支持10亿级别的消息堆积，不会因为堆积导致性能下降\n* 源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控\n\n##### 缺点\n* 支持的客户端语言不多，目前是java及c++，其中c++不成熟；\n* 社区活跃度一般\n* MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：万级\n* topic数量都吞吐量的影响：\n* 时效性：ms级\n* 可用性：高，基于主从架构实现高可用性\n* 消息可靠性：有较低的概率丢失数据\n* 功能支持：MQ领域的功能极其完备\n* 遵循JMS规范安装部署方便\n\n##### 缺点\n* 在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。\n* 官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。\n\n\n\n\n\n\n","source":"_posts/Kafka-Background.md","raw":"---\ntitle: Kafka背景及架构介绍\ndate: 2019-05-25 11:38:04\ntags:\n    - Kafka\n    - JAVA\n    - 学习笔记\ncategories: Kafka\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n## Kafka创建背景\nkafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。\n<!-- more -->\n## Kafka简介\nKafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。\n\nkafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。\n\n每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。\n\n## Kafka架构\n\n### 一、名词解释\n* **Broker**：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成\n* **Topic**：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic\n* **Partition**：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的\n* **Producer**：生产者，负责发布消息到broker\n* **Consumer**：消费者，从broker读取消息\n* **ConsumerGroup**：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息\n* **replica**：partition 的副本，保障 partition 的高可用。\n* **leader**：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。\n* **follower**：replica 中的一个角色，从 leader 中复制数据。\n* **controller**：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等\n* **zookeeper**：Kafka 通过 zookeeper 来存储集群的 meta 信息。\n\n### 二、架构图\n#### 总体数据流\n![](Kafka-Background/1.png)\nProducers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。\n\n#### 生产者\n![](Kafka-Background/2.png)\n①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。\n\n②调用send() 方法进行消息发送。\n\n③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。\n\n④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。\n\n⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。\n\n③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。\n\nkey的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区\n\n#### topic\n![](Kafka-Background/3.jpg)\n从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。\n\nTopic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。\n\n#### partition\n![](Kafka-Background/4.jpg)\n\n每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。\n\nkafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。\n\n分区的原因：\n\n* 方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;\n* 可以提高并发，因为可以以 Partition 为单位读写了。\n\n#### Replication\n同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。\n\n没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。\n\n引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。\n\n### 消费者\n![](Kafka-Background/5.jpeg)\n订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。\n\n同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，`就是一个partition，只能被消费组里的一个消费者消费`，但是可以同时被多个消费组消费。\n\n因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。\n\n### Kafka Zookeeper 节点\n![](Kafka-Background/6.png)\n\n\n## Kafka常见的应用场景\n#### 1.消息队列\n比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。\n\n#### 2.行为跟踪\n行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。\n\n#### 3.元信息监控\n与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。\n\n#### 4.日志收集\n日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。\n\n#### 5.流处理\n保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。\n\n#### 6.持久性日志（commit log）\nKafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。\n\n#### 7.事件源\n将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。\n\n`实际应用中，适用最多最广泛的自然是MQ的功能。`\n\n## Kafka用作MQ时与常用MQ的对比\n\n**RabbitMQ**——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。\n\n**ZeroMQ**——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，`介于应用层和传输层之间`（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。\n\n**RocketMQ**——阿里开源的一款高性能、高吞吐量的分布式消息中间件。\n\n**ActiveMQ**——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。\n\n\n特性 | Kafka | RabbitMQ | ZeroMQ | RocketMQ | ActiveMQ\n:-: | :-: | :-: | :-: | :-: | :-:\n开发语言 | Scala | Erlang | C | Java | Java\n支持协议 | 自行设计的基于TCP层的协议 | AMQP | TCP、UDP | 自行设计 | OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS\n消息存储 | 内存、磁盘、数据库。支持大量堆积。 | 内存、磁盘。支持少量堆积。 | 消息发送端的内存或者磁盘中。不支持持久化。 | 磁盘。支持大量堆积。 | 内存、磁盘、数据库。支持少量堆积。\n消息事务 | 支持 | 支持 | 不支持 | 支持 | 支持\n负载均衡\t| 支持 | 支持但支持的不好\t | 去中心化，不支持负载均衡。本身只是一个多线程网络库。 | 支持 | 支持，可以基于zookeeper实现\n集群方式 | 天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。 | 支持简单集群，’复制’模式，对高级集群模式支持不好。 | 去中心化，不支持集群。 | ‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master | 支持简单集群模式，比如’主-备’，对高级集群模式支持不好。\n可用性 | 非常高（分布式） | 高（主从） | 高 | 非常高（分布式） | 高（主从）\n消息重复 | 支持at least once、at most once | 支持at least once、at most once | 只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once | 支持at least once | 支持at least once\n吞吐量TPS | 极大 | 比较大 | 极大 | 大（发送端不是批量发送） | 比较大\n时效性 | ms以内 | us级 |   | ms级 | ms级\n订阅形式和消息分发 | 基于topic以及按照topic进行正则匹配的发布订阅模式。 | 提供了4种方式：direct, topic ,Headers和fanout。 | 点对点(p2p) | 基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式 | 点对点(p2p)、广播（发布-订阅）\n顺序消息 | 支持 | 不支持 | 不支持 | 支持 | 不支持\n消息确认 | 支持 | 支持 | 支持 | 支持 | 支持\n消息回溯\t| 支持指定分区offset位置的回溯 | 不支持 | 不支持 | 支持指定时间点的回溯 | 不支持\n消费失败重试 | 不支持，但可以通过指定分区offset位置实现。 | 不支持，但是可以利用消息确认机制实现。 | 不支持 | 支持 | 不支持\n并发度 | 高 | 极高 | 高 | 高 | 高\n资料文档 | 中。有kafka作者自己写的书，网上资料也有一些。 | 多。有一些不错的书，网上资料多。 | 少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。 | 少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。 | 多。没有专门写activemq的书，网上资料多。\n\n### 常用MQ的优缺点\n\n#### Kafka\n##### 优点\n* 性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。\n* 时效性：ms级\n* 可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用\n* 消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;\n* 有优秀的第三方Kafka Web管理界面Kafka-Manager；\n* 在日志领域比较成熟，被多家公司和多个开源项目使用；\n* 功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用\n\n##### 缺点\n* Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长\n* 使用短轮询方式，实时性取决于轮询间隔时间；\n* 消费失败不支持重试；\n* 支持消息顺序，但是一台代理宕机后，就会产生消息乱序；\n* 社区更新较慢；\n\n#### RabbitMQ\n##### 优点\n* 由于erlang语言的特性，mq 性能较好，高并发；\n* 吞吐量到万级，MQ功能比较完备 \n* 健壮、稳定、易用、跨平台、支持多种语言、文档齐全；\n* 开源提供的管理界面非常棒，用起来很好用\n* 社区活跃度高；\n\n##### 缺点\n* erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。\n* RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。\n* 需要学习比较复杂的接口和协议，学习和维护成本较高。\n\n#### ZeroMQ\n##### 优点\n* 吞吐量：百万级\n* 扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。\n\n##### 缺点\n* 原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。\n* 在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：十万级\n* 可用性：非常高，分布式架构\n* 消息可靠性：经过参数优化配置，消息可以做到0丢失\n* 功能支持：MQ功能较为完善，还是分布式的，扩展性好\n* 支持10亿级别的消息堆积，不会因为堆积导致性能下降\n* 源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控\n\n##### 缺点\n* 支持的客户端语言不多，目前是java及c++，其中c++不成熟；\n* 社区活跃度一般\n* MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：万级\n* topic数量都吞吐量的影响：\n* 时效性：ms级\n* 可用性：高，基于主从架构实现高可用性\n* 消息可靠性：有较低的概率丢失数据\n* 功能支持：MQ领域的功能极其完备\n* 遵循JMS规范安装部署方便\n\n##### 缺点\n* 在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。\n* 官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。\n\n\n\n\n\n\n","slug":"Kafka-Background","published":1,"updated":"2019-07-30T11:37:52.660Z","layout":"post","photos":[],"link":"","_id":"ck4859yb4004kt0fyeb9xqpka","content":"<h2 id=\"Kafka创建背景\"><a href=\"#Kafka创建背景\" class=\"headerlink\" title=\"Kafka创建背景\"></a>Kafka创建背景</h2><p>kafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。</p>\n<a id=\"more\"></a>\n<h2 id=\"Kafka简介\"><a href=\"#Kafka简介\" class=\"headerlink\" title=\"Kafka简介\"></a>Kafka简介</h2><p>Kafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。</p>\n<p>kafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。</p>\n<p>每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。</p>\n<h2 id=\"Kafka架构\"><a href=\"#Kafka架构\" class=\"headerlink\" title=\"Kafka架构\"></a>Kafka架构</h2><h3 id=\"一、名词解释\"><a href=\"#一、名词解释\" class=\"headerlink\" title=\"一、名词解释\"></a>一、名词解释</h3><ul>\n<li><strong>Broker</strong>：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成</li>\n<li><strong>Topic</strong>：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic</li>\n<li><strong>Partition</strong>：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的</li>\n<li><strong>Producer</strong>：生产者，负责发布消息到broker</li>\n<li><strong>Consumer</strong>：消费者，从broker读取消息</li>\n<li><strong>ConsumerGroup</strong>：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息</li>\n<li><strong>replica</strong>：partition 的副本，保障 partition 的高可用。</li>\n<li><strong>leader</strong>：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。</li>\n<li><strong>follower</strong>：replica 中的一个角色，从 leader 中复制数据。</li>\n<li><strong>controller</strong>：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等</li>\n<li><strong>zookeeper</strong>：Kafka 通过 zookeeper 来存储集群的 meta 信息。</li>\n</ul>\n<h3 id=\"二、架构图\"><a href=\"#二、架构图\" class=\"headerlink\" title=\"二、架构图\"></a>二、架构图</h3><h4 id=\"总体数据流\"><a href=\"#总体数据流\" class=\"headerlink\" title=\"总体数据流\"></a>总体数据流</h4><p><img src=\"/2019/05/25/Kafka-Background/1.png\" alt=\"\"><br>Producers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。</p>\n<h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p><img src=\"/2019/05/25/Kafka-Background/2.png\" alt=\"\"><br>①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。</p>\n<p>②调用send() 方法进行消息发送。</p>\n<p>③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。</p>\n<p>④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。</p>\n<p>⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。</p>\n<p>③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。</p>\n<p>key的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区</p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p><img src=\"/2019/05/25/Kafka-Background/3.jpg\" alt=\"\"><br>从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。</p>\n<p>Topic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。</p>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a>partition</h4><p><img src=\"/2019/05/25/Kafka-Background/4.jpg\" alt=\"\"></p>\n<p>每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。</p>\n<p>kafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。</p>\n<p>分区的原因：</p>\n<ul>\n<li>方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;</li>\n<li>可以提高并发，因为可以以 Partition 为单位读写了。</li>\n</ul>\n<h4 id=\"Replication\"><a href=\"#Replication\" class=\"headerlink\" title=\"Replication\"></a>Replication</h4><p>同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。</p>\n<p>没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。</p>\n<p>引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。</p>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p><img src=\"/2019/05/25/Kafka-Background/5.jpeg\" alt=\"\"><br>订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。</p>\n<p>同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，<code>就是一个partition，只能被消费组里的一个消费者消费</code>，但是可以同时被多个消费组消费。</p>\n<p>因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。</p>\n<h3 id=\"Kafka-Zookeeper-节点\"><a href=\"#Kafka-Zookeeper-节点\" class=\"headerlink\" title=\"Kafka Zookeeper 节点\"></a>Kafka Zookeeper 节点</h3><p><img src=\"/2019/05/25/Kafka-Background/6.png\" alt=\"\"></p>\n<h2 id=\"Kafka常见的应用场景\"><a href=\"#Kafka常见的应用场景\" class=\"headerlink\" title=\"Kafka常见的应用场景\"></a>Kafka常见的应用场景</h2><h4 id=\"1-消息队列\"><a href=\"#1-消息队列\" class=\"headerlink\" title=\"1.消息队列\"></a>1.消息队列</h4><p>比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。</p>\n<h4 id=\"2-行为跟踪\"><a href=\"#2-行为跟踪\" class=\"headerlink\" title=\"2.行为跟踪\"></a>2.行为跟踪</h4><p>行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。</p>\n<h4 id=\"3-元信息监控\"><a href=\"#3-元信息监控\" class=\"headerlink\" title=\"3.元信息监控\"></a>3.元信息监控</h4><p>与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。</p>\n<h4 id=\"4-日志收集\"><a href=\"#4-日志收集\" class=\"headerlink\" title=\"4.日志收集\"></a>4.日志收集</h4><p>日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。</p>\n<h4 id=\"5-流处理\"><a href=\"#5-流处理\" class=\"headerlink\" title=\"5.流处理\"></a>5.流处理</h4><p>保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。</p>\n<h4 id=\"6-持久性日志（commit-log）\"><a href=\"#6-持久性日志（commit-log）\" class=\"headerlink\" title=\"6.持久性日志（commit log）\"></a>6.持久性日志（commit log）</h4><p>Kafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。</p>\n<h4 id=\"7-事件源\"><a href=\"#7-事件源\" class=\"headerlink\" title=\"7.事件源\"></a>7.事件源</h4><p>将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。</p>\n<p><code>实际应用中，适用最多最广泛的自然是MQ的功能。</code></p>\n<h2 id=\"Kafka用作MQ时与常用MQ的对比\"><a href=\"#Kafka用作MQ时与常用MQ的对比\" class=\"headerlink\" title=\"Kafka用作MQ时与常用MQ的对比\"></a>Kafka用作MQ时与常用MQ的对比</h2><p><strong>RabbitMQ</strong>——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。</p>\n<p><strong>ZeroMQ</strong>——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，<code>介于应用层和传输层之间</code>（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。</p>\n<p><strong>RocketMQ</strong>——阿里开源的一款高性能、高吞吐量的分布式消息中间件。</p>\n<p><strong>ActiveMQ</strong>——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">特性</th>\n<th align=\"center\">Kafka</th>\n<th align=\"center\">RabbitMQ</th>\n<th align=\"center\">ZeroMQ</th>\n<th align=\"center\">RocketMQ</th>\n<th align=\"center\">ActiveMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">开发语言</td>\n<td align=\"center\">Scala</td>\n<td align=\"center\">Erlang</td>\n<td align=\"center\">C</td>\n<td align=\"center\">Java</td>\n<td align=\"center\">Java</td>\n</tr>\n<tr>\n<td align=\"center\">支持协议</td>\n<td align=\"center\">自行设计的基于TCP层的协议</td>\n<td align=\"center\">AMQP</td>\n<td align=\"center\">TCP、UDP</td>\n<td align=\"center\">自行设计</td>\n<td align=\"center\">OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS</td>\n</tr>\n<tr>\n<td align=\"center\">消息存储</td>\n<td align=\"center\">内存、磁盘、数据库。支持大量堆积。</td>\n<td align=\"center\">内存、磁盘。支持少量堆积。</td>\n<td align=\"center\">消息发送端的内存或者磁盘中。不支持持久化。</td>\n<td align=\"center\">磁盘。支持大量堆积。</td>\n<td align=\"center\">内存、磁盘、数据库。支持少量堆积。</td>\n</tr>\n<tr>\n<td align=\"center\">消息事务</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">负载均衡</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持但支持的不好</td>\n<td align=\"center\">去中心化，不支持负载均衡。本身只是一个多线程网络库。</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持，可以基于zookeeper实现</td>\n</tr>\n<tr>\n<td align=\"center\">集群方式</td>\n<td align=\"center\">天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。</td>\n<td align=\"center\">支持简单集群，’复制’模式，对高级集群模式支持不好。</td>\n<td align=\"center\">去中心化，不支持集群。</td>\n<td align=\"center\">‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master</td>\n<td align=\"center\">支持简单集群模式，比如’主-备’，对高级集群模式支持不好。</td>\n</tr>\n<tr>\n<td align=\"center\">可用性</td>\n<td align=\"center\">非常高（分布式）</td>\n<td align=\"center\">高（主从）</td>\n<td align=\"center\">高</td>\n<td align=\"center\">非常高（分布式）</td>\n<td align=\"center\">高（主从）</td>\n</tr>\n<tr>\n<td align=\"center\">消息重复</td>\n<td align=\"center\">支持at least once、at most once</td>\n<td align=\"center\">支持at least once、at most once</td>\n<td align=\"center\">只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once</td>\n<td align=\"center\">支持at least once</td>\n<td align=\"center\">支持at least once</td>\n</tr>\n<tr>\n<td align=\"center\">吞吐量TPS</td>\n<td align=\"center\">极大</td>\n<td align=\"center\">比较大</td>\n<td align=\"center\">极大</td>\n<td align=\"center\">大（发送端不是批量发送）</td>\n<td align=\"center\">比较大</td>\n</tr>\n<tr>\n<td align=\"center\">时效性</td>\n<td align=\"center\">ms以内</td>\n<td align=\"center\">us级</td>\n<td align=\"center\"></td>\n<td align=\"center\">ms级</td>\n<td align=\"center\">ms级</td>\n</tr>\n<tr>\n<td align=\"center\">订阅形式和消息分发</td>\n<td align=\"center\">基于topic以及按照topic进行正则匹配的发布订阅模式。</td>\n<td align=\"center\">提供了4种方式：direct, topic ,Headers和fanout。</td>\n<td align=\"center\">点对点(p2p)</td>\n<td align=\"center\">基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式</td>\n<td align=\"center\">点对点(p2p)、广播（发布-订阅）</td>\n</tr>\n<tr>\n<td align=\"center\">顺序消息</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">消息确认</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">消息回溯</td>\n<td align=\"center\">支持指定分区offset位置的回溯</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持指定时间点的回溯</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">消费失败重试</td>\n<td align=\"center\">不支持，但可以通过指定分区offset位置实现。</td>\n<td align=\"center\">不支持，但是可以利用消息确认机制实现。</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">并发度</td>\n<td align=\"center\">高</td>\n<td align=\"center\">极高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n</tr>\n<tr>\n<td align=\"center\">资料文档</td>\n<td align=\"center\">中。有kafka作者自己写的书，网上资料也有一些。</td>\n<td align=\"center\">多。有一些不错的书，网上资料多。</td>\n<td align=\"center\">少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。</td>\n<td align=\"center\">少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。</td>\n<td align=\"center\">多。没有专门写activemq的书，网上资料多。</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用MQ的优缺点\"><a href=\"#常用MQ的优缺点\" class=\"headerlink\" title=\"常用MQ的优缺点\"></a>常用MQ的优缺点</h3><h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。</li>\n<li>时效性：ms级</li>\n<li>可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</li>\n<li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;</li>\n<li>有优秀的第三方Kafka Web管理界面Kafka-Manager；</li>\n<li>在日志领域比较成熟，被多家公司和多个开源项目使用；</li>\n<li>功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li>\n<li>使用短轮询方式，实时性取决于轮询间隔时间；</li>\n<li>消费失败不支持重试；</li>\n<li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li>\n<li>社区更新较慢；</li>\n</ul>\n<h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>由于erlang语言的特性，mq 性能较好，高并发；</li>\n<li>吞吐量到万级，MQ功能比较完备 </li>\n<li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全；</li>\n<li>开源提供的管理界面非常棒，用起来很好用</li>\n<li>社区活跃度高；</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。</li>\n<li>RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。</li>\n<li>需要学习比较复杂的接口和协议，学习和维护成本较高。</li>\n</ul>\n<h4 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h4><h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>吞吐量：百万级</li>\n<li>扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。</li>\n</ul>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。</li>\n<li>在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。</li>\n</ul>\n<h4 id=\"RocketMQ\"><a href=\"#RocketMQ\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：十万级</li>\n<li>可用性：非常高，分布式架构</li>\n<li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li>\n<li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li>\n<li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li>\n<li>源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控</li>\n</ul>\n<h5 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>支持的客户端语言不多，目前是java及c++，其中c++不成熟；</li>\n<li>社区活跃度一般</li>\n<li>MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码</li>\n</ul>\n<h4 id=\"RocketMQ-1\"><a href=\"#RocketMQ-1\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：万级</li>\n<li>topic数量都吞吐量的影响：</li>\n<li>时效性：ms级</li>\n<li>可用性：高，基于主从架构实现高可用性</li>\n<li>消息可靠性：有较低的概率丢失数据</li>\n<li>功能支持：MQ领域的功能极其完备</li>\n<li>遵循JMS规范安装部署方便</li>\n</ul>\n<h5 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。</li>\n<li>官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Kafka创建背景\"><a href=\"#Kafka创建背景\" class=\"headerlink\" title=\"Kafka创建背景\"></a>Kafka创建背景</h2><p>kafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。</p>","more":"<h2 id=\"Kafka简介\"><a href=\"#Kafka简介\" class=\"headerlink\" title=\"Kafka简介\"></a>Kafka简介</h2><p>Kafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。</p>\n<p>kafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。</p>\n<p>每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。</p>\n<h2 id=\"Kafka架构\"><a href=\"#Kafka架构\" class=\"headerlink\" title=\"Kafka架构\"></a>Kafka架构</h2><h3 id=\"一、名词解释\"><a href=\"#一、名词解释\" class=\"headerlink\" title=\"一、名词解释\"></a>一、名词解释</h3><ul>\n<li><strong>Broker</strong>：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成</li>\n<li><strong>Topic</strong>：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic</li>\n<li><strong>Partition</strong>：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的</li>\n<li><strong>Producer</strong>：生产者，负责发布消息到broker</li>\n<li><strong>Consumer</strong>：消费者，从broker读取消息</li>\n<li><strong>ConsumerGroup</strong>：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息</li>\n<li><strong>replica</strong>：partition 的副本，保障 partition 的高可用。</li>\n<li><strong>leader</strong>：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。</li>\n<li><strong>follower</strong>：replica 中的一个角色，从 leader 中复制数据。</li>\n<li><strong>controller</strong>：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等</li>\n<li><strong>zookeeper</strong>：Kafka 通过 zookeeper 来存储集群的 meta 信息。</li>\n</ul>\n<h3 id=\"二、架构图\"><a href=\"#二、架构图\" class=\"headerlink\" title=\"二、架构图\"></a>二、架构图</h3><h4 id=\"总体数据流\"><a href=\"#总体数据流\" class=\"headerlink\" title=\"总体数据流\"></a>总体数据流</h4><p><img src=\"/2019/05/25/Kafka-Background/1.png\" alt=\"\"><br>Producers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。</p>\n<h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p><img src=\"/2019/05/25/Kafka-Background/2.png\" alt=\"\"><br>①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。</p>\n<p>②调用send() 方法进行消息发送。</p>\n<p>③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。</p>\n<p>④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。</p>\n<p>⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。</p>\n<p>③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。</p>\n<p>key的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区</p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p><img src=\"/2019/05/25/Kafka-Background/3.jpg\" alt=\"\"><br>从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。</p>\n<p>Topic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。</p>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a>partition</h4><p><img src=\"/2019/05/25/Kafka-Background/4.jpg\" alt=\"\"></p>\n<p>每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。</p>\n<p>kafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。</p>\n<p>分区的原因：</p>\n<ul>\n<li>方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;</li>\n<li>可以提高并发，因为可以以 Partition 为单位读写了。</li>\n</ul>\n<h4 id=\"Replication\"><a href=\"#Replication\" class=\"headerlink\" title=\"Replication\"></a>Replication</h4><p>同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。</p>\n<p>没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。</p>\n<p>引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。</p>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p><img src=\"/2019/05/25/Kafka-Background/5.jpeg\" alt=\"\"><br>订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。</p>\n<p>同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，<code>就是一个partition，只能被消费组里的一个消费者消费</code>，但是可以同时被多个消费组消费。</p>\n<p>因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。</p>\n<h3 id=\"Kafka-Zookeeper-节点\"><a href=\"#Kafka-Zookeeper-节点\" class=\"headerlink\" title=\"Kafka Zookeeper 节点\"></a>Kafka Zookeeper 节点</h3><p><img src=\"/2019/05/25/Kafka-Background/6.png\" alt=\"\"></p>\n<h2 id=\"Kafka常见的应用场景\"><a href=\"#Kafka常见的应用场景\" class=\"headerlink\" title=\"Kafka常见的应用场景\"></a>Kafka常见的应用场景</h2><h4 id=\"1-消息队列\"><a href=\"#1-消息队列\" class=\"headerlink\" title=\"1.消息队列\"></a>1.消息队列</h4><p>比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。</p>\n<h4 id=\"2-行为跟踪\"><a href=\"#2-行为跟踪\" class=\"headerlink\" title=\"2.行为跟踪\"></a>2.行为跟踪</h4><p>行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。</p>\n<h4 id=\"3-元信息监控\"><a href=\"#3-元信息监控\" class=\"headerlink\" title=\"3.元信息监控\"></a>3.元信息监控</h4><p>与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。</p>\n<h4 id=\"4-日志收集\"><a href=\"#4-日志收集\" class=\"headerlink\" title=\"4.日志收集\"></a>4.日志收集</h4><p>日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。</p>\n<h4 id=\"5-流处理\"><a href=\"#5-流处理\" class=\"headerlink\" title=\"5.流处理\"></a>5.流处理</h4><p>保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。</p>\n<h4 id=\"6-持久性日志（commit-log）\"><a href=\"#6-持久性日志（commit-log）\" class=\"headerlink\" title=\"6.持久性日志（commit log）\"></a>6.持久性日志（commit log）</h4><p>Kafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。</p>\n<h4 id=\"7-事件源\"><a href=\"#7-事件源\" class=\"headerlink\" title=\"7.事件源\"></a>7.事件源</h4><p>将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。</p>\n<p><code>实际应用中，适用最多最广泛的自然是MQ的功能。</code></p>\n<h2 id=\"Kafka用作MQ时与常用MQ的对比\"><a href=\"#Kafka用作MQ时与常用MQ的对比\" class=\"headerlink\" title=\"Kafka用作MQ时与常用MQ的对比\"></a>Kafka用作MQ时与常用MQ的对比</h2><p><strong>RabbitMQ</strong>——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。</p>\n<p><strong>ZeroMQ</strong>——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，<code>介于应用层和传输层之间</code>（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。</p>\n<p><strong>RocketMQ</strong>——阿里开源的一款高性能、高吞吐量的分布式消息中间件。</p>\n<p><strong>ActiveMQ</strong>——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">特性</th>\n<th align=\"center\">Kafka</th>\n<th align=\"center\">RabbitMQ</th>\n<th align=\"center\">ZeroMQ</th>\n<th align=\"center\">RocketMQ</th>\n<th align=\"center\">ActiveMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">开发语言</td>\n<td align=\"center\">Scala</td>\n<td align=\"center\">Erlang</td>\n<td align=\"center\">C</td>\n<td align=\"center\">Java</td>\n<td align=\"center\">Java</td>\n</tr>\n<tr>\n<td align=\"center\">支持协议</td>\n<td align=\"center\">自行设计的基于TCP层的协议</td>\n<td align=\"center\">AMQP</td>\n<td align=\"center\">TCP、UDP</td>\n<td align=\"center\">自行设计</td>\n<td align=\"center\">OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS</td>\n</tr>\n<tr>\n<td align=\"center\">消息存储</td>\n<td align=\"center\">内存、磁盘、数据库。支持大量堆积。</td>\n<td align=\"center\">内存、磁盘。支持少量堆积。</td>\n<td align=\"center\">消息发送端的内存或者磁盘中。不支持持久化。</td>\n<td align=\"center\">磁盘。支持大量堆积。</td>\n<td align=\"center\">内存、磁盘、数据库。支持少量堆积。</td>\n</tr>\n<tr>\n<td align=\"center\">消息事务</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">负载均衡</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持但支持的不好</td>\n<td align=\"center\">去中心化，不支持负载均衡。本身只是一个多线程网络库。</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持，可以基于zookeeper实现</td>\n</tr>\n<tr>\n<td align=\"center\">集群方式</td>\n<td align=\"center\">天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。</td>\n<td align=\"center\">支持简单集群，’复制’模式，对高级集群模式支持不好。</td>\n<td align=\"center\">去中心化，不支持集群。</td>\n<td align=\"center\">‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master</td>\n<td align=\"center\">支持简单集群模式，比如’主-备’，对高级集群模式支持不好。</td>\n</tr>\n<tr>\n<td align=\"center\">可用性</td>\n<td align=\"center\">非常高（分布式）</td>\n<td align=\"center\">高（主从）</td>\n<td align=\"center\">高</td>\n<td align=\"center\">非常高（分布式）</td>\n<td align=\"center\">高（主从）</td>\n</tr>\n<tr>\n<td align=\"center\">消息重复</td>\n<td align=\"center\">支持at least once、at most once</td>\n<td align=\"center\">支持at least once、at most once</td>\n<td align=\"center\">只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once</td>\n<td align=\"center\">支持at least once</td>\n<td align=\"center\">支持at least once</td>\n</tr>\n<tr>\n<td align=\"center\">吞吐量TPS</td>\n<td align=\"center\">极大</td>\n<td align=\"center\">比较大</td>\n<td align=\"center\">极大</td>\n<td align=\"center\">大（发送端不是批量发送）</td>\n<td align=\"center\">比较大</td>\n</tr>\n<tr>\n<td align=\"center\">时效性</td>\n<td align=\"center\">ms以内</td>\n<td align=\"center\">us级</td>\n<td align=\"center\"></td>\n<td align=\"center\">ms级</td>\n<td align=\"center\">ms级</td>\n</tr>\n<tr>\n<td align=\"center\">订阅形式和消息分发</td>\n<td align=\"center\">基于topic以及按照topic进行正则匹配的发布订阅模式。</td>\n<td align=\"center\">提供了4种方式：direct, topic ,Headers和fanout。</td>\n<td align=\"center\">点对点(p2p)</td>\n<td align=\"center\">基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式</td>\n<td align=\"center\">点对点(p2p)、广播（发布-订阅）</td>\n</tr>\n<tr>\n<td align=\"center\">顺序消息</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">消息确认</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">支持</td>\n</tr>\n<tr>\n<td align=\"center\">消息回溯</td>\n<td align=\"center\">支持指定分区offset位置的回溯</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持指定时间点的回溯</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">消费失败重试</td>\n<td align=\"center\">不支持，但可以通过指定分区offset位置实现。</td>\n<td align=\"center\">不支持，但是可以利用消息确认机制实现。</td>\n<td align=\"center\">不支持</td>\n<td align=\"center\">支持</td>\n<td align=\"center\">不支持</td>\n</tr>\n<tr>\n<td align=\"center\">并发度</td>\n<td align=\"center\">高</td>\n<td align=\"center\">极高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n<td align=\"center\">高</td>\n</tr>\n<tr>\n<td align=\"center\">资料文档</td>\n<td align=\"center\">中。有kafka作者自己写的书，网上资料也有一些。</td>\n<td align=\"center\">多。有一些不错的书，网上资料多。</td>\n<td align=\"center\">少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。</td>\n<td align=\"center\">少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。</td>\n<td align=\"center\">多。没有专门写activemq的书，网上资料多。</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用MQ的优缺点\"><a href=\"#常用MQ的优缺点\" class=\"headerlink\" title=\"常用MQ的优缺点\"></a>常用MQ的优缺点</h3><h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。</li>\n<li>时效性：ms级</li>\n<li>可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</li>\n<li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;</li>\n<li>有优秀的第三方Kafka Web管理界面Kafka-Manager；</li>\n<li>在日志领域比较成熟，被多家公司和多个开源项目使用；</li>\n<li>功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li>\n<li>使用短轮询方式，实时性取决于轮询间隔时间；</li>\n<li>消费失败不支持重试；</li>\n<li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li>\n<li>社区更新较慢；</li>\n</ul>\n<h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>由于erlang语言的特性，mq 性能较好，高并发；</li>\n<li>吞吐量到万级，MQ功能比较完备 </li>\n<li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全；</li>\n<li>开源提供的管理界面非常棒，用起来很好用</li>\n<li>社区活跃度高；</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。</li>\n<li>RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。</li>\n<li>需要学习比较复杂的接口和协议，学习和维护成本较高。</li>\n</ul>\n<h4 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h4><h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>吞吐量：百万级</li>\n<li>扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。</li>\n</ul>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。</li>\n<li>在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。</li>\n</ul>\n<h4 id=\"RocketMQ\"><a href=\"#RocketMQ\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：十万级</li>\n<li>可用性：非常高，分布式架构</li>\n<li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li>\n<li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li>\n<li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li>\n<li>源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控</li>\n</ul>\n<h5 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>支持的客户端语言不多，目前是java及c++，其中c++不成熟；</li>\n<li>社区活跃度一般</li>\n<li>MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码</li>\n</ul>\n<h4 id=\"RocketMQ-1\"><a href=\"#RocketMQ-1\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：万级</li>\n<li>topic数量都吞吐量的影响：</li>\n<li>时效性：ms级</li>\n<li>可用性：高，基于主从架构实现高可用性</li>\n<li>消息可靠性：有较低的概率丢失数据</li>\n<li>功能支持：MQ领域的功能极其完备</li>\n<li>遵循JMS规范安装部署方便</li>\n</ul>\n<h5 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。</li>\n<li>官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。</li>\n</ul>"},{"title":"Spring Boot + MyBatis 多模块项目搭建","date":"2019-06-02T07:30:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"### 准备\n#### 开发工具及系统环境\n* IDE：IntelliJ IDEA 2019.1\n* 系统环境：mac OSX\n\n#### 项目目录结构\n* biz层：业务逻辑层\n* dao层：数据持久层，使用MB插件生成相关代码及xml\n* common层：提供工程层面的基础工具类。\n* web层：请求处理层\n<!-- more -->\n### 搭建步骤\n\n#### 搭建父工程\n\n1、 IDEA 工具栏选择菜单 File -> New -> Project...\n![](Project-Module/1.png)\n2、选择Spring Initializr，Initializr默认选择Default，点击Next\n![](Project-Module/2.png)\n3、填写项目资料,点击Next\n![](Project-Module/3.png)\n4、直接点击Next\n![](Project-Module/4.png)\n5、填写name，点击Finish\n![](Project-Module/5.png)\n6、项目结构如下\n![](Project-Module/6.png)\n7、删除多余目录，只留如下结构\n![](Project-Module/7.png)\n\n#### 创建子模块\n8、选择项目根目录,右键->New -> Module\n![](Project-Module/8.png)\n9、选择Maven，点击Next\n![](Project-Module/9.png)\n10、填写ArifactId，点击Next\n![](Project-Module/10.png)\n11、点击Finish\n![](Project-Module/11.png)\n12、同理添加其他子模块，最终项目目录结构如下图\n![](Project-Module/12.png)\n\n#### 模块间依赖关系\n\n各个子模块的依赖关系：\n* biz层：依赖dao层，common层\n* dao层：不依赖\n* common层：不依赖\n* web层：依赖biz层，common层。\n\n13、父pom文件中声明所有子模块依赖\n```xml\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n14、biz层pom文件中添加dao层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>dao</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n15、web层pom文件中添加biz层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>biz</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n#### 运行项目\n16、在web层pom文件中添加spring-boot-starter-web\n```xml\n        <!-- spring-boot -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n\n17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下\n![](Project-Module/17.png)\n入口类代码如下：\n```java\n\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n\n```\n18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return \"Hello World!\";\n    }\n}\n```\n\n19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/19.png)\n\n20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：\n```java\npackage com.example.test.demo.biz;\n\npublic interface DemoService {\n    String test();\n}\n\n```\n\n21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Override\n    public String test() {\n        return \"biz test\";\n    }\n}\n```\n\n22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return demoService.test();\n    }\n}\n```\n\n23、在入口类AppServiceApplication上添加@ComponentScan注解\n```java\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n@ComponentScan(basePackages = {\n        \"com.example.test.demo.*\"\n})\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n```\n\n24、更改完之后运行main方法，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/24.png)\n\n25、其他层同理验证。\n\n#### 集成Mybatis\n\n26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>pom</packaging>\n    <modules>\n        <module>biz</module>\n        <module>dao</module>\n        <module>common</module>\n        <module>web</module>\n    </modules>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example.test</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <mysql-connector.version>8.0.11</mysql-connector.version>\n        <mybatis.version>1.3.2</mybatis.version>\n        <mybatis.generator.version>1.3.2</mybatis.generator.version>\n    </properties>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                </plugin>\n                <!--mybatis-->\n                <plugin>\n                    <groupId>org.mybatis.generator</groupId>\n                    <artifactId>mybatis-generator-maven-plugin</artifactId>\n                    <version>${mybatis.generator.version}</version>\n                    <dependencies>\n                        <dependency>\n                            <groupId>mysql</groupId>\n                            <artifactId>mysql-connector-java</artifactId>\n                            <version>${mysql-connector.version}</version>\n                        </dependency>\n                        <dependency>\n                            <groupId>org.mybatis.generator</groupId>\n                            <artifactId>mybatis-generator-core</artifactId>\n                            <version>${mybatis.generator.version}</version>\n                        </dependency>\n                    </dependencies>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n    </build>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter</artifactId>\n            </dependency>\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-test</artifactId>\n                <scope>test</scope>\n            </dependency>\n\n            <!--mybatis-->\n            <dependency>\n                <groupId>org.mybatis.spring.boot</groupId>\n                <artifactId>mybatis-spring-boot-starter</artifactId>\n                <version>${mybatis.version}</version>\n            </dependency>\n\n            <!-- mysql -->\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>${mysql-connector.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n\n```\n27、在dao层中的pom文件中添加以下依赖\n```xml\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <configuration>\n                    <configurationFile>${basedir}/src/main/resources/mybatis-generator.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n28、在web/src/main/resources下添加application.properties\n\n* **com.mysql.jdbc.Driver** 是 mysql-connector-java 5中的\n* **com.mysql.cj.jdbc.Driver** 是 mysql-connector-java 6中的\n\n```properties\nspring.datasource.driverClassName = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF8&connectTimeout=1000&socketTimeout=3000\nspring.datasource.username = root\nspring.datasource.password = qwertyui\n\nmybatis.type-aliases-package = com.example.test.demo.dao.po\nmybatis.mapper-locations = classpath:mapper/*.xml\n```\n29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!-- 引入SpringBoot配置文件 -->\n    <properties resource=\"application.properties\"/>\n\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n        <!-- 生成的pojo，将implements Serializable-->\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\"/>\n\n        <commentGenerator>\n            <!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否-->\n            <property name=\"suppressDate\" value=\"true\" />\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"${spring.datasource.driverClassName}\"\n                        connectionURL=\"${spring.datasource.url}\"\n                        userId=\"${spring.datasource.username}\"\n                        password=\"${spring.datasource.password}\">\n        </jdbcConnection>\n\n        <!--\n       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，\n       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下\n       -->\n        <javaModelGenerator targetPackage=\"com.example.test.demo.dao.po\" targetProject=\"../dao/src/main/java\" >\n            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n\n        <!--对应的mapper.xml文件 -->\n        <sqlMapGenerator targetPackage=\"mapper\"\n                         targetProject=\"../dao/src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n\n        <!-- 对应的Mapper接口类文件 -->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.example.test.demo.dao.mapper\"\n                             targetProject=\"../dao/src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n\n        <!-- 表名及对应po类名称-->\n        <table tableName=\"user_info\" domainObjectName=\"UserInfoPO\"\n               enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\"\n               enableSelectByExample=\"true\" selectByExampleQueryId=\"false\">\n            <property name=\"useActualColumnNames\" value=\"false\"/>\n            <generatedKey column=\"id\" identity=\"true\" sqlStatement=\"MySql\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\n30、根据表自动生成对应的Mapper以及po类,步骤如下。\n![](Project-Module/30.1.png)\n得到目录如下\n![](Project-Module/30.2.png)\n\n30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport com.example.test.demo.dao.mapper.UserInfoPOMapper;\nimport com.example.test.demo.dao.po.UserInfoPO;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Autowired\n    private UserInfoPOMapper userInfoPOMapper;\n\n    @Override\n    public String test() {\n        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(1L);\n        return \"UserInfo name is:\" + po.getName();\n    }\n}\n```\n31、在入口类AppServiceApplication上中添加注解\n```java\n@MapperScan(\"com.example.test.demo.dao.mapper\")\n```\n32、运行main方法启动项目\n![](Project-Module/32.png)\n\n### 遇到的坑\nmybatis 自动生成时遇到\n> Client does not support authentication protocol requested by server; consider upgrading MySQL client\n\n解决方法登录mysql：\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwertyui';\nSELECT plugin FROM mysql.user WHERE User = 'root';\n```","source":"_posts/Project-Module.md","raw":"---\ntitle: Spring Boot + MyBatis 多模块项目搭建\ndate: 2019-06-02 15:30:04\ntags:\n    - MyBatis\n    - 教程\n    - Spring Boot\ncategories: 项目搭建\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n### 准备\n#### 开发工具及系统环境\n* IDE：IntelliJ IDEA 2019.1\n* 系统环境：mac OSX\n\n#### 项目目录结构\n* biz层：业务逻辑层\n* dao层：数据持久层，使用MB插件生成相关代码及xml\n* common层：提供工程层面的基础工具类。\n* web层：请求处理层\n<!-- more -->\n### 搭建步骤\n\n#### 搭建父工程\n\n1、 IDEA 工具栏选择菜单 File -> New -> Project...\n![](Project-Module/1.png)\n2、选择Spring Initializr，Initializr默认选择Default，点击Next\n![](Project-Module/2.png)\n3、填写项目资料,点击Next\n![](Project-Module/3.png)\n4、直接点击Next\n![](Project-Module/4.png)\n5、填写name，点击Finish\n![](Project-Module/5.png)\n6、项目结构如下\n![](Project-Module/6.png)\n7、删除多余目录，只留如下结构\n![](Project-Module/7.png)\n\n#### 创建子模块\n8、选择项目根目录,右键->New -> Module\n![](Project-Module/8.png)\n9、选择Maven，点击Next\n![](Project-Module/9.png)\n10、填写ArifactId，点击Next\n![](Project-Module/10.png)\n11、点击Finish\n![](Project-Module/11.png)\n12、同理添加其他子模块，最终项目目录结构如下图\n![](Project-Module/12.png)\n\n#### 模块间依赖关系\n\n各个子模块的依赖关系：\n* biz层：依赖dao层，common层\n* dao层：不依赖\n* common层：不依赖\n* web层：依赖biz层，common层。\n\n13、父pom文件中声明所有子模块依赖\n```xml\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n14、biz层pom文件中添加dao层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>dao</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n15、web层pom文件中添加biz层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>biz</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n#### 运行项目\n16、在web层pom文件中添加spring-boot-starter-web\n```xml\n        <!-- spring-boot -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n\n17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下\n![](Project-Module/17.png)\n入口类代码如下：\n```java\n\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n\n```\n18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return \"Hello World!\";\n    }\n}\n```\n\n19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/19.png)\n\n20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：\n```java\npackage com.example.test.demo.biz;\n\npublic interface DemoService {\n    String test();\n}\n\n```\n\n21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Override\n    public String test() {\n        return \"biz test\";\n    }\n}\n```\n\n22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return demoService.test();\n    }\n}\n```\n\n23、在入口类AppServiceApplication上添加@ComponentScan注解\n```java\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n@ComponentScan(basePackages = {\n        \"com.example.test.demo.*\"\n})\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n```\n\n24、更改完之后运行main方法，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/24.png)\n\n25、其他层同理验证。\n\n#### 集成Mybatis\n\n26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>pom</packaging>\n    <modules>\n        <module>biz</module>\n        <module>dao</module>\n        <module>common</module>\n        <module>web</module>\n    </modules>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example.test</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <mysql-connector.version>8.0.11</mysql-connector.version>\n        <mybatis.version>1.3.2</mybatis.version>\n        <mybatis.generator.version>1.3.2</mybatis.generator.version>\n    </properties>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                </plugin>\n                <!--mybatis-->\n                <plugin>\n                    <groupId>org.mybatis.generator</groupId>\n                    <artifactId>mybatis-generator-maven-plugin</artifactId>\n                    <version>${mybatis.generator.version}</version>\n                    <dependencies>\n                        <dependency>\n                            <groupId>mysql</groupId>\n                            <artifactId>mysql-connector-java</artifactId>\n                            <version>${mysql-connector.version}</version>\n                        </dependency>\n                        <dependency>\n                            <groupId>org.mybatis.generator</groupId>\n                            <artifactId>mybatis-generator-core</artifactId>\n                            <version>${mybatis.generator.version}</version>\n                        </dependency>\n                    </dependencies>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n    </build>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter</artifactId>\n            </dependency>\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-test</artifactId>\n                <scope>test</scope>\n            </dependency>\n\n            <!--mybatis-->\n            <dependency>\n                <groupId>org.mybatis.spring.boot</groupId>\n                <artifactId>mybatis-spring-boot-starter</artifactId>\n                <version>${mybatis.version}</version>\n            </dependency>\n\n            <!-- mysql -->\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>${mysql-connector.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n\n```\n27、在dao层中的pom文件中添加以下依赖\n```xml\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <configuration>\n                    <configurationFile>${basedir}/src/main/resources/mybatis-generator.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n28、在web/src/main/resources下添加application.properties\n\n* **com.mysql.jdbc.Driver** 是 mysql-connector-java 5中的\n* **com.mysql.cj.jdbc.Driver** 是 mysql-connector-java 6中的\n\n```properties\nspring.datasource.driverClassName = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF8&connectTimeout=1000&socketTimeout=3000\nspring.datasource.username = root\nspring.datasource.password = qwertyui\n\nmybatis.type-aliases-package = com.example.test.demo.dao.po\nmybatis.mapper-locations = classpath:mapper/*.xml\n```\n29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!-- 引入SpringBoot配置文件 -->\n    <properties resource=\"application.properties\"/>\n\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n        <!-- 生成的pojo，将implements Serializable-->\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\"/>\n\n        <commentGenerator>\n            <!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否-->\n            <property name=\"suppressDate\" value=\"true\" />\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"${spring.datasource.driverClassName}\"\n                        connectionURL=\"${spring.datasource.url}\"\n                        userId=\"${spring.datasource.username}\"\n                        password=\"${spring.datasource.password}\">\n        </jdbcConnection>\n\n        <!--\n       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，\n       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下\n       -->\n        <javaModelGenerator targetPackage=\"com.example.test.demo.dao.po\" targetProject=\"../dao/src/main/java\" >\n            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n\n        <!--对应的mapper.xml文件 -->\n        <sqlMapGenerator targetPackage=\"mapper\"\n                         targetProject=\"../dao/src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n\n        <!-- 对应的Mapper接口类文件 -->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.example.test.demo.dao.mapper\"\n                             targetProject=\"../dao/src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n\n        <!-- 表名及对应po类名称-->\n        <table tableName=\"user_info\" domainObjectName=\"UserInfoPO\"\n               enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\"\n               enableSelectByExample=\"true\" selectByExampleQueryId=\"false\">\n            <property name=\"useActualColumnNames\" value=\"false\"/>\n            <generatedKey column=\"id\" identity=\"true\" sqlStatement=\"MySql\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\n30、根据表自动生成对应的Mapper以及po类,步骤如下。\n![](Project-Module/30.1.png)\n得到目录如下\n![](Project-Module/30.2.png)\n\n30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport com.example.test.demo.dao.mapper.UserInfoPOMapper;\nimport com.example.test.demo.dao.po.UserInfoPO;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Autowired\n    private UserInfoPOMapper userInfoPOMapper;\n\n    @Override\n    public String test() {\n        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(1L);\n        return \"UserInfo name is:\" + po.getName();\n    }\n}\n```\n31、在入口类AppServiceApplication上中添加注解\n```java\n@MapperScan(\"com.example.test.demo.dao.mapper\")\n```\n32、运行main方法启动项目\n![](Project-Module/32.png)\n\n### 遇到的坑\nmybatis 自动生成时遇到\n> Client does not support authentication protocol requested by server; consider upgrading MySQL client\n\n解决方法登录mysql：\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwertyui';\nSELECT plugin FROM mysql.user WHERE User = 'root';\n```","slug":"Project-Module","published":1,"updated":"2019-07-30T11:37:16.751Z","layout":"post","photos":[],"link":"","_id":"ck4859yb5004lt0fy34mg0llc","content":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"开发工具及系统环境\"><a href=\"#开发工具及系统环境\" class=\"headerlink\" title=\"开发工具及系统环境\"></a>开发工具及系统环境</h4><ul>\n<li>IDE：IntelliJ IDEA 2019.1</li>\n<li>系统环境：mac OSX</li>\n</ul>\n<h4 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h4><ul>\n<li>biz层：业务逻辑层</li>\n<li>dao层：数据持久层，使用MB插件生成相关代码及xml</li>\n<li>common层：提供工程层面的基础工具类。</li>\n<li>web层：请求处理层<a id=\"more\"></a>\n<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3></li>\n</ul>\n<h4 id=\"搭建父工程\"><a href=\"#搭建父工程\" class=\"headerlink\" title=\"搭建父工程\"></a>搭建父工程</h4><p>1、 IDEA 工具栏选择菜单 File -&gt; New -&gt; Project…<br><img src=\"/2019/06/02/Project-Module/1.png\" alt=\"\"><br>2、选择Spring Initializr，Initializr默认选择Default，点击Next<br><img src=\"/2019/06/02/Project-Module/2.png\" alt=\"\"><br>3、填写项目资料,点击Next<br><img src=\"/2019/06/02/Project-Module/3.png\" alt=\"\"><br>4、直接点击Next<br><img src=\"/2019/06/02/Project-Module/4.png\" alt=\"\"><br>5、填写name，点击Finish<br><img src=\"/2019/06/02/Project-Module/5.png\" alt=\"\"><br>6、项目结构如下<br><img src=\"/2019/06/02/Project-Module/6.png\" alt=\"\"><br>7、删除多余目录，只留如下结构<br><img src=\"/2019/06/02/Project-Module/7.png\" alt=\"\"></p>\n<h4 id=\"创建子模块\"><a href=\"#创建子模块\" class=\"headerlink\" title=\"创建子模块\"></a>创建子模块</h4><p>8、选择项目根目录,右键-&gt;New -&gt; Module<br><img src=\"/2019/06/02/Project-Module/8.png\" alt=\"\"><br>9、选择Maven，点击Next<br><img src=\"/2019/06/02/Project-Module/9.png\" alt=\"\"><br>10、填写ArifactId，点击Next<br><img src=\"/2019/06/02/Project-Module/10.png\" alt=\"\"><br>11、点击Finish<br><img src=\"/2019/06/02/Project-Module/11.png\" alt=\"\"><br>12、同理添加其他子模块，最终项目目录结构如下图<br><img src=\"/2019/06/02/Project-Module/12.png\" alt=\"\"></p>\n<h4 id=\"模块间依赖关系\"><a href=\"#模块间依赖关系\" class=\"headerlink\" title=\"模块间依赖关系\"></a>模块间依赖关系</h4><p>各个子模块的依赖关系：</p>\n<ul>\n<li>biz层：依赖dao层，common层</li>\n<li>dao层：不依赖</li>\n<li>common层：不依赖</li>\n<li>web层：依赖biz层，common层。</li>\n</ul>\n<p>13、父pom文件中声明所有子模块依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>14、biz层pom文件中添加dao层，common层依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>15、web层pom文件中添加biz层，common层依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><p>16、在web层pom文件中添加spring-boot-starter-web</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring-boot --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下<br><img src=\"/2019/06/02/Project-Module/17.png\" alt=\"\"><br>入口类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/19.png\" alt=\"\"></p>\n<p>20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"biz test\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>23、在入口类AppServiceApplication上添加@ComponentScan注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"com.example.test.demo.*\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>24、更改完之后运行main方法，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/24.png\" alt=\"\"></p>\n<p>25、其他层同理验证。</p>\n<h4 id=\"集成Mybatis\"><a href=\"#集成Mybatis\" class=\"headerlink\" title=\"集成Mybatis\"></a>集成Mybatis</h4><p>26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mysql-connector.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql-connector.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.generator.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.generator.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>27、在dao层中的pom文件中添加以下依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/mybatis-generator.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>28、在web/src/main/resources下添加application.properties</p>\n<ul>\n<li><strong>com.mysql.jdbc.Driver</strong> 是 mysql-connector-java 5中的</li>\n<li><strong>com.mysql.cj.jdbc.Driver</strong> 是 mysql-connector-java 6中的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8&amp;connectTimeout=1000&amp;socketTimeout=3000</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = qwertyui</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis.type-aliases-package = com.example.test.demo.dao.po</span><br><span class=\"line\">mybatis.mapper-locations = classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>\n\n<p>29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入SpringBoot配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"application.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span> <span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.generator.plugins.SerializablePlugin\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;spring.datasource.driverClassName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;spring.datasource.url&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;spring.datasource.username&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;spring.datasource.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，</span></span><br><span class=\"line\"><span class=\"comment\">       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.po\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--对应的mapper.xml文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/resources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对应的Mapper接口类文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                             <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表名及对应po类名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"user_info\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"UserInfoPO\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"MySql\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>30、根据表自动生成对应的Mapper以及po类,步骤如下。<br><img src=\"/2019/06/02/Project-Module/30.1.png\" alt=\"\"><br>得到目录如下<br><img src=\"/2019/06/02/Project-Module/30.2.png\" alt=\"\"></p>\n<p>30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.mapper.UserInfoPOMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.po.UserInfoPO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserInfoPOMapper userInfoPOMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"UserInfo name is:\"</span> + po.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>31、在入口类AppServiceApplication上中添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>32、运行main方法启动项目<br><img src=\"/2019/06/02/Project-Module/32.png\" alt=\"\"></p>\n<h3 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h3><p>mybatis 自动生成时遇到</p>\n<blockquote>\n<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>\n</blockquote>\n<p>解决方法登录mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'qwertyui'</span>;</span><br><span class=\"line\">SELECT plugin FROM mysql.user WHERE User = <span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"开发工具及系统环境\"><a href=\"#开发工具及系统环境\" class=\"headerlink\" title=\"开发工具及系统环境\"></a>开发工具及系统环境</h4><ul>\n<li>IDE：IntelliJ IDEA 2019.1</li>\n<li>系统环境：mac OSX</li>\n</ul>\n<h4 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h4><ul>\n<li>biz层：业务逻辑层</li>\n<li>dao层：数据持久层，使用MB插件生成相关代码及xml</li>\n<li>common层：提供工程层面的基础工具类。</li>\n<li>web层：请求处理层</li></ul>","more":"<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3>\n\n<h4 id=\"搭建父工程\"><a href=\"#搭建父工程\" class=\"headerlink\" title=\"搭建父工程\"></a>搭建父工程</h4><p>1、 IDEA 工具栏选择菜单 File -&gt; New -&gt; Project…<br><img src=\"/2019/06/02/Project-Module/1.png\" alt=\"\"><br>2、选择Spring Initializr，Initializr默认选择Default，点击Next<br><img src=\"/2019/06/02/Project-Module/2.png\" alt=\"\"><br>3、填写项目资料,点击Next<br><img src=\"/2019/06/02/Project-Module/3.png\" alt=\"\"><br>4、直接点击Next<br><img src=\"/2019/06/02/Project-Module/4.png\" alt=\"\"><br>5、填写name，点击Finish<br><img src=\"/2019/06/02/Project-Module/5.png\" alt=\"\"><br>6、项目结构如下<br><img src=\"/2019/06/02/Project-Module/6.png\" alt=\"\"><br>7、删除多余目录，只留如下结构<br><img src=\"/2019/06/02/Project-Module/7.png\" alt=\"\"></p>\n<h4 id=\"创建子模块\"><a href=\"#创建子模块\" class=\"headerlink\" title=\"创建子模块\"></a>创建子模块</h4><p>8、选择项目根目录,右键-&gt;New -&gt; Module<br><img src=\"/2019/06/02/Project-Module/8.png\" alt=\"\"><br>9、选择Maven，点击Next<br><img src=\"/2019/06/02/Project-Module/9.png\" alt=\"\"><br>10、填写ArifactId，点击Next<br><img src=\"/2019/06/02/Project-Module/10.png\" alt=\"\"><br>11、点击Finish<br><img src=\"/2019/06/02/Project-Module/11.png\" alt=\"\"><br>12、同理添加其他子模块，最终项目目录结构如下图<br><img src=\"/2019/06/02/Project-Module/12.png\" alt=\"\"></p>\n<h4 id=\"模块间依赖关系\"><a href=\"#模块间依赖关系\" class=\"headerlink\" title=\"模块间依赖关系\"></a>模块间依赖关系</h4><p>各个子模块的依赖关系：</p>\n<ul>\n<li>biz层：依赖dao层，common层</li>\n<li>dao层：不依赖</li>\n<li>common层：不依赖</li>\n<li>web层：依赖biz层，common层。</li>\n</ul>\n<p>13、父pom文件中声明所有子模块依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>14、biz层pom文件中添加dao层，common层依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>15、web层pom文件中添加biz层，common层依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><p>16、在web层pom文件中添加spring-boot-starter-web</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring-boot --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下<br><img src=\"/2019/06/02/Project-Module/17.png\" alt=\"\"><br>入口类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/19.png\" alt=\"\"></p>\n<p>20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"biz test\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>23、在入口类AppServiceApplication上添加@ComponentScan注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"com.example.test.demo.*\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>24、更改完之后运行main方法，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/24.png\" alt=\"\"></p>\n<p>25、其他层同理验证。</p>\n<h4 id=\"集成Mybatis\"><a href=\"#集成Mybatis\" class=\"headerlink\" title=\"集成Mybatis\"></a>集成Mybatis</h4><p>26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mysql-connector.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql-connector.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.generator.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.generator.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>27、在dao层中的pom文件中添加以下依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/mybatis-generator.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>28、在web/src/main/resources下添加application.properties</p>\n<ul>\n<li><strong>com.mysql.jdbc.Driver</strong> 是 mysql-connector-java 5中的</li>\n<li><strong>com.mysql.cj.jdbc.Driver</strong> 是 mysql-connector-java 6中的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8&amp;connectTimeout=1000&amp;socketTimeout=3000</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = qwertyui</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis.type-aliases-package = com.example.test.demo.dao.po</span><br><span class=\"line\">mybatis.mapper-locations = classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>\n\n<p>29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入SpringBoot配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"application.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span> <span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.generator.plugins.SerializablePlugin\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;spring.datasource.driverClassName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;spring.datasource.url&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;spring.datasource.username&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;spring.datasource.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，</span></span><br><span class=\"line\"><span class=\"comment\">       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.po\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--对应的mapper.xml文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/resources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对应的Mapper接口类文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                             <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表名及对应po类名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"user_info\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"UserInfoPO\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"MySql\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>30、根据表自动生成对应的Mapper以及po类,步骤如下。<br><img src=\"/2019/06/02/Project-Module/30.1.png\" alt=\"\"><br>得到目录如下<br><img src=\"/2019/06/02/Project-Module/30.2.png\" alt=\"\"></p>\n<p>30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.mapper.UserInfoPOMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.po.UserInfoPO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserInfoPOMapper userInfoPOMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"UserInfo name is:\"</span> + po.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>31、在入口类AppServiceApplication上中添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>32、运行main方法启动项目<br><img src=\"/2019/06/02/Project-Module/32.png\" alt=\"\"></p>\n<h3 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h3><p>mybatis 自动生成时遇到</p>\n<blockquote>\n<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>\n</blockquote>\n<p>解决方法登录mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'qwertyui'</span>;</span><br><span class=\"line\">SELECT plugin FROM mysql.user WHERE User = <span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure>"},{"title":"Mysql-存储程序","author":"Guyuqing","copyright":true,"comments":0,"date":"2019-08-28T08:32:00.000Z","_content":"MySQL中的存储程序本质上封装了一些可执行的语句，然后给用户提供一种简单的调用方式来执行这些语句，根据调用方式的不同，我们可以把`存储程序`分为`存储例程`、`触发器`和`事件`这几种类型。其中，`存储例程`又可以被细分为`存储函数`和`存储过程`。\n<!-- more -->\n![存储程序](Mysql-storage/640.png)\n\n# 自定义变量\n\nMySQL中对我们自定义的变量的命名有个要求，那就是变量名称前必须加一个`@符号`。我们自定义变量的值的类型可以是任意MySQL支持的类型，例如我们自定义一个变量<font color='red'>a</font>：\n```sql\nmysql> SET @a = 1;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n如果我们想查看这个变量的值的话，使用<font color='Orange'>SELECT</font>语句就好了，不过仍然需要在变量名称加一个@符号：\n```sql\nmysql> SELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n```\n\n同一个变量也可以存储存储不同类型的值，比方说我们再把一个字符串值赋值给变量<font color='red'>a</font>：\n```sql\nmysql> SET @a = '啦';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a;\n+------+\n| @a   |\n+------+\n| 啦   |\n+------+\n1 row in set (0.00 sec)\n```\n\n除了把一个常量赋值给一个变量以外，我们还可以把一个变量赋值给另一个变量：\n```sql\nmysql> SET @b = @a;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @b;\n+------+\n| @b   |\n+------+\n| 啦   |\n+------+\n1 row in set (0.00 sec)\n```\n\n我们还可以将某个查询的结果赋值给一个变量，前提是这个<font color='red'>查询的结果只有一个值</font>：\n```sql\nmysql> SET @a = (SELECT first_column FROM first_table LIMIT 1);\nQuery OK, 0 rows affected (0.00 sec)\n\n```\n\n还可以用另一种形式的语句来将查询的结果赋值给一个变量：\n```sql\nmysql> SELECT first_column FROM first_table LIMIT 1 INTO @b;\nQuery OK, 1 row affected (0.00 sec)\n\n```\n\n我们查看一下这两个变量的值：\n```sql\nmysql> SELECT @a, @b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set (0.00 sec)\n```\n如果我们的查询结果是一条记录，该记录中有多个列的值的话，我们想把这几个值分别赋值到不同的变量中，只能使用`INTO`语句了：\n```sql\nmysql> SELECT first_column, second_column FROM first_table LIMIT 1 INTO @a, @b;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @a, @b;                                                           \n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 | aaa  |\n+------+------+\n1 row in set (0.00 sec)\n```\n\n# 复合语句\n\n在MySQL客户端的交互界面处，当我们完成键盘输入并按下回车键时，MySQL客户端会检测我们输入的内容中是否包含`;`、`\\g`或者`\\G`这三个符号之一，如果有的话，会把我们输入的内容发送到服务器。这样一来，如果我们想给服务器发送复合语句（也就是由一条或多条语句组成的语句）的话，就需要把这些语句写到一行中，比如这样：\n```sql\nmysql> SELECT first_column FROM first_table ;SELECT second_column FROM first_table;\n+--------------+\n| first_column |\n+--------------+\n|            1 |\n|            2 |\n|         NULL |\n+--------------+\n3 rows in set (0.00 sec)\n\n+---------------+\n| second_column |\n+---------------+\n| aaa           |\n| NULL          |\n| ccc           |\n+---------------+\n3 rows in set (0.00 sec)\n\n```\n\n我们也可以用`delimiter`命令来自定义MySQL的检测输入结束的符号，如下：\n```sql\nmysql> delimiter $\nmysql> SELECT first_column FROM first_table ;\n    -> SELECT second_column FROM first_table;\n    -> $\n+--------------+\n| first_column |\n+--------------+\n|            1 |\n|            2 |\n|         NULL |\n+--------------+\n3 rows in set (0.00 sec)\n\n+---------------+\n| second_column |\n+---------------+\n| aaa           |\n| NULL          |\n| ccc           |\n+---------------+\n3 rows in set (0.00 sec)\n\n```\n\n`delimiter $`命令意味着修改MySQL客户端检测输入结束的符号为`$`,也可以使用任何符号来作为MySQL客户端检测输入结束的符号，也包括多个字符，如下：\n```sql\nmysql> delimiter 666\nmysql> SELECT first_column FROM first_table;\n    -> SELECT second_column FROM first_table;\n    -> 666\n+--------------+\n| first_column |\n+--------------+\n|            1 |\n|            2 |\n|         NULL |\n+--------------+\n3 rows in set (0.00 sec)\n\n+---------------+\n| second_column |\n+---------------+\n| aaa           |\n| NULL          |\n| ccc           |\n+---------------+\n3 rows in set (0.00 sec)\n```\n\n# 存储函数\n\n## 创建存储函数\n`存储函数`其实就是一种`函数`，只不过在这个函数里可以执行命令语句而已。\nMySQL中定义存储函数的语句如下：\n```sql\nCREATE FUNCTION 存储函数名称([参数列表])\nRETURNS 返回值类型\nBEGIN\n    函数体内容\nEND\n```\n\n举个🌰：\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION second_column(a INT)\n    -> RETURNS VARCHAR(100)\n    -> BEGIN\n    -> RETURN (SELECT second_column FROM first_table WHERE first_column = a);\n    -> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> delimiter ;\n```\n\n## 存储函数的调用\n我们自定义的函数和系统内置函数的使用方式是一样的，都是在函数名后加小括号`()`表示函数调用\n```sql\nmysql> SELECT second_column(1);\n+------------------+\n| second_column(1) |\n+------------------+\n| aaa              |\n+------------------+\n1 row in set (0.00 sec)\n```\n\n## 查看存储函数\n查看定义了多少个存储函数:\n```sql\nSHOW FUNCTION STATUS [LIKE 需要匹配的函数名]\n```\n\n查看某个函数的具体定义:\n```sql\nSHOW CREATE FUNCTION 函数名\n```\n\n## 删除存储函数\n删除某个存储函数\n```sql\nDROP FUNCTION 函数名\n```\n\n## 在函数体中定义变量\n\n在函数体中使用变量前必须先声明这个变量，函数体中的变量名`不允许加@`前缀,声明方式如下：\n```sql\nDECLARE 变量名 数据类型 [DEFAULT 默认值];   \n\nmysql> delimiter $\nmysql> CREATE FUNCTION var_demo(a INT)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE b INT;\n    -> SET b = 5;\n    -> RETURN b+a;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter ;\n```\n我们调用一下这个函数：\n```sql\nmysql> SELECT var_demo(2);\n+-------------+\n| var_demo(2) |\n+-------------+\n|           7 |\n+-------------+\n1 row in set (0.00 sec)\n```\n如果不对声明的变量赋值，它的默认值就是NULL，也可以通过`DEFAULT`子句来显式的指定变量的默认值.\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION var_default_demo()\n-> RETURNS INT\n-> BEGIN\n->     DECLARE c INT DEFAULT 1;\n->     RETURN c;\n-> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> delimiter ;\n\nmysql> SELECT var_default_demo();\n+--------------------+\n| var_default_demo() |\n+--------------------+\n|                  1 |\n+--------------------+\n1 row in set (0.00 sec)\n\n```\n\n## 参数定义\n\n比如我们上边编写的这个second_column函数：\n\n```sql\nmysql> CREATE FUNCTION second_column(a INT)\n    -> RETURNS VARCHAR(100)\n    -> BEGIN\n    -> RETURN (SELECT second_column FROM first_table WHERE first_column = a);\n    -> END $\n```\n需要注意的是，参数名不要和函数体语句中其他的变量名、命令语句的标识符冲突。并且函数参数不可以指定默认值，我们在调用函数的时候，必须显式的指定所有的参数，参数类型也一定要匹配\n\n\n\n## 判断语句\n\n语法格式如下：\n```sql\nIF 布尔表达式 THEN \n    处理语句\n[ELSEIF 布尔表达式 THEN\n    处理语句]\n[ELSE \n    处理语句]    \nEND IF;\n```\n\n举个🌰：\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION condition_demo(i INT)\n    -> RETURNS VARCHAR(10)\n    -> BEGIN\n    -> DECLARE result VARCHAR(10);\n    -> IF i = 1 THEN\n    -> SET result = '结果是1';\n    -> ELSEIF i = 2 THEN\n    ->  SET result = '结果是2';\n    -> ELSEIF i = 3 THEN\n    -> SET result = '结果是3';\n    -> ELSE\n    -> SET result = '非法参数';\n    -> END IF;\n    -> RETURN result;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter;\n\n\nmysql> SELECT condition_demo(2);\n+-------------------+\n| condition_demo(2) |\n+-------------------+\n| 结果是2           |\n+-------------------+\n1 row in set (0.00 sec)\n\n```\n\n## 循环语句\n`while`循环语法格式如下：\n```sql\nWHILE 布尔表达式 DO\n    循环语句\nEND WHILE;\n```\n\n举个🌰：\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION sum_all(n INT UNSIGNED)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE result INT DEFAULT 0;\n    -> DECLARE i INT DEFAULT 1;\n    -> WHILE i <= n DO\n    -> SET result = result + i;\n    -> SET i = i + 1;\n    -> END WHILE;\n    -> RETURN result;\n    -> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> delimiter;\n\nmysql> select sum_all(10);\n+-------------+\n| sum_all(10) |\n+-------------+\n|          55 |\n+-------------+\n1 row in set (0.00 sec)\n```\n\n`REPEAT`循环语法格式如下：\n```sql\nREPEAT\n    循环语句\nUNTIL 布尔表达式 END REPEAT;\n```\n举个🌰：\n```sql\nmysql> CREATE FUNCTION sum_repeat(n INT UNSIGNED)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE result INT DEFAULT 0;\n    -> DECLARE i INT DEFAULT 1;\n    -> REPEAT\n    -> -- 循环开始\n    -> SET result = result + i;\n    -> SET i = i + 1;\n    -> UNTIL i > n END REPEAT;\n    -> RETURN result;\n    -> END $\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> select sum_repeat(5);\n+---------------+\n| sum_repeat(5) |\n+---------------+\n|            15 |\n+---------------+\n1 row in set (0.01 sec)\n```\n\n\n`LOOP`循环语法格式如下：\n```sql\n循环标记:LOOP\n    循环语句\n    LEAVE 循环标记;\nEND LOOP 循环标记;\n```\n举个🌰：\n```sql\nmysql> CREATE FUNCTION sum_loop(n INT UNSIGNED)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE result INT DEFAULT 0;\n    -> DECLARE i INT DEFAULT 1;\n    -> LOOP_NAME:LOOP -- 循环开始\n    -> IF i > n THEN\n    -> LEAVE LOOP_NAME;\n    -> END IF;\n    -> SET result = result + i;\n    -> SET i = i + 1;\n    -> END LOOP LOOP_NAME;\n    -> RETURN result;\n    -> END $\n    \nmysql> select sum_loop(10);\n+--------------+\n| sum_loop(10) |\n+--------------+\n|           55 |\n+--------------+\n1 row in set (0.00 sec)\n```\n\n# 存储过程\n\n存储函数侧重于执行语句并返回一个值，而存储过程更侧重于单纯的去执行语句。\n## 创建存储过程\n```sql\nCREATE PROCEDURE 存储过程名称([参数列表])\nBEGIN\n    需要执行的语句\nEND  \n```\n举个🌰：\n```sql\nmysql> CREATE PROCEDURE insert_first_table(c1 INT,c2 VARCHAR(100))\n    -> BEGIN\n    -> SELECT * FROM first_table;\n    -> INSERT INTO first_table(first_column,second_column) VALUES(c1,c2);\n    -> SELECT * FROM first_table;\n    -> END $\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n## 存储过程的调用\n存储函数执行语句并返回一个值，所以常用在表达式中。\n存储过程偏向于调用那些语句，并不能用在表达式中。\n我们需要显式的使用CALL语句来调用一个存储过程：\n\n```sql\nCALL 存储过程([参数列表]);\n```\n举个🌰：\n```sql\nmysql> CALL insert_first_table(4,'test');\n \n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n+--------------+---------------+\n3 rows in set (0.00 sec)\n\n\n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n|            4 | test          |\n+--------------+---------------+\n4 rows in set (0.00 sec)\n```\n\n## 查看存储过程\n```sql\n查看当前数据库中创建的存储过程都有哪些的语句：\nSHOW PROCEDURE STATUS [LIKE 需要匹配的函数名]\n\n查看某个存储过程定义的语句：\nSHOW CREATE PROCEDURE 存储过程名称\n```\n\n## 删除存储过程\n删除某个存储过程\n```sql\nDROP PROCEDURE 存储过程名称\n```\n\n## 存储过程参数类型\n<table>\n<tr>\n    <th>参数类型</th>\n    <th>实际参数是否必须是变量</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\">IN</td>\n    <td style=\"text-align:center\">否</td>\n    <td colspan=\"3\">用于调用者向过程传递数据，如果该参数在过程中被修改，调用者不可见</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">OUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">用于把过程产生的结果放到此参数中，过程结束后调用者可以通过该参数来获取过程执行的结果</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">INOUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">综合IN和OUT特点，即可用于调用者向过程传递数据，也可用于存放过程中产生的结果</td>\n</tr>\n</table>  \n\n### IN\n```sql\nmysql> CREATE PROCEDURE test_in(IN num INT)\n    -> BEGIN\n    -> SELECT num;\n    -> SET num = 666;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @a = 111;\n\nQuery OK, 0 rows affected (0.01 sec)\n\n\nmysql> CALL test_in(@a);\n+------+\n| num  |\n+------+\n|  111 |\n+------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n```\nIN参数类型的变量只能用于读取，对类型的变量赋值是不会被调用者看到的。\n如果我们不写明参数类型的话，该参数的类型默认是IN。\n\n### OUT\n```sql\nmysql> CREATE PROCEDURE test_out(OUT num INT)\n    -> BEGIN\n    -> SELECT num;\n    -> SET num = 666;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\n\nmysql> CALL test_out(@a);\n+------+\n| num  |\n+------+\n| NULL |\n+------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a;\n+------+\n| @a   |\n+------+\n|  666 |\n+------+\n1 row in set (0.00 sec)\n\n```\n\nOUT参数类型的变量只能用于赋值，对类型的变量赋值是会被调用者看到的,因此参数就不允许是常量。\n\n存储过程中向调用者返回多个值，举个例子：\n```sql\nmysql> CREATE PROCEDURE data_out(OUT a INT,OUT b INT)\n    -> BEGIN\n    -> SET a = 100;\n    -> SET b = 200;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> CALL data_out(@a,@b);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> select @a,@b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|  100 |  200 |\n+------+------+\n1 row in set (0.00 sec)\n\n```\n\n### INOUT\n\n这种类型的参数既可以在存储过程中被读取，也可以被赋值后被调用者看到，因此参数就不允许是常量。\n\n## 存储过程和函数的区别\n\n* 存储函数在定义时需要显式用RETURNS语句标明返回的数据类型，而且在函数体中必须使用RETURN语句来显式指定返回的值，存储过程不需要。\n\n* 存储函数的参数类型只能是IN，而存储过程支持IN、OUT、INOUT三种参数类型。\n\n* 存储函数只能返回一个值，而存储过程可以通过设置多个OUT类型的参数来返回多个结果。\n\n* 存储函数执行过程中产生的结果集并不会被显示到客户端，而存储过程执行过程中产生的结果集会被显示到客户端。\n\n* 存储函数的调用直接使用在表达式中，而存储过程只能通过CALL语句来显式调用。\n\n# 游标\n游标（Cursor）是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。\n初始状态下它标记查询结果集中的第一条记录,根据这个游标取出它对应记录的信息，随后再移动游标，让它指向别的记录。\n\n## 创建游标\n```sql\nDECLARE 游标名称 CURSOR FOR 查询语句;\n```\n举个🌰：\n```sql\nmysql> CREATE PROCEDURE cursor_demo()\n    -> BEGIN\n    -> DECLARE first_table_cursor CURSOR FOR select * from first_table;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n```\n## 打开和关闭游标\n```sql\nOPEN 游标名称;\n\nCLOSE 游标名称;\n```\n打开游标意味着执行查询语句，让创建好的游标与该查询语句得到的结果集关联起来，关闭游标意味着会释放该游标占用的内存，所以一旦我们使用完了游标，就要把它关闭掉。\n\n## 游标获取记录\n\n```sql\nFETCH 游标名 INTO 变量1, 变量2, ... 变量n\n```\n举个例子：\n```sql\nmysql> CREATE PROCEDURE cursor_demo()\n    -> BEGIN\n    -> DECLARE c1 INT;\n    -> DECLARE c2 VARCHAR(100);\n    -> DECLARE record_count INT;\n    -> DECLARE i INT DEFAULT 0;\n    ->  -- 声明游标\n    -> DECLARE first_table_cursor CURSOR FOR select * from first_table;\n    ->\n    -> -- 统计表行数\n    -> SELECT COUNT(*) FROM first_table INTO record_count;\n    ->\n    -> -- 使用游标遍历\n    -> OPEN first_table_cursor;\n    ->\n    -> WHILE i < record_count DO\n    -> FETCH first_table_cursor INTO c1 , c2;\n    -> SELECT c1,c2;\n    -> SET i = i + 1;\n    -> END WHILE;\n    -> CLOSE first_table_cursor;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> CALL cursor_demo();\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 | aaa  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    2 | NULL |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n| NULL | ccc  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    4 | test |\n+------+------+\n1 row in set (0.01 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n\n```\ni表示当前游标对应的记录位置。每调用一次 FETCH 语句，游标就移动到下一条记录的位置。\n\n## 遍历结束的执行策略\n\n其实在FETCH语句获取不到记录的时候会触发一个事件，从而我们可以得知所有的记录都被获取过了，然后我们就可以去主动的停止循环。\nMySQL中响应这个事件的语句如下：\n```sql\nDECLARE CONTINUE HANDLER FOR NOT FOUND 语句;  \n```\n举个🌰，再来改写一下cursor_demo存储过程：\n```sql\nmysql> delimiter $\nmysql> CREATE PROCEDURE cursor_demo()\n    -> BEGIN\n    -> -- 声明变量\n    -> DECLARE c1 INT;\n    -> DECLARE c2 VARCHAR(100);\n    -> DECLARE not_done INT DEFAULT 1;\n    ->\n    -> -- 声明游标\n    -> DECLARE first_table_cursor CURSOR FOR select * from first_table;\n    ->\n    -> -- 在游标遍历完记录的时候将变量 not_done 的值设置为 0，并且继续执行后边的语句\n    -> DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_done = 0;\n    ->\n    -> -- 使用游标遍历\n    -> OPEN first_table_cursor;\n    ->\n    -> WHILE not_done = 1 DO\n    ->\n    -> FETCH first_table_cursor INTO c1 , c2;\n    -> SELECT c1,c2;\n    -> END WHILE;\n    -> CLOSE first_table_cursor;\n    -> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>  CALL cursor_demo();\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 | aaa  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    2 | NULL |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n| NULL | ccc  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    4 | test |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    4 | test |\n+------+------+\n1 row in set (0.01 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n\n```\n我们发现结果集中最后一条记录输出两遍怎么办呢，我们可以使用`EXIT`来替代上边的`CONTINUE`：\n`CONTINUE`表示在FETCH语句获取不到记录的时候仍然会执行之后存储过程的语句，也就是会将最后一次关联的记录中的值放入指定的变量\n`EXIT`表示在FETCH语句获取不到记录的时候仍然不会执行之后存储过程的语句\n\n# 触发器\n存储函数与存储过程都是需要我们`手动`调用的，如果想在执行某条语句之前或者之后自动去调用另外一些语句，就需要用到触发器。\n\n## 创建触发器\n触发器的定义：\n```sql\nCREATE TRIGGER 触发器名\n{BEFORE|AFTER}          \n{INSERT|DELETE|UPDATE}\nON 表名\nFOR EACH ROW \nBEGIN\n    触发器内容\nEND\n```\nMySQL中目前只支持对INSERT、DELETE、UPDATE这三种类型的语句设置触发器。\n\n因为触发器会对某个语句影响的所有记录依次调用我们自定义的触发器内容，所以我们需要一种访问该记录中的内容的方式，\nMySQL提供了NEW和OLD两个单词来分别代表新记录和旧记录，它们在不同操作中的含义不同：\n* 对于INSERT语句设置的触发器来说，NEW代表准备插入的记录，不能使用OLD。\n* 对于DELETE语句设置的触发器来说，OLD代表删除前的记录，不能使用NEW。\n* 对于UPDATE语句设置的触发器来说，NEW代表修改后的记录，OLD代表修改前的记录。\n\n举个🌰：\n```sql\nmysql> CREATE TRIGGER test_trigger\n    -> BEFORE INSERT ON first_table\n    -> FOR EACH ROW\n    -> BEGIN\n    -> IF NEW.first_column < 1 THEN\n    ->  SET NEW.first_column = 1;\n    -> ELSEIF NEW.first_column > 10 THEN\n    ->  SET NEW.first_column = 10;\n    -> END IF;\n    -> END $\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> select * from first_table;\n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n|            4 | test          |\n+--------------+---------------+\n4 rows in set (0.00 sec)\n\nmysql> INSERT INTO first_table(first_column,second_column) VALUES(5,'5'),(20,'20');\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\n\nmysql> select * from first_table;\n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n|            4 | test          |\n|            5 | 5             |\n|           10 | 20            |\n+--------------+---------------+\n6 rows in set (0.00 sec)\n```\n(20,'20')的插入结果变成了(10,'20')说明触发器生效了。\n\n## 查看触发器\n\n```sql\n查看当前数据库中的所有触发器的语句：\nSHOW TRIGGERS;\n\n查看某个具体的触发器的定义：\nSHOW CREATE TRIGGER 触发器名;\n```\n\n## 删除触发器：\n```sql\nDROP TRIGGER 触发器名;\n```\n\n## 触发器使用注意事项\n1. 触发器内容中不能有输出结果集的语句。\n2. 一个表最多只能定义6个触发器分别是：\n    * BEFORE INSERT触发器\n    * BEFORE DELETE触发器\n    * BEFORE UPDATE触发器\n    * AFTER INSERT触发器\n    * AFTER DELETE触发器\n    * AFTER UPDATE触发器\n3. NEW中的值可以被更改，OLD中的值无法更改。\n4. 如果我们的`BEFORE`触发器内容执行过程中遇到了`ERROR`，那这个触发器对应的具体语句将无法执行；如果具体的操作语句执行过程中遇到了`ERROR`，那与它对应的`AFTER`触发器的内容将无法执行。\n\n# 事件\n\n如果我们想指定某些语句在某个时间点或者每隔一个时间段执行一次的话,就需要创建一个事件。\n\n## 创建事件\n```sql\nCREATE EVENT 事件名\nON SCHEDULE\n{AT 某个确定的时间点 | EVERY 期望的时间间隔 [STARTS datetime][END datetime]}\nDO\nBEGIN\n    具体的语句\nEND\n```\n\n事件支持两种类型的定时执行：\n1. 某个确定的时间点执行\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> AT '2019-09-10 11:30:30'\n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    除了直接填某个时间常量，也可以填写一些表达式：\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> AT DATE_ADD(NOW(), INTERVAL 2 DAY)\n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    DATE_ADD(NOW(), INTERVAL 2 DAY)表示该事件将在当前时间的两天后执行。\n\n2. 每隔一段时间执行一次\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> EVERY 1 HOUR \n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    默认情况下，采用这种每隔一段时间执行一次的方式将从创建事件的事件开始，无限制的执行下去。我们也可以指定该事件开始执行时间和截止时间：\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> EVERY 1 HOUR STARTS '2019-09-10 11:30:30' ENDS '2019-09-12 11:30:30'\n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    在创建好事件之后我们就不用管了，到了指定时间，MySQL服务器会帮我们自动执行的。\n\n## 查看事件\n```sql\n查看当前数据库中的所有事件的语句：\nSHOW EVENTS;\n\n查看某个具体的事件的定义:\nSHOW CREATE EVENT 事件名;\n```\n\n## 删除事件\n```sql\nDROP EVENT 事件名;\n```\n\n## 事件使用注意事项\n默认情况下，MySQL服务器并不会帮助我们执行事件，除非我们在启动服务器的时候就指定了下边这个选项：\n```sql\nevent_scheduler = ON\n```\n如果在服务器已经启动的情况下，我们可以通过设置`event_scheduler`的系统变量来让MySQL服务器帮助我们执行事件，设置方式如下：\n```sql\nmysql> SET GLOBAL event_scheduler = ON;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n\n# 错误解决\n在MySql中创建自定义函数报错信息如下：\n```sql\nERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)\n```\n解决方法：\n```sql\nmysql> set global log_bin_trust_function_creators=1;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Mysql-storage.md","raw":"title: Mysql-存储程序\ntags:\n  - MySql\ncategories:\n  - Mysql\nauthor: Guyuqing\ncopyright: true\ncomments: false\ndate: 2019-08-28 16:32:00\n---\nMySQL中的存储程序本质上封装了一些可执行的语句，然后给用户提供一种简单的调用方式来执行这些语句，根据调用方式的不同，我们可以把`存储程序`分为`存储例程`、`触发器`和`事件`这几种类型。其中，`存储例程`又可以被细分为`存储函数`和`存储过程`。\n<!-- more -->\n![存储程序](Mysql-storage/640.png)\n\n# 自定义变量\n\nMySQL中对我们自定义的变量的命名有个要求，那就是变量名称前必须加一个`@符号`。我们自定义变量的值的类型可以是任意MySQL支持的类型，例如我们自定义一个变量<font color='red'>a</font>：\n```sql\nmysql> SET @a = 1;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n如果我们想查看这个变量的值的话，使用<font color='Orange'>SELECT</font>语句就好了，不过仍然需要在变量名称加一个@符号：\n```sql\nmysql> SELECT @a;\n+------+\n| @a   |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n```\n\n同一个变量也可以存储存储不同类型的值，比方说我们再把一个字符串值赋值给变量<font color='red'>a</font>：\n```sql\nmysql> SET @a = '啦';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a;\n+------+\n| @a   |\n+------+\n| 啦   |\n+------+\n1 row in set (0.00 sec)\n```\n\n除了把一个常量赋值给一个变量以外，我们还可以把一个变量赋值给另一个变量：\n```sql\nmysql> SET @b = @a;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @b;\n+------+\n| @b   |\n+------+\n| 啦   |\n+------+\n1 row in set (0.00 sec)\n```\n\n我们还可以将某个查询的结果赋值给一个变量，前提是这个<font color='red'>查询的结果只有一个值</font>：\n```sql\nmysql> SET @a = (SELECT first_column FROM first_table LIMIT 1);\nQuery OK, 0 rows affected (0.00 sec)\n\n```\n\n还可以用另一种形式的语句来将查询的结果赋值给一个变量：\n```sql\nmysql> SELECT first_column FROM first_table LIMIT 1 INTO @b;\nQuery OK, 1 row affected (0.00 sec)\n\n```\n\n我们查看一下这两个变量的值：\n```sql\nmysql> SELECT @a, @b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 |    1 |\n+------+------+\n1 row in set (0.00 sec)\n```\n如果我们的查询结果是一条记录，该记录中有多个列的值的话，我们想把这几个值分别赋值到不同的变量中，只能使用`INTO`语句了：\n```sql\nmysql> SELECT first_column, second_column FROM first_table LIMIT 1 INTO @a, @b;\nQuery OK, 1 row affected (0.00 sec)\n\nmysql> SELECT @a, @b;                                                           \n+------+------+\n| @a   | @b   |\n+------+------+\n|    1 | aaa  |\n+------+------+\n1 row in set (0.00 sec)\n```\n\n# 复合语句\n\n在MySQL客户端的交互界面处，当我们完成键盘输入并按下回车键时，MySQL客户端会检测我们输入的内容中是否包含`;`、`\\g`或者`\\G`这三个符号之一，如果有的话，会把我们输入的内容发送到服务器。这样一来，如果我们想给服务器发送复合语句（也就是由一条或多条语句组成的语句）的话，就需要把这些语句写到一行中，比如这样：\n```sql\nmysql> SELECT first_column FROM first_table ;SELECT second_column FROM first_table;\n+--------------+\n| first_column |\n+--------------+\n|            1 |\n|            2 |\n|         NULL |\n+--------------+\n3 rows in set (0.00 sec)\n\n+---------------+\n| second_column |\n+---------------+\n| aaa           |\n| NULL          |\n| ccc           |\n+---------------+\n3 rows in set (0.00 sec)\n\n```\n\n我们也可以用`delimiter`命令来自定义MySQL的检测输入结束的符号，如下：\n```sql\nmysql> delimiter $\nmysql> SELECT first_column FROM first_table ;\n    -> SELECT second_column FROM first_table;\n    -> $\n+--------------+\n| first_column |\n+--------------+\n|            1 |\n|            2 |\n|         NULL |\n+--------------+\n3 rows in set (0.00 sec)\n\n+---------------+\n| second_column |\n+---------------+\n| aaa           |\n| NULL          |\n| ccc           |\n+---------------+\n3 rows in set (0.00 sec)\n\n```\n\n`delimiter $`命令意味着修改MySQL客户端检测输入结束的符号为`$`,也可以使用任何符号来作为MySQL客户端检测输入结束的符号，也包括多个字符，如下：\n```sql\nmysql> delimiter 666\nmysql> SELECT first_column FROM first_table;\n    -> SELECT second_column FROM first_table;\n    -> 666\n+--------------+\n| first_column |\n+--------------+\n|            1 |\n|            2 |\n|         NULL |\n+--------------+\n3 rows in set (0.00 sec)\n\n+---------------+\n| second_column |\n+---------------+\n| aaa           |\n| NULL          |\n| ccc           |\n+---------------+\n3 rows in set (0.00 sec)\n```\n\n# 存储函数\n\n## 创建存储函数\n`存储函数`其实就是一种`函数`，只不过在这个函数里可以执行命令语句而已。\nMySQL中定义存储函数的语句如下：\n```sql\nCREATE FUNCTION 存储函数名称([参数列表])\nRETURNS 返回值类型\nBEGIN\n    函数体内容\nEND\n```\n\n举个🌰：\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION second_column(a INT)\n    -> RETURNS VARCHAR(100)\n    -> BEGIN\n    -> RETURN (SELECT second_column FROM first_table WHERE first_column = a);\n    -> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> delimiter ;\n```\n\n## 存储函数的调用\n我们自定义的函数和系统内置函数的使用方式是一样的，都是在函数名后加小括号`()`表示函数调用\n```sql\nmysql> SELECT second_column(1);\n+------------------+\n| second_column(1) |\n+------------------+\n| aaa              |\n+------------------+\n1 row in set (0.00 sec)\n```\n\n## 查看存储函数\n查看定义了多少个存储函数:\n```sql\nSHOW FUNCTION STATUS [LIKE 需要匹配的函数名]\n```\n\n查看某个函数的具体定义:\n```sql\nSHOW CREATE FUNCTION 函数名\n```\n\n## 删除存储函数\n删除某个存储函数\n```sql\nDROP FUNCTION 函数名\n```\n\n## 在函数体中定义变量\n\n在函数体中使用变量前必须先声明这个变量，函数体中的变量名`不允许加@`前缀,声明方式如下：\n```sql\nDECLARE 变量名 数据类型 [DEFAULT 默认值];   \n\nmysql> delimiter $\nmysql> CREATE FUNCTION var_demo(a INT)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE b INT;\n    -> SET b = 5;\n    -> RETURN b+a;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter ;\n```\n我们调用一下这个函数：\n```sql\nmysql> SELECT var_demo(2);\n+-------------+\n| var_demo(2) |\n+-------------+\n|           7 |\n+-------------+\n1 row in set (0.00 sec)\n```\n如果不对声明的变量赋值，它的默认值就是NULL，也可以通过`DEFAULT`子句来显式的指定变量的默认值.\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION var_default_demo()\n-> RETURNS INT\n-> BEGIN\n->     DECLARE c INT DEFAULT 1;\n->     RETURN c;\n-> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> delimiter ;\n\nmysql> SELECT var_default_demo();\n+--------------------+\n| var_default_demo() |\n+--------------------+\n|                  1 |\n+--------------------+\n1 row in set (0.00 sec)\n\n```\n\n## 参数定义\n\n比如我们上边编写的这个second_column函数：\n\n```sql\nmysql> CREATE FUNCTION second_column(a INT)\n    -> RETURNS VARCHAR(100)\n    -> BEGIN\n    -> RETURN (SELECT second_column FROM first_table WHERE first_column = a);\n    -> END $\n```\n需要注意的是，参数名不要和函数体语句中其他的变量名、命令语句的标识符冲突。并且函数参数不可以指定默认值，我们在调用函数的时候，必须显式的指定所有的参数，参数类型也一定要匹配\n\n\n\n## 判断语句\n\n语法格式如下：\n```sql\nIF 布尔表达式 THEN \n    处理语句\n[ELSEIF 布尔表达式 THEN\n    处理语句]\n[ELSE \n    处理语句]    \nEND IF;\n```\n\n举个🌰：\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION condition_demo(i INT)\n    -> RETURNS VARCHAR(10)\n    -> BEGIN\n    -> DECLARE result VARCHAR(10);\n    -> IF i = 1 THEN\n    -> SET result = '结果是1';\n    -> ELSEIF i = 2 THEN\n    ->  SET result = '结果是2';\n    -> ELSEIF i = 3 THEN\n    -> SET result = '结果是3';\n    -> ELSE\n    -> SET result = '非法参数';\n    -> END IF;\n    -> RETURN result;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> delimiter;\n\n\nmysql> SELECT condition_demo(2);\n+-------------------+\n| condition_demo(2) |\n+-------------------+\n| 结果是2           |\n+-------------------+\n1 row in set (0.00 sec)\n\n```\n\n## 循环语句\n`while`循环语法格式如下：\n```sql\nWHILE 布尔表达式 DO\n    循环语句\nEND WHILE;\n```\n\n举个🌰：\n```sql\nmysql> delimiter $\nmysql> CREATE FUNCTION sum_all(n INT UNSIGNED)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE result INT DEFAULT 0;\n    -> DECLARE i INT DEFAULT 1;\n    -> WHILE i <= n DO\n    -> SET result = result + i;\n    -> SET i = i + 1;\n    -> END WHILE;\n    -> RETURN result;\n    -> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> delimiter;\n\nmysql> select sum_all(10);\n+-------------+\n| sum_all(10) |\n+-------------+\n|          55 |\n+-------------+\n1 row in set (0.00 sec)\n```\n\n`REPEAT`循环语法格式如下：\n```sql\nREPEAT\n    循环语句\nUNTIL 布尔表达式 END REPEAT;\n```\n举个🌰：\n```sql\nmysql> CREATE FUNCTION sum_repeat(n INT UNSIGNED)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE result INT DEFAULT 0;\n    -> DECLARE i INT DEFAULT 1;\n    -> REPEAT\n    -> -- 循环开始\n    -> SET result = result + i;\n    -> SET i = i + 1;\n    -> UNTIL i > n END REPEAT;\n    -> RETURN result;\n    -> END $\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> select sum_repeat(5);\n+---------------+\n| sum_repeat(5) |\n+---------------+\n|            15 |\n+---------------+\n1 row in set (0.01 sec)\n```\n\n\n`LOOP`循环语法格式如下：\n```sql\n循环标记:LOOP\n    循环语句\n    LEAVE 循环标记;\nEND LOOP 循环标记;\n```\n举个🌰：\n```sql\nmysql> CREATE FUNCTION sum_loop(n INT UNSIGNED)\n    -> RETURNS INT\n    -> BEGIN\n    -> DECLARE result INT DEFAULT 0;\n    -> DECLARE i INT DEFAULT 1;\n    -> LOOP_NAME:LOOP -- 循环开始\n    -> IF i > n THEN\n    -> LEAVE LOOP_NAME;\n    -> END IF;\n    -> SET result = result + i;\n    -> SET i = i + 1;\n    -> END LOOP LOOP_NAME;\n    -> RETURN result;\n    -> END $\n    \nmysql> select sum_loop(10);\n+--------------+\n| sum_loop(10) |\n+--------------+\n|           55 |\n+--------------+\n1 row in set (0.00 sec)\n```\n\n# 存储过程\n\n存储函数侧重于执行语句并返回一个值，而存储过程更侧重于单纯的去执行语句。\n## 创建存储过程\n```sql\nCREATE PROCEDURE 存储过程名称([参数列表])\nBEGIN\n    需要执行的语句\nEND  \n```\n举个🌰：\n```sql\nmysql> CREATE PROCEDURE insert_first_table(c1 INT,c2 VARCHAR(100))\n    -> BEGIN\n    -> SELECT * FROM first_table;\n    -> INSERT INTO first_table(first_column,second_column) VALUES(c1,c2);\n    -> SELECT * FROM first_table;\n    -> END $\nQuery OK, 0 rows affected (0.02 sec)\n```\n\n## 存储过程的调用\n存储函数执行语句并返回一个值，所以常用在表达式中。\n存储过程偏向于调用那些语句，并不能用在表达式中。\n我们需要显式的使用CALL语句来调用一个存储过程：\n\n```sql\nCALL 存储过程([参数列表]);\n```\n举个🌰：\n```sql\nmysql> CALL insert_first_table(4,'test');\n \n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n+--------------+---------------+\n3 rows in set (0.00 sec)\n\n\n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n|            4 | test          |\n+--------------+---------------+\n4 rows in set (0.00 sec)\n```\n\n## 查看存储过程\n```sql\n查看当前数据库中创建的存储过程都有哪些的语句：\nSHOW PROCEDURE STATUS [LIKE 需要匹配的函数名]\n\n查看某个存储过程定义的语句：\nSHOW CREATE PROCEDURE 存储过程名称\n```\n\n## 删除存储过程\n删除某个存储过程\n```sql\nDROP PROCEDURE 存储过程名称\n```\n\n## 存储过程参数类型\n<table>\n<tr>\n    <th>参数类型</th>\n    <th>实际参数是否必须是变量</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\">IN</td>\n    <td style=\"text-align:center\">否</td>\n    <td colspan=\"3\">用于调用者向过程传递数据，如果该参数在过程中被修改，调用者不可见</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">OUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">用于把过程产生的结果放到此参数中，过程结束后调用者可以通过该参数来获取过程执行的结果</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">INOUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">综合IN和OUT特点，即可用于调用者向过程传递数据，也可用于存放过程中产生的结果</td>\n</tr>\n</table>  \n\n### IN\n```sql\nmysql> CREATE PROCEDURE test_in(IN num INT)\n    -> BEGIN\n    -> SELECT num;\n    -> SET num = 666;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> SET @a = 111;\n\nQuery OK, 0 rows affected (0.01 sec)\n\n\nmysql> CALL test_in(@a);\n+------+\n| num  |\n+------+\n|  111 |\n+------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n```\nIN参数类型的变量只能用于读取，对类型的变量赋值是不会被调用者看到的。\n如果我们不写明参数类型的话，该参数的类型默认是IN。\n\n### OUT\n```sql\nmysql> CREATE PROCEDURE test_out(OUT num INT)\n    -> BEGIN\n    -> SELECT num;\n    -> SET num = 666;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\n\nmysql> CALL test_out(@a);\n+------+\n| num  |\n+------+\n| NULL |\n+------+\n1 row in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a;\n+------+\n| @a   |\n+------+\n|  666 |\n+------+\n1 row in set (0.00 sec)\n\n```\n\nOUT参数类型的变量只能用于赋值，对类型的变量赋值是会被调用者看到的,因此参数就不允许是常量。\n\n存储过程中向调用者返回多个值，举个例子：\n```sql\nmysql> CREATE PROCEDURE data_out(OUT a INT,OUT b INT)\n    -> BEGIN\n    -> SET a = 100;\n    -> SET b = 200;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> CALL data_out(@a,@b);\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> select @a,@b;\n+------+------+\n| @a   | @b   |\n+------+------+\n|  100 |  200 |\n+------+------+\n1 row in set (0.00 sec)\n\n```\n\n### INOUT\n\n这种类型的参数既可以在存储过程中被读取，也可以被赋值后被调用者看到，因此参数就不允许是常量。\n\n## 存储过程和函数的区别\n\n* 存储函数在定义时需要显式用RETURNS语句标明返回的数据类型，而且在函数体中必须使用RETURN语句来显式指定返回的值，存储过程不需要。\n\n* 存储函数的参数类型只能是IN，而存储过程支持IN、OUT、INOUT三种参数类型。\n\n* 存储函数只能返回一个值，而存储过程可以通过设置多个OUT类型的参数来返回多个结果。\n\n* 存储函数执行过程中产生的结果集并不会被显示到客户端，而存储过程执行过程中产生的结果集会被显示到客户端。\n\n* 存储函数的调用直接使用在表达式中，而存储过程只能通过CALL语句来显式调用。\n\n# 游标\n游标（Cursor）是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。\n初始状态下它标记查询结果集中的第一条记录,根据这个游标取出它对应记录的信息，随后再移动游标，让它指向别的记录。\n\n## 创建游标\n```sql\nDECLARE 游标名称 CURSOR FOR 查询语句;\n```\n举个🌰：\n```sql\nmysql> CREATE PROCEDURE cursor_demo()\n    -> BEGIN\n    -> DECLARE first_table_cursor CURSOR FOR select * from first_table;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n```\n## 打开和关闭游标\n```sql\nOPEN 游标名称;\n\nCLOSE 游标名称;\n```\n打开游标意味着执行查询语句，让创建好的游标与该查询语句得到的结果集关联起来，关闭游标意味着会释放该游标占用的内存，所以一旦我们使用完了游标，就要把它关闭掉。\n\n## 游标获取记录\n\n```sql\nFETCH 游标名 INTO 变量1, 变量2, ... 变量n\n```\n举个例子：\n```sql\nmysql> CREATE PROCEDURE cursor_demo()\n    -> BEGIN\n    -> DECLARE c1 INT;\n    -> DECLARE c2 VARCHAR(100);\n    -> DECLARE record_count INT;\n    -> DECLARE i INT DEFAULT 0;\n    ->  -- 声明游标\n    -> DECLARE first_table_cursor CURSOR FOR select * from first_table;\n    ->\n    -> -- 统计表行数\n    -> SELECT COUNT(*) FROM first_table INTO record_count;\n    ->\n    -> -- 使用游标遍历\n    -> OPEN first_table_cursor;\n    ->\n    -> WHILE i < record_count DO\n    -> FETCH first_table_cursor INTO c1 , c2;\n    -> SELECT c1,c2;\n    -> SET i = i + 1;\n    -> END WHILE;\n    -> CLOSE first_table_cursor;\n    -> END $\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> CALL cursor_demo();\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 | aaa  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    2 | NULL |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n| NULL | ccc  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    4 | test |\n+------+------+\n1 row in set (0.01 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n\n```\ni表示当前游标对应的记录位置。每调用一次 FETCH 语句，游标就移动到下一条记录的位置。\n\n## 遍历结束的执行策略\n\n其实在FETCH语句获取不到记录的时候会触发一个事件，从而我们可以得知所有的记录都被获取过了，然后我们就可以去主动的停止循环。\nMySQL中响应这个事件的语句如下：\n```sql\nDECLARE CONTINUE HANDLER FOR NOT FOUND 语句;  \n```\n举个🌰，再来改写一下cursor_demo存储过程：\n```sql\nmysql> delimiter $\nmysql> CREATE PROCEDURE cursor_demo()\n    -> BEGIN\n    -> -- 声明变量\n    -> DECLARE c1 INT;\n    -> DECLARE c2 VARCHAR(100);\n    -> DECLARE not_done INT DEFAULT 1;\n    ->\n    -> -- 声明游标\n    -> DECLARE first_table_cursor CURSOR FOR select * from first_table;\n    ->\n    -> -- 在游标遍历完记录的时候将变量 not_done 的值设置为 0，并且继续执行后边的语句\n    -> DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_done = 0;\n    ->\n    -> -- 使用游标遍历\n    -> OPEN first_table_cursor;\n    ->\n    -> WHILE not_done = 1 DO\n    ->\n    -> FETCH first_table_cursor INTO c1 , c2;\n    -> SELECT c1,c2;\n    -> END WHILE;\n    -> CLOSE first_table_cursor;\n    -> END $\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql>  CALL cursor_demo();\n+------+------+\n| c1   | c2   |\n+------+------+\n|    1 | aaa  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    2 | NULL |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n| NULL | ccc  |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    4 | test |\n+------+------+\n1 row in set (0.01 sec)\n\n+------+------+\n| c1   | c2   |\n+------+------+\n|    4 | test |\n+------+------+\n1 row in set (0.01 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n\n```\n我们发现结果集中最后一条记录输出两遍怎么办呢，我们可以使用`EXIT`来替代上边的`CONTINUE`：\n`CONTINUE`表示在FETCH语句获取不到记录的时候仍然会执行之后存储过程的语句，也就是会将最后一次关联的记录中的值放入指定的变量\n`EXIT`表示在FETCH语句获取不到记录的时候仍然不会执行之后存储过程的语句\n\n# 触发器\n存储函数与存储过程都是需要我们`手动`调用的，如果想在执行某条语句之前或者之后自动去调用另外一些语句，就需要用到触发器。\n\n## 创建触发器\n触发器的定义：\n```sql\nCREATE TRIGGER 触发器名\n{BEFORE|AFTER}          \n{INSERT|DELETE|UPDATE}\nON 表名\nFOR EACH ROW \nBEGIN\n    触发器内容\nEND\n```\nMySQL中目前只支持对INSERT、DELETE、UPDATE这三种类型的语句设置触发器。\n\n因为触发器会对某个语句影响的所有记录依次调用我们自定义的触发器内容，所以我们需要一种访问该记录中的内容的方式，\nMySQL提供了NEW和OLD两个单词来分别代表新记录和旧记录，它们在不同操作中的含义不同：\n* 对于INSERT语句设置的触发器来说，NEW代表准备插入的记录，不能使用OLD。\n* 对于DELETE语句设置的触发器来说，OLD代表删除前的记录，不能使用NEW。\n* 对于UPDATE语句设置的触发器来说，NEW代表修改后的记录，OLD代表修改前的记录。\n\n举个🌰：\n```sql\nmysql> CREATE TRIGGER test_trigger\n    -> BEFORE INSERT ON first_table\n    -> FOR EACH ROW\n    -> BEGIN\n    -> IF NEW.first_column < 1 THEN\n    ->  SET NEW.first_column = 1;\n    -> ELSEIF NEW.first_column > 10 THEN\n    ->  SET NEW.first_column = 10;\n    -> END IF;\n    -> END $\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> select * from first_table;\n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n|            4 | test          |\n+--------------+---------------+\n4 rows in set (0.00 sec)\n\nmysql> INSERT INTO first_table(first_column,second_column) VALUES(5,'5'),(20,'20');\nQuery OK, 2 rows affected (0.01 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\n\nmysql> select * from first_table;\n+--------------+---------------+\n| first_column | second_column |\n+--------------+---------------+\n|            1 | aaa           |\n|            2 | NULL          |\n|         NULL | ccc           |\n|            4 | test          |\n|            5 | 5             |\n|           10 | 20            |\n+--------------+---------------+\n6 rows in set (0.00 sec)\n```\n(20,'20')的插入结果变成了(10,'20')说明触发器生效了。\n\n## 查看触发器\n\n```sql\n查看当前数据库中的所有触发器的语句：\nSHOW TRIGGERS;\n\n查看某个具体的触发器的定义：\nSHOW CREATE TRIGGER 触发器名;\n```\n\n## 删除触发器：\n```sql\nDROP TRIGGER 触发器名;\n```\n\n## 触发器使用注意事项\n1. 触发器内容中不能有输出结果集的语句。\n2. 一个表最多只能定义6个触发器分别是：\n    * BEFORE INSERT触发器\n    * BEFORE DELETE触发器\n    * BEFORE UPDATE触发器\n    * AFTER INSERT触发器\n    * AFTER DELETE触发器\n    * AFTER UPDATE触发器\n3. NEW中的值可以被更改，OLD中的值无法更改。\n4. 如果我们的`BEFORE`触发器内容执行过程中遇到了`ERROR`，那这个触发器对应的具体语句将无法执行；如果具体的操作语句执行过程中遇到了`ERROR`，那与它对应的`AFTER`触发器的内容将无法执行。\n\n# 事件\n\n如果我们想指定某些语句在某个时间点或者每隔一个时间段执行一次的话,就需要创建一个事件。\n\n## 创建事件\n```sql\nCREATE EVENT 事件名\nON SCHEDULE\n{AT 某个确定的时间点 | EVERY 期望的时间间隔 [STARTS datetime][END datetime]}\nDO\nBEGIN\n    具体的语句\nEND\n```\n\n事件支持两种类型的定时执行：\n1. 某个确定的时间点执行\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> AT '2019-09-10 11:30:30'\n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    除了直接填某个时间常量，也可以填写一些表达式：\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> AT DATE_ADD(NOW(), INTERVAL 2 DAY)\n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    DATE_ADD(NOW(), INTERVAL 2 DAY)表示该事件将在当前时间的两天后执行。\n\n2. 每隔一段时间执行一次\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> EVERY 1 HOUR \n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    默认情况下，采用这种每隔一段时间执行一次的方式将从创建事件的事件开始，无限制的执行下去。我们也可以指定该事件开始执行时间和截止时间：\n    ```sql\n    mysql> CREATE EVENT insert_first_table\n        -> ON SCHEDULE\n        -> EVERY 1 HOUR STARTS '2019-09-10 11:30:30' ENDS '2019-09-12 11:30:30'\n        -> DO\n        -> BEGIN\n        -> INSERT INTO first_table(first_column,second_column) VALUES(6,'6');\n        -> END $\n    ```\n    在创建好事件之后我们就不用管了，到了指定时间，MySQL服务器会帮我们自动执行的。\n\n## 查看事件\n```sql\n查看当前数据库中的所有事件的语句：\nSHOW EVENTS;\n\n查看某个具体的事件的定义:\nSHOW CREATE EVENT 事件名;\n```\n\n## 删除事件\n```sql\nDROP EVENT 事件名;\n```\n\n## 事件使用注意事项\n默认情况下，MySQL服务器并不会帮助我们执行事件，除非我们在启动服务器的时候就指定了下边这个选项：\n```sql\nevent_scheduler = ON\n```\n如果在服务器已经启动的情况下，我们可以通过设置`event_scheduler`的系统变量来让MySQL服务器帮助我们执行事件，设置方式如下：\n```sql\nmysql> SET GLOBAL event_scheduler = ON;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n\n# 错误解决\n在MySql中创建自定义函数报错信息如下：\n```sql\nERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)\n```\n解决方法：\n```sql\nmysql> set global log_bin_trust_function_creators=1;\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Mysql-storage","published":1,"updated":"2019-09-03T08:55:44.349Z","layout":"post","photos":[],"link":"","_id":"ck4859yd3004vt0fyo8ktt58x","content":"<p>MySQL中的存储程序本质上封装了一些可执行的语句，然后给用户提供一种简单的调用方式来执行这些语句，根据调用方式的不同，我们可以把<code>存储程序</code>分为<code>存储例程</code>、<code>触发器</code>和<code>事件</code>这几种类型。其中，<code>存储例程</code>又可以被细分为<code>存储函数</code>和<code>存储过程</code>。</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/08/28/Mysql-storage/640.png\" alt=\"存储程序\"></p>\n<h1 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h1><p>MySQL中对我们自定义的变量的命名有个要求，那就是变量名称前必须加一个<code>@符号</code>。我们自定义变量的值的类型可以是任意MySQL支持的类型，例如我们自定义一个变量<font color=\"red\">a</font>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @a = 1;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想查看这个变量的值的话，使用<font color=\"Orange\">SELECT</font>语句就好了，不过仍然需要在变量名称加一个@符号：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @a;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @a   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">|    1 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>同一个变量也可以存储存储不同类型的值，比方说我们再把一个字符串值赋值给变量<font color=\"red\">a</font>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @a = '啦';</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @a;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @a   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| 啦   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>除了把一个常量赋值给一个变量以外，我们还可以把一个变量赋值给另一个变量：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @b = @a;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @b;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| 啦   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以将某个查询的结果赋值给一个变量，前提是这个<font color=\"red\">查询的结果只有一个值</font>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @a = (SELECT first_column FROM first_table LIMIT 1);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>还可以用另一种形式的语句来将查询的结果赋值给一个变量：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT first_column FROM first_table LIMIT 1 INTO @b;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们查看一下这两个变量的值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @a, @b;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| @a   | @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 |    1 |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果我们的查询结果是一条记录，该记录中有多个列的值的话，我们想把这几个值分别赋值到不同的变量中，只能使用<code>INTO</code>语句了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT first_column, second_column FROM first_table LIMIT 1 INTO @a, @b;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @a, @b;                                                           </span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| @a   | @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 | aaa  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"复合语句\"><a href=\"#复合语句\" class=\"headerlink\" title=\"复合语句\"></a>复合语句</h1><p>在MySQL客户端的交互界面处，当我们完成键盘输入并按下回车键时，MySQL客户端会检测我们输入的内容中是否包含<code>;</code>、<code>\\g</code>或者<code>\\G</code>这三个符号之一，如果有的话，会把我们输入的内容发送到服务器。这样一来，如果我们想给服务器发送复合语句（也就是由一条或多条语句组成的语句）的话，就需要把这些语句写到一行中，比如这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT first_column FROM first_table ;SELECT second_column FROM first_table;</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| first_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|            1 |</span><br><span class=\"line\">|            2 |</span><br><span class=\"line\">|         NULL |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| second_column |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| aaa           |</span><br><span class=\"line\">| <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">| ccc           |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以用<code>delimiter</code>命令来自定义MySQL的检测输入结束的符号，如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; SELECT first_column FROM first_table ;</span><br><span class=\"line\">    -&gt; SELECT second_column FROM first_table;</span><br><span class=\"line\">    -&gt; $</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| first_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|            1 |</span><br><span class=\"line\">|            2 |</span><br><span class=\"line\">|         NULL |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| second_column |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| aaa           |</span><br><span class=\"line\">| <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">| ccc           |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p><code>delimiter $</code>命令意味着修改MySQL客户端检测输入结束的符号为<code>$</code>,也可以使用任何符号来作为MySQL客户端检测输入结束的符号，也包括多个字符，如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter 666</span><br><span class=\"line\">mysql&gt; SELECT first_column FROM first_table;</span><br><span class=\"line\">    -&gt; SELECT second_column FROM first_table;</span><br><span class=\"line\">    -&gt; 666</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| first_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|            1 |</span><br><span class=\"line\">|            2 |</span><br><span class=\"line\">|         NULL |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| second_column |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| aaa           |</span><br><span class=\"line\">| <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">| ccc           |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"存储函数\"><a href=\"#存储函数\" class=\"headerlink\" title=\"存储函数\"></a>存储函数</h1><h2 id=\"创建存储函数\"><a href=\"#创建存储函数\" class=\"headerlink\" title=\"创建存储函数\"></a>创建存储函数</h2><p><code>存储函数</code>其实就是一种<code>函数</code>，只不过在这个函数里可以执行命令语句而已。<br>MySQL中定义存储函数的语句如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> 存储函数名称([参数列表])</span><br><span class=\"line\"><span class=\"keyword\">RETURNS</span> 返回值类型</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    函数体内容</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION second_column(a INT)</span><br><span class=\"line\">    -&gt; RETURNS VARCHAR(100)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; RETURN (SELECT second_column FROM first_table WHERE first_column = a);</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储函数的调用\"><a href=\"#存储函数的调用\" class=\"headerlink\" title=\"存储函数的调用\"></a>存储函数的调用</h2><p>我们自定义的函数和系统内置函数的使用方式是一样的，都是在函数名后加小括号<code>()</code>表示函数调用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT second_column(1);</span><br><span class=\"line\">+<span class=\"comment\">------------------+</span></span><br><span class=\"line\">| second_column(1) |</span><br><span class=\"line\">+<span class=\"comment\">------------------+</span></span><br><span class=\"line\">| aaa              |</span><br><span class=\"line\">+<span class=\"comment\">------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看存储函数\"><a href=\"#查看存储函数\" class=\"headerlink\" title=\"查看存储函数\"></a>查看存储函数</h2><p>查看定义了多少个存储函数:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">FUNCTION</span> <span class=\"keyword\">STATUS</span> [<span class=\"keyword\">LIKE</span> 需要匹配的函数名]</span><br></pre></td></tr></table></figure>\n\n<p>查看某个函数的具体定义:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> 函数名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除存储函数\"><a href=\"#删除存储函数\" class=\"headerlink\" title=\"删除存储函数\"></a>删除存储函数</h2><p>删除某个存储函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> 函数名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在函数体中定义变量\"><a href=\"#在函数体中定义变量\" class=\"headerlink\" title=\"在函数体中定义变量\"></a>在函数体中定义变量</h2><p>在函数体中使用变量前必须先声明这个变量，函数体中的变量名<code>不允许加@</code>前缀,声明方式如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> 变量名 数据类型 [<span class=\"keyword\">DEFAULT</span> 默认值];   </span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION var_demo(a INT)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE b INT;</span><br><span class=\"line\">    -&gt; SET b = 5;</span><br><span class=\"line\">    -&gt; RETURN b+a;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br></pre></td></tr></table></figure>\n\n<p>我们调用一下这个函数：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT var_demo(2);</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| var_demo(2) |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">|           7 |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果不对声明的变量赋值，它的默认值就是NULL，也可以通过<code>DEFAULT</code>子句来显式的指定变量的默认值.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION var_default_demo()</span><br><span class=\"line\">-&gt; RETURNS INT</span><br><span class=\"line\">-&gt; BEGIN</span><br><span class=\"line\">-&gt;     DECLARE c INT DEFAULT 1;</span><br><span class=\"line\">-&gt;     RETURN c;</span><br><span class=\"line\">-&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT var_default_demo();</span><br><span class=\"line\">+<span class=\"comment\">--------------------+</span></span><br><span class=\"line\">| var_default_demo() |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+</span></span><br><span class=\"line\">|                  1 |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数定义\"><a href=\"#参数定义\" class=\"headerlink\" title=\"参数定义\"></a>参数定义</h2><p>比如我们上边编写的这个second_column函数：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE FUNCTION second_column(a INT)</span><br><span class=\"line\">    -&gt; RETURNS VARCHAR(100)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; RETURN (SELECT second_column FROM first_table WHERE first_column = a);</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，参数名不要和函数体语句中其他的变量名、命令语句的标识符冲突。并且函数参数不可以指定默认值，我们在调用函数的时候，必须显式的指定所有的参数，参数类型也一定要匹配</p>\n<h2 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h2><p>语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IF 布尔表达式 THEN </span><br><span class=\"line\">    处理语句</span><br><span class=\"line\">[ELSEIF 布尔表达式 THEN</span><br><span class=\"line\">    处理语句]</span><br><span class=\"line\">[ELSE </span><br><span class=\"line\">    处理语句]    </span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION condition_demo(i INT)</span><br><span class=\"line\">    -&gt; RETURNS VARCHAR(10)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result VARCHAR(10);</span><br><span class=\"line\">    -&gt; IF i = 1 THEN</span><br><span class=\"line\">    -&gt; SET result = '结果是1';</span><br><span class=\"line\">    -&gt; ELSEIF i = 2 THEN</span><br><span class=\"line\">    -&gt;  SET result = '结果是2';</span><br><span class=\"line\">    -&gt; ELSEIF i = 3 THEN</span><br><span class=\"line\">    -&gt; SET result = '结果是3';</span><br><span class=\"line\">    -&gt; ELSE</span><br><span class=\"line\">    -&gt; SET result = '非法参数';</span><br><span class=\"line\">    -&gt; END IF;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT condition_demo(2);</span><br><span class=\"line\">+<span class=\"comment\">-------------------+</span></span><br><span class=\"line\">| condition_demo(2) |</span><br><span class=\"line\">+<span class=\"comment\">-------------------+</span></span><br><span class=\"line\">| 结果是2           |</span><br><span class=\"line\">+<span class=\"comment\">-------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><p><code>while</code>循环语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHILE 布尔表达式 <span class=\"keyword\">DO</span></span><br><span class=\"line\">    循环语句</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">WHILE</span>;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION sum_all(n INT UNSIGNED)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result INT DEFAULT 0;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 1;</span><br><span class=\"line\">    -&gt; WHILE i &lt;= n DO</span><br><span class=\"line\">    -&gt; SET result = result + i;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; END WHILE;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select sum_all(10);</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| sum_all(10) |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">|          55 |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p><code>REPEAT</code>循环语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPEAT</span><br><span class=\"line\">    循环语句</span><br><span class=\"line\">UNTIL 布尔表达式 <span class=\"keyword\">END</span> <span class=\"keyword\">REPEAT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE FUNCTION sum_repeat(n INT UNSIGNED)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result INT DEFAULT 0;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 1;</span><br><span class=\"line\">    -&gt; REPEAT</span><br><span class=\"line\">    -&gt; -- 循环开始</span><br><span class=\"line\">    -&gt; SET result = result + i;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; UNTIL i &gt; n END REPEAT;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select sum_repeat(5);</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| sum_repeat(5) |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">|            15 |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p><code>LOOP</code>循环语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环标记:LOOP</span><br><span class=\"line\">    循环语句</span><br><span class=\"line\">    LEAVE 循环标记;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">LOOP</span> 循环标记;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE FUNCTION sum_loop(n INT UNSIGNED)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result INT DEFAULT 0;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 1;</span><br><span class=\"line\">    -&gt; LOOP_NAME:LOOP -- 循环开始</span><br><span class=\"line\">    -&gt; IF i &gt; n THEN</span><br><span class=\"line\">    -&gt; LEAVE LOOP_NAME;</span><br><span class=\"line\">    -&gt; END IF;</span><br><span class=\"line\">    -&gt; SET result = result + i;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; END LOOP LOOP_NAME;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">    </span><br><span class=\"line\">mysql&gt; select sum_loop(10);</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| sum_loop(10) |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|           55 |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h1><p>存储函数侧重于执行语句并返回一个值，而存储过程更侧重于单纯的去执行语句。</p>\n<h2 id=\"创建存储过程\"><a href=\"#创建存储过程\" class=\"headerlink\" title=\"创建存储过程\"></a>创建存储过程</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称([参数列表])</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    需要执行的语句</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE insert_first_table(c1 INT,c2 VARCHAR(100))</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT * FROM first_table;</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(c1,c2);</span><br><span class=\"line\">    -&gt; SELECT * FROM first_table;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储过程的调用\"><a href=\"#存储过程的调用\" class=\"headerlink\" title=\"存储过程的调用\"></a>存储过程的调用</h2><p>存储函数执行语句并返回一个值，所以常用在表达式中。<br>存储过程偏向于调用那些语句，并不能用在表达式中。<br>我们需要显式的使用CALL语句来调用一个存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CALL</span> 存储过程([参数列表]);</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CALL insert_first_table(4,'test');</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            1 | aaa           |</span><br><span class=\"line\">|            2 | NULL          |</span><br><span class=\"line\">|         NULL | ccc           |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            <span class=\"number\">1</span> | aaa           |</span><br><span class=\"line\">|            <span class=\"number\">2</span> | <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">|         <span class=\"literal\">NULL</span> | ccc           |</span><br><span class=\"line\">|            <span class=\"number\">4</span> | <span class=\"keyword\">test</span>          |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看存储过程\"><a href=\"#查看存储过程\" class=\"headerlink\" title=\"查看存储过程\"></a>查看存储过程</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看当前数据库中创建的存储过程都有哪些的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">STATUS</span> [<span class=\"keyword\">LIKE</span> 需要匹配的函数名]</span><br><span class=\"line\"></span><br><span class=\"line\">查看某个存储过程定义的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除存储过程\"><a href=\"#删除存储过程\" class=\"headerlink\" title=\"删除存储过程\"></a>删除存储过程</h2><p>删除某个存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储过程参数类型\"><a href=\"#存储过程参数类型\" class=\"headerlink\" title=\"存储过程参数类型\"></a>存储过程参数类型</h2><table>\n<tr>\n    <th>参数类型</th>\n    <th>实际参数是否必须是变量</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\">IN</td>\n    <td style=\"text-align:center\">否</td>\n    <td colspan=\"3\">用于调用者向过程传递数据，如果该参数在过程中被修改，调用者不可见</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">OUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">用于把过程产生的结果放到此参数中，过程结束后调用者可以通过该参数来获取过程执行的结果</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">INOUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">综合IN和OUT特点，即可用于调用者向过程传递数据，也可用于存放过程中产生的结果</td>\n</tr>\n</table>  \n\n<h3 id=\"IN\"><a href=\"#IN\" class=\"headerlink\" title=\"IN\"></a>IN</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE test_in(IN num INT)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT num;</span><br><span class=\"line\">    -&gt; SET num = 666;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SET @a = 111;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL test_in(@a);</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| num  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">|  111 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>IN参数类型的变量只能用于读取，对类型的变量赋值是不会被调用者看到的。<br>如果我们不写明参数类型的话，该参数的类型默认是IN。</p>\n<h3 id=\"OUT\"><a href=\"#OUT\" class=\"headerlink\" title=\"OUT\"></a>OUT</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE test_out(OUT num INT)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT num;</span><br><span class=\"line\">    -&gt; SET num = 666;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL test_out(@a);</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| num  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| NULL |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> @a;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @a   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">|  666 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>OUT参数类型的变量只能用于赋值，对类型的变量赋值是会被调用者看到的,因此参数就不允许是常量。</p>\n<p>存储过程中向调用者返回多个值，举个例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE data_out(OUT a INT,OUT b INT)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SET a = 100;</span><br><span class=\"line\">    -&gt; SET b = 200;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL data_out(@a,@b);</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @a,@b;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| @a   | @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|  100 |  200 |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INOUT\"><a href=\"#INOUT\" class=\"headerlink\" title=\"INOUT\"></a>INOUT</h3><p>这种类型的参数既可以在存储过程中被读取，也可以被赋值后被调用者看到，因此参数就不允许是常量。</p>\n<h2 id=\"存储过程和函数的区别\"><a href=\"#存储过程和函数的区别\" class=\"headerlink\" title=\"存储过程和函数的区别\"></a>存储过程和函数的区别</h2><ul>\n<li><p>存储函数在定义时需要显式用RETURNS语句标明返回的数据类型，而且在函数体中必须使用RETURN语句来显式指定返回的值，存储过程不需要。</p>\n</li>\n<li><p>存储函数的参数类型只能是IN，而存储过程支持IN、OUT、INOUT三种参数类型。</p>\n</li>\n<li><p>存储函数只能返回一个值，而存储过程可以通过设置多个OUT类型的参数来返回多个结果。</p>\n</li>\n<li><p>存储函数执行过程中产生的结果集并不会被显示到客户端，而存储过程执行过程中产生的结果集会被显示到客户端。</p>\n</li>\n<li><p>存储函数的调用直接使用在表达式中，而存储过程只能通过CALL语句来显式调用。</p>\n</li>\n</ul>\n<h1 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h1><p>游标（Cursor）是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。<br>初始状态下它标记查询结果集中的第一条记录,根据这个游标取出它对应记录的信息，随后再移动游标，让它指向别的记录。</p>\n<h2 id=\"创建游标\"><a href=\"#创建游标\" class=\"headerlink\" title=\"创建游标\"></a>创建游标</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> 游标名称 <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">FOR</span> 查询语句;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE cursor_demo()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE first_table_cursor CURSOR FOR select * from first_table;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打开和关闭游标\"><a href=\"#打开和关闭游标\" class=\"headerlink\" title=\"打开和关闭游标\"></a>打开和关闭游标</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPEN 游标名称;</span><br><span class=\"line\"></span><br><span class=\"line\">CLOSE 游标名称;</span><br></pre></td></tr></table></figure>\n\n<p>打开游标意味着执行查询语句，让创建好的游标与该查询语句得到的结果集关联起来，关闭游标意味着会释放该游标占用的内存，所以一旦我们使用完了游标，就要把它关闭掉。</p>\n<h2 id=\"游标获取记录\"><a href=\"#游标获取记录\" class=\"headerlink\" title=\"游标获取记录\"></a>游标获取记录</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FETCH 游标名 INTO 变量1, 变量2, ... 变量n</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE cursor_demo()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE c1 INT;</span><br><span class=\"line\">    -&gt; DECLARE c2 VARCHAR(100);</span><br><span class=\"line\">    -&gt; DECLARE record_count INT;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 0;</span><br><span class=\"line\">    -&gt;  -- 声明游标</span><br><span class=\"line\">    -&gt; DECLARE first_table_cursor CURSOR FOR select * from first_table;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 统计表行数</span><br><span class=\"line\">    -&gt; SELECT COUNT(*) FROM first_table INTO record_count;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 使用游标遍历</span><br><span class=\"line\">    -&gt; OPEN first_table_cursor;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; WHILE i &lt; record_count DO</span><br><span class=\"line\">    -&gt; FETCH first_table_cursor INTO c1 , c2;</span><br><span class=\"line\">    -&gt; SELECT c1,c2;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; END WHILE;</span><br><span class=\"line\">    -&gt; CLOSE first_table_cursor;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL cursor_demo();</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 | aaa  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">2</span> | <span class=\"literal\">NULL</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| <span class=\"literal\">NULL</span> | ccc  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">4</span> | <span class=\"keyword\">test</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.01</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>i表示当前游标对应的记录位置。每调用一次 FETCH 语句，游标就移动到下一条记录的位置。</p>\n<h2 id=\"遍历结束的执行策略\"><a href=\"#遍历结束的执行策略\" class=\"headerlink\" title=\"遍历结束的执行策略\"></a>遍历结束的执行策略</h2><p>其实在FETCH语句获取不到记录的时候会触发一个事件，从而我们可以得知所有的记录都被获取过了，然后我们就可以去主动的停止循环。<br>MySQL中响应这个事件的语句如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> CONTINUE <span class=\"keyword\">HANDLER</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">FOUND</span> 语句;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰，再来改写一下cursor_demo存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE PROCEDURE cursor_demo()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; -- 声明变量</span><br><span class=\"line\">    -&gt; DECLARE c1 INT;</span><br><span class=\"line\">    -&gt; DECLARE c2 VARCHAR(100);</span><br><span class=\"line\">    -&gt; DECLARE not_done INT DEFAULT 1;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 声明游标</span><br><span class=\"line\">    -&gt; DECLARE first_table_cursor CURSOR FOR select * from first_table;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 在游标遍历完记录的时候将变量 not_done 的值设置为 0，并且继续执行后边的语句</span><br><span class=\"line\">    -&gt; DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_done = 0;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 使用游标遍历</span><br><span class=\"line\">    -&gt; OPEN first_table_cursor;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; WHILE not_done = 1 DO</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; FETCH first_table_cursor INTO c1 , c2;</span><br><span class=\"line\">    -&gt; SELECT c1,c2;</span><br><span class=\"line\">    -&gt; END WHILE;</span><br><span class=\"line\">    -&gt; CLOSE first_table_cursor;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;  CALL cursor_demo();</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 | aaa  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">2</span> | <span class=\"literal\">NULL</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| <span class=\"literal\">NULL</span> | ccc  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">4</span> | <span class=\"keyword\">test</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">4</span> | <span class=\"keyword\">test</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.01</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们发现结果集中最后一条记录输出两遍怎么办呢，我们可以使用<code>EXIT</code>来替代上边的<code>CONTINUE</code>：<br><code>CONTINUE</code>表示在FETCH语句获取不到记录的时候仍然会执行之后存储过程的语句，也就是会将最后一次关联的记录中的值放入指定的变量<br><code>EXIT</code>表示在FETCH语句获取不到记录的时候仍然不会执行之后存储过程的语句</p>\n<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><p>存储函数与存储过程都是需要我们<code>手动</code>调用的，如果想在执行某条语句之前或者之后自动去调用另外一些语句，就需要用到触发器。</p>\n<h2 id=\"创建触发器\"><a href=\"#创建触发器\" class=\"headerlink\" title=\"创建触发器\"></a>创建触发器</h2><p>触发器的定义：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> 触发器名</span><br><span class=\"line\">&#123;<span class=\"keyword\">BEFORE</span>|<span class=\"keyword\">AFTER</span>&#125;          </span><br><span class=\"line\">&#123;<span class=\"keyword\">INSERT</span>|<span class=\"keyword\">DELETE</span>|<span class=\"keyword\">UPDATE</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"keyword\">ROW</span> </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    触发器内容</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>MySQL中目前只支持对INSERT、DELETE、UPDATE这三种类型的语句设置触发器。</p>\n<p>因为触发器会对某个语句影响的所有记录依次调用我们自定义的触发器内容，所以我们需要一种访问该记录中的内容的方式，<br>MySQL提供了NEW和OLD两个单词来分别代表新记录和旧记录，它们在不同操作中的含义不同：</p>\n<ul>\n<li>对于INSERT语句设置的触发器来说，NEW代表准备插入的记录，不能使用OLD。</li>\n<li>对于DELETE语句设置的触发器来说，OLD代表删除前的记录，不能使用NEW。</li>\n<li>对于UPDATE语句设置的触发器来说，NEW代表修改后的记录，OLD代表修改前的记录。</li>\n</ul>\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TRIGGER test_trigger</span><br><span class=\"line\">    -&gt; BEFORE INSERT ON first_table</span><br><span class=\"line\">    -&gt; FOR EACH ROW</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; IF NEW.first_column &lt; 1 THEN</span><br><span class=\"line\">    -&gt;  SET NEW.first_column = 1;</span><br><span class=\"line\">    -&gt; ELSEIF NEW.first_column &gt; 10 THEN</span><br><span class=\"line\">    -&gt;  SET NEW.first_column = 10;</span><br><span class=\"line\">    -&gt; END IF;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from first_table;</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            1 | aaa           |</span><br><span class=\"line\">|            2 | NULL          |</span><br><span class=\"line\">|         NULL | ccc           |</span><br><span class=\"line\">|            4 | test          |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">4 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> first_table(first_column,second_column) <span class=\"keyword\">VALUES</span>(<span class=\"number\">5</span>,<span class=\"string\">'5'</span>),(<span class=\"number\">20</span>,<span class=\"string\">'20'</span>);</span><br><span class=\"line\">Query OK, 2 rows affected (0.01 sec)</span><br><span class=\"line\">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from first_table;</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            1 | aaa           |</span><br><span class=\"line\">|            2 | NULL          |</span><br><span class=\"line\">|         NULL | ccc           |</span><br><span class=\"line\">|            4 | test          |</span><br><span class=\"line\">|            5 | 5             |</span><br><span class=\"line\">|           10 | 20            |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">6 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>(20,’20’)的插入结果变成了(10,’20’)说明触发器生效了。</p>\n<h2 id=\"查看触发器\"><a href=\"#查看触发器\" class=\"headerlink\" title=\"查看触发器\"></a>查看触发器</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看当前数据库中的所有触发器的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">TRIGGERS</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">查看某个具体的触发器的定义：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> 触发器名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除触发器：\"><a href=\"#删除触发器：\" class=\"headerlink\" title=\"删除触发器：\"></a>删除触发器：</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> 触发器名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"触发器使用注意事项\"><a href=\"#触发器使用注意事项\" class=\"headerlink\" title=\"触发器使用注意事项\"></a>触发器使用注意事项</h2><ol>\n<li>触发器内容中不能有输出结果集的语句。</li>\n<li>一个表最多只能定义6个触发器分别是：<ul>\n<li>BEFORE INSERT触发器</li>\n<li>BEFORE DELETE触发器</li>\n<li>BEFORE UPDATE触发器</li>\n<li>AFTER INSERT触发器</li>\n<li>AFTER DELETE触发器</li>\n<li>AFTER UPDATE触发器</li>\n</ul>\n</li>\n<li>NEW中的值可以被更改，OLD中的值无法更改。</li>\n<li>如果我们的<code>BEFORE</code>触发器内容执行过程中遇到了<code>ERROR</code>，那这个触发器对应的具体语句将无法执行；如果具体的操作语句执行过程中遇到了<code>ERROR</code>，那与它对应的<code>AFTER</code>触发器的内容将无法执行。</li>\n</ol>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p>如果我们想指定某些语句在某个时间点或者每隔一个时间段执行一次的话,就需要创建一个事件。</p>\n<h2 id=\"创建事件\"><a href=\"#创建事件\" class=\"headerlink\" title=\"创建事件\"></a>创建事件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> 事件名</span><br><span class=\"line\"><span class=\"keyword\">ON</span> SCHEDULE</span><br><span class=\"line\">&#123;<span class=\"keyword\">AT</span> 某个确定的时间点 | EVERY 期望的时间间隔 [STARTS datetime][<span class=\"keyword\">END</span> datetime]&#125;</span><br><span class=\"line\"><span class=\"keyword\">DO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    具体的语句</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>事件支持两种类型的定时执行：</p>\n<ol>\n<li><p>某个确定的时间点执行</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; AT '2019-09-10 11:30:30'</span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> 除了直接填某个时间常量，也可以填写一些表达式：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; AT DATE_ADD(NOW(), INTERVAL 2 DAY)</span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> DATE_ADD(NOW(), INTERVAL 2 DAY)表示该事件将在当前时间的两天后执行。</p>\n</li>\n<li><p>每隔一段时间执行一次</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; EVERY 1 HOUR </span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> 默认情况下，采用这种每隔一段时间执行一次的方式将从创建事件的事件开始，无限制的执行下去。我们也可以指定该事件开始执行时间和截止时间：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; EVERY 1 HOUR STARTS '2019-09-10 11:30:30' ENDS '2019-09-12 11:30:30'</span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> 在创建好事件之后我们就不用管了，到了指定时间，MySQL服务器会帮我们自动执行的。</p>\n</li>\n</ol>\n<h2 id=\"查看事件\"><a href=\"#查看事件\" class=\"headerlink\" title=\"查看事件\"></a>查看事件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看当前数据库中的所有事件的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">EVENTS</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">查看某个具体的事件的定义:</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> 事件名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除事件\"><a href=\"#删除事件\" class=\"headerlink\" title=\"删除事件\"></a>删除事件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">EVENT</span> 事件名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件使用注意事项\"><a href=\"#事件使用注意事项\" class=\"headerlink\" title=\"事件使用注意事项\"></a>事件使用注意事项</h2><p>默认情况下，MySQL服务器并不会帮助我们执行事件，除非我们在启动服务器的时候就指定了下边这个选项：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event_scheduler = ON</span><br></pre></td></tr></table></figure>\n\n<p>如果在服务器已经启动的情况下，我们可以通过设置<code>event_scheduler</code>的系统变量来让MySQL服务器帮助我们执行事件，设置方式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET GLOBAL event_scheduler = ON;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h1><p>在MySql中创建自定义函数报错信息如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global log_bin_trust_function_creators=1;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>MySQL中的存储程序本质上封装了一些可执行的语句，然后给用户提供一种简单的调用方式来执行这些语句，根据调用方式的不同，我们可以把<code>存储程序</code>分为<code>存储例程</code>、<code>触发器</code>和<code>事件</code>这几种类型。其中，<code>存储例程</code>又可以被细分为<code>存储函数</code>和<code>存储过程</code>。</p>","more":"<p><img src=\"/2019/08/28/Mysql-storage/640.png\" alt=\"存储程序\"></p>\n<h1 id=\"自定义变量\"><a href=\"#自定义变量\" class=\"headerlink\" title=\"自定义变量\"></a>自定义变量</h1><p>MySQL中对我们自定义的变量的命名有个要求，那就是变量名称前必须加一个<code>@符号</code>。我们自定义变量的值的类型可以是任意MySQL支持的类型，例如我们自定义一个变量<font color=\"red\">a</font>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @a = 1;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果我们想查看这个变量的值的话，使用<font color=\"Orange\">SELECT</font>语句就好了，不过仍然需要在变量名称加一个@符号：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @a;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @a   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">|    1 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>同一个变量也可以存储存储不同类型的值，比方说我们再把一个字符串值赋值给变量<font color=\"red\">a</font>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @a = '啦';</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @a;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @a   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| 啦   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>除了把一个常量赋值给一个变量以外，我们还可以把一个变量赋值给另一个变量：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @b = @a;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @b;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| 啦   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以将某个查询的结果赋值给一个变量，前提是这个<font color=\"red\">查询的结果只有一个值</font>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET @a = (SELECT first_column FROM first_table LIMIT 1);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>还可以用另一种形式的语句来将查询的结果赋值给一个变量：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT first_column FROM first_table LIMIT 1 INTO @b;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们查看一下这两个变量的值：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @a, @b;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| @a   | @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 |    1 |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果我们的查询结果是一条记录，该记录中有多个列的值的话，我们想把这几个值分别赋值到不同的变量中，只能使用<code>INTO</code>语句了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT first_column, second_column FROM first_table LIMIT 1 INTO @a, @b;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT @a, @b;                                                           </span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| @a   | @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 | aaa  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"复合语句\"><a href=\"#复合语句\" class=\"headerlink\" title=\"复合语句\"></a>复合语句</h1><p>在MySQL客户端的交互界面处，当我们完成键盘输入并按下回车键时，MySQL客户端会检测我们输入的内容中是否包含<code>;</code>、<code>\\g</code>或者<code>\\G</code>这三个符号之一，如果有的话，会把我们输入的内容发送到服务器。这样一来，如果我们想给服务器发送复合语句（也就是由一条或多条语句组成的语句）的话，就需要把这些语句写到一行中，比如这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT first_column FROM first_table ;SELECT second_column FROM first_table;</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| first_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|            1 |</span><br><span class=\"line\">|            2 |</span><br><span class=\"line\">|         NULL |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| second_column |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| aaa           |</span><br><span class=\"line\">| <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">| ccc           |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以用<code>delimiter</code>命令来自定义MySQL的检测输入结束的符号，如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; SELECT first_column FROM first_table ;</span><br><span class=\"line\">    -&gt; SELECT second_column FROM first_table;</span><br><span class=\"line\">    -&gt; $</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| first_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|            1 |</span><br><span class=\"line\">|            2 |</span><br><span class=\"line\">|         NULL |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| second_column |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| aaa           |</span><br><span class=\"line\">| <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">| ccc           |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p><code>delimiter $</code>命令意味着修改MySQL客户端检测输入结束的符号为<code>$</code>,也可以使用任何符号来作为MySQL客户端检测输入结束的符号，也包括多个字符，如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter 666</span><br><span class=\"line\">mysql&gt; SELECT first_column FROM first_table;</span><br><span class=\"line\">    -&gt; SELECT second_column FROM first_table;</span><br><span class=\"line\">    -&gt; 666</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| first_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|            1 |</span><br><span class=\"line\">|            2 |</span><br><span class=\"line\">|         NULL |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| second_column |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| aaa           |</span><br><span class=\"line\">| <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">| ccc           |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"存储函数\"><a href=\"#存储函数\" class=\"headerlink\" title=\"存储函数\"></a>存储函数</h1><h2 id=\"创建存储函数\"><a href=\"#创建存储函数\" class=\"headerlink\" title=\"创建存储函数\"></a>创建存储函数</h2><p><code>存储函数</code>其实就是一种<code>函数</code>，只不过在这个函数里可以执行命令语句而已。<br>MySQL中定义存储函数的语句如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> 存储函数名称([参数列表])</span><br><span class=\"line\"><span class=\"keyword\">RETURNS</span> 返回值类型</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    函数体内容</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION second_column(a INT)</span><br><span class=\"line\">    -&gt; RETURNS VARCHAR(100)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; RETURN (SELECT second_column FROM first_table WHERE first_column = a);</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储函数的调用\"><a href=\"#存储函数的调用\" class=\"headerlink\" title=\"存储函数的调用\"></a>存储函数的调用</h2><p>我们自定义的函数和系统内置函数的使用方式是一样的，都是在函数名后加小括号<code>()</code>表示函数调用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT second_column(1);</span><br><span class=\"line\">+<span class=\"comment\">------------------+</span></span><br><span class=\"line\">| second_column(1) |</span><br><span class=\"line\">+<span class=\"comment\">------------------+</span></span><br><span class=\"line\">| aaa              |</span><br><span class=\"line\">+<span class=\"comment\">------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看存储函数\"><a href=\"#查看存储函数\" class=\"headerlink\" title=\"查看存储函数\"></a>查看存储函数</h2><p>查看定义了多少个存储函数:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">FUNCTION</span> <span class=\"keyword\">STATUS</span> [<span class=\"keyword\">LIKE</span> 需要匹配的函数名]</span><br></pre></td></tr></table></figure>\n\n<p>查看某个函数的具体定义:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> 函数名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除存储函数\"><a href=\"#删除存储函数\" class=\"headerlink\" title=\"删除存储函数\"></a>删除存储函数</h2><p>删除某个存储函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">FUNCTION</span> 函数名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在函数体中定义变量\"><a href=\"#在函数体中定义变量\" class=\"headerlink\" title=\"在函数体中定义变量\"></a>在函数体中定义变量</h2><p>在函数体中使用变量前必须先声明这个变量，函数体中的变量名<code>不允许加@</code>前缀,声明方式如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> 变量名 数据类型 [<span class=\"keyword\">DEFAULT</span> 默认值];   </span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION var_demo(a INT)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE b INT;</span><br><span class=\"line\">    -&gt; SET b = 5;</span><br><span class=\"line\">    -&gt; RETURN b+a;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br></pre></td></tr></table></figure>\n\n<p>我们调用一下这个函数：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT var_demo(2);</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| var_demo(2) |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">|           7 |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果不对声明的变量赋值，它的默认值就是NULL，也可以通过<code>DEFAULT</code>子句来显式的指定变量的默认值.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION var_default_demo()</span><br><span class=\"line\">-&gt; RETURNS INT</span><br><span class=\"line\">-&gt; BEGIN</span><br><span class=\"line\">-&gt;     DECLARE c INT DEFAULT 1;</span><br><span class=\"line\">-&gt;     RETURN c;</span><br><span class=\"line\">-&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT var_default_demo();</span><br><span class=\"line\">+<span class=\"comment\">--------------------+</span></span><br><span class=\"line\">| var_default_demo() |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+</span></span><br><span class=\"line\">|                  1 |</span><br><span class=\"line\">+<span class=\"comment\">--------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数定义\"><a href=\"#参数定义\" class=\"headerlink\" title=\"参数定义\"></a>参数定义</h2><p>比如我们上边编写的这个second_column函数：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE FUNCTION second_column(a INT)</span><br><span class=\"line\">    -&gt; RETURNS VARCHAR(100)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; RETURN (SELECT second_column FROM first_table WHERE first_column = a);</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，参数名不要和函数体语句中其他的变量名、命令语句的标识符冲突。并且函数参数不可以指定默认值，我们在调用函数的时候，必须显式的指定所有的参数，参数类型也一定要匹配</p>\n<h2 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h2><p>语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IF 布尔表达式 THEN </span><br><span class=\"line\">    处理语句</span><br><span class=\"line\">[ELSEIF 布尔表达式 THEN</span><br><span class=\"line\">    处理语句]</span><br><span class=\"line\">[ELSE </span><br><span class=\"line\">    处理语句]    </span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION condition_demo(i INT)</span><br><span class=\"line\">    -&gt; RETURNS VARCHAR(10)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result VARCHAR(10);</span><br><span class=\"line\">    -&gt; IF i = 1 THEN</span><br><span class=\"line\">    -&gt; SET result = '结果是1';</span><br><span class=\"line\">    -&gt; ELSEIF i = 2 THEN</span><br><span class=\"line\">    -&gt;  SET result = '结果是2';</span><br><span class=\"line\">    -&gt; ELSEIF i = 3 THEN</span><br><span class=\"line\">    -&gt; SET result = '结果是3';</span><br><span class=\"line\">    -&gt; ELSE</span><br><span class=\"line\">    -&gt; SET result = '非法参数';</span><br><span class=\"line\">    -&gt; END IF;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT condition_demo(2);</span><br><span class=\"line\">+<span class=\"comment\">-------------------+</span></span><br><span class=\"line\">| condition_demo(2) |</span><br><span class=\"line\">+<span class=\"comment\">-------------------+</span></span><br><span class=\"line\">| 结果是2           |</span><br><span class=\"line\">+<span class=\"comment\">-------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><p><code>while</code>循环语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHILE 布尔表达式 <span class=\"keyword\">DO</span></span><br><span class=\"line\">    循环语句</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">WHILE</span>;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE FUNCTION sum_all(n INT UNSIGNED)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result INT DEFAULT 0;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 1;</span><br><span class=\"line\">    -&gt; WHILE i &lt;= n DO</span><br><span class=\"line\">    -&gt; SET result = result + i;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; END WHILE;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; delimiter;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select sum_all(10);</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">| sum_all(10) |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">|          55 |</span><br><span class=\"line\">+<span class=\"comment\">-------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p><code>REPEAT</code>循环语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPEAT</span><br><span class=\"line\">    循环语句</span><br><span class=\"line\">UNTIL 布尔表达式 <span class=\"keyword\">END</span> <span class=\"keyword\">REPEAT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE FUNCTION sum_repeat(n INT UNSIGNED)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result INT DEFAULT 0;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 1;</span><br><span class=\"line\">    -&gt; REPEAT</span><br><span class=\"line\">    -&gt; -- 循环开始</span><br><span class=\"line\">    -&gt; SET result = result + i;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; UNTIL i &gt; n END REPEAT;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select sum_repeat(5);</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">| sum_repeat(5) |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">|            15 |</span><br><span class=\"line\">+<span class=\"comment\">---------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p><code>LOOP</code>循环语法格式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环标记:LOOP</span><br><span class=\"line\">    循环语句</span><br><span class=\"line\">    LEAVE 循环标记;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">LOOP</span> 循环标记;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE FUNCTION sum_loop(n INT UNSIGNED)</span><br><span class=\"line\">    -&gt; RETURNS INT</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE result INT DEFAULT 0;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 1;</span><br><span class=\"line\">    -&gt; LOOP_NAME:LOOP -- 循环开始</span><br><span class=\"line\">    -&gt; IF i &gt; n THEN</span><br><span class=\"line\">    -&gt; LEAVE LOOP_NAME;</span><br><span class=\"line\">    -&gt; END IF;</span><br><span class=\"line\">    -&gt; SET result = result + i;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; END LOOP LOOP_NAME;</span><br><span class=\"line\">    -&gt; RETURN result;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">    </span><br><span class=\"line\">mysql&gt; select sum_loop(10);</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">| sum_loop(10) |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">|           55 |</span><br><span class=\"line\">+<span class=\"comment\">--------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h1><p>存储函数侧重于执行语句并返回一个值，而存储过程更侧重于单纯的去执行语句。</p>\n<h2 id=\"创建存储过程\"><a href=\"#创建存储过程\" class=\"headerlink\" title=\"创建存储过程\"></a>创建存储过程</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称([参数列表])</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    需要执行的语句</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE insert_first_table(c1 INT,c2 VARCHAR(100))</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT * FROM first_table;</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(c1,c2);</span><br><span class=\"line\">    -&gt; SELECT * FROM first_table;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储过程的调用\"><a href=\"#存储过程的调用\" class=\"headerlink\" title=\"存储过程的调用\"></a>存储过程的调用</h2><p>存储函数执行语句并返回一个值，所以常用在表达式中。<br>存储过程偏向于调用那些语句，并不能用在表达式中。<br>我们需要显式的使用CALL语句来调用一个存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CALL</span> 存储过程([参数列表]);</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CALL insert_first_table(4,'test');</span><br><span class=\"line\"> </span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            1 | aaa           |</span><br><span class=\"line\">|            2 | NULL          |</span><br><span class=\"line\">|         NULL | ccc           |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">3 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            <span class=\"number\">1</span> | aaa           |</span><br><span class=\"line\">|            <span class=\"number\">2</span> | <span class=\"literal\">NULL</span>          |</span><br><span class=\"line\">|         <span class=\"literal\">NULL</span> | ccc           |</span><br><span class=\"line\">|            <span class=\"number\">4</span> | <span class=\"keyword\">test</span>          |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\"><span class=\"number\">4</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看存储过程\"><a href=\"#查看存储过程\" class=\"headerlink\" title=\"查看存储过程\"></a>查看存储过程</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看当前数据库中创建的存储过程都有哪些的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">STATUS</span> [<span class=\"keyword\">LIKE</span> 需要匹配的函数名]</span><br><span class=\"line\"></span><br><span class=\"line\">查看某个存储过程定义的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除存储过程\"><a href=\"#删除存储过程\" class=\"headerlink\" title=\"删除存储过程\"></a>删除存储过程</h2><p>删除某个存储过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"存储过程参数类型\"><a href=\"#存储过程参数类型\" class=\"headerlink\" title=\"存储过程参数类型\"></a>存储过程参数类型</h2><table>\n<tr>\n    <th>参数类型</th>\n    <th>实际参数是否必须是变量</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\">IN</td>\n    <td style=\"text-align:center\">否</td>\n    <td colspan=\"3\">用于调用者向过程传递数据，如果该参数在过程中被修改，调用者不可见</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">OUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">用于把过程产生的结果放到此参数中，过程结束后调用者可以通过该参数来获取过程执行的结果</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\">INOUT</td>\n    <td style=\"text-align:center\">是</td>\n    <td colspan=\"3\">综合IN和OUT特点，即可用于调用者向过程传递数据，也可用于存放过程中产生的结果</td>\n</tr>\n</table>  \n\n<h3 id=\"IN\"><a href=\"#IN\" class=\"headerlink\" title=\"IN\"></a>IN</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE test_in(IN num INT)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT num;</span><br><span class=\"line\">    -&gt; SET num = 666;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SET @a = 111;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL test_in(@a);</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| num  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">|  111 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>IN参数类型的变量只能用于读取，对类型的变量赋值是不会被调用者看到的。<br>如果我们不写明参数类型的话，该参数的类型默认是IN。</p>\n<h3 id=\"OUT\"><a href=\"#OUT\" class=\"headerlink\" title=\"OUT\"></a>OUT</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE test_out(OUT num INT)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SELECT num;</span><br><span class=\"line\">    -&gt; SET num = 666;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL test_out(@a);</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| num  |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| NULL |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> @a;</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">| @a   |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">|  666 |</span><br><span class=\"line\">+<span class=\"comment\">------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>OUT参数类型的变量只能用于赋值，对类型的变量赋值是会被调用者看到的,因此参数就不允许是常量。</p>\n<p>存储过程中向调用者返回多个值，举个例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE data_out(OUT a INT,OUT b INT)</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; SET a = 100;</span><br><span class=\"line\">    -&gt; SET b = 200;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL data_out(@a,@b);</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select @a,@b;</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| @a   | @b   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|  100 |  200 |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INOUT\"><a href=\"#INOUT\" class=\"headerlink\" title=\"INOUT\"></a>INOUT</h3><p>这种类型的参数既可以在存储过程中被读取，也可以被赋值后被调用者看到，因此参数就不允许是常量。</p>\n<h2 id=\"存储过程和函数的区别\"><a href=\"#存储过程和函数的区别\" class=\"headerlink\" title=\"存储过程和函数的区别\"></a>存储过程和函数的区别</h2><ul>\n<li><p>存储函数在定义时需要显式用RETURNS语句标明返回的数据类型，而且在函数体中必须使用RETURN语句来显式指定返回的值，存储过程不需要。</p>\n</li>\n<li><p>存储函数的参数类型只能是IN，而存储过程支持IN、OUT、INOUT三种参数类型。</p>\n</li>\n<li><p>存储函数只能返回一个值，而存储过程可以通过设置多个OUT类型的参数来返回多个结果。</p>\n</li>\n<li><p>存储函数执行过程中产生的结果集并不会被显示到客户端，而存储过程执行过程中产生的结果集会被显示到客户端。</p>\n</li>\n<li><p>存储函数的调用直接使用在表达式中，而存储过程只能通过CALL语句来显式调用。</p>\n</li>\n</ul>\n<h1 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h1><p>游标（Cursor）是处理数据的一种方法，为了查看或者处理结果集中的数据，游标提供了在结果集中一次一行或者多行前进或向后浏览数据的能力。<br>初始状态下它标记查询结果集中的第一条记录,根据这个游标取出它对应记录的信息，随后再移动游标，让它指向别的记录。</p>\n<h2 id=\"创建游标\"><a href=\"#创建游标\" class=\"headerlink\" title=\"创建游标\"></a>创建游标</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> 游标名称 <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">FOR</span> 查询语句;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE cursor_demo()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE first_table_cursor CURSOR FOR select * from first_table;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打开和关闭游标\"><a href=\"#打开和关闭游标\" class=\"headerlink\" title=\"打开和关闭游标\"></a>打开和关闭游标</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPEN 游标名称;</span><br><span class=\"line\"></span><br><span class=\"line\">CLOSE 游标名称;</span><br></pre></td></tr></table></figure>\n\n<p>打开游标意味着执行查询语句，让创建好的游标与该查询语句得到的结果集关联起来，关闭游标意味着会释放该游标占用的内存，所以一旦我们使用完了游标，就要把它关闭掉。</p>\n<h2 id=\"游标获取记录\"><a href=\"#游标获取记录\" class=\"headerlink\" title=\"游标获取记录\"></a>游标获取记录</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FETCH 游标名 INTO 变量1, 变量2, ... 变量n</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE PROCEDURE cursor_demo()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; DECLARE c1 INT;</span><br><span class=\"line\">    -&gt; DECLARE c2 VARCHAR(100);</span><br><span class=\"line\">    -&gt; DECLARE record_count INT;</span><br><span class=\"line\">    -&gt; DECLARE i INT DEFAULT 0;</span><br><span class=\"line\">    -&gt;  -- 声明游标</span><br><span class=\"line\">    -&gt; DECLARE first_table_cursor CURSOR FOR select * from first_table;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 统计表行数</span><br><span class=\"line\">    -&gt; SELECT COUNT(*) FROM first_table INTO record_count;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 使用游标遍历</span><br><span class=\"line\">    -&gt; OPEN first_table_cursor;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; WHILE i &lt; record_count DO</span><br><span class=\"line\">    -&gt; FETCH first_table_cursor INTO c1 , c2;</span><br><span class=\"line\">    -&gt; SELECT c1,c2;</span><br><span class=\"line\">    -&gt; SET i = i + 1;</span><br><span class=\"line\">    -&gt; END WHILE;</span><br><span class=\"line\">    -&gt; CLOSE first_table_cursor;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CALL cursor_demo();</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 | aaa  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">2</span> | <span class=\"literal\">NULL</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| <span class=\"literal\">NULL</span> | ccc  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">4</span> | <span class=\"keyword\">test</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.01</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>i表示当前游标对应的记录位置。每调用一次 FETCH 语句，游标就移动到下一条记录的位置。</p>\n<h2 id=\"遍历结束的执行策略\"><a href=\"#遍历结束的执行策略\" class=\"headerlink\" title=\"遍历结束的执行策略\"></a>遍历结束的执行策略</h2><p>其实在FETCH语句获取不到记录的时候会触发一个事件，从而我们可以得知所有的记录都被获取过了，然后我们就可以去主动的停止循环。<br>MySQL中响应这个事件的语句如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> CONTINUE <span class=\"keyword\">HANDLER</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">FOUND</span> 语句;</span><br></pre></td></tr></table></figure>\n\n<p>举个🌰，再来改写一下cursor_demo存储过程：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; delimiter $</span><br><span class=\"line\">mysql&gt; CREATE PROCEDURE cursor_demo()</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; -- 声明变量</span><br><span class=\"line\">    -&gt; DECLARE c1 INT;</span><br><span class=\"line\">    -&gt; DECLARE c2 VARCHAR(100);</span><br><span class=\"line\">    -&gt; DECLARE not_done INT DEFAULT 1;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 声明游标</span><br><span class=\"line\">    -&gt; DECLARE first_table_cursor CURSOR FOR select * from first_table;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 在游标遍历完记录的时候将变量 not_done 的值设置为 0，并且继续执行后边的语句</span><br><span class=\"line\">    -&gt; DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_done = 0;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; -- 使用游标遍历</span><br><span class=\"line\">    -&gt; OPEN first_table_cursor;</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; WHILE not_done = 1 DO</span><br><span class=\"line\">    -&gt;</span><br><span class=\"line\">    -&gt; FETCH first_table_cursor INTO c1 , c2;</span><br><span class=\"line\">    -&gt; SELECT c1,c2;</span><br><span class=\"line\">    -&gt; END WHILE;</span><br><span class=\"line\">    -&gt; CLOSE first_table_cursor;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;  CALL cursor_demo();</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    1 | aaa  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">2</span> | <span class=\"literal\">NULL</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| <span class=\"literal\">NULL</span> | ccc  |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">4</span> | <span class=\"keyword\">test</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">| c1   | c2   |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\">|    <span class=\"number\">4</span> | <span class=\"keyword\">test</span> |</span><br><span class=\"line\">+<span class=\"comment\">------+------+</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">row</span> <span class=\"keyword\">in</span> <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Query</span> OK, <span class=\"number\">0</span> <span class=\"keyword\">rows</span> affected (<span class=\"number\">0.01</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>我们发现结果集中最后一条记录输出两遍怎么办呢，我们可以使用<code>EXIT</code>来替代上边的<code>CONTINUE</code>：<br><code>CONTINUE</code>表示在FETCH语句获取不到记录的时候仍然会执行之后存储过程的语句，也就是会将最后一次关联的记录中的值放入指定的变量<br><code>EXIT</code>表示在FETCH语句获取不到记录的时候仍然不会执行之后存储过程的语句</p>\n<h1 id=\"触发器\"><a href=\"#触发器\" class=\"headerlink\" title=\"触发器\"></a>触发器</h1><p>存储函数与存储过程都是需要我们<code>手动</code>调用的，如果想在执行某条语句之前或者之后自动去调用另外一些语句，就需要用到触发器。</p>\n<h2 id=\"创建触发器\"><a href=\"#创建触发器\" class=\"headerlink\" title=\"创建触发器\"></a>创建触发器</h2><p>触发器的定义：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> 触发器名</span><br><span class=\"line\">&#123;<span class=\"keyword\">BEFORE</span>|<span class=\"keyword\">AFTER</span>&#125;          </span><br><span class=\"line\">&#123;<span class=\"keyword\">INSERT</span>|<span class=\"keyword\">DELETE</span>|<span class=\"keyword\">UPDATE</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">ON</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"keyword\">ROW</span> </span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    触发器内容</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>MySQL中目前只支持对INSERT、DELETE、UPDATE这三种类型的语句设置触发器。</p>\n<p>因为触发器会对某个语句影响的所有记录依次调用我们自定义的触发器内容，所以我们需要一种访问该记录中的内容的方式，<br>MySQL提供了NEW和OLD两个单词来分别代表新记录和旧记录，它们在不同操作中的含义不同：</p>\n<ul>\n<li>对于INSERT语句设置的触发器来说，NEW代表准备插入的记录，不能使用OLD。</li>\n<li>对于DELETE语句设置的触发器来说，OLD代表删除前的记录，不能使用NEW。</li>\n<li>对于UPDATE语句设置的触发器来说，NEW代表修改后的记录，OLD代表修改前的记录。</li>\n</ul>\n<p>举个🌰：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TRIGGER test_trigger</span><br><span class=\"line\">    -&gt; BEFORE INSERT ON first_table</span><br><span class=\"line\">    -&gt; FOR EACH ROW</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; IF NEW.first_column &lt; 1 THEN</span><br><span class=\"line\">    -&gt;  SET NEW.first_column = 1;</span><br><span class=\"line\">    -&gt; ELSEIF NEW.first_column &gt; 10 THEN</span><br><span class=\"line\">    -&gt;  SET NEW.first_column = 10;</span><br><span class=\"line\">    -&gt; END IF;</span><br><span class=\"line\">    -&gt; END $</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from first_table;</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            1 | aaa           |</span><br><span class=\"line\">|            2 | NULL          |</span><br><span class=\"line\">|         NULL | ccc           |</span><br><span class=\"line\">|            4 | test          |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">4 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> first_table(first_column,second_column) <span class=\"keyword\">VALUES</span>(<span class=\"number\">5</span>,<span class=\"string\">'5'</span>),(<span class=\"number\">20</span>,<span class=\"string\">'20'</span>);</span><br><span class=\"line\">Query OK, 2 rows affected (0.01 sec)</span><br><span class=\"line\">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from first_table;</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">| first_column | second_column |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">|            1 | aaa           |</span><br><span class=\"line\">|            2 | NULL          |</span><br><span class=\"line\">|         NULL | ccc           |</span><br><span class=\"line\">|            4 | test          |</span><br><span class=\"line\">|            5 | 5             |</span><br><span class=\"line\">|           10 | 20            |</span><br><span class=\"line\">+<span class=\"comment\">--------------+---------------+</span></span><br><span class=\"line\">6 rows in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>(20,’20’)的插入结果变成了(10,’20’)说明触发器生效了。</p>\n<h2 id=\"查看触发器\"><a href=\"#查看触发器\" class=\"headerlink\" title=\"查看触发器\"></a>查看触发器</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看当前数据库中的所有触发器的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">TRIGGERS</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">查看某个具体的触发器的定义：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> 触发器名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除触发器：\"><a href=\"#删除触发器：\" class=\"headerlink\" title=\"删除触发器：\"></a>删除触发器：</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> 触发器名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"触发器使用注意事项\"><a href=\"#触发器使用注意事项\" class=\"headerlink\" title=\"触发器使用注意事项\"></a>触发器使用注意事项</h2><ol>\n<li>触发器内容中不能有输出结果集的语句。</li>\n<li>一个表最多只能定义6个触发器分别是：<ul>\n<li>BEFORE INSERT触发器</li>\n<li>BEFORE DELETE触发器</li>\n<li>BEFORE UPDATE触发器</li>\n<li>AFTER INSERT触发器</li>\n<li>AFTER DELETE触发器</li>\n<li>AFTER UPDATE触发器</li>\n</ul>\n</li>\n<li>NEW中的值可以被更改，OLD中的值无法更改。</li>\n<li>如果我们的<code>BEFORE</code>触发器内容执行过程中遇到了<code>ERROR</code>，那这个触发器对应的具体语句将无法执行；如果具体的操作语句执行过程中遇到了<code>ERROR</code>，那与它对应的<code>AFTER</code>触发器的内容将无法执行。</li>\n</ol>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><p>如果我们想指定某些语句在某个时间点或者每隔一个时间段执行一次的话,就需要创建一个事件。</p>\n<h2 id=\"创建事件\"><a href=\"#创建事件\" class=\"headerlink\" title=\"创建事件\"></a>创建事件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> 事件名</span><br><span class=\"line\"><span class=\"keyword\">ON</span> SCHEDULE</span><br><span class=\"line\">&#123;<span class=\"keyword\">AT</span> 某个确定的时间点 | EVERY 期望的时间间隔 [STARTS datetime][<span class=\"keyword\">END</span> datetime]&#125;</span><br><span class=\"line\"><span class=\"keyword\">DO</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    具体的语句</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<p>事件支持两种类型的定时执行：</p>\n<ol>\n<li><p>某个确定的时间点执行</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; AT '2019-09-10 11:30:30'</span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> 除了直接填某个时间常量，也可以填写一些表达式：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; AT DATE_ADD(NOW(), INTERVAL 2 DAY)</span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> DATE_ADD(NOW(), INTERVAL 2 DAY)表示该事件将在当前时间的两天后执行。</p>\n</li>\n<li><p>每隔一段时间执行一次</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; EVERY 1 HOUR </span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> 默认情况下，采用这种每隔一段时间执行一次的方式将从创建事件的事件开始，无限制的执行下去。我们也可以指定该事件开始执行时间和截止时间：</p>\n <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE EVENT insert_first_table</span><br><span class=\"line\">    -&gt; ON SCHEDULE</span><br><span class=\"line\">    -&gt; EVERY 1 HOUR STARTS '2019-09-10 11:30:30' ENDS '2019-09-12 11:30:30'</span><br><span class=\"line\">    -&gt; DO</span><br><span class=\"line\">    -&gt; BEGIN</span><br><span class=\"line\">    -&gt; INSERT INTO first_table(first_column,second_column) VALUES(6,'6');</span><br><span class=\"line\">    -&gt; END $</span><br></pre></td></tr></table></figure>\n\n<p> 在创建好事件之后我们就不用管了，到了指定时间，MySQL服务器会帮我们自动执行的。</p>\n</li>\n</ol>\n<h2 id=\"查看事件\"><a href=\"#查看事件\" class=\"headerlink\" title=\"查看事件\"></a>查看事件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看当前数据库中的所有事件的语句：</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">EVENTS</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">查看某个具体的事件的定义:</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">EVENT</span> 事件名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除事件\"><a href=\"#删除事件\" class=\"headerlink\" title=\"删除事件\"></a>删除事件</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">EVENT</span> 事件名;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件使用注意事项\"><a href=\"#事件使用注意事项\" class=\"headerlink\" title=\"事件使用注意事项\"></a>事件使用注意事项</h2><p>默认情况下，MySQL服务器并不会帮助我们执行事件，除非我们在启动服务器的时候就指定了下边这个选项：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event_scheduler = ON</span><br></pre></td></tr></table></figure>\n\n<p>如果在服务器已经启动的情况下，我们可以通过设置<code>event_scheduler</code>的系统变量来让MySQL服务器帮助我们执行事件，设置方式如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SET GLOBAL event_scheduler = ON;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h1><p>在MySql中创建自定义函数报错信息如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global log_bin_trust_function_creators=1;</span><br></pre></td></tr></table></figure>"},{"title":"《Mysql技术内幕》学习笔记-InnoDB存储引擎","author":"Guyuqing","copyright":true,"comments":0,"date":"2019-07-31T03:34:00.000Z","_content":"# 概述\n\n* InnoDB存储引擎最早由Innobase Oy公司开发，被包括在MySQL数据库所有的二进制发行版本中，\n* 从MySQL 5.5版本开始是默认的表存储引擎<font color=gray>（之前的版本InnoDB存储引擎仅在Windows下为默认的存储引擎）</font>\n* 第一个完整支持ACID事务的MySQL存储引擎<font color=gray>（BDB是第一个支持事务的MySQL存储引擎，现在已经停止开发）</font>\n* 特点：行锁设计、支持 MVCC、支持外键、提供一致性非锁定读、有效利用内存和 CPU\n<!-- more -->\n\n# 体系架构\n![innoDB体系结构图](Mysql02/innodb-Architecture.png)\nInnoDB存储引擎是由内存池、后台线程、磁盘存储三大部分组成。\n\n## 线程\n\nInnoDB 使用的是多线程模型, 其后台有多个不同的线程负责处理不同的任务\n\n### Master Thread\n\nMaster Thread是最核心的一个后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性。包括脏页刷新、合并插入缓冲、UNDO页的回收等。\n\n### IO Thread\n\n在 InnoDB 存储引擎中大量使用了异步IO(Async IO)来处理写IO请求, IO Thread的工作主要是负责这些 IO 请求的回调。\n\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">线程</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之前 </td>\n    <td colspan=\"4\">4 个 io thread：write，read，insert buffer，log IO Thread.\n    <ul>\n        <li>在Linux下，IO Thread的数量不能进行调整</li>\n        <li>在Windows下可以通过参数 innodb_file_io_threads 来增大IO Thread</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之后 </td>\n    <td colspan=\"4\">read 和 write IO thread 分别增大到了 4 个<br>\n    <ul>\n    <li>分别使用 innodb_read_io_threads 和 innodb_write_io_threads 设置线程数</li>\n    </ul>\n    </td>\n</tr>\n</table>  \n\n### Purge Thread\n\n事务提交后，其所使用的undo log可能不再需要，因此需要Purge Thread来回收已经分配并使用的UNDO页。\n\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之前 </td>\n    <td colspan=\"4\">purge 操作在 master thread 内完成</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之后 </td>\n    <td colspan=\"4\">purge 可以独立到单独的线程,减轻 master thread 工作,提高 cpu 利用率和提高性能<br>\n    <ul>\n    <li>MySQL数据库的配置文件<code>[mysqld]</code>中添加如下命令来启用独立的Purge Thread：</li>\n    <li>innodb_purge_threads=1 </li>\n    <li>1.1版本中，即使将 innodb_purge_threads 设为大于1，InnoDB存储引擎启动时也会将其设为1</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.2之后</td>\n    <td colspan=\"4\">支持多个Purge Thread, 这样做可以加快UNDO页的回收，也能更进一步利用磁盘的随机读取性能</td>\n</tr>\n</table>                                  \n\n### Page Cleaner Thread\n\nPage Cleaner Thread的作用是取代Master Thread中脏页刷新的操作，\n减轻原Master Thread的工作及对于用户查询线程的阻塞，进一步提高性能。\n\n## 内存\n\ninnoDB内存主要由[缓冲池(innodb buffer pool)](#缓冲池)、[重做日志缓冲(redo log buffer)](#重做日志缓冲)、[额外内存池组成(innodb additional men pool size)](#额外的内存池)组成\n\n### 缓冲池\n缓冲池是主存储器中的一个区域，用于在访问时缓存表和索引数据。缓冲池允许直接从内存处理常用数据，从而加快处理速度。\n在专用服务器上，通常会将最多80％的物理内存分配给缓冲池。\n读取流程：\n     ![流程图](Mysql02/read.png)\n更新流程：\n     ![流程图](Mysql02/write.png)\n\n因此缓冲池的大小影响数据库的整体性能。\n{% note info %}\n\n由于32位操作系统的限制，在该系统下最多将该值设置为3G。\n用户可以打开操作系统的`PAE`选项来获得32位操作系统下最大64GB内存的支持。\n为了让数据库使用更多的内存,建议数据库系统都采用 64 位操作系统。\n\n{% endnote %}\n\n|参数|版本|作用|\n|:---:|:---:|:---:|\n|innodb_buffer_pool_instances|从InnoDB 1.0.x开始|配置多个缓冲池实例，默认为1|\n \n#### 缓冲池中缓存的数据页类型\n \n* 索引页(index page)：缓存数据表索引\n* 数据页(data page)：缓存数据页，占缓冲池的绝大部分\n* undo页(undo Log Page)：undo页是保存事务，为回滚做准备的。\n* [插入缓冲](#插入缓冲)（insert buffer）：插入数据时要先插入到缓存池中。\n* 自适应哈希索引（adaptive hash index）： 除了B+ Tree索引外，在缓冲池还会维护一个哈希索引，以便在缓冲池中快速找到数据页。\n* InnoDB存储的锁信息（lock info）\n* 数据字典信息（data dictionary）\n    在MySQL中，数据字典信息内容就包括表结构、数据库名或表名、字段的数据类型、视图、索引、表字段信息、存储过程、触发器等内容。\n    InnoDB有自己的表缓存，可以称为表定义缓存或者数据字典。当InnoDB打开一张表，就增加一个对应的对象到数据字典。\n\n \n#### 缓冲池管理方式\n![三种list](Mysql02/three-list2.png)\n 1. **Free list**\n    当数据库刚启动时，LRU列表是空的，这时页都存放在Free list中。\n    当需要从缓冲池中分页时，从Free list中查找是否有可用的空闲页，若有则将该页从Free列表中删除，放入到LRU列表中,维持页数守恒。\n\n 2. **LRU list** \n     **LRU算法**：最频繁使用页在LRU列表的前端，最少使用的页在尾端。首先释放LRU列表中的尾端的页。缓冲池中页的大小默认为16KB。\n     **InnoDB优化的LRU算法(midpoint insertion strategy)**：将新读取到的页不放在首部，而是中间部位 `midpoint` 位置。目标是确保频繁访问\"热\"页面保留在缓冲池中。\n     ![lru](Mysql02/innodb-buffer-pool-list.jpg)\n\n     <table>\n     <tr>\n         <th>参数</th>\n         <th colspan=\"2\">作用</th>\n     </tr>\n     <tr>\n         <td style=\"text-align:center\"> innodb_old_blocks_pct </td>\n         <td colspan=\"2\">控制LRU列表中 old list 的百分比。<br>\n            默认值为 37，对应于原始固定比率3/8。<br>\n            值范围是 5（缓冲池中的新页面很快就会老化）到 95。\n         </td>\n     </tr>\n     <tr>\n         <td style=\"text-align:center\"> innodb_old_blocks_time </td>\n         <td colspan=\"2\">指定第一次访问页面之后的时间窗口（ms）<br>\n            在此期间可以访问该页面而不移动到LRU列表的前端<br>\n            默认值为 1000 ms\n         </td>\n     </tr>\n     </table> \n     \n     默认情况下，算法操作如下：\n     * 在默认配置下， `midpoint`位置在LRU list 的5/8处。\n     * `midpoint`是new sublist的尾部与old sublist的头部相交的边界。\n     * 当 InnoDB 将页面读入缓冲池时，将页插入`midpoint`位置(old sublist的头部)。\n     * 访问old sublist中的页 && 该页在old sublist中的停留时间超过innodb_old_blocks_time设置的时间，使其变`young`,将其移动到缓冲池的头部(new sublist的头部)。\n     * 当页从LRU列表的old部分加入到new部分时，称此时发生的操作为`page made young`，而因为innodb_old_blocks_time的设置而导致页没有从old部分移动到new部分的操作称为`page not made young`\n     * 在数据库操作中，被访问的页将移到new sublist的表头，这样一来，在new sublist中的未被访问的节点将逐渐往表尾移动，当移动过中点，将变为old list的节点。当表满时，old list末尾的页将会被移除。\n     \n {% note warning %}\n 为什么不采用朴素的LRU？\n 因为某些SQL操作会访问很多页，甚至全部页，但仅仅在该次查询操作，并不是活跃的热点数据。可能会使缓冲池中的页被刷新出，从而影响缓冲池的效率。\n {% endnote %}  \n \n  3. **Flush list**               \n    在LRU类表的页被修改后，称为脏页（Dirty Page），即缓存和硬盘的页数据不一致。\n    数据库会通过`CHECKPOINT`机制将脏页刷新回磁盘，Flush list中的页即为脏页列表。\n\n### 重做日志缓冲\n   {% note info %}\n    **什么是redo log？**\n    当数据库对数据做修改的时候，需要把数据页从磁盘读到buffer pool中，然后在buffer pool中进行修改，那么这个时候buffer pool中的数据页就与磁盘上的数据页内容不一致，称buffer pool的数据页为dirty page 脏数据。\n    如果发生非正常的DB服务重启，那么这些数据并没有同步到磁盘文件中（注意，同步到磁盘文件是个随机IO），会发生数据丢失。\n    如果这个时候，能够有一个文件，当缓冲池中的data page变更结束后，把相应修改记录记录到这个文件（注意，记录日志是顺序IO），那么当DB服务发生crash的情况，恢复DB的时候，也可以根据这个文件的记录内容，重新应用到磁盘文件，数据保持一致。\n    这个文件就是redo log ，用于记录 数据修改后的记录，顺序记录。<br>\n    **什么是undo log？**\n    undo日志用于存放数据修改被修改前的值。\n    假设修改表中 id=1 的行数据，把Name='B' 修改为Name = 'B2' ，那么undo日志就会用来存放Name='B'的记录，如果这个修改出现异常，可以使用undo日志来实现回滚操作，保证事务的一致性。\n   {% endnote %}  \n\n![lru](Mysql02/redo-buffer.png)\n  \n  重做日志缓冲不需要设置很大，通常情况下8M能满足大部分的应用场景。重做日志支持以下三种情况触发刷新：\n  * Master Thread每一秒将重做日志缓冲刷新到重做日志文件\n  * 每次事务提交时将重做日志缓冲刷新到重做日志文件\n  * 当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件\n  \n### 额外的内存池\n   在InnoDB存储引擎中，对内存的管理是通过一种称为内存堆的方式进行的。在对一些数据结构本身的内存进行分配时，需要从额外的内存池中进行申请，当该区域的内存不够时，会从缓冲池中进行申请。\n\n# Checkpoint技术 \n        \n{% note info %}    \n   **什么是Checkpoint？**\n   是一个数据库事件(event)，这个事件激活以后会触发数据库写进程(DBWR)将脏数据块写到磁盘中。                           \n   \n   **为什么需要Checkpoint技术？**\n   innoDB在事务提交时，先写重做日志，再修改内存数据这样，就产生了脏页。既然有重做日志保证数据持久性，查询时也可以从缓冲池页中取数据，那为什么还要刷新脏页到磁盘呢？如果重做日志可以无限增大，同时缓冲池足够大，能够缓存所有数据，那么是不需要将缓冲池中的脏页刷新到磁盘。但是，会有以下几个问题：\n   1) 服务器内存有限，缓冲池不够用，无法缓存全部数据\n   2) 重做日志无限增大成本要求太高\n   3) 宕机时如果重做全部日志恢复时间过长            \n                                         \n   **Checkpoint 解决了什么问题？**\n   1) 缩短短数据库的恢复时间\n   2) 缓冲池不够时，将脏页刷新到磁盘\n   3) 重做日志不可用时，刷新脏页\n{% endnote %} \n\n对于InnoDB存储引擎而言，其是通过LSN（Log Sequence Number）来标记版本的。每个页有LSN，重做日志中也有LSN，Checkpoint也有LSN。\n\ninnodb 内部有两种 checkpoint：\n1. **sharp checkpoint**：数据库关闭的时候将`所有的脏页`刷回到磁盘，默认方式，参数 innodb_fast_shudown=1\n2. **fuzzy checkpoint**：只刷新`部分脏页`\n    - master thread checkpoint：master thread 异步的以每秒或者每 10 秒的速度从缓冲池的脏页列表中刷新一定比列的也回磁盘\n         - 周期性，异步，读取flush list，找到脏页，写入磁盘\n    - flush_lru_list checkpoint：InnoDB要保证LRU列表中需要有差不多100个空闲页可供使用。如果没有这么多，就会将 lru list 尾部的页移除。如果这些页有脏页，就需要进行 checkpoint。\n         - innodb 1.1.x版本之前，检查在用户查询线程中,会阻塞用户查询操作。\n         - innodb 1.2.x版本之后，检查放到了单独的 page cleaner 线程中,可通过 **innodb_lru_scan_depth** 控制lru列表中可用页的数量，默认是1024。\n    - async/sync flush checkpoint：重做日志文件不可用时，强制将一些页刷新到磁盘。达到重做日志文件的大小阈值。\n         * checkpoint age = redo_log_lsn - cp_lsn\n            低水位=75% * total_redo_log_file_size\n            高水位=90% * total_redo_log_file_size\n         * checkpoint age < 低水位 \n          \t不需要刷新\n         * 低水位  <=  checkpoint age <= 高水位\n          \t会强制进行 checkpoint ，触发async flush， 根据flush_list的顺序，刷新足够多的脏页，直到 checkpoint age < 低水位\n         * checkpoint age > 高水位\n            会强制进行 checkpoint ，触发sync flush 根据flush_list的顺序，刷新脏页, 直到 checkpoint age < 低水位\n    \n    - dirty page too much checkpoint：当缓冲池中脏页的数量占据一定百分比时，强制进行Checkpoint，用来保证缓冲池中有足够的页，通过 [innodb_max_dirty_pages_pct](#innodb_max_dirty_pages_pct) 参数控制。\n              \n<div style=\"text-align:center;color:#bfbfbf;font-size:16px;\">\n    <span>-------- 第二部分 --------</span>\n</div>\n                               \n# Master thread 工作方式\n\n## InnoDB 1.0.x 版本之前的 Master thread\nMaster thread 内部有多个循环 loop 组成：\n* 主循环 loop\n* 后台循环 backgroup loop\n* 刷新循环 flush loop\n* 暂停循环 suspend loop\n\n伪代码如下：\n\n```java\nvoid master_thread()\n{\n\tgoto loop;\n\t//主循环\n\tloop ：\n\tfor(int i = 0; i < 10; ++i){\n\t\tthread_sleep(1);\n\t\t//1. 日志缓冲刷新到磁盘，即使事务还没有提交\n\t\tdo log buffer flush to disk;\n\t\t//2. 根据前一秒IO操作小于5，合并插入缓冲\n\t\tif(last_one_second_ios < 5)\n\t\t\tdo merge at most 5 insert buffer;\n\t\t//3. 脏页的比例超过了阈值，刷新 100 个脏页到磁盘\n\t\tif(buf_get_modified_ratio_pct > innodb_max_dirty_pages_pct)\n\t\t\tdo buffer pool flush 100 dirty page;\n\t\t//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop\n\t\tif(no user activity)\n\t\t\tgoto backgroud loop;\n\t}\n\t\n\t//1. 前10秒IO操作小于200，刷新 100 个脏页到磁盘\n\tif(last_ten_second_ios < 200)\n\t\tdo buffer pool flush 100 dirty page;\n\t//2. 合并至多 5 个插入缓冲\n\tdo merge at most 5 insert buffer;\n\t//3. 将重做日志刷新到磁盘\n\tdo log buffer flush to disk;\n\t//4. 删除无用的 undo 页（每次最多尝试回收 20 个 undo 页）\n\tdo full purge;\n\t//5. 脏页比例超过 70% 刷新100 个脏页到磁盘，否则刷新 10 个脏页\n\tif ( buf_get_modified_ratio_pct ＞ 70 % )\n\t\tdo buffer pool flush 100 dirty page\n\telse\n\t\tbuffer pool flush 10 dirty page\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tgoto loop\n\t//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tbackground loop :\n\t//1. 删除无用的 undo 页\n\tdo full purge\n\t//2. 合并 20 个插入缓冲\n\tdo merge 20 insert buffer\n\t//3.如果有任务，跳转到主循环，否则跳转到刷新循环\n\tif not idle\t\n\t\tgoto loop\n\telse\n\t\tgoto flush loop\n\t\n\t//刷新循环\n\tflush loop :\n\t//不断刷新100个脏页，直到脏页比例没有超过阈值\n\tdo buffer pool flush 100 dirty page\n\tif ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )\n\t\tgoto flush loop\n\t//没有任务，跳转到暂停循环\n\tgoto suspend loop\n\t\n\t//暂停循环\n\tsuspend loop :\n\t//将主线程挂起，等待事件发生\n\tsuspend_thread()\n\twaiting event\n\tgoto loop;\n}\n\n```\n## InnoDB 1.2.x 版本之前的 Master thread\n1. 提高刷新脏页数量和合并插入数量，改善磁盘 IO 处理能力,刷新数量不再硬编码，而是使用百分比控制。\n    * 在合并插入缓冲的时候，合并插入缓冲的数量为 [innodb_io_capacity](#innodb_io_capacity) 的 5%\n    * 在从缓冲区刷新脏页的时候，刷新脏页的数量为 [innodb_io_capacity](#innodb_io_capacity)\n2. 增加了自适应刷新脏页功能。\n    * 1.0.x之前版本：脏页在缓冲池占比小于[innodb_max_dirty_pages_pct](#innodb_max_dirty_pages_pct)，不刷新脏页，大于则刷新100个脏页\n    * 1.0.x版本开始：引入[innodb_adaptive_flushing](#innodb_adaptive_flushing)参数，通过函数buf_flush_get_desired_flush_rate判断产生重做日志的速度来决定最适合的刷新脏页数量。\n3. full purge回收的Undo页的数量也不再硬编码，使用参数[innodb_purge_batch_size](#innodb_purge_batch_size)控制。\n\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_io_capacity\">innodb_io_capacity</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">表示磁盘IO的吞吐量,默认值是200</td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</span></td>\n    <td style=\"text-align:center\"> 1.0.x之前 </td>\n    <td colspan=\"3\">脏页在缓冲池中所占比率，默认值是90</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0.x开始</td>\n    <td colspan=\"3\">默认值是75<br>加快刷新脏页的频率，保证了磁盘IO的负载。</td>                       \n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_adaptive_flushing\">innodb_adaptive_flushing</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">是否自适应刷新脏页，默认为 ON</td>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_purge_batch_size\">innodb_purge_batch_size</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">清除 undo 页时,表示一次删除多少页,默认是 20</td>\n</tr>\n</table>   \n\nMaster Thread的伪代码变为了下面的形式：\n\n```java\nvoid master_thread()\n{\n\tgoto loop;\n\t//主循环\n\tloop ：\n\tfor(int i = 0; i < 10; ++i){\n\t\tthread_sleep(1);\n\t\t//1. 日志缓冲刷新到磁盘，即使事务还没有提交\n\t\tdo log buffer flush to disk;\n\t\t//2. 根据前一秒IO操作小于5%innodb_io_capacity，合并插入缓冲\n\t\tif(last_one_second_ios < 5%innodb_io_capacity)\n\t\t\tdo merge 5%innodb_io_capacity insert buffer;\n\t\t//3. 脏页的比例超过了阈值，刷新 100%innodb_io_capacity 个脏页到磁盘\n\t\tif(buf_get_modified_ratio_pct > innodb_max_dirty_pages_pct)\n\t\t\tdo buffer pool flush 100%innodb_io_capacity dirty page;\n\t\t//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop\n\t\tif(no user activity)\n\t\t\tgoto backgroud loop;\n\t}\n\t\n\t//1. 前10秒IO操作小于innodb_io_capacity，刷新 innodb_io_capacity 个脏页到磁盘\n\tif(last_ten_second_ios < innodb_io_capacity)\n\t\tdo buffer pool flush 100%innodb_io_capacity dirty page;\n\t//2. 合并至多 5%innodb_io_capacity 个插入缓冲\n\tdo merge at most 5%innodb_io_capacity insert buffer;\n\t//3. 将重做日志刷新到磁盘\n\tdo log buffer flush to disk;\n\t//4. 删除无用的 undo 页（每次最多尝试回收 5%innodb_io_capacity 个 undo 页）\n\tdo full purge;\n\t//5. 脏页比例超过 70% 刷新 100%innodb_io_capacity 个脏页到磁盘，\n\t// 否则刷新 10%innodb_io_capacity 个脏页\n\tif ( buf_get_modified_ratio_pct ＞ 70 % )\n\t\tdo buffer pool flush 100%innodb_io_capacity dirty page\n\telse\n\t\tbuffer pool flush 10%innodb_io_capacity dirty page\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tgoto loop\n\t//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tbackground loop :\n\t//1. 删除无用的 undo 页\n\tdo full purge\n\t//2. 合并 100%innodb_io_capacity 个插入缓冲\n\tdo merge 100%innodb_io_capacity insert buffer\n\t//3.如果有任务，跳转到主循环，否则跳转到刷新循环\n\tif not idle\t\n\t\tgoto loop\n\telse\n\t\tgoto flush loop\n\t\n\t//刷新循环\n\tflush loop :\n\t//不断刷新 100%innodb_io_capacity 个脏页，直到脏页比例没有超过阈值\n\tdo buffer pool flush 100%innodb_io_capacity dirty page\n\tif ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )\n\t\tgoto flush loop\n\t//没有任务，跳转到暂停循环\n\tgoto suspend loop\n\t\n\t//暂停循环\n\tsuspend loop :\n\t//将主线程挂起，等待事件发生\n\tsuspend_thread()\n\twaiting event\n\tgoto loop;\n}\n\n```\n## InnoDB 1.2.x 版本的 Master thread\n\nInnoDB 1.2.x 版本中再次对 Master Thread 进行了优化，伪代码如下：\n```java\nif InnoDB is idle\n//之前版本中每10秒的操作\nsrv_master_do_idle_tasks();\nelse\n//之前版本中每秒的操作\nsrv_master_do_active_tasks();\n```\n对于刷新脏页的操作，从Master Thread线程分离到一个单独的Page Cleaner Thread，从而减轻了Master Thread的工作，同时进一步提高了系统的并发性。\n\n\n# InnoDB 关键特性\n关键特性包括：\n* 插入缓冲 insert buffer\n* 两次写 double write\n* 自适应哈希索引 adaptive hash index\n* 异步 io async io\n* 刷新邻接页 flush neighbor page\n\n## 插入缓冲\n\n### 聚集索引（一级索引）\n表在存储的时候按照主键排序进行存储，不需要磁盘的随机读取，插入效率高。\n非叶子节点存放的是键值，叶子节点存放的是行数据，称之为数据页。\n\n### 辅助索引（二级索引）\n除了聚集索引之外的索引都可以称之为辅助索引，叶子节点中存放的是主键的键值。叶子节点的插入不再有序，这时就需要离散访问非聚集索引页，插入性能变低。\n一张表可以存在多个辅助索引，但是只能有一个聚集索引，通过辅助索引来查找对应的航记录的话，需要进行两步，第一步通过辅助索引来确定对应的主键，第二步通过相应的主键值在聚集索引中查询到对应的行记录，也就是进行两次B+树搜索。\n\n### 索引数据页的更新（针对二级索引）\n![index更新流程](Mysql02/index-update.png)\n表数据更新的同时也会更新对应的表的索引数据，所以：对表进行insert delete update时，很可能会产生大量的物理读(物理读索引数据页)\n\n![引入insertbuffer后index更新流程](Mysql02/insert-buffer.png)\n\n### 1. insert buffer\nInsert Buffer的使用流程：\n![Insert Buffer的使用流程](Mysql02/Insert-Buffer.svg)\n\n#### 插入缓冲的启用需要满足以下两个条件：\n1）索引是辅助索引（secondary index）\n2）索引不是唯一的：整个索引数据被切分为2部分，无法保证唯一性。\n\n#### insert buffer结构\ninsert buffer的数据结构是B+树，全局只有一颗B+树。\nB+树的非叶子节点是Search key，构造结构为(space,marker,offset)。\n* space：待插入记录所在表的表空间id。每个表都有唯一的表空间id，通过表空间id可以查出是哪张表。\n* marker：兼容之前的版本。\n* offset：在表空间中页的偏移量。\n\n当一个辅助索引要插入到(space,offset)中时，如果该页不在缓冲池中，则按上述规则构造一个search key，将该记录插入到insert buffer中。\n但是如果该页一直在insert buffer中，不断有记录插入到同一个索引页中，那么该索引页的空间就会逐渐缩小，要出现B+树节点的分裂情况，这时就不能进行insert buffer了。\n所以，我们需要一个机制来管理每个页面的剩余空闲空间，这就是`Insert buffer bitmap`。\n每隔page_size个页面，就是一个Insert buffer bitmap page。\n例如：若page_size = 16384(16k)，那么page_no为0，16384，32768，…的page，就是Insert buffer bitmap page，Bitmap page的功能，就是管理其后连续的page_size – 1个page的空间使用率。\n每个辅助索引页在Insert buffer bitmap中占用4bit。\n\n#### merge insert buffer 发生条件\n* 辅助索引页被读取到buffer pool中：正常的select查询操作，索引页被调入内存，该索引页对应在insert buffer中的索引更改记录就会发生merge操作。\n* Insert buffer bitmap page追踪到该索引页无可用空间时。\n* Master Thread。\n\n#### insert buffer 刷新到磁盘条件\n* 有一个后台线程，会认为数据库空闲时；\n* 数据库缓冲池不够用时；\n* 数据库正常关闭时；\n* redo log写满时：_几乎不会出现redo log写满，此时整个数据库处于无法写入的不可用状态_\n\n#### 插入缓冲主要带来如下两个坏处\n1）可能导致数据库宕机后实例恢复时间变长。如果应用程序执行大量的插入和更新操作，且涉及非唯一的聚集索引，一旦出现宕机，这时就有大量内存中的插入缓冲区数据没有合并至索引页中，导致实例恢复时间会很长。\n2）在写密集的情况下，插入缓冲会占用过多的缓冲池内存，默认情况下最大可以占用1/2，这在实际应用中会带来一定的问题。\n\n### 2. change buffer\n\nInnoDB从1.0.x版本开始引入了Change Buffer，可以将其视为Insert Buffer的升级。\n从这个版本开始，InnoDB可以对DML操作——Insert、Delete、Update`(delete+insert)`都进行缓冲，\n它们分别是：Insert Buffer, Delete Buffer,Purge Buffer。\n对一个记录进行 update 操作有两个过程\n\n* 将记录标记为删除：delete buffer\n* 将记录真正删除：pruge buffer\n\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffering\">innodb_change_buffering</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">用来开启各种Buffer选项，默认值是all<br>\n        <ul>\n        <li>inserts</li>\n        <li>deletes</li>\n        <li>purges</li>\n        <li>changes：开启 inserts 和 deletes</li>\n        <li>all：都开启</li>\n        <li>none：都不开启</li>\n        </ul>\n    </td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffer_max_size\">innodb_change_buffer_max_size</span></td>\n    <td style=\"text-align:center\"> 1.2.x开始 </td>\n    <td colspan=\"3\">用来控制change buffer最大使用内存数量<br>默认值为25,表示最多使用1/4的缓存池空间<br>该参数最大有效值是50</td>\n</tr>\n</table>  \n\n## 两次写\n提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。\n\n### 脏页刷新到磁盘风险\n\nIO的最小单位：\n* 数据库IO的最小单位是16K（MySQL默认，oracle是8K）\n* 文件系统IO的最小单位是4K（也有1K的）\n* 磁盘IO的最小单位是512字节\n\n因此，存在IO写入导致page损坏的风险：\n![IO风险](Mysql02/IO.png)\n\n提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。\n\n### Double write解决了什么问题\n一个数据页的大小是16K，假设在把内存中的脏页写到数据库的时候，写了8K突然宕机了，也就是说前8K数据是新的，后8K是旧的，那么磁盘数据库这个数据页就是不完整的，是一个坏掉的数据页，这种情况被称为部分`写失效`\n\n**那么可不可以通过 redo log 来进行恢复呢？**\nredo记录的是对页的修改，只能恢复校验完整（还没写）的页，不能修复坏掉的数据页，所以这个数据就丢失了，可能会造成数据不一致，所以需要double write。\n\n{% note info %}   \n为什么 redo log 不需要 doublewrite 的支持？\n因为 redo log 写入的单位就是 512 字节，也就是磁盘 IO 的最小单位，所以无所谓数据损坏。\n{% endnote %}   \n\n### 两次写工作流程\n![两次写流程](Mysql02/doublewrite.png)\ndoublewrite由两部分组成，一部分为内存中的doublewrite buffer，其大小为2MB，另一部分是磁盘上共享表空间(ibdata x)中连续的128个页，即2个区(extent)，大小也是2M。\n1. 当一系列机制触发数据缓冲池中的脏页刷新时，并不直接写入磁盘数据文件中，而是先拷贝至内存中的doublewrite buffer中；\n2. 接着从两次写缓冲区分两次写入磁盘共享表空间中(连续存储，顺序写，性能很高)，每次写1MB；\n3. 待第二步完成后，再将doublewrite buffer中的脏页数据写入实际的各个表空间文件(离散写)；(脏页数据固化后，即进行标记对应doublewrite数据可覆盖)\n\n现在我们来分析一下为什么 double write 可以生效。当宕机发生时，有那么几种情况：\n1. 磁盘还未写，此时可以通过 redo log 恢复；\n2. 磁盘正在进行从内存到共享表空间的写，此时数据文件中的页还没开始被写入，因此也同样可以通过 redo log 恢复；\n3. 磁盘正在写数据文件，此时共享表空间已经写完，可以从共享表空间拷贝页的副本到数据文件实现恢复。\n\n## 自适应哈希索引\n\n哈希：一次就可以定位数据\n\nB+树：取决于树的高度，生产环境一般是 3-4 层，所以需要查询 3-4 次\n\n自适应哈希索引 AHI（adaptive hash index）建立条件：观察到一个访问模式访问频繁，就会建立哈希索引\n* 通过该模式访问了 100 次（模式：where x = ?）\n* 页通过该模式访问了 N 次，其中 N = 页的记录总数⁄16\n\nInnoDB 存储引擎官方文档显示，启用 AHI 后,读取和写入速度可以提高 2 倍，辅助索引的连接操作性能可以提高 5 倍。\n\n## 异步IO\n为了提高磁盘的操作性能，当前的数据库系统都采用异步IO的方式处理磁盘操作。用户可以在发出一个IO请求胡立即再发出另一个IO请求，当全部IO请求发送完毕后，等待所有IO操作完成，这就是AIO。\nAIO的另一个优势是可以进行IO Merge操作，也就是将多个IO合并为1个IO, 这样可以提高IOPS(Input/Output Per Second)的性能。\n\n例如：用户访问页的（space, page_no)为(8,6) (8,7) (8,8)，每个页的大小为16KB，同步IO需要3次IO操作。可以优化为从(8,6)开始读取48KB。\n\n## 刷新临接页\n\n当刷新一个脏页时，InnoDB会检查该页所在extent的所有页，如果是脏页，一起刷新。\n\n<table>\n    <tr>\n        <th colspan=\"2\">参数</th>\n        <th>版本</th>\n        <th colspan=\"3\">作用</th>\n    </tr>\n    <tr>\n        <th colspan=\"2\" style=\"text-align:center\" >innodb_flush_neighbors</th>\n        <td style=\"text-align:center\">1.2.x开始</td>\n        <td colspan=\"3\">控制是否启用该特性</td>\n    </tr>\n</table> \n\n\n# 参考：\n* http://oohcode.com/2015/10/14/InnoDB-Key-Features/\n* https://chyroc.cn/posts/innodb-storage-engine-reading-1/\n* https://www.cnblogs.com/zhoujinyi/archive/2013/04/11/2988923.html\n* http://huzb.me/2019/01/14/%E6%8F%92%E5%85%A5%E7%BC%93%E5%86%B2%E3%80%81%E4%B8%A4%E6%AC%A1%E5%86%99%E5%92%8C%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/\n* https://blog.csdn.net/tanliqing2010/article/details/81509539\n* https://www.cnblogs.com/geaozhang/p/7341333.html\n* https://draveness.me/mysql-innodb\n* http://richfisher.me/blog/2017/12/18/innodb-notes/\n* https://www.docs4dev.com/docs/zh/mysql/5.7/reference/innodb-architecture.html#innodb%E6%9E%B6%E6%9E%84\n* MySQL技术内幕：InnoDB存储引擎(第2版)","source":"_posts/Mysql02.md","raw":"title: 《Mysql技术内幕》学习笔记-InnoDB存储引擎\ntags:\n  - 学习笔记\n  - MySql\n  - InnoDB\ncategories:\n  - Mysql\nauthor: Guyuqing\ncopyright: true\ncomments: false\ndate: 2019-07-31 11:34:00\n---\n# 概述\n\n* InnoDB存储引擎最早由Innobase Oy公司开发，被包括在MySQL数据库所有的二进制发行版本中，\n* 从MySQL 5.5版本开始是默认的表存储引擎<font color=gray>（之前的版本InnoDB存储引擎仅在Windows下为默认的存储引擎）</font>\n* 第一个完整支持ACID事务的MySQL存储引擎<font color=gray>（BDB是第一个支持事务的MySQL存储引擎，现在已经停止开发）</font>\n* 特点：行锁设计、支持 MVCC、支持外键、提供一致性非锁定读、有效利用内存和 CPU\n<!-- more -->\n\n# 体系架构\n![innoDB体系结构图](Mysql02/innodb-Architecture.png)\nInnoDB存储引擎是由内存池、后台线程、磁盘存储三大部分组成。\n\n## 线程\n\nInnoDB 使用的是多线程模型, 其后台有多个不同的线程负责处理不同的任务\n\n### Master Thread\n\nMaster Thread是最核心的一个后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性。包括脏页刷新、合并插入缓冲、UNDO页的回收等。\n\n### IO Thread\n\n在 InnoDB 存储引擎中大量使用了异步IO(Async IO)来处理写IO请求, IO Thread的工作主要是负责这些 IO 请求的回调。\n\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">线程</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之前 </td>\n    <td colspan=\"4\">4 个 io thread：write，read，insert buffer，log IO Thread.\n    <ul>\n        <li>在Linux下，IO Thread的数量不能进行调整</li>\n        <li>在Windows下可以通过参数 innodb_file_io_threads 来增大IO Thread</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之后 </td>\n    <td colspan=\"4\">read 和 write IO thread 分别增大到了 4 个<br>\n    <ul>\n    <li>分别使用 innodb_read_io_threads 和 innodb_write_io_threads 设置线程数</li>\n    </ul>\n    </td>\n</tr>\n</table>  \n\n### Purge Thread\n\n事务提交后，其所使用的undo log可能不再需要，因此需要Purge Thread来回收已经分配并使用的UNDO页。\n\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之前 </td>\n    <td colspan=\"4\">purge 操作在 master thread 内完成</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之后 </td>\n    <td colspan=\"4\">purge 可以独立到单独的线程,减轻 master thread 工作,提高 cpu 利用率和提高性能<br>\n    <ul>\n    <li>MySQL数据库的配置文件<code>[mysqld]</code>中添加如下命令来启用独立的Purge Thread：</li>\n    <li>innodb_purge_threads=1 </li>\n    <li>1.1版本中，即使将 innodb_purge_threads 设为大于1，InnoDB存储引擎启动时也会将其设为1</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.2之后</td>\n    <td colspan=\"4\">支持多个Purge Thread, 这样做可以加快UNDO页的回收，也能更进一步利用磁盘的随机读取性能</td>\n</tr>\n</table>                                  \n\n### Page Cleaner Thread\n\nPage Cleaner Thread的作用是取代Master Thread中脏页刷新的操作，\n减轻原Master Thread的工作及对于用户查询线程的阻塞，进一步提高性能。\n\n## 内存\n\ninnoDB内存主要由[缓冲池(innodb buffer pool)](#缓冲池)、[重做日志缓冲(redo log buffer)](#重做日志缓冲)、[额外内存池组成(innodb additional men pool size)](#额外的内存池)组成\n\n### 缓冲池\n缓冲池是主存储器中的一个区域，用于在访问时缓存表和索引数据。缓冲池允许直接从内存处理常用数据，从而加快处理速度。\n在专用服务器上，通常会将最多80％的物理内存分配给缓冲池。\n读取流程：\n     ![流程图](Mysql02/read.png)\n更新流程：\n     ![流程图](Mysql02/write.png)\n\n因此缓冲池的大小影响数据库的整体性能。\n{% note info %}\n\n由于32位操作系统的限制，在该系统下最多将该值设置为3G。\n用户可以打开操作系统的`PAE`选项来获得32位操作系统下最大64GB内存的支持。\n为了让数据库使用更多的内存,建议数据库系统都采用 64 位操作系统。\n\n{% endnote %}\n\n|参数|版本|作用|\n|:---:|:---:|:---:|\n|innodb_buffer_pool_instances|从InnoDB 1.0.x开始|配置多个缓冲池实例，默认为1|\n \n#### 缓冲池中缓存的数据页类型\n \n* 索引页(index page)：缓存数据表索引\n* 数据页(data page)：缓存数据页，占缓冲池的绝大部分\n* undo页(undo Log Page)：undo页是保存事务，为回滚做准备的。\n* [插入缓冲](#插入缓冲)（insert buffer）：插入数据时要先插入到缓存池中。\n* 自适应哈希索引（adaptive hash index）： 除了B+ Tree索引外，在缓冲池还会维护一个哈希索引，以便在缓冲池中快速找到数据页。\n* InnoDB存储的锁信息（lock info）\n* 数据字典信息（data dictionary）\n    在MySQL中，数据字典信息内容就包括表结构、数据库名或表名、字段的数据类型、视图、索引、表字段信息、存储过程、触发器等内容。\n    InnoDB有自己的表缓存，可以称为表定义缓存或者数据字典。当InnoDB打开一张表，就增加一个对应的对象到数据字典。\n\n \n#### 缓冲池管理方式\n![三种list](Mysql02/three-list2.png)\n 1. **Free list**\n    当数据库刚启动时，LRU列表是空的，这时页都存放在Free list中。\n    当需要从缓冲池中分页时，从Free list中查找是否有可用的空闲页，若有则将该页从Free列表中删除，放入到LRU列表中,维持页数守恒。\n\n 2. **LRU list** \n     **LRU算法**：最频繁使用页在LRU列表的前端，最少使用的页在尾端。首先释放LRU列表中的尾端的页。缓冲池中页的大小默认为16KB。\n     **InnoDB优化的LRU算法(midpoint insertion strategy)**：将新读取到的页不放在首部，而是中间部位 `midpoint` 位置。目标是确保频繁访问\"热\"页面保留在缓冲池中。\n     ![lru](Mysql02/innodb-buffer-pool-list.jpg)\n\n     <table>\n     <tr>\n         <th>参数</th>\n         <th colspan=\"2\">作用</th>\n     </tr>\n     <tr>\n         <td style=\"text-align:center\"> innodb_old_blocks_pct </td>\n         <td colspan=\"2\">控制LRU列表中 old list 的百分比。<br>\n            默认值为 37，对应于原始固定比率3/8。<br>\n            值范围是 5（缓冲池中的新页面很快就会老化）到 95。\n         </td>\n     </tr>\n     <tr>\n         <td style=\"text-align:center\"> innodb_old_blocks_time </td>\n         <td colspan=\"2\">指定第一次访问页面之后的时间窗口（ms）<br>\n            在此期间可以访问该页面而不移动到LRU列表的前端<br>\n            默认值为 1000 ms\n         </td>\n     </tr>\n     </table> \n     \n     默认情况下，算法操作如下：\n     * 在默认配置下， `midpoint`位置在LRU list 的5/8处。\n     * `midpoint`是new sublist的尾部与old sublist的头部相交的边界。\n     * 当 InnoDB 将页面读入缓冲池时，将页插入`midpoint`位置(old sublist的头部)。\n     * 访问old sublist中的页 && 该页在old sublist中的停留时间超过innodb_old_blocks_time设置的时间，使其变`young`,将其移动到缓冲池的头部(new sublist的头部)。\n     * 当页从LRU列表的old部分加入到new部分时，称此时发生的操作为`page made young`，而因为innodb_old_blocks_time的设置而导致页没有从old部分移动到new部分的操作称为`page not made young`\n     * 在数据库操作中，被访问的页将移到new sublist的表头，这样一来，在new sublist中的未被访问的节点将逐渐往表尾移动，当移动过中点，将变为old list的节点。当表满时，old list末尾的页将会被移除。\n     \n {% note warning %}\n 为什么不采用朴素的LRU？\n 因为某些SQL操作会访问很多页，甚至全部页，但仅仅在该次查询操作，并不是活跃的热点数据。可能会使缓冲池中的页被刷新出，从而影响缓冲池的效率。\n {% endnote %}  \n \n  3. **Flush list**               \n    在LRU类表的页被修改后，称为脏页（Dirty Page），即缓存和硬盘的页数据不一致。\n    数据库会通过`CHECKPOINT`机制将脏页刷新回磁盘，Flush list中的页即为脏页列表。\n\n### 重做日志缓冲\n   {% note info %}\n    **什么是redo log？**\n    当数据库对数据做修改的时候，需要把数据页从磁盘读到buffer pool中，然后在buffer pool中进行修改，那么这个时候buffer pool中的数据页就与磁盘上的数据页内容不一致，称buffer pool的数据页为dirty page 脏数据。\n    如果发生非正常的DB服务重启，那么这些数据并没有同步到磁盘文件中（注意，同步到磁盘文件是个随机IO），会发生数据丢失。\n    如果这个时候，能够有一个文件，当缓冲池中的data page变更结束后，把相应修改记录记录到这个文件（注意，记录日志是顺序IO），那么当DB服务发生crash的情况，恢复DB的时候，也可以根据这个文件的记录内容，重新应用到磁盘文件，数据保持一致。\n    这个文件就是redo log ，用于记录 数据修改后的记录，顺序记录。<br>\n    **什么是undo log？**\n    undo日志用于存放数据修改被修改前的值。\n    假设修改表中 id=1 的行数据，把Name='B' 修改为Name = 'B2' ，那么undo日志就会用来存放Name='B'的记录，如果这个修改出现异常，可以使用undo日志来实现回滚操作，保证事务的一致性。\n   {% endnote %}  \n\n![lru](Mysql02/redo-buffer.png)\n  \n  重做日志缓冲不需要设置很大，通常情况下8M能满足大部分的应用场景。重做日志支持以下三种情况触发刷新：\n  * Master Thread每一秒将重做日志缓冲刷新到重做日志文件\n  * 每次事务提交时将重做日志缓冲刷新到重做日志文件\n  * 当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件\n  \n### 额外的内存池\n   在InnoDB存储引擎中，对内存的管理是通过一种称为内存堆的方式进行的。在对一些数据结构本身的内存进行分配时，需要从额外的内存池中进行申请，当该区域的内存不够时，会从缓冲池中进行申请。\n\n# Checkpoint技术 \n        \n{% note info %}    \n   **什么是Checkpoint？**\n   是一个数据库事件(event)，这个事件激活以后会触发数据库写进程(DBWR)将脏数据块写到磁盘中。                           \n   \n   **为什么需要Checkpoint技术？**\n   innoDB在事务提交时，先写重做日志，再修改内存数据这样，就产生了脏页。既然有重做日志保证数据持久性，查询时也可以从缓冲池页中取数据，那为什么还要刷新脏页到磁盘呢？如果重做日志可以无限增大，同时缓冲池足够大，能够缓存所有数据，那么是不需要将缓冲池中的脏页刷新到磁盘。但是，会有以下几个问题：\n   1) 服务器内存有限，缓冲池不够用，无法缓存全部数据\n   2) 重做日志无限增大成本要求太高\n   3) 宕机时如果重做全部日志恢复时间过长            \n                                         \n   **Checkpoint 解决了什么问题？**\n   1) 缩短短数据库的恢复时间\n   2) 缓冲池不够时，将脏页刷新到磁盘\n   3) 重做日志不可用时，刷新脏页\n{% endnote %} \n\n对于InnoDB存储引擎而言，其是通过LSN（Log Sequence Number）来标记版本的。每个页有LSN，重做日志中也有LSN，Checkpoint也有LSN。\n\ninnodb 内部有两种 checkpoint：\n1. **sharp checkpoint**：数据库关闭的时候将`所有的脏页`刷回到磁盘，默认方式，参数 innodb_fast_shudown=1\n2. **fuzzy checkpoint**：只刷新`部分脏页`\n    - master thread checkpoint：master thread 异步的以每秒或者每 10 秒的速度从缓冲池的脏页列表中刷新一定比列的也回磁盘\n         - 周期性，异步，读取flush list，找到脏页，写入磁盘\n    - flush_lru_list checkpoint：InnoDB要保证LRU列表中需要有差不多100个空闲页可供使用。如果没有这么多，就会将 lru list 尾部的页移除。如果这些页有脏页，就需要进行 checkpoint。\n         - innodb 1.1.x版本之前，检查在用户查询线程中,会阻塞用户查询操作。\n         - innodb 1.2.x版本之后，检查放到了单独的 page cleaner 线程中,可通过 **innodb_lru_scan_depth** 控制lru列表中可用页的数量，默认是1024。\n    - async/sync flush checkpoint：重做日志文件不可用时，强制将一些页刷新到磁盘。达到重做日志文件的大小阈值。\n         * checkpoint age = redo_log_lsn - cp_lsn\n            低水位=75% * total_redo_log_file_size\n            高水位=90% * total_redo_log_file_size\n         * checkpoint age < 低水位 \n          \t不需要刷新\n         * 低水位  <=  checkpoint age <= 高水位\n          \t会强制进行 checkpoint ，触发async flush， 根据flush_list的顺序，刷新足够多的脏页，直到 checkpoint age < 低水位\n         * checkpoint age > 高水位\n            会强制进行 checkpoint ，触发sync flush 根据flush_list的顺序，刷新脏页, 直到 checkpoint age < 低水位\n    \n    - dirty page too much checkpoint：当缓冲池中脏页的数量占据一定百分比时，强制进行Checkpoint，用来保证缓冲池中有足够的页，通过 [innodb_max_dirty_pages_pct](#innodb_max_dirty_pages_pct) 参数控制。\n              \n<div style=\"text-align:center;color:#bfbfbf;font-size:16px;\">\n    <span>-------- 第二部分 --------</span>\n</div>\n                               \n# Master thread 工作方式\n\n## InnoDB 1.0.x 版本之前的 Master thread\nMaster thread 内部有多个循环 loop 组成：\n* 主循环 loop\n* 后台循环 backgroup loop\n* 刷新循环 flush loop\n* 暂停循环 suspend loop\n\n伪代码如下：\n\n```java\nvoid master_thread()\n{\n\tgoto loop;\n\t//主循环\n\tloop ：\n\tfor(int i = 0; i < 10; ++i){\n\t\tthread_sleep(1);\n\t\t//1. 日志缓冲刷新到磁盘，即使事务还没有提交\n\t\tdo log buffer flush to disk;\n\t\t//2. 根据前一秒IO操作小于5，合并插入缓冲\n\t\tif(last_one_second_ios < 5)\n\t\t\tdo merge at most 5 insert buffer;\n\t\t//3. 脏页的比例超过了阈值，刷新 100 个脏页到磁盘\n\t\tif(buf_get_modified_ratio_pct > innodb_max_dirty_pages_pct)\n\t\t\tdo buffer pool flush 100 dirty page;\n\t\t//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop\n\t\tif(no user activity)\n\t\t\tgoto backgroud loop;\n\t}\n\t\n\t//1. 前10秒IO操作小于200，刷新 100 个脏页到磁盘\n\tif(last_ten_second_ios < 200)\n\t\tdo buffer pool flush 100 dirty page;\n\t//2. 合并至多 5 个插入缓冲\n\tdo merge at most 5 insert buffer;\n\t//3. 将重做日志刷新到磁盘\n\tdo log buffer flush to disk;\n\t//4. 删除无用的 undo 页（每次最多尝试回收 20 个 undo 页）\n\tdo full purge;\n\t//5. 脏页比例超过 70% 刷新100 个脏页到磁盘，否则刷新 10 个脏页\n\tif ( buf_get_modified_ratio_pct ＞ 70 % )\n\t\tdo buffer pool flush 100 dirty page\n\telse\n\t\tbuffer pool flush 10 dirty page\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tgoto loop\n\t//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tbackground loop :\n\t//1. 删除无用的 undo 页\n\tdo full purge\n\t//2. 合并 20 个插入缓冲\n\tdo merge 20 insert buffer\n\t//3.如果有任务，跳转到主循环，否则跳转到刷新循环\n\tif not idle\t\n\t\tgoto loop\n\telse\n\t\tgoto flush loop\n\t\n\t//刷新循环\n\tflush loop :\n\t//不断刷新100个脏页，直到脏页比例没有超过阈值\n\tdo buffer pool flush 100 dirty page\n\tif ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )\n\t\tgoto flush loop\n\t//没有任务，跳转到暂停循环\n\tgoto suspend loop\n\t\n\t//暂停循环\n\tsuspend loop :\n\t//将主线程挂起，等待事件发生\n\tsuspend_thread()\n\twaiting event\n\tgoto loop;\n}\n\n```\n## InnoDB 1.2.x 版本之前的 Master thread\n1. 提高刷新脏页数量和合并插入数量，改善磁盘 IO 处理能力,刷新数量不再硬编码，而是使用百分比控制。\n    * 在合并插入缓冲的时候，合并插入缓冲的数量为 [innodb_io_capacity](#innodb_io_capacity) 的 5%\n    * 在从缓冲区刷新脏页的时候，刷新脏页的数量为 [innodb_io_capacity](#innodb_io_capacity)\n2. 增加了自适应刷新脏页功能。\n    * 1.0.x之前版本：脏页在缓冲池占比小于[innodb_max_dirty_pages_pct](#innodb_max_dirty_pages_pct)，不刷新脏页，大于则刷新100个脏页\n    * 1.0.x版本开始：引入[innodb_adaptive_flushing](#innodb_adaptive_flushing)参数，通过函数buf_flush_get_desired_flush_rate判断产生重做日志的速度来决定最适合的刷新脏页数量。\n3. full purge回收的Undo页的数量也不再硬编码，使用参数[innodb_purge_batch_size](#innodb_purge_batch_size)控制。\n\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_io_capacity\">innodb_io_capacity</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">表示磁盘IO的吞吐量,默认值是200</td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</span></td>\n    <td style=\"text-align:center\"> 1.0.x之前 </td>\n    <td colspan=\"3\">脏页在缓冲池中所占比率，默认值是90</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0.x开始</td>\n    <td colspan=\"3\">默认值是75<br>加快刷新脏页的频率，保证了磁盘IO的负载。</td>                       \n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_adaptive_flushing\">innodb_adaptive_flushing</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">是否自适应刷新脏页，默认为 ON</td>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_purge_batch_size\">innodb_purge_batch_size</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">清除 undo 页时,表示一次删除多少页,默认是 20</td>\n</tr>\n</table>   \n\nMaster Thread的伪代码变为了下面的形式：\n\n```java\nvoid master_thread()\n{\n\tgoto loop;\n\t//主循环\n\tloop ：\n\tfor(int i = 0; i < 10; ++i){\n\t\tthread_sleep(1);\n\t\t//1. 日志缓冲刷新到磁盘，即使事务还没有提交\n\t\tdo log buffer flush to disk;\n\t\t//2. 根据前一秒IO操作小于5%innodb_io_capacity，合并插入缓冲\n\t\tif(last_one_second_ios < 5%innodb_io_capacity)\n\t\t\tdo merge 5%innodb_io_capacity insert buffer;\n\t\t//3. 脏页的比例超过了阈值，刷新 100%innodb_io_capacity 个脏页到磁盘\n\t\tif(buf_get_modified_ratio_pct > innodb_max_dirty_pages_pct)\n\t\t\tdo buffer pool flush 100%innodb_io_capacity dirty page;\n\t\t//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop\n\t\tif(no user activity)\n\t\t\tgoto backgroud loop;\n\t}\n\t\n\t//1. 前10秒IO操作小于innodb_io_capacity，刷新 innodb_io_capacity 个脏页到磁盘\n\tif(last_ten_second_ios < innodb_io_capacity)\n\t\tdo buffer pool flush 100%innodb_io_capacity dirty page;\n\t//2. 合并至多 5%innodb_io_capacity 个插入缓冲\n\tdo merge at most 5%innodb_io_capacity insert buffer;\n\t//3. 将重做日志刷新到磁盘\n\tdo log buffer flush to disk;\n\t//4. 删除无用的 undo 页（每次最多尝试回收 5%innodb_io_capacity 个 undo 页）\n\tdo full purge;\n\t//5. 脏页比例超过 70% 刷新 100%innodb_io_capacity 个脏页到磁盘，\n\t// 否则刷新 10%innodb_io_capacity 个脏页\n\tif ( buf_get_modified_ratio_pct ＞ 70 % )\n\t\tdo buffer pool flush 100%innodb_io_capacity dirty page\n\telse\n\t\tbuffer pool flush 10%innodb_io_capacity dirty page\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tgoto loop\n\t//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tbackground loop :\n\t//1. 删除无用的 undo 页\n\tdo full purge\n\t//2. 合并 100%innodb_io_capacity 个插入缓冲\n\tdo merge 100%innodb_io_capacity insert buffer\n\t//3.如果有任务，跳转到主循环，否则跳转到刷新循环\n\tif not idle\t\n\t\tgoto loop\n\telse\n\t\tgoto flush loop\n\t\n\t//刷新循环\n\tflush loop :\n\t//不断刷新 100%innodb_io_capacity 个脏页，直到脏页比例没有超过阈值\n\tdo buffer pool flush 100%innodb_io_capacity dirty page\n\tif ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )\n\t\tgoto flush loop\n\t//没有任务，跳转到暂停循环\n\tgoto suspend loop\n\t\n\t//暂停循环\n\tsuspend loop :\n\t//将主线程挂起，等待事件发生\n\tsuspend_thread()\n\twaiting event\n\tgoto loop;\n}\n\n```\n## InnoDB 1.2.x 版本的 Master thread\n\nInnoDB 1.2.x 版本中再次对 Master Thread 进行了优化，伪代码如下：\n```java\nif InnoDB is idle\n//之前版本中每10秒的操作\nsrv_master_do_idle_tasks();\nelse\n//之前版本中每秒的操作\nsrv_master_do_active_tasks();\n```\n对于刷新脏页的操作，从Master Thread线程分离到一个单独的Page Cleaner Thread，从而减轻了Master Thread的工作，同时进一步提高了系统的并发性。\n\n\n# InnoDB 关键特性\n关键特性包括：\n* 插入缓冲 insert buffer\n* 两次写 double write\n* 自适应哈希索引 adaptive hash index\n* 异步 io async io\n* 刷新邻接页 flush neighbor page\n\n## 插入缓冲\n\n### 聚集索引（一级索引）\n表在存储的时候按照主键排序进行存储，不需要磁盘的随机读取，插入效率高。\n非叶子节点存放的是键值，叶子节点存放的是行数据，称之为数据页。\n\n### 辅助索引（二级索引）\n除了聚集索引之外的索引都可以称之为辅助索引，叶子节点中存放的是主键的键值。叶子节点的插入不再有序，这时就需要离散访问非聚集索引页，插入性能变低。\n一张表可以存在多个辅助索引，但是只能有一个聚集索引，通过辅助索引来查找对应的航记录的话，需要进行两步，第一步通过辅助索引来确定对应的主键，第二步通过相应的主键值在聚集索引中查询到对应的行记录，也就是进行两次B+树搜索。\n\n### 索引数据页的更新（针对二级索引）\n![index更新流程](Mysql02/index-update.png)\n表数据更新的同时也会更新对应的表的索引数据，所以：对表进行insert delete update时，很可能会产生大量的物理读(物理读索引数据页)\n\n![引入insertbuffer后index更新流程](Mysql02/insert-buffer.png)\n\n### 1. insert buffer\nInsert Buffer的使用流程：\n![Insert Buffer的使用流程](Mysql02/Insert-Buffer.svg)\n\n#### 插入缓冲的启用需要满足以下两个条件：\n1）索引是辅助索引（secondary index）\n2）索引不是唯一的：整个索引数据被切分为2部分，无法保证唯一性。\n\n#### insert buffer结构\ninsert buffer的数据结构是B+树，全局只有一颗B+树。\nB+树的非叶子节点是Search key，构造结构为(space,marker,offset)。\n* space：待插入记录所在表的表空间id。每个表都有唯一的表空间id，通过表空间id可以查出是哪张表。\n* marker：兼容之前的版本。\n* offset：在表空间中页的偏移量。\n\n当一个辅助索引要插入到(space,offset)中时，如果该页不在缓冲池中，则按上述规则构造一个search key，将该记录插入到insert buffer中。\n但是如果该页一直在insert buffer中，不断有记录插入到同一个索引页中，那么该索引页的空间就会逐渐缩小，要出现B+树节点的分裂情况，这时就不能进行insert buffer了。\n所以，我们需要一个机制来管理每个页面的剩余空闲空间，这就是`Insert buffer bitmap`。\n每隔page_size个页面，就是一个Insert buffer bitmap page。\n例如：若page_size = 16384(16k)，那么page_no为0，16384，32768，…的page，就是Insert buffer bitmap page，Bitmap page的功能，就是管理其后连续的page_size – 1个page的空间使用率。\n每个辅助索引页在Insert buffer bitmap中占用4bit。\n\n#### merge insert buffer 发生条件\n* 辅助索引页被读取到buffer pool中：正常的select查询操作，索引页被调入内存，该索引页对应在insert buffer中的索引更改记录就会发生merge操作。\n* Insert buffer bitmap page追踪到该索引页无可用空间时。\n* Master Thread。\n\n#### insert buffer 刷新到磁盘条件\n* 有一个后台线程，会认为数据库空闲时；\n* 数据库缓冲池不够用时；\n* 数据库正常关闭时；\n* redo log写满时：_几乎不会出现redo log写满，此时整个数据库处于无法写入的不可用状态_\n\n#### 插入缓冲主要带来如下两个坏处\n1）可能导致数据库宕机后实例恢复时间变长。如果应用程序执行大量的插入和更新操作，且涉及非唯一的聚集索引，一旦出现宕机，这时就有大量内存中的插入缓冲区数据没有合并至索引页中，导致实例恢复时间会很长。\n2）在写密集的情况下，插入缓冲会占用过多的缓冲池内存，默认情况下最大可以占用1/2，这在实际应用中会带来一定的问题。\n\n### 2. change buffer\n\nInnoDB从1.0.x版本开始引入了Change Buffer，可以将其视为Insert Buffer的升级。\n从这个版本开始，InnoDB可以对DML操作——Insert、Delete、Update`(delete+insert)`都进行缓冲，\n它们分别是：Insert Buffer, Delete Buffer,Purge Buffer。\n对一个记录进行 update 操作有两个过程\n\n* 将记录标记为删除：delete buffer\n* 将记录真正删除：pruge buffer\n\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffering\">innodb_change_buffering</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">用来开启各种Buffer选项，默认值是all<br>\n        <ul>\n        <li>inserts</li>\n        <li>deletes</li>\n        <li>purges</li>\n        <li>changes：开启 inserts 和 deletes</li>\n        <li>all：都开启</li>\n        <li>none：都不开启</li>\n        </ul>\n    </td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffer_max_size\">innodb_change_buffer_max_size</span></td>\n    <td style=\"text-align:center\"> 1.2.x开始 </td>\n    <td colspan=\"3\">用来控制change buffer最大使用内存数量<br>默认值为25,表示最多使用1/4的缓存池空间<br>该参数最大有效值是50</td>\n</tr>\n</table>  \n\n## 两次写\n提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。\n\n### 脏页刷新到磁盘风险\n\nIO的最小单位：\n* 数据库IO的最小单位是16K（MySQL默认，oracle是8K）\n* 文件系统IO的最小单位是4K（也有1K的）\n* 磁盘IO的最小单位是512字节\n\n因此，存在IO写入导致page损坏的风险：\n![IO风险](Mysql02/IO.png)\n\n提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。\n\n### Double write解决了什么问题\n一个数据页的大小是16K，假设在把内存中的脏页写到数据库的时候，写了8K突然宕机了，也就是说前8K数据是新的，后8K是旧的，那么磁盘数据库这个数据页就是不完整的，是一个坏掉的数据页，这种情况被称为部分`写失效`\n\n**那么可不可以通过 redo log 来进行恢复呢？**\nredo记录的是对页的修改，只能恢复校验完整（还没写）的页，不能修复坏掉的数据页，所以这个数据就丢失了，可能会造成数据不一致，所以需要double write。\n\n{% note info %}   \n为什么 redo log 不需要 doublewrite 的支持？\n因为 redo log 写入的单位就是 512 字节，也就是磁盘 IO 的最小单位，所以无所谓数据损坏。\n{% endnote %}   \n\n### 两次写工作流程\n![两次写流程](Mysql02/doublewrite.png)\ndoublewrite由两部分组成，一部分为内存中的doublewrite buffer，其大小为2MB，另一部分是磁盘上共享表空间(ibdata x)中连续的128个页，即2个区(extent)，大小也是2M。\n1. 当一系列机制触发数据缓冲池中的脏页刷新时，并不直接写入磁盘数据文件中，而是先拷贝至内存中的doublewrite buffer中；\n2. 接着从两次写缓冲区分两次写入磁盘共享表空间中(连续存储，顺序写，性能很高)，每次写1MB；\n3. 待第二步完成后，再将doublewrite buffer中的脏页数据写入实际的各个表空间文件(离散写)；(脏页数据固化后，即进行标记对应doublewrite数据可覆盖)\n\n现在我们来分析一下为什么 double write 可以生效。当宕机发生时，有那么几种情况：\n1. 磁盘还未写，此时可以通过 redo log 恢复；\n2. 磁盘正在进行从内存到共享表空间的写，此时数据文件中的页还没开始被写入，因此也同样可以通过 redo log 恢复；\n3. 磁盘正在写数据文件，此时共享表空间已经写完，可以从共享表空间拷贝页的副本到数据文件实现恢复。\n\n## 自适应哈希索引\n\n哈希：一次就可以定位数据\n\nB+树：取决于树的高度，生产环境一般是 3-4 层，所以需要查询 3-4 次\n\n自适应哈希索引 AHI（adaptive hash index）建立条件：观察到一个访问模式访问频繁，就会建立哈希索引\n* 通过该模式访问了 100 次（模式：where x = ?）\n* 页通过该模式访问了 N 次，其中 N = 页的记录总数⁄16\n\nInnoDB 存储引擎官方文档显示，启用 AHI 后,读取和写入速度可以提高 2 倍，辅助索引的连接操作性能可以提高 5 倍。\n\n## 异步IO\n为了提高磁盘的操作性能，当前的数据库系统都采用异步IO的方式处理磁盘操作。用户可以在发出一个IO请求胡立即再发出另一个IO请求，当全部IO请求发送完毕后，等待所有IO操作完成，这就是AIO。\nAIO的另一个优势是可以进行IO Merge操作，也就是将多个IO合并为1个IO, 这样可以提高IOPS(Input/Output Per Second)的性能。\n\n例如：用户访问页的（space, page_no)为(8,6) (8,7) (8,8)，每个页的大小为16KB，同步IO需要3次IO操作。可以优化为从(8,6)开始读取48KB。\n\n## 刷新临接页\n\n当刷新一个脏页时，InnoDB会检查该页所在extent的所有页，如果是脏页，一起刷新。\n\n<table>\n    <tr>\n        <th colspan=\"2\">参数</th>\n        <th>版本</th>\n        <th colspan=\"3\">作用</th>\n    </tr>\n    <tr>\n        <th colspan=\"2\" style=\"text-align:center\" >innodb_flush_neighbors</th>\n        <td style=\"text-align:center\">1.2.x开始</td>\n        <td colspan=\"3\">控制是否启用该特性</td>\n    </tr>\n</table> \n\n\n# 参考：\n* http://oohcode.com/2015/10/14/InnoDB-Key-Features/\n* https://chyroc.cn/posts/innodb-storage-engine-reading-1/\n* https://www.cnblogs.com/zhoujinyi/archive/2013/04/11/2988923.html\n* http://huzb.me/2019/01/14/%E6%8F%92%E5%85%A5%E7%BC%93%E5%86%B2%E3%80%81%E4%B8%A4%E6%AC%A1%E5%86%99%E5%92%8C%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/\n* https://blog.csdn.net/tanliqing2010/article/details/81509539\n* https://www.cnblogs.com/geaozhang/p/7341333.html\n* https://draveness.me/mysql-innodb\n* http://richfisher.me/blog/2017/12/18/innodb-notes/\n* https://www.docs4dev.com/docs/zh/mysql/5.7/reference/innodb-architecture.html#innodb%E6%9E%B6%E6%9E%84\n* MySQL技术内幕：InnoDB存储引擎(第2版)","slug":"Mysql02","published":1,"updated":"2019-08-27T13:08:43.968Z","layout":"post","photos":[],"link":"","_id":"ck4859yd5004wt0fyazelh5h3","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ul>\n<li>InnoDB存储引擎最早由Innobase Oy公司开发，被包括在MySQL数据库所有的二进制发行版本中，</li>\n<li>从MySQL 5.5版本开始是默认的表存储引擎<font color=\"gray\">（之前的版本InnoDB存储引擎仅在Windows下为默认的存储引擎）</font></li>\n<li>第一个完整支持ACID事务的MySQL存储引擎<font color=\"gray\">（BDB是第一个支持事务的MySQL存储引擎，现在已经停止开发）</font></li>\n<li>特点：行锁设计、支持 MVCC、支持外键、提供一致性非锁定读、有效利用内存和 CPU<a id=\"more\"></a>\n\n</li>\n</ul>\n<h1 id=\"体系架构\"><a href=\"#体系架构\" class=\"headerlink\" title=\"体系架构\"></a>体系架构</h1><p><img src=\"/2019/07/31/Mysql02/innodb-Architecture.png\" alt=\"innoDB体系结构图\"><br>InnoDB存储引擎是由内存池、后台线程、磁盘存储三大部分组成。</p>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>InnoDB 使用的是多线程模型, 其后台有多个不同的线程负责处理不同的任务</p>\n<h3 id=\"Master-Thread\"><a href=\"#Master-Thread\" class=\"headerlink\" title=\"Master Thread\"></a>Master Thread</h3><p>Master Thread是最核心的一个后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性。包括脏页刷新、合并插入缓冲、UNDO页的回收等。</p>\n<h3 id=\"IO-Thread\"><a href=\"#IO-Thread\" class=\"headerlink\" title=\"IO Thread\"></a>IO Thread</h3><p>在 InnoDB 存储引擎中大量使用了异步IO(Async IO)来处理写IO请求, IO Thread的工作主要是负责这些 IO 请求的回调。</p>\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">线程</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之前 </td>\n    <td colspan=\"4\">4 个 io thread：write，read，insert buffer，log IO Thread.\n    <ul>\n        <li>在Linux下，IO Thread的数量不能进行调整</li>\n        <li>在Windows下可以通过参数 innodb_file_io_threads 来增大IO Thread</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之后 </td>\n    <td colspan=\"4\">read 和 write IO thread 分别增大到了 4 个<br>\n    <ul>\n    <li>分别使用 innodb_read_io_threads 和 innodb_write_io_threads 设置线程数</li>\n    </ul>\n    </td>\n</tr>\n</table>  \n\n<h3 id=\"Purge-Thread\"><a href=\"#Purge-Thread\" class=\"headerlink\" title=\"Purge Thread\"></a>Purge Thread</h3><p>事务提交后，其所使用的undo log可能不再需要，因此需要Purge Thread来回收已经分配并使用的UNDO页。</p>\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之前 </td>\n    <td colspan=\"4\">purge 操作在 master thread 内完成</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之后 </td>\n    <td colspan=\"4\">purge 可以独立到单独的线程,减轻 master thread 工作,提高 cpu 利用率和提高性能<br>\n    <ul>\n    <li>MySQL数据库的配置文件<code>[mysqld]</code>中添加如下命令来启用独立的Purge Thread：</li>\n    <li>innodb_purge_threads=1 </li>\n    <li>1.1版本中，即使将 innodb_purge_threads 设为大于1，InnoDB存储引擎启动时也会将其设为1</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.2之后</td>\n    <td colspan=\"4\">支持多个Purge Thread, 这样做可以加快UNDO页的回收，也能更进一步利用磁盘的随机读取性能</td>\n</tr>\n</table>                                  \n\n<h3 id=\"Page-Cleaner-Thread\"><a href=\"#Page-Cleaner-Thread\" class=\"headerlink\" title=\"Page Cleaner Thread\"></a>Page Cleaner Thread</h3><p>Page Cleaner Thread的作用是取代Master Thread中脏页刷新的操作，<br>减轻原Master Thread的工作及对于用户查询线程的阻塞，进一步提高性能。</p>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>innoDB内存主要由<a href=\"#缓冲池\">缓冲池(innodb buffer pool)</a>、<a href=\"#重做日志缓冲\">重做日志缓冲(redo log buffer)</a>、<a href=\"#额外的内存池\">额外内存池组成(innodb additional men pool size)</a>组成</p>\n<h3 id=\"缓冲池\"><a href=\"#缓冲池\" class=\"headerlink\" title=\"缓冲池\"></a>缓冲池</h3><p>缓冲池是主存储器中的一个区域，用于在访问时缓存表和索引数据。缓冲池允许直接从内存处理常用数据，从而加快处理速度。<br>在专用服务器上，通常会将最多80％的物理内存分配给缓冲池。<br>读取流程：<br>     <img src=\"/2019/07/31/Mysql02/read.png\" alt=\"流程图\"><br>更新流程：<br>     <img src=\"/2019/07/31/Mysql02/write.png\" alt=\"流程图\"></p>\n<p>因此缓冲池的大小影响数据库的整体性能。</p>\n<div class=\"note info\"><p>由于32位操作系统的限制，在该系统下最多将该值设置为3G。<br>用户可以打开操作系统的<code>PAE</code>选项来获得32位操作系统下最大64GB内存的支持。<br>为了让数据库使用更多的内存,建议数据库系统都采用 64 位操作系统。</p></div>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">版本</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">innodb_buffer_pool_instances</td>\n<td align=\"center\">从InnoDB 1.0.x开始</td>\n<td align=\"center\">配置多个缓冲池实例，默认为1</td>\n</tr>\n</tbody></table>\n<h4 id=\"缓冲池中缓存的数据页类型\"><a href=\"#缓冲池中缓存的数据页类型\" class=\"headerlink\" title=\"缓冲池中缓存的数据页类型\"></a>缓冲池中缓存的数据页类型</h4><ul>\n<li>索引页(index page)：缓存数据表索引</li>\n<li>数据页(data page)：缓存数据页，占缓冲池的绝大部分</li>\n<li>undo页(undo Log Page)：undo页是保存事务，为回滚做准备的。</li>\n<li><a href=\"#插入缓冲\">插入缓冲</a>（insert buffer）：插入数据时要先插入到缓存池中。</li>\n<li>自适应哈希索引（adaptive hash index）： 除了B+ Tree索引外，在缓冲池还会维护一个哈希索引，以便在缓冲池中快速找到数据页。</li>\n<li>InnoDB存储的锁信息（lock info）</li>\n<li>数据字典信息（data dictionary）<br>  在MySQL中，数据字典信息内容就包括表结构、数据库名或表名、字段的数据类型、视图、索引、表字段信息、存储过程、触发器等内容。<br>  InnoDB有自己的表缓存，可以称为表定义缓存或者数据字典。当InnoDB打开一张表，就增加一个对应的对象到数据字典。</li>\n</ul>\n<h4 id=\"缓冲池管理方式\"><a href=\"#缓冲池管理方式\" class=\"headerlink\" title=\"缓冲池管理方式\"></a>缓冲池管理方式</h4><p><img src=\"/2019/07/31/Mysql02/three-list2.png\" alt=\"三种list\"></p>\n<ol>\n<li><p><strong>Free list</strong><br>当数据库刚启动时，LRU列表是空的，这时页都存放在Free list中。<br>当需要从缓冲池中分页时，从Free list中查找是否有可用的空闲页，若有则将该页从Free列表中删除，放入到LRU列表中,维持页数守恒。</p>\n</li>\n<li><p><strong>LRU list</strong><br> <strong>LRU算法</strong>：最频繁使用页在LRU列表的前端，最少使用的页在尾端。首先释放LRU列表中的尾端的页。缓冲池中页的大小默认为16KB。<br> <strong>InnoDB优化的LRU算法(midpoint insertion strategy)</strong>：将新读取到的页不放在首部，而是中间部位 <code>midpoint</code> 位置。目标是确保频繁访问”热”页面保留在缓冲池中。<br> <img src=\"/2019/07/31/Mysql02/innodb-buffer-pool-list.jpg\" alt=\"lru\"></p>\n <table>\n <tr>\n     <th>参数</th>\n     <th colspan=\"2\">作用</th>\n </tr>\n <tr>\n     <td style=\"text-align:center\"> innodb_old_blocks_pct </td>\n     <td colspan=\"2\">控制LRU列表中 old list 的百分比。<br>\n        默认值为 37，对应于原始固定比率3/8。<br>\n        值范围是 5（缓冲池中的新页面很快就会老化）到 95。\n     </td>\n </tr>\n <tr>\n     <td style=\"text-align:center\"> innodb_old_blocks_time </td>\n     <td colspan=\"2\">指定第一次访问页面之后的时间窗口（ms）<br>\n        在此期间可以访问该页面而不移动到LRU列表的前端<br>\n        默认值为 1000 ms\n     </td>\n </tr>\n </table> \n\n<p> 默认情况下，算法操作如下：</p>\n<ul>\n<li>在默认配置下， <code>midpoint</code>位置在LRU list 的5/8处。</li>\n<li><code>midpoint</code>是new sublist的尾部与old sublist的头部相交的边界。</li>\n<li>当 InnoDB 将页面读入缓冲池时，将页插入<code>midpoint</code>位置(old sublist的头部)。</li>\n<li>访问old sublist中的页 &amp;&amp; 该页在old sublist中的停留时间超过innodb_old_blocks_time设置的时间，使其变<code>young</code>,将其移动到缓冲池的头部(new sublist的头部)。</li>\n<li>当页从LRU列表的old部分加入到new部分时，称此时发生的操作为<code>page made young</code>，而因为innodb_old_blocks_time的设置而导致页没有从old部分移动到new部分的操作称为<code>page not made young</code></li>\n<li>在数据库操作中，被访问的页将移到new sublist的表头，这样一来，在new sublist中的未被访问的节点将逐渐往表尾移动，当移动过中点，将变为old list的节点。当表满时，old list末尾的页将会被移除。</li>\n</ul>\n<div class=\"note warning\"><p>为什么不采用朴素的LRU？<br>因为某些SQL操作会访问很多页，甚至全部页，但仅仅在该次查询操作，并不是活跃的热点数据。可能会使缓冲池中的页被刷新出，从而影响缓冲池的效率。</p></div>  \n\n<ol start=\"3\">\n<li><strong>Flush list</strong><br>在LRU类表的页被修改后，称为脏页（Dirty Page），即缓存和硬盘的页数据不一致。<br>数据库会通过<code>CHECKPOINT</code>机制将脏页刷新回磁盘，Flush list中的页即为脏页列表。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"重做日志缓冲\"><a href=\"#重做日志缓冲\" class=\"headerlink\" title=\"重做日志缓冲\"></a>重做日志缓冲</h3>   <div class=\"note info\"><p><strong>什么是redo log？</strong><br>当数据库对数据做修改的时候，需要把数据页从磁盘读到buffer pool中，然后在buffer pool中进行修改，那么这个时候buffer pool中的数据页就与磁盘上的数据页内容不一致，称buffer pool的数据页为dirty page 脏数据。<br>如果发生非正常的DB服务重启，那么这些数据并没有同步到磁盘文件中（注意，同步到磁盘文件是个随机IO），会发生数据丢失。<br>如果这个时候，能够有一个文件，当缓冲池中的data page变更结束后，把相应修改记录记录到这个文件（注意，记录日志是顺序IO），那么当DB服务发生crash的情况，恢复DB的时候，也可以根据这个文件的记录内容，重新应用到磁盘文件，数据保持一致。<br>这个文件就是redo log ，用于记录 数据修改后的记录，顺序记录。<br><br><strong>什么是undo log？</strong><br>undo日志用于存放数据修改被修改前的值。<br>假设修改表中 id=1 的行数据，把Name=’B’ 修改为Name = ‘B2’ ，那么undo日志就会用来存放Name=’B’的记录，如果这个修改出现异常，可以使用undo日志来实现回滚操作，保证事务的一致性。</p></div>  \n\n<p><img src=\"/2019/07/31/Mysql02/redo-buffer.png\" alt=\"lru\"></p>\n<p>  重做日志缓冲不需要设置很大，通常情况下8M能满足大部分的应用场景。重做日志支持以下三种情况触发刷新：</p>\n<ul>\n<li>Master Thread每一秒将重做日志缓冲刷新到重做日志文件</li>\n<li>每次事务提交时将重做日志缓冲刷新到重做日志文件</li>\n<li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件</li>\n</ul>\n<h3 id=\"额外的内存池\"><a href=\"#额外的内存池\" class=\"headerlink\" title=\"额外的内存池\"></a>额外的内存池</h3><p>   在InnoDB存储引擎中，对内存的管理是通过一种称为内存堆的方式进行的。在对一些数据结构本身的内存进行分配时，需要从额外的内存池中进行申请，当该区域的内存不够时，会从缓冲池中进行申请。</p>\n<h1 id=\"Checkpoint技术\"><a href=\"#Checkpoint技术\" class=\"headerlink\" title=\"Checkpoint技术\"></a>Checkpoint技术</h1><div class=\"note info\"><p><strong>什么是Checkpoint？</strong><br>是一个数据库事件(event)，这个事件激活以后会触发数据库写进程(DBWR)将脏数据块写到磁盘中。                           </p>\n<p><strong>为什么需要Checkpoint技术？</strong><br>innoDB在事务提交时，先写重做日志，再修改内存数据这样，就产生了脏页。既然有重做日志保证数据持久性，查询时也可以从缓冲池页中取数据，那为什么还要刷新脏页到磁盘呢？如果重做日志可以无限增大，同时缓冲池足够大，能够缓存所有数据，那么是不需要将缓冲池中的脏页刷新到磁盘。但是，会有以下几个问题：<br>1) 服务器内存有限，缓冲池不够用，无法缓存全部数据<br>2) 重做日志无限增大成本要求太高<br>3) 宕机时如果重做全部日志恢复时间过长            </p>\n<p><strong>Checkpoint 解决了什么问题？</strong><br>1) 缩短短数据库的恢复时间<br>2) 缓冲池不够时，将脏页刷新到磁盘<br>3) 重做日志不可用时，刷新脏页</p></div> \n\n<p>对于InnoDB存储引擎而言，其是通过LSN（Log Sequence Number）来标记版本的。每个页有LSN，重做日志中也有LSN，Checkpoint也有LSN。</p>\n<p>innodb 内部有两种 checkpoint：</p>\n<ol>\n<li><p><strong>sharp checkpoint</strong>：数据库关闭的时候将<code>所有的脏页</code>刷回到磁盘，默认方式，参数 innodb_fast_shudown=1</p>\n</li>\n<li><p><strong>fuzzy checkpoint</strong>：只刷新<code>部分脏页</code></p>\n<ul>\n<li><p>master thread checkpoint：master thread 异步的以每秒或者每 10 秒的速度从缓冲池的脏页列表中刷新一定比列的也回磁盘</p>\n<ul>\n<li>周期性，异步，读取flush list，找到脏页，写入磁盘</li>\n</ul>\n</li>\n<li><p>flush_lru_list checkpoint：InnoDB要保证LRU列表中需要有差不多100个空闲页可供使用。如果没有这么多，就会将 lru list 尾部的页移除。如果这些页有脏页，就需要进行 checkpoint。</p>\n<ul>\n<li>innodb 1.1.x版本之前，检查在用户查询线程中,会阻塞用户查询操作。</li>\n<li>innodb 1.2.x版本之后，检查放到了单独的 page cleaner 线程中,可通过 <strong>innodb_lru_scan_depth</strong> 控制lru列表中可用页的数量，默认是1024。</li>\n</ul>\n</li>\n<li><p>async/sync flush checkpoint：重做日志文件不可用时，强制将一些页刷新到磁盘。达到重做日志文件的大小阈值。</p>\n<ul>\n<li>checkpoint age = redo_log_lsn - cp_lsn<br> 低水位=75% * total_redo_log_file_size<br> 高水位=90% * total_redo_log_file_size</li>\n<li>checkpoint age &lt; 低水位<br>   不需要刷新</li>\n<li>低水位  &lt;=  checkpoint age &lt;= 高水位<br>   会强制进行 checkpoint ，触发async flush， 根据flush_list的顺序，刷新足够多的脏页，直到 checkpoint age &lt; 低水位</li>\n<li>checkpoint age &gt; 高水位<br> 会强制进行 checkpoint ，触发sync flush 根据flush_list的顺序，刷新脏页, 直到 checkpoint age &lt; 低水位</li>\n</ul>\n</li>\n<li><p>dirty page too much checkpoint：当缓冲池中脏页的数量占据一定百分比时，强制进行Checkpoint，用来保证缓冲池中有足够的页，通过 <a href=\"#innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</a> 参数控制。</p>\n</li>\n</ul>\n</li>\n</ol>\n<div style=\"text-align:center;color:#bfbfbf;font-size:16px;\">\n    <span>-------- 第二部分 --------</span>\n</div>\n\n<h1 id=\"Master-thread-工作方式\"><a href=\"#Master-thread-工作方式\" class=\"headerlink\" title=\"Master thread 工作方式\"></a>Master thread 工作方式</h1><h2 id=\"InnoDB-1-0-x-版本之前的-Master-thread\"><a href=\"#InnoDB-1-0-x-版本之前的-Master-thread\" class=\"headerlink\" title=\"InnoDB 1.0.x 版本之前的 Master thread\"></a>InnoDB 1.0.x 版本之前的 Master thread</h2><p>Master thread 内部有多个循环 loop 组成：</p>\n<ul>\n<li>主循环 loop</li>\n<li>后台循环 backgroup loop</li>\n<li>刷新循环 flush loop</li>\n<li>暂停循环 suspend loop</li>\n</ul>\n<p>伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">master_thread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">\t<span class=\"comment\">//主循环</span></span><br><span class=\"line\">\tloop ：</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)&#123;</span><br><span class=\"line\">\t\tthread_sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 日志缓冲刷新到磁盘，即使事务还没有提交</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 根据前一秒IO操作小于5，合并插入缓冲</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last_one_second_ios &lt; <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> merge at most <span class=\"number\">5</span> insert buffer;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 脏页的比例超过了阈值，刷新 100 个脏页到磁盘</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buf_get_modified_ratio_pct &gt; innodb_max_dirty_pages_pct)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(no user activity)</span><br><span class=\"line\">\t\t\tgoto backgroud loop;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//1. 前10秒IO操作小于200，刷新 100 个脏页到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(last_ten_second_ios &lt; <span class=\"number\">200</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page;</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并至多 5 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge at most <span class=\"number\">5</span> insert buffer;</span><br><span class=\"line\">\t<span class=\"comment\">//3. 将重做日志刷新到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t<span class=\"comment\">//4. 删除无用的 undo 页（每次最多尝试回收 20 个 undo 页）</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge;</span><br><span class=\"line\">\t<span class=\"comment\">//5. 脏页比例超过 70% 刷新100 个脏页到磁盘，否则刷新 10 个脏页</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ <span class=\"number\">70</span> % )</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tbuffer pool flush <span class=\"number\">10</span> dirty page</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tgoto loop</span><br><span class=\"line\">\t<span class=\"comment\">//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tbackground loop :</span><br><span class=\"line\">\t<span class=\"comment\">//1. 删除无用的 undo 页</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并 20 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge <span class=\"number\">20</span> insert buffer</span><br><span class=\"line\">\t<span class=\"comment\">//3.如果有任务，跳转到主循环，否则跳转到刷新循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> not idle\t</span><br><span class=\"line\">\t\tgoto loop</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//刷新循环</span></span><br><span class=\"line\">\tflush loop :</span><br><span class=\"line\">\t<span class=\"comment\">//不断刷新100个脏页，直到脏页比例没有超过阈值</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )</span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t<span class=\"comment\">//没有任务，跳转到暂停循环</span></span><br><span class=\"line\">\tgoto suspend loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//暂停循环</span></span><br><span class=\"line\">\tsuspend loop :</span><br><span class=\"line\">\t<span class=\"comment\">//将主线程挂起，等待事件发生</span></span><br><span class=\"line\">\tsuspend_thread()</span><br><span class=\"line\">\twaiting event</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"InnoDB-1-2-x-版本之前的-Master-thread\"><a href=\"#InnoDB-1-2-x-版本之前的-Master-thread\" class=\"headerlink\" title=\"InnoDB 1.2.x 版本之前的 Master thread\"></a>InnoDB 1.2.x 版本之前的 Master thread</h2><ol>\n<li>提高刷新脏页数量和合并插入数量，改善磁盘 IO 处理能力,刷新数量不再硬编码，而是使用百分比控制。<ul>\n<li>在合并插入缓冲的时候，合并插入缓冲的数量为 <a href=\"#innodb_io_capacity\">innodb_io_capacity</a> 的 5%</li>\n<li>在从缓冲区刷新脏页的时候，刷新脏页的数量为 <a href=\"#innodb_io_capacity\">innodb_io_capacity</a></li>\n</ul>\n</li>\n<li>增加了自适应刷新脏页功能。<ul>\n<li>1.0.x之前版本：脏页在缓冲池占比小于<a href=\"#innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</a>，不刷新脏页，大于则刷新100个脏页</li>\n<li>1.0.x版本开始：引入<a href=\"#innodb_adaptive_flushing\">innodb_adaptive_flushing</a>参数，通过函数buf_flush_get_desired_flush_rate判断产生重做日志的速度来决定最适合的刷新脏页数量。</li>\n</ul>\n</li>\n<li>full purge回收的Undo页的数量也不再硬编码，使用参数<a href=\"#innodb_purge_batch_size\">innodb_purge_batch_size</a>控制。</li>\n</ol>\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_io_capacity\">innodb_io_capacity</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">表示磁盘IO的吞吐量,默认值是200</td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</span></td>\n    <td style=\"text-align:center\"> 1.0.x之前 </td>\n    <td colspan=\"3\">脏页在缓冲池中所占比率，默认值是90</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0.x开始</td>\n    <td colspan=\"3\">默认值是75<br>加快刷新脏页的频率，保证了磁盘IO的负载。</td>                       \n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_adaptive_flushing\">innodb_adaptive_flushing</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">是否自适应刷新脏页，默认为 ON</td>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_purge_batch_size\">innodb_purge_batch_size</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">清除 undo 页时,表示一次删除多少页,默认是 20</td>\n</tr>\n</table>   \n\n<p>Master Thread的伪代码变为了下面的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">master_thread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">\t<span class=\"comment\">//主循环</span></span><br><span class=\"line\">\tloop ：</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)&#123;</span><br><span class=\"line\">\t\tthread_sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 日志缓冲刷新到磁盘，即使事务还没有提交</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 根据前一秒IO操作小于5%innodb_io_capacity，合并插入缓冲</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last_one_second_ios &lt; <span class=\"number\">5</span>%innodb_io_capacity)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> merge <span class=\"number\">5</span>%innodb_io_capacity insert buffer;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 脏页的比例超过了阈值，刷新 100%innodb_io_capacity 个脏页到磁盘</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buf_get_modified_ratio_pct &gt; innodb_max_dirty_pages_pct)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(no user activity)</span><br><span class=\"line\">\t\t\tgoto backgroud loop;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//1. 前10秒IO操作小于innodb_io_capacity，刷新 innodb_io_capacity 个脏页到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(last_ten_second_ios &lt; innodb_io_capacity)</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page;</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并至多 5%innodb_io_capacity 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge at most <span class=\"number\">5</span>%innodb_io_capacity insert buffer;</span><br><span class=\"line\">\t<span class=\"comment\">//3. 将重做日志刷新到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t<span class=\"comment\">//4. 删除无用的 undo 页（每次最多尝试回收 5%innodb_io_capacity 个 undo 页）</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge;</span><br><span class=\"line\">\t<span class=\"comment\">//5. 脏页比例超过 70% 刷新 100%innodb_io_capacity 个脏页到磁盘，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 否则刷新 10%innodb_io_capacity 个脏页</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ <span class=\"number\">70</span> % )</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tbuffer pool flush <span class=\"number\">10</span>%innodb_io_capacity dirty page</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tgoto loop</span><br><span class=\"line\">\t<span class=\"comment\">//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tbackground loop :</span><br><span class=\"line\">\t<span class=\"comment\">//1. 删除无用的 undo 页</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并 100%innodb_io_capacity 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge <span class=\"number\">100</span>%innodb_io_capacity insert buffer</span><br><span class=\"line\">\t<span class=\"comment\">//3.如果有任务，跳转到主循环，否则跳转到刷新循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> not idle\t</span><br><span class=\"line\">\t\tgoto loop</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//刷新循环</span></span><br><span class=\"line\">\tflush loop :</span><br><span class=\"line\">\t<span class=\"comment\">//不断刷新 100%innodb_io_capacity 个脏页，直到脏页比例没有超过阈值</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )</span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t<span class=\"comment\">//没有任务，跳转到暂停循环</span></span><br><span class=\"line\">\tgoto suspend loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//暂停循环</span></span><br><span class=\"line\">\tsuspend loop :</span><br><span class=\"line\">\t<span class=\"comment\">//将主线程挂起，等待事件发生</span></span><br><span class=\"line\">\tsuspend_thread()</span><br><span class=\"line\">\twaiting event</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"InnoDB-1-2-x-版本的-Master-thread\"><a href=\"#InnoDB-1-2-x-版本的-Master-thread\" class=\"headerlink\" title=\"InnoDB 1.2.x 版本的 Master thread\"></a>InnoDB 1.2.x 版本的 Master thread</h2><p>InnoDB 1.2.x 版本中再次对 Master Thread 进行了优化，伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> InnoDB is idle</span><br><span class=\"line\"><span class=\"comment\">//之前版本中每10秒的操作</span></span><br><span class=\"line\">srv_master_do_idle_tasks();</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"comment\">//之前版本中每秒的操作</span></span><br><span class=\"line\">srv_master_do_active_tasks();</span><br></pre></td></tr></table></figure>\n\n<p>对于刷新脏页的操作，从Master Thread线程分离到一个单独的Page Cleaner Thread，从而减轻了Master Thread的工作，同时进一步提高了系统的并发性。</p>\n<h1 id=\"InnoDB-关键特性\"><a href=\"#InnoDB-关键特性\" class=\"headerlink\" title=\"InnoDB 关键特性\"></a>InnoDB 关键特性</h1><p>关键特性包括：</p>\n<ul>\n<li>插入缓冲 insert buffer</li>\n<li>两次写 double write</li>\n<li>自适应哈希索引 adaptive hash index</li>\n<li>异步 io async io</li>\n<li>刷新邻接页 flush neighbor page</li>\n</ul>\n<h2 id=\"插入缓冲\"><a href=\"#插入缓冲\" class=\"headerlink\" title=\"插入缓冲\"></a>插入缓冲</h2><h3 id=\"聚集索引（一级索引）\"><a href=\"#聚集索引（一级索引）\" class=\"headerlink\" title=\"聚集索引（一级索引）\"></a>聚集索引（一级索引）</h3><p>表在存储的时候按照主键排序进行存储，不需要磁盘的随机读取，插入效率高。<br>非叶子节点存放的是键值，叶子节点存放的是行数据，称之为数据页。</p>\n<h3 id=\"辅助索引（二级索引）\"><a href=\"#辅助索引（二级索引）\" class=\"headerlink\" title=\"辅助索引（二级索引）\"></a>辅助索引（二级索引）</h3><p>除了聚集索引之外的索引都可以称之为辅助索引，叶子节点中存放的是主键的键值。叶子节点的插入不再有序，这时就需要离散访问非聚集索引页，插入性能变低。<br>一张表可以存在多个辅助索引，但是只能有一个聚集索引，通过辅助索引来查找对应的航记录的话，需要进行两步，第一步通过辅助索引来确定对应的主键，第二步通过相应的主键值在聚集索引中查询到对应的行记录，也就是进行两次B+树搜索。</p>\n<h3 id=\"索引数据页的更新（针对二级索引）\"><a href=\"#索引数据页的更新（针对二级索引）\" class=\"headerlink\" title=\"索引数据页的更新（针对二级索引）\"></a>索引数据页的更新（针对二级索引）</h3><p><img src=\"/2019/07/31/Mysql02/index-update.png\" alt=\"index更新流程\"><br>表数据更新的同时也会更新对应的表的索引数据，所以：对表进行insert delete update时，很可能会产生大量的物理读(物理读索引数据页)</p>\n<p><img src=\"/2019/07/31/Mysql02/insert-buffer.png\" alt=\"引入insertbuffer后index更新流程\"></p>\n<h3 id=\"1-insert-buffer\"><a href=\"#1-insert-buffer\" class=\"headerlink\" title=\"1. insert buffer\"></a>1. insert buffer</h3><p>Insert Buffer的使用流程：<br><img src=\"/2019/07/31/Mysql02/Insert-Buffer.svg\" alt=\"Insert Buffer的使用流程\"></p>\n<h4 id=\"插入缓冲的启用需要满足以下两个条件：\"><a href=\"#插入缓冲的启用需要满足以下两个条件：\" class=\"headerlink\" title=\"插入缓冲的启用需要满足以下两个条件：\"></a>插入缓冲的启用需要满足以下两个条件：</h4><p>1）索引是辅助索引（secondary index）<br>2）索引不是唯一的：整个索引数据被切分为2部分，无法保证唯一性。</p>\n<h4 id=\"insert-buffer结构\"><a href=\"#insert-buffer结构\" class=\"headerlink\" title=\"insert buffer结构\"></a>insert buffer结构</h4><p>insert buffer的数据结构是B+树，全局只有一颗B+树。<br>B+树的非叶子节点是Search key，构造结构为(space,marker,offset)。</p>\n<ul>\n<li>space：待插入记录所在表的表空间id。每个表都有唯一的表空间id，通过表空间id可以查出是哪张表。</li>\n<li>marker：兼容之前的版本。</li>\n<li>offset：在表空间中页的偏移量。</li>\n</ul>\n<p>当一个辅助索引要插入到(space,offset)中时，如果该页不在缓冲池中，则按上述规则构造一个search key，将该记录插入到insert buffer中。<br>但是如果该页一直在insert buffer中，不断有记录插入到同一个索引页中，那么该索引页的空间就会逐渐缩小，要出现B+树节点的分裂情况，这时就不能进行insert buffer了。<br>所以，我们需要一个机制来管理每个页面的剩余空闲空间，这就是<code>Insert buffer bitmap</code>。<br>每隔page_size个页面，就是一个Insert buffer bitmap page。<br>例如：若page_size = 16384(16k)，那么page_no为0，16384，32768，…的page，就是Insert buffer bitmap page，Bitmap page的功能，就是管理其后连续的page_size – 1个page的空间使用率。<br>每个辅助索引页在Insert buffer bitmap中占用4bit。</p>\n<h4 id=\"merge-insert-buffer-发生条件\"><a href=\"#merge-insert-buffer-发生条件\" class=\"headerlink\" title=\"merge insert buffer 发生条件\"></a>merge insert buffer 发生条件</h4><ul>\n<li>辅助索引页被读取到buffer pool中：正常的select查询操作，索引页被调入内存，该索引页对应在insert buffer中的索引更改记录就会发生merge操作。</li>\n<li>Insert buffer bitmap page追踪到该索引页无可用空间时。</li>\n<li>Master Thread。</li>\n</ul>\n<h4 id=\"insert-buffer-刷新到磁盘条件\"><a href=\"#insert-buffer-刷新到磁盘条件\" class=\"headerlink\" title=\"insert buffer 刷新到磁盘条件\"></a>insert buffer 刷新到磁盘条件</h4><ul>\n<li>有一个后台线程，会认为数据库空闲时；</li>\n<li>数据库缓冲池不够用时；</li>\n<li>数据库正常关闭时；</li>\n<li>redo log写满时：<em>几乎不会出现redo log写满，此时整个数据库处于无法写入的不可用状态</em></li>\n</ul>\n<h4 id=\"插入缓冲主要带来如下两个坏处\"><a href=\"#插入缓冲主要带来如下两个坏处\" class=\"headerlink\" title=\"插入缓冲主要带来如下两个坏处\"></a>插入缓冲主要带来如下两个坏处</h4><p>1）可能导致数据库宕机后实例恢复时间变长。如果应用程序执行大量的插入和更新操作，且涉及非唯一的聚集索引，一旦出现宕机，这时就有大量内存中的插入缓冲区数据没有合并至索引页中，导致实例恢复时间会很长。<br>2）在写密集的情况下，插入缓冲会占用过多的缓冲池内存，默认情况下最大可以占用1/2，这在实际应用中会带来一定的问题。</p>\n<h3 id=\"2-change-buffer\"><a href=\"#2-change-buffer\" class=\"headerlink\" title=\"2. change buffer\"></a>2. change buffer</h3><p>InnoDB从1.0.x版本开始引入了Change Buffer，可以将其视为Insert Buffer的升级。<br>从这个版本开始，InnoDB可以对DML操作——Insert、Delete、Update<code>(delete+insert)</code>都进行缓冲，<br>它们分别是：Insert Buffer, Delete Buffer,Purge Buffer。<br>对一个记录进行 update 操作有两个过程</p>\n<ul>\n<li>将记录标记为删除：delete buffer</li>\n<li>将记录真正删除：pruge buffer</li>\n</ul>\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffering\">innodb_change_buffering</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">用来开启各种Buffer选项，默认值是all<br>\n        <ul>\n        <li>inserts</li>\n        <li>deletes</li>\n        <li>purges</li>\n        <li>changes：开启 inserts 和 deletes</li>\n        <li>all：都开启</li>\n        <li>none：都不开启</li>\n        </ul>\n    </td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffer_max_size\">innodb_change_buffer_max_size</span></td>\n    <td style=\"text-align:center\"> 1.2.x开始 </td>\n    <td colspan=\"3\">用来控制change buffer最大使用内存数量<br>默认值为25,表示最多使用1/4的缓存池空间<br>该参数最大有效值是50</td>\n</tr>\n</table>  \n\n<h2 id=\"两次写\"><a href=\"#两次写\" class=\"headerlink\" title=\"两次写\"></a>两次写</h2><p>提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。</p>\n<h3 id=\"脏页刷新到磁盘风险\"><a href=\"#脏页刷新到磁盘风险\" class=\"headerlink\" title=\"脏页刷新到磁盘风险\"></a>脏页刷新到磁盘风险</h3><p>IO的最小单位：</p>\n<ul>\n<li>数据库IO的最小单位是16K（MySQL默认，oracle是8K）</li>\n<li>文件系统IO的最小单位是4K（也有1K的）</li>\n<li>磁盘IO的最小单位是512字节</li>\n</ul>\n<p>因此，存在IO写入导致page损坏的风险：<br><img src=\"/2019/07/31/Mysql02/IO.png\" alt=\"IO风险\"></p>\n<p>提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。</p>\n<h3 id=\"Double-write解决了什么问题\"><a href=\"#Double-write解决了什么问题\" class=\"headerlink\" title=\"Double write解决了什么问题\"></a>Double write解决了什么问题</h3><p>一个数据页的大小是16K，假设在把内存中的脏页写到数据库的时候，写了8K突然宕机了，也就是说前8K数据是新的，后8K是旧的，那么磁盘数据库这个数据页就是不完整的，是一个坏掉的数据页，这种情况被称为部分<code>写失效</code></p>\n<p><strong>那么可不可以通过 redo log 来进行恢复呢？</strong><br>redo记录的是对页的修改，只能恢复校验完整（还没写）的页，不能修复坏掉的数据页，所以这个数据就丢失了，可能会造成数据不一致，所以需要double write。</p>\n<div class=\"note info\"><p>为什么 redo log 不需要 doublewrite 的支持？<br>因为 redo log 写入的单位就是 512 字节，也就是磁盘 IO 的最小单位，所以无所谓数据损坏。</p></div>   \n\n<h3 id=\"两次写工作流程\"><a href=\"#两次写工作流程\" class=\"headerlink\" title=\"两次写工作流程\"></a>两次写工作流程</h3><p><img src=\"/2019/07/31/Mysql02/doublewrite.png\" alt=\"两次写流程\"><br>doublewrite由两部分组成，一部分为内存中的doublewrite buffer，其大小为2MB，另一部分是磁盘上共享表空间(ibdata x)中连续的128个页，即2个区(extent)，大小也是2M。</p>\n<ol>\n<li>当一系列机制触发数据缓冲池中的脏页刷新时，并不直接写入磁盘数据文件中，而是先拷贝至内存中的doublewrite buffer中；</li>\n<li>接着从两次写缓冲区分两次写入磁盘共享表空间中(连续存储，顺序写，性能很高)，每次写1MB；</li>\n<li>待第二步完成后，再将doublewrite buffer中的脏页数据写入实际的各个表空间文件(离散写)；(脏页数据固化后，即进行标记对应doublewrite数据可覆盖)</li>\n</ol>\n<p>现在我们来分析一下为什么 double write 可以生效。当宕机发生时，有那么几种情况：</p>\n<ol>\n<li>磁盘还未写，此时可以通过 redo log 恢复；</li>\n<li>磁盘正在进行从内存到共享表空间的写，此时数据文件中的页还没开始被写入，因此也同样可以通过 redo log 恢复；</li>\n<li>磁盘正在写数据文件，此时共享表空间已经写完，可以从共享表空间拷贝页的副本到数据文件实现恢复。</li>\n</ol>\n<h2 id=\"自适应哈希索引\"><a href=\"#自适应哈希索引\" class=\"headerlink\" title=\"自适应哈希索引\"></a>自适应哈希索引</h2><p>哈希：一次就可以定位数据</p>\n<p>B+树：取决于树的高度，生产环境一般是 3-4 层，所以需要查询 3-4 次</p>\n<p>自适应哈希索引 AHI（adaptive hash index）建立条件：观察到一个访问模式访问频繁，就会建立哈希索引</p>\n<ul>\n<li>通过该模式访问了 100 次（模式：where x = ?）</li>\n<li>页通过该模式访问了 N 次，其中 N = 页的记录总数⁄16</li>\n</ul>\n<p>InnoDB 存储引擎官方文档显示，启用 AHI 后,读取和写入速度可以提高 2 倍，辅助索引的连接操作性能可以提高 5 倍。</p>\n<h2 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h2><p>为了提高磁盘的操作性能，当前的数据库系统都采用异步IO的方式处理磁盘操作。用户可以在发出一个IO请求胡立即再发出另一个IO请求，当全部IO请求发送完毕后，等待所有IO操作完成，这就是AIO。<br>AIO的另一个优势是可以进行IO Merge操作，也就是将多个IO合并为1个IO, 这样可以提高IOPS(Input/Output Per Second)的性能。</p>\n<p>例如：用户访问页的（space, page_no)为(8,6) (8,7) (8,8)，每个页的大小为16KB，同步IO需要3次IO操作。可以优化为从(8,6)开始读取48KB。</p>\n<h2 id=\"刷新临接页\"><a href=\"#刷新临接页\" class=\"headerlink\" title=\"刷新临接页\"></a>刷新临接页</h2><p>当刷新一个脏页时，InnoDB会检查该页所在extent的所有页，如果是脏页，一起刷新。</p>\n<table>\n    <tr>\n        <th colspan=\"2\">参数</th>\n        <th>版本</th>\n        <th colspan=\"3\">作用</th>\n    </tr>\n    <tr>\n        <th colspan=\"2\" style=\"text-align:center\">innodb_flush_neighbors</th>\n        <td style=\"text-align:center\">1.2.x开始</td>\n        <td colspan=\"3\">控制是否启用该特性</td>\n    </tr>\n</table> \n\n\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><ul>\n<li><a href=\"http://oohcode.com/2015/10/14/InnoDB-Key-Features/\" target=\"_blank\" rel=\"noopener\">http://oohcode.com/2015/10/14/InnoDB-Key-Features/</a></li>\n<li><a href=\"https://chyroc.cn/posts/innodb-storage-engine-reading-1/\" target=\"_blank\" rel=\"noopener\">https://chyroc.cn/posts/innodb-storage-engine-reading-1/</a></li>\n<li><a href=\"https://www.cnblogs.com/zhoujinyi/archive/2013/04/11/2988923.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhoujinyi/archive/2013/04/11/2988923.html</a></li>\n<li><a href=\"http://huzb.me/2019/01/14/%E6%8F%92%E5%85%A5%E7%BC%93%E5%86%B2%E3%80%81%E4%B8%A4%E6%AC%A1%E5%86%99%E5%92%8C%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/\" target=\"_blank\" rel=\"noopener\">http://huzb.me/2019/01/14/%E6%8F%92%E5%85%A5%E7%BC%93%E5%86%B2%E3%80%81%E4%B8%A4%E6%AC%A1%E5%86%99%E5%92%8C%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</a></li>\n<li><a href=\"https://blog.csdn.net/tanliqing2010/article/details/81509539\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tanliqing2010/article/details/81509539</a></li>\n<li><a href=\"https://www.cnblogs.com/geaozhang/p/7341333.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/geaozhang/p/7341333.html</a></li>\n<li><a href=\"https://draveness.me/mysql-innodb\" target=\"_blank\" rel=\"noopener\">https://draveness.me/mysql-innodb</a></li>\n<li><a href=\"http://richfisher.me/blog/2017/12/18/innodb-notes/\" target=\"_blank\" rel=\"noopener\">http://richfisher.me/blog/2017/12/18/innodb-notes/</a></li>\n<li><a href=\"https://www.docs4dev.com/docs/zh/mysql/5.7/reference/innodb-architecture.html#innodb%E6%9E%B6%E6%9E%84\" target=\"_blank\" rel=\"noopener\">https://www.docs4dev.com/docs/zh/mysql/5.7/reference/innodb-architecture.html#innodb%E6%9E%B6%E6%9E%84</a></li>\n<li>MySQL技术内幕：InnoDB存储引擎(第2版)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><ul>\n<li>InnoDB存储引擎最早由Innobase Oy公司开发，被包括在MySQL数据库所有的二进制发行版本中，</li>\n<li>从MySQL 5.5版本开始是默认的表存储引擎<font color=\"gray\">（之前的版本InnoDB存储引擎仅在Windows下为默认的存储引擎）</font></li>\n<li>第一个完整支持ACID事务的MySQL存储引擎<font color=\"gray\">（BDB是第一个支持事务的MySQL存储引擎，现在已经停止开发）</font></li>\n<li>特点：行锁设计、支持 MVCC、支持外键、提供一致性非锁定读、有效利用内存和 CPU</li></ul>","more":"\n\n<h1 id=\"体系架构\"><a href=\"#体系架构\" class=\"headerlink\" title=\"体系架构\"></a>体系架构</h1><p><img src=\"/2019/07/31/Mysql02/innodb-Architecture.png\" alt=\"innoDB体系结构图\"><br>InnoDB存储引擎是由内存池、后台线程、磁盘存储三大部分组成。</p>\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><p>InnoDB 使用的是多线程模型, 其后台有多个不同的线程负责处理不同的任务</p>\n<h3 id=\"Master-Thread\"><a href=\"#Master-Thread\" class=\"headerlink\" title=\"Master Thread\"></a>Master Thread</h3><p>Master Thread是最核心的一个后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性。包括脏页刷新、合并插入缓冲、UNDO页的回收等。</p>\n<h3 id=\"IO-Thread\"><a href=\"#IO-Thread\" class=\"headerlink\" title=\"IO Thread\"></a>IO Thread</h3><p>在 InnoDB 存储引擎中大量使用了异步IO(Async IO)来处理写IO请求, IO Thread的工作主要是负责这些 IO 请求的回调。</p>\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">线程</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之前 </td>\n    <td colspan=\"4\">4 个 io thread：write，read，insert buffer，log IO Thread.\n    <ul>\n        <li>在Linux下，IO Thread的数量不能进行调整</li>\n        <li>在Windows下可以通过参数 innodb_file_io_threads 来增大IO Thread</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0之后 </td>\n    <td colspan=\"4\">read 和 write IO thread 分别增大到了 4 个<br>\n    <ul>\n    <li>分别使用 innodb_read_io_threads 和 innodb_write_io_threads 设置线程数</li>\n    </ul>\n    </td>\n</tr>\n</table>  \n\n<h3 id=\"Purge-Thread\"><a href=\"#Purge-Thread\" class=\"headerlink\" title=\"Purge Thread\"></a>Purge Thread</h3><p>事务提交后，其所使用的undo log可能不再需要，因此需要Purge Thread来回收已经分配并使用的UNDO页。</p>\n<table>\n<tr>\n    <th>InnoDB 版本</th>\n    <th colspan=\"4\">作用</th>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之前 </td>\n    <td colspan=\"4\">purge 操作在 master thread 内完成</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.1之后 </td>\n    <td colspan=\"4\">purge 可以独立到单独的线程,减轻 master thread 工作,提高 cpu 利用率和提高性能<br>\n    <ul>\n    <li>MySQL数据库的配置文件<code>[mysqld]</code>中添加如下命令来启用独立的Purge Thread：</li>\n    <li>innodb_purge_threads=1 </li>\n    <li>1.1版本中，即使将 innodb_purge_threads 设为大于1，InnoDB存储引擎启动时也会将其设为1</li>\n    </ul>\n    </td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.2之后</td>\n    <td colspan=\"4\">支持多个Purge Thread, 这样做可以加快UNDO页的回收，也能更进一步利用磁盘的随机读取性能</td>\n</tr>\n</table>                                  \n\n<h3 id=\"Page-Cleaner-Thread\"><a href=\"#Page-Cleaner-Thread\" class=\"headerlink\" title=\"Page Cleaner Thread\"></a>Page Cleaner Thread</h3><p>Page Cleaner Thread的作用是取代Master Thread中脏页刷新的操作，<br>减轻原Master Thread的工作及对于用户查询线程的阻塞，进一步提高性能。</p>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>innoDB内存主要由<a href=\"#缓冲池\">缓冲池(innodb buffer pool)</a>、<a href=\"#重做日志缓冲\">重做日志缓冲(redo log buffer)</a>、<a href=\"#额外的内存池\">额外内存池组成(innodb additional men pool size)</a>组成</p>\n<h3 id=\"缓冲池\"><a href=\"#缓冲池\" class=\"headerlink\" title=\"缓冲池\"></a>缓冲池</h3><p>缓冲池是主存储器中的一个区域，用于在访问时缓存表和索引数据。缓冲池允许直接从内存处理常用数据，从而加快处理速度。<br>在专用服务器上，通常会将最多80％的物理内存分配给缓冲池。<br>读取流程：<br>     <img src=\"/2019/07/31/Mysql02/read.png\" alt=\"流程图\"><br>更新流程：<br>     <img src=\"/2019/07/31/Mysql02/write.png\" alt=\"流程图\"></p>\n<p>因此缓冲池的大小影响数据库的整体性能。</p>\n<div class=\"note info\"><p>由于32位操作系统的限制，在该系统下最多将该值设置为3G。<br>用户可以打开操作系统的<code>PAE</code>选项来获得32位操作系统下最大64GB内存的支持。<br>为了让数据库使用更多的内存,建议数据库系统都采用 64 位操作系统。</p></div>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">版本</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">innodb_buffer_pool_instances</td>\n<td align=\"center\">从InnoDB 1.0.x开始</td>\n<td align=\"center\">配置多个缓冲池实例，默认为1</td>\n</tr>\n</tbody></table>\n<h4 id=\"缓冲池中缓存的数据页类型\"><a href=\"#缓冲池中缓存的数据页类型\" class=\"headerlink\" title=\"缓冲池中缓存的数据页类型\"></a>缓冲池中缓存的数据页类型</h4><ul>\n<li>索引页(index page)：缓存数据表索引</li>\n<li>数据页(data page)：缓存数据页，占缓冲池的绝大部分</li>\n<li>undo页(undo Log Page)：undo页是保存事务，为回滚做准备的。</li>\n<li><a href=\"#插入缓冲\">插入缓冲</a>（insert buffer）：插入数据时要先插入到缓存池中。</li>\n<li>自适应哈希索引（adaptive hash index）： 除了B+ Tree索引外，在缓冲池还会维护一个哈希索引，以便在缓冲池中快速找到数据页。</li>\n<li>InnoDB存储的锁信息（lock info）</li>\n<li>数据字典信息（data dictionary）<br>  在MySQL中，数据字典信息内容就包括表结构、数据库名或表名、字段的数据类型、视图、索引、表字段信息、存储过程、触发器等内容。<br>  InnoDB有自己的表缓存，可以称为表定义缓存或者数据字典。当InnoDB打开一张表，就增加一个对应的对象到数据字典。</li>\n</ul>\n<h4 id=\"缓冲池管理方式\"><a href=\"#缓冲池管理方式\" class=\"headerlink\" title=\"缓冲池管理方式\"></a>缓冲池管理方式</h4><p><img src=\"/2019/07/31/Mysql02/three-list2.png\" alt=\"三种list\"></p>\n<ol>\n<li><p><strong>Free list</strong><br>当数据库刚启动时，LRU列表是空的，这时页都存放在Free list中。<br>当需要从缓冲池中分页时，从Free list中查找是否有可用的空闲页，若有则将该页从Free列表中删除，放入到LRU列表中,维持页数守恒。</p>\n</li>\n<li><p><strong>LRU list</strong><br> <strong>LRU算法</strong>：最频繁使用页在LRU列表的前端，最少使用的页在尾端。首先释放LRU列表中的尾端的页。缓冲池中页的大小默认为16KB。<br> <strong>InnoDB优化的LRU算法(midpoint insertion strategy)</strong>：将新读取到的页不放在首部，而是中间部位 <code>midpoint</code> 位置。目标是确保频繁访问”热”页面保留在缓冲池中。<br> <img src=\"/2019/07/31/Mysql02/innodb-buffer-pool-list.jpg\" alt=\"lru\"></p>\n <table>\n <tr>\n     <th>参数</th>\n     <th colspan=\"2\">作用</th>\n </tr>\n <tr>\n     <td style=\"text-align:center\"> innodb_old_blocks_pct </td>\n     <td colspan=\"2\">控制LRU列表中 old list 的百分比。<br>\n        默认值为 37，对应于原始固定比率3/8。<br>\n        值范围是 5（缓冲池中的新页面很快就会老化）到 95。\n     </td>\n </tr>\n <tr>\n     <td style=\"text-align:center\"> innodb_old_blocks_time </td>\n     <td colspan=\"2\">指定第一次访问页面之后的时间窗口（ms）<br>\n        在此期间可以访问该页面而不移动到LRU列表的前端<br>\n        默认值为 1000 ms\n     </td>\n </tr>\n </table> \n\n<p> 默认情况下，算法操作如下：</p>\n<ul>\n<li>在默认配置下， <code>midpoint</code>位置在LRU list 的5/8处。</li>\n<li><code>midpoint</code>是new sublist的尾部与old sublist的头部相交的边界。</li>\n<li>当 InnoDB 将页面读入缓冲池时，将页插入<code>midpoint</code>位置(old sublist的头部)。</li>\n<li>访问old sublist中的页 &amp;&amp; 该页在old sublist中的停留时间超过innodb_old_blocks_time设置的时间，使其变<code>young</code>,将其移动到缓冲池的头部(new sublist的头部)。</li>\n<li>当页从LRU列表的old部分加入到new部分时，称此时发生的操作为<code>page made young</code>，而因为innodb_old_blocks_time的设置而导致页没有从old部分移动到new部分的操作称为<code>page not made young</code></li>\n<li>在数据库操作中，被访问的页将移到new sublist的表头，这样一来，在new sublist中的未被访问的节点将逐渐往表尾移动，当移动过中点，将变为old list的节点。当表满时，old list末尾的页将会被移除。</li>\n</ul>\n<div class=\"note warning\"><p>为什么不采用朴素的LRU？<br>因为某些SQL操作会访问很多页，甚至全部页，但仅仅在该次查询操作，并不是活跃的热点数据。可能会使缓冲池中的页被刷新出，从而影响缓冲池的效率。</p></div>  \n\n<ol start=\"3\">\n<li><strong>Flush list</strong><br>在LRU类表的页被修改后，称为脏页（Dirty Page），即缓存和硬盘的页数据不一致。<br>数据库会通过<code>CHECKPOINT</code>机制将脏页刷新回磁盘，Flush list中的页即为脏页列表。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"重做日志缓冲\"><a href=\"#重做日志缓冲\" class=\"headerlink\" title=\"重做日志缓冲\"></a>重做日志缓冲</h3>   <div class=\"note info\"><p><strong>什么是redo log？</strong><br>当数据库对数据做修改的时候，需要把数据页从磁盘读到buffer pool中，然后在buffer pool中进行修改，那么这个时候buffer pool中的数据页就与磁盘上的数据页内容不一致，称buffer pool的数据页为dirty page 脏数据。<br>如果发生非正常的DB服务重启，那么这些数据并没有同步到磁盘文件中（注意，同步到磁盘文件是个随机IO），会发生数据丢失。<br>如果这个时候，能够有一个文件，当缓冲池中的data page变更结束后，把相应修改记录记录到这个文件（注意，记录日志是顺序IO），那么当DB服务发生crash的情况，恢复DB的时候，也可以根据这个文件的记录内容，重新应用到磁盘文件，数据保持一致。<br>这个文件就是redo log ，用于记录 数据修改后的记录，顺序记录。<br><br><strong>什么是undo log？</strong><br>undo日志用于存放数据修改被修改前的值。<br>假设修改表中 id=1 的行数据，把Name=’B’ 修改为Name = ‘B2’ ，那么undo日志就会用来存放Name=’B’的记录，如果这个修改出现异常，可以使用undo日志来实现回滚操作，保证事务的一致性。</p></div>  \n\n<p><img src=\"/2019/07/31/Mysql02/redo-buffer.png\" alt=\"lru\"></p>\n<p>  重做日志缓冲不需要设置很大，通常情况下8M能满足大部分的应用场景。重做日志支持以下三种情况触发刷新：</p>\n<ul>\n<li>Master Thread每一秒将重做日志缓冲刷新到重做日志文件</li>\n<li>每次事务提交时将重做日志缓冲刷新到重做日志文件</li>\n<li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件</li>\n</ul>\n<h3 id=\"额外的内存池\"><a href=\"#额外的内存池\" class=\"headerlink\" title=\"额外的内存池\"></a>额外的内存池</h3><p>   在InnoDB存储引擎中，对内存的管理是通过一种称为内存堆的方式进行的。在对一些数据结构本身的内存进行分配时，需要从额外的内存池中进行申请，当该区域的内存不够时，会从缓冲池中进行申请。</p>\n<h1 id=\"Checkpoint技术\"><a href=\"#Checkpoint技术\" class=\"headerlink\" title=\"Checkpoint技术\"></a>Checkpoint技术</h1><div class=\"note info\"><p><strong>什么是Checkpoint？</strong><br>是一个数据库事件(event)，这个事件激活以后会触发数据库写进程(DBWR)将脏数据块写到磁盘中。                           </p>\n<p><strong>为什么需要Checkpoint技术？</strong><br>innoDB在事务提交时，先写重做日志，再修改内存数据这样，就产生了脏页。既然有重做日志保证数据持久性，查询时也可以从缓冲池页中取数据，那为什么还要刷新脏页到磁盘呢？如果重做日志可以无限增大，同时缓冲池足够大，能够缓存所有数据，那么是不需要将缓冲池中的脏页刷新到磁盘。但是，会有以下几个问题：<br>1) 服务器内存有限，缓冲池不够用，无法缓存全部数据<br>2) 重做日志无限增大成本要求太高<br>3) 宕机时如果重做全部日志恢复时间过长            </p>\n<p><strong>Checkpoint 解决了什么问题？</strong><br>1) 缩短短数据库的恢复时间<br>2) 缓冲池不够时，将脏页刷新到磁盘<br>3) 重做日志不可用时，刷新脏页</p></div> \n\n<p>对于InnoDB存储引擎而言，其是通过LSN（Log Sequence Number）来标记版本的。每个页有LSN，重做日志中也有LSN，Checkpoint也有LSN。</p>\n<p>innodb 内部有两种 checkpoint：</p>\n<ol>\n<li><p><strong>sharp checkpoint</strong>：数据库关闭的时候将<code>所有的脏页</code>刷回到磁盘，默认方式，参数 innodb_fast_shudown=1</p>\n</li>\n<li><p><strong>fuzzy checkpoint</strong>：只刷新<code>部分脏页</code></p>\n<ul>\n<li><p>master thread checkpoint：master thread 异步的以每秒或者每 10 秒的速度从缓冲池的脏页列表中刷新一定比列的也回磁盘</p>\n<ul>\n<li>周期性，异步，读取flush list，找到脏页，写入磁盘</li>\n</ul>\n</li>\n<li><p>flush_lru_list checkpoint：InnoDB要保证LRU列表中需要有差不多100个空闲页可供使用。如果没有这么多，就会将 lru list 尾部的页移除。如果这些页有脏页，就需要进行 checkpoint。</p>\n<ul>\n<li>innodb 1.1.x版本之前，检查在用户查询线程中,会阻塞用户查询操作。</li>\n<li>innodb 1.2.x版本之后，检查放到了单独的 page cleaner 线程中,可通过 <strong>innodb_lru_scan_depth</strong> 控制lru列表中可用页的数量，默认是1024。</li>\n</ul>\n</li>\n<li><p>async/sync flush checkpoint：重做日志文件不可用时，强制将一些页刷新到磁盘。达到重做日志文件的大小阈值。</p>\n<ul>\n<li>checkpoint age = redo_log_lsn - cp_lsn<br> 低水位=75% * total_redo_log_file_size<br> 高水位=90% * total_redo_log_file_size</li>\n<li>checkpoint age &lt; 低水位<br>   不需要刷新</li>\n<li>低水位  &lt;=  checkpoint age &lt;= 高水位<br>   会强制进行 checkpoint ，触发async flush， 根据flush_list的顺序，刷新足够多的脏页，直到 checkpoint age &lt; 低水位</li>\n<li>checkpoint age &gt; 高水位<br> 会强制进行 checkpoint ，触发sync flush 根据flush_list的顺序，刷新脏页, 直到 checkpoint age &lt; 低水位</li>\n</ul>\n</li>\n<li><p>dirty page too much checkpoint：当缓冲池中脏页的数量占据一定百分比时，强制进行Checkpoint，用来保证缓冲池中有足够的页，通过 <a href=\"#innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</a> 参数控制。</p>\n</li>\n</ul>\n</li>\n</ol>\n<div style=\"text-align:center;color:#bfbfbf;font-size:16px;\">\n    <span>-------- 第二部分 --------</span>\n</div>\n\n<h1 id=\"Master-thread-工作方式\"><a href=\"#Master-thread-工作方式\" class=\"headerlink\" title=\"Master thread 工作方式\"></a>Master thread 工作方式</h1><h2 id=\"InnoDB-1-0-x-版本之前的-Master-thread\"><a href=\"#InnoDB-1-0-x-版本之前的-Master-thread\" class=\"headerlink\" title=\"InnoDB 1.0.x 版本之前的 Master thread\"></a>InnoDB 1.0.x 版本之前的 Master thread</h2><p>Master thread 内部有多个循环 loop 组成：</p>\n<ul>\n<li>主循环 loop</li>\n<li>后台循环 backgroup loop</li>\n<li>刷新循环 flush loop</li>\n<li>暂停循环 suspend loop</li>\n</ul>\n<p>伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">master_thread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">\t<span class=\"comment\">//主循环</span></span><br><span class=\"line\">\tloop ：</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)&#123;</span><br><span class=\"line\">\t\tthread_sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 日志缓冲刷新到磁盘，即使事务还没有提交</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 根据前一秒IO操作小于5，合并插入缓冲</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last_one_second_ios &lt; <span class=\"number\">5</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> merge at most <span class=\"number\">5</span> insert buffer;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 脏页的比例超过了阈值，刷新 100 个脏页到磁盘</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buf_get_modified_ratio_pct &gt; innodb_max_dirty_pages_pct)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(no user activity)</span><br><span class=\"line\">\t\t\tgoto backgroud loop;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//1. 前10秒IO操作小于200，刷新 100 个脏页到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(last_ten_second_ios &lt; <span class=\"number\">200</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page;</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并至多 5 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge at most <span class=\"number\">5</span> insert buffer;</span><br><span class=\"line\">\t<span class=\"comment\">//3. 将重做日志刷新到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t<span class=\"comment\">//4. 删除无用的 undo 页（每次最多尝试回收 20 个 undo 页）</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge;</span><br><span class=\"line\">\t<span class=\"comment\">//5. 脏页比例超过 70% 刷新100 个脏页到磁盘，否则刷新 10 个脏页</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ <span class=\"number\">70</span> % )</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tbuffer pool flush <span class=\"number\">10</span> dirty page</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tgoto loop</span><br><span class=\"line\">\t<span class=\"comment\">//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tbackground loop :</span><br><span class=\"line\">\t<span class=\"comment\">//1. 删除无用的 undo 页</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并 20 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge <span class=\"number\">20</span> insert buffer</span><br><span class=\"line\">\t<span class=\"comment\">//3.如果有任务，跳转到主循环，否则跳转到刷新循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> not idle\t</span><br><span class=\"line\">\t\tgoto loop</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//刷新循环</span></span><br><span class=\"line\">\tflush loop :</span><br><span class=\"line\">\t<span class=\"comment\">//不断刷新100个脏页，直到脏页比例没有超过阈值</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span> dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )</span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t<span class=\"comment\">//没有任务，跳转到暂停循环</span></span><br><span class=\"line\">\tgoto suspend loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//暂停循环</span></span><br><span class=\"line\">\tsuspend loop :</span><br><span class=\"line\">\t<span class=\"comment\">//将主线程挂起，等待事件发生</span></span><br><span class=\"line\">\tsuspend_thread()</span><br><span class=\"line\">\twaiting event</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"InnoDB-1-2-x-版本之前的-Master-thread\"><a href=\"#InnoDB-1-2-x-版本之前的-Master-thread\" class=\"headerlink\" title=\"InnoDB 1.2.x 版本之前的 Master thread\"></a>InnoDB 1.2.x 版本之前的 Master thread</h2><ol>\n<li>提高刷新脏页数量和合并插入数量，改善磁盘 IO 处理能力,刷新数量不再硬编码，而是使用百分比控制。<ul>\n<li>在合并插入缓冲的时候，合并插入缓冲的数量为 <a href=\"#innodb_io_capacity\">innodb_io_capacity</a> 的 5%</li>\n<li>在从缓冲区刷新脏页的时候，刷新脏页的数量为 <a href=\"#innodb_io_capacity\">innodb_io_capacity</a></li>\n</ul>\n</li>\n<li>增加了自适应刷新脏页功能。<ul>\n<li>1.0.x之前版本：脏页在缓冲池占比小于<a href=\"#innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</a>，不刷新脏页，大于则刷新100个脏页</li>\n<li>1.0.x版本开始：引入<a href=\"#innodb_adaptive_flushing\">innodb_adaptive_flushing</a>参数，通过函数buf_flush_get_desired_flush_rate判断产生重做日志的速度来决定最适合的刷新脏页数量。</li>\n</ul>\n</li>\n<li>full purge回收的Undo页的数量也不再硬编码，使用参数<a href=\"#innodb_purge_batch_size\">innodb_purge_batch_size</a>控制。</li>\n</ol>\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_io_capacity\">innodb_io_capacity</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">表示磁盘IO的吞吐量,默认值是200</td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_max_dirty_pages_pct\">innodb_max_dirty_pages_pct</span></td>\n    <td style=\"text-align:center\"> 1.0.x之前 </td>\n    <td colspan=\"3\">脏页在缓冲池中所占比率，默认值是90</td>\n</tr>\n<tr>\n    <td style=\"text-align:center\"> 1.0.x开始</td>\n    <td colspan=\"3\">默认值是75<br>加快刷新脏页的频率，保证了磁盘IO的负载。</td>                       \n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_adaptive_flushing\">innodb_adaptive_flushing</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">是否自适应刷新脏页，默认为 ON</td>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_purge_batch_size\">innodb_purge_batch_size</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">清除 undo 页时,表示一次删除多少页,默认是 20</td>\n</tr>\n</table>   \n\n<p>Master Thread的伪代码变为了下面的形式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">master_thread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">\t<span class=\"comment\">//主循环</span></span><br><span class=\"line\">\tloop ：</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)&#123;</span><br><span class=\"line\">\t\tthread_sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 日志缓冲刷新到磁盘，即使事务还没有提交</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 根据前一秒IO操作小于5%innodb_io_capacity，合并插入缓冲</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(last_one_second_ios &lt; <span class=\"number\">5</span>%innodb_io_capacity)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> merge <span class=\"number\">5</span>%innodb_io_capacity insert buffer;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 脏页的比例超过了阈值，刷新 100%innodb_io_capacity 个脏页到磁盘</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buf_get_modified_ratio_pct &gt; innodb_max_dirty_pages_pct)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4. 没有用户活动（数据库空闲时）或者数据库关闭（shutdown），切换到 backgroup loop</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(no user activity)</span><br><span class=\"line\">\t\t\tgoto backgroud loop;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//1. 前10秒IO操作小于innodb_io_capacity，刷新 innodb_io_capacity 个脏页到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(last_ten_second_ios &lt; innodb_io_capacity)</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page;</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并至多 5%innodb_io_capacity 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge at most <span class=\"number\">5</span>%innodb_io_capacity insert buffer;</span><br><span class=\"line\">\t<span class=\"comment\">//3. 将重做日志刷新到磁盘</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> log buffer flush to disk;</span><br><span class=\"line\">\t<span class=\"comment\">//4. 删除无用的 undo 页（每次最多尝试回收 5%innodb_io_capacity 个 undo 页）</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge;</span><br><span class=\"line\">\t<span class=\"comment\">//5. 脏页比例超过 70% 刷新 100%innodb_io_capacity 个脏页到磁盘，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 否则刷新 10%innodb_io_capacity 个脏页</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ <span class=\"number\">70</span> % )</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tbuffer pool flush <span class=\"number\">10</span>%innodb_io_capacity dirty page</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\tgoto loop</span><br><span class=\"line\">\t<span class=\"comment\">//后台循环\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span></span><br><span class=\"line\">\tbackground loop :</span><br><span class=\"line\">\t<span class=\"comment\">//1. 删除无用的 undo 页</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> full purge</span><br><span class=\"line\">\t<span class=\"comment\">//2. 合并 100%innodb_io_capacity 个插入缓冲</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> merge <span class=\"number\">100</span>%innodb_io_capacity insert buffer</span><br><span class=\"line\">\t<span class=\"comment\">//3.如果有任务，跳转到主循环，否则跳转到刷新循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> not idle\t</span><br><span class=\"line\">\t\tgoto loop</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//刷新循环</span></span><br><span class=\"line\">\tflush loop :</span><br><span class=\"line\">\t<span class=\"comment\">//不断刷新 100%innodb_io_capacity 个脏页，直到脏页比例没有超过阈值</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> buffer pool flush <span class=\"number\">100</span>%innodb_io_capacity dirty page</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( buf_get_modified_ratio_pct ＞ innodb_max_dirty_pages_pct )</span><br><span class=\"line\">\t\tgoto flush loop</span><br><span class=\"line\">\t<span class=\"comment\">//没有任务，跳转到暂停循环</span></span><br><span class=\"line\">\tgoto suspend loop</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//暂停循环</span></span><br><span class=\"line\">\tsuspend loop :</span><br><span class=\"line\">\t<span class=\"comment\">//将主线程挂起，等待事件发生</span></span><br><span class=\"line\">\tsuspend_thread()</span><br><span class=\"line\">\twaiting event</span><br><span class=\"line\">\tgoto loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"InnoDB-1-2-x-版本的-Master-thread\"><a href=\"#InnoDB-1-2-x-版本的-Master-thread\" class=\"headerlink\" title=\"InnoDB 1.2.x 版本的 Master thread\"></a>InnoDB 1.2.x 版本的 Master thread</h2><p>InnoDB 1.2.x 版本中再次对 Master Thread 进行了优化，伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> InnoDB is idle</span><br><span class=\"line\"><span class=\"comment\">//之前版本中每10秒的操作</span></span><br><span class=\"line\">srv_master_do_idle_tasks();</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"comment\">//之前版本中每秒的操作</span></span><br><span class=\"line\">srv_master_do_active_tasks();</span><br></pre></td></tr></table></figure>\n\n<p>对于刷新脏页的操作，从Master Thread线程分离到一个单独的Page Cleaner Thread，从而减轻了Master Thread的工作，同时进一步提高了系统的并发性。</p>\n<h1 id=\"InnoDB-关键特性\"><a href=\"#InnoDB-关键特性\" class=\"headerlink\" title=\"InnoDB 关键特性\"></a>InnoDB 关键特性</h1><p>关键特性包括：</p>\n<ul>\n<li>插入缓冲 insert buffer</li>\n<li>两次写 double write</li>\n<li>自适应哈希索引 adaptive hash index</li>\n<li>异步 io async io</li>\n<li>刷新邻接页 flush neighbor page</li>\n</ul>\n<h2 id=\"插入缓冲\"><a href=\"#插入缓冲\" class=\"headerlink\" title=\"插入缓冲\"></a>插入缓冲</h2><h3 id=\"聚集索引（一级索引）\"><a href=\"#聚集索引（一级索引）\" class=\"headerlink\" title=\"聚集索引（一级索引）\"></a>聚集索引（一级索引）</h3><p>表在存储的时候按照主键排序进行存储，不需要磁盘的随机读取，插入效率高。<br>非叶子节点存放的是键值，叶子节点存放的是行数据，称之为数据页。</p>\n<h3 id=\"辅助索引（二级索引）\"><a href=\"#辅助索引（二级索引）\" class=\"headerlink\" title=\"辅助索引（二级索引）\"></a>辅助索引（二级索引）</h3><p>除了聚集索引之外的索引都可以称之为辅助索引，叶子节点中存放的是主键的键值。叶子节点的插入不再有序，这时就需要离散访问非聚集索引页，插入性能变低。<br>一张表可以存在多个辅助索引，但是只能有一个聚集索引，通过辅助索引来查找对应的航记录的话，需要进行两步，第一步通过辅助索引来确定对应的主键，第二步通过相应的主键值在聚集索引中查询到对应的行记录，也就是进行两次B+树搜索。</p>\n<h3 id=\"索引数据页的更新（针对二级索引）\"><a href=\"#索引数据页的更新（针对二级索引）\" class=\"headerlink\" title=\"索引数据页的更新（针对二级索引）\"></a>索引数据页的更新（针对二级索引）</h3><p><img src=\"/2019/07/31/Mysql02/index-update.png\" alt=\"index更新流程\"><br>表数据更新的同时也会更新对应的表的索引数据，所以：对表进行insert delete update时，很可能会产生大量的物理读(物理读索引数据页)</p>\n<p><img src=\"/2019/07/31/Mysql02/insert-buffer.png\" alt=\"引入insertbuffer后index更新流程\"></p>\n<h3 id=\"1-insert-buffer\"><a href=\"#1-insert-buffer\" class=\"headerlink\" title=\"1. insert buffer\"></a>1. insert buffer</h3><p>Insert Buffer的使用流程：<br><img src=\"/2019/07/31/Mysql02/Insert-Buffer.svg\" alt=\"Insert Buffer的使用流程\"></p>\n<h4 id=\"插入缓冲的启用需要满足以下两个条件：\"><a href=\"#插入缓冲的启用需要满足以下两个条件：\" class=\"headerlink\" title=\"插入缓冲的启用需要满足以下两个条件：\"></a>插入缓冲的启用需要满足以下两个条件：</h4><p>1）索引是辅助索引（secondary index）<br>2）索引不是唯一的：整个索引数据被切分为2部分，无法保证唯一性。</p>\n<h4 id=\"insert-buffer结构\"><a href=\"#insert-buffer结构\" class=\"headerlink\" title=\"insert buffer结构\"></a>insert buffer结构</h4><p>insert buffer的数据结构是B+树，全局只有一颗B+树。<br>B+树的非叶子节点是Search key，构造结构为(space,marker,offset)。</p>\n<ul>\n<li>space：待插入记录所在表的表空间id。每个表都有唯一的表空间id，通过表空间id可以查出是哪张表。</li>\n<li>marker：兼容之前的版本。</li>\n<li>offset：在表空间中页的偏移量。</li>\n</ul>\n<p>当一个辅助索引要插入到(space,offset)中时，如果该页不在缓冲池中，则按上述规则构造一个search key，将该记录插入到insert buffer中。<br>但是如果该页一直在insert buffer中，不断有记录插入到同一个索引页中，那么该索引页的空间就会逐渐缩小，要出现B+树节点的分裂情况，这时就不能进行insert buffer了。<br>所以，我们需要一个机制来管理每个页面的剩余空闲空间，这就是<code>Insert buffer bitmap</code>。<br>每隔page_size个页面，就是一个Insert buffer bitmap page。<br>例如：若page_size = 16384(16k)，那么page_no为0，16384，32768，…的page，就是Insert buffer bitmap page，Bitmap page的功能，就是管理其后连续的page_size – 1个page的空间使用率。<br>每个辅助索引页在Insert buffer bitmap中占用4bit。</p>\n<h4 id=\"merge-insert-buffer-发生条件\"><a href=\"#merge-insert-buffer-发生条件\" class=\"headerlink\" title=\"merge insert buffer 发生条件\"></a>merge insert buffer 发生条件</h4><ul>\n<li>辅助索引页被读取到buffer pool中：正常的select查询操作，索引页被调入内存，该索引页对应在insert buffer中的索引更改记录就会发生merge操作。</li>\n<li>Insert buffer bitmap page追踪到该索引页无可用空间时。</li>\n<li>Master Thread。</li>\n</ul>\n<h4 id=\"insert-buffer-刷新到磁盘条件\"><a href=\"#insert-buffer-刷新到磁盘条件\" class=\"headerlink\" title=\"insert buffer 刷新到磁盘条件\"></a>insert buffer 刷新到磁盘条件</h4><ul>\n<li>有一个后台线程，会认为数据库空闲时；</li>\n<li>数据库缓冲池不够用时；</li>\n<li>数据库正常关闭时；</li>\n<li>redo log写满时：<em>几乎不会出现redo log写满，此时整个数据库处于无法写入的不可用状态</em></li>\n</ul>\n<h4 id=\"插入缓冲主要带来如下两个坏处\"><a href=\"#插入缓冲主要带来如下两个坏处\" class=\"headerlink\" title=\"插入缓冲主要带来如下两个坏处\"></a>插入缓冲主要带来如下两个坏处</h4><p>1）可能导致数据库宕机后实例恢复时间变长。如果应用程序执行大量的插入和更新操作，且涉及非唯一的聚集索引，一旦出现宕机，这时就有大量内存中的插入缓冲区数据没有合并至索引页中，导致实例恢复时间会很长。<br>2）在写密集的情况下，插入缓冲会占用过多的缓冲池内存，默认情况下最大可以占用1/2，这在实际应用中会带来一定的问题。</p>\n<h3 id=\"2-change-buffer\"><a href=\"#2-change-buffer\" class=\"headerlink\" title=\"2. change buffer\"></a>2. change buffer</h3><p>InnoDB从1.0.x版本开始引入了Change Buffer，可以将其视为Insert Buffer的升级。<br>从这个版本开始，InnoDB可以对DML操作——Insert、Delete、Update<code>(delete+insert)</code>都进行缓冲，<br>它们分别是：Insert Buffer, Delete Buffer,Purge Buffer。<br>对一个记录进行 update 操作有两个过程</p>\n<ul>\n<li>将记录标记为删除：delete buffer</li>\n<li>将记录真正删除：pruge buffer</li>\n</ul>\n<table>\n<tr>\n    <th colspan=\"2\">参数</th>\n    <th>InnoDB 版本</th>\n    <th colspan=\"3\">作用</th>\n</tr>\n<tr>\n    <td colspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffering\">innodb_change_buffering</span></td>\n    <td style=\"text-align:center\"> 1.0.x开始 </td>\n    <td colspan=\"3\">用来开启各种Buffer选项，默认值是all<br>\n        <ul>\n        <li>inserts</li>\n        <li>deletes</li>\n        <li>purges</li>\n        <li>changes：开启 inserts 和 deletes</li>\n        <li>all：都开启</li>\n        <li>none：都不开启</li>\n        </ul>\n    </td>\n</tr>\n<tr>\n    <td colspan=\"2\" rowspan=\"2\" style=\"text-align:center\"><span id=\"innodb_change_buffer_max_size\">innodb_change_buffer_max_size</span></td>\n    <td style=\"text-align:center\"> 1.2.x开始 </td>\n    <td colspan=\"3\">用来控制change buffer最大使用内存数量<br>默认值为25,表示最多使用1/4的缓存池空间<br>该参数最大有效值是50</td>\n</tr>\n</table>  \n\n<h2 id=\"两次写\"><a href=\"#两次写\" class=\"headerlink\" title=\"两次写\"></a>两次写</h2><p>提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。</p>\n<h3 id=\"脏页刷新到磁盘风险\"><a href=\"#脏页刷新到磁盘风险\" class=\"headerlink\" title=\"脏页刷新到磁盘风险\"></a>脏页刷新到磁盘风险</h3><p>IO的最小单位：</p>\n<ul>\n<li>数据库IO的最小单位是16K（MySQL默认，oracle是8K）</li>\n<li>文件系统IO的最小单位是4K（也有1K的）</li>\n<li>磁盘IO的最小单位是512字节</li>\n</ul>\n<p>因此，存在IO写入导致page损坏的风险：<br><img src=\"/2019/07/31/Mysql02/IO.png\" alt=\"IO风险\"></p>\n<p>提高innodb的可靠性，用来解决部分写失败(partial page write页断裂)。</p>\n<h3 id=\"Double-write解决了什么问题\"><a href=\"#Double-write解决了什么问题\" class=\"headerlink\" title=\"Double write解决了什么问题\"></a>Double write解决了什么问题</h3><p>一个数据页的大小是16K，假设在把内存中的脏页写到数据库的时候，写了8K突然宕机了，也就是说前8K数据是新的，后8K是旧的，那么磁盘数据库这个数据页就是不完整的，是一个坏掉的数据页，这种情况被称为部分<code>写失效</code></p>\n<p><strong>那么可不可以通过 redo log 来进行恢复呢？</strong><br>redo记录的是对页的修改，只能恢复校验完整（还没写）的页，不能修复坏掉的数据页，所以这个数据就丢失了，可能会造成数据不一致，所以需要double write。</p>\n<div class=\"note info\"><p>为什么 redo log 不需要 doublewrite 的支持？<br>因为 redo log 写入的单位就是 512 字节，也就是磁盘 IO 的最小单位，所以无所谓数据损坏。</p></div>   \n\n<h3 id=\"两次写工作流程\"><a href=\"#两次写工作流程\" class=\"headerlink\" title=\"两次写工作流程\"></a>两次写工作流程</h3><p><img src=\"/2019/07/31/Mysql02/doublewrite.png\" alt=\"两次写流程\"><br>doublewrite由两部分组成，一部分为内存中的doublewrite buffer，其大小为2MB，另一部分是磁盘上共享表空间(ibdata x)中连续的128个页，即2个区(extent)，大小也是2M。</p>\n<ol>\n<li>当一系列机制触发数据缓冲池中的脏页刷新时，并不直接写入磁盘数据文件中，而是先拷贝至内存中的doublewrite buffer中；</li>\n<li>接着从两次写缓冲区分两次写入磁盘共享表空间中(连续存储，顺序写，性能很高)，每次写1MB；</li>\n<li>待第二步完成后，再将doublewrite buffer中的脏页数据写入实际的各个表空间文件(离散写)；(脏页数据固化后，即进行标记对应doublewrite数据可覆盖)</li>\n</ol>\n<p>现在我们来分析一下为什么 double write 可以生效。当宕机发生时，有那么几种情况：</p>\n<ol>\n<li>磁盘还未写，此时可以通过 redo log 恢复；</li>\n<li>磁盘正在进行从内存到共享表空间的写，此时数据文件中的页还没开始被写入，因此也同样可以通过 redo log 恢复；</li>\n<li>磁盘正在写数据文件，此时共享表空间已经写完，可以从共享表空间拷贝页的副本到数据文件实现恢复。</li>\n</ol>\n<h2 id=\"自适应哈希索引\"><a href=\"#自适应哈希索引\" class=\"headerlink\" title=\"自适应哈希索引\"></a>自适应哈希索引</h2><p>哈希：一次就可以定位数据</p>\n<p>B+树：取决于树的高度，生产环境一般是 3-4 层，所以需要查询 3-4 次</p>\n<p>自适应哈希索引 AHI（adaptive hash index）建立条件：观察到一个访问模式访问频繁，就会建立哈希索引</p>\n<ul>\n<li>通过该模式访问了 100 次（模式：where x = ?）</li>\n<li>页通过该模式访问了 N 次，其中 N = 页的记录总数⁄16</li>\n</ul>\n<p>InnoDB 存储引擎官方文档显示，启用 AHI 后,读取和写入速度可以提高 2 倍，辅助索引的连接操作性能可以提高 5 倍。</p>\n<h2 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h2><p>为了提高磁盘的操作性能，当前的数据库系统都采用异步IO的方式处理磁盘操作。用户可以在发出一个IO请求胡立即再发出另一个IO请求，当全部IO请求发送完毕后，等待所有IO操作完成，这就是AIO。<br>AIO的另一个优势是可以进行IO Merge操作，也就是将多个IO合并为1个IO, 这样可以提高IOPS(Input/Output Per Second)的性能。</p>\n<p>例如：用户访问页的（space, page_no)为(8,6) (8,7) (8,8)，每个页的大小为16KB，同步IO需要3次IO操作。可以优化为从(8,6)开始读取48KB。</p>\n<h2 id=\"刷新临接页\"><a href=\"#刷新临接页\" class=\"headerlink\" title=\"刷新临接页\"></a>刷新临接页</h2><p>当刷新一个脏页时，InnoDB会检查该页所在extent的所有页，如果是脏页，一起刷新。</p>\n<table>\n    <tr>\n        <th colspan=\"2\">参数</th>\n        <th>版本</th>\n        <th colspan=\"3\">作用</th>\n    </tr>\n    <tr>\n        <th colspan=\"2\" style=\"text-align:center\">innodb_flush_neighbors</th>\n        <td style=\"text-align:center\">1.2.x开始</td>\n        <td colspan=\"3\">控制是否启用该特性</td>\n    </tr>\n</table> \n\n\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><ul>\n<li><a href=\"http://oohcode.com/2015/10/14/InnoDB-Key-Features/\" target=\"_blank\" rel=\"noopener\">http://oohcode.com/2015/10/14/InnoDB-Key-Features/</a></li>\n<li><a href=\"https://chyroc.cn/posts/innodb-storage-engine-reading-1/\" target=\"_blank\" rel=\"noopener\">https://chyroc.cn/posts/innodb-storage-engine-reading-1/</a></li>\n<li><a href=\"https://www.cnblogs.com/zhoujinyi/archive/2013/04/11/2988923.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zhoujinyi/archive/2013/04/11/2988923.html</a></li>\n<li><a href=\"http://huzb.me/2019/01/14/%E6%8F%92%E5%85%A5%E7%BC%93%E5%86%B2%E3%80%81%E4%B8%A4%E6%AC%A1%E5%86%99%E5%92%8C%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/\" target=\"_blank\" rel=\"noopener\">http://huzb.me/2019/01/14/%E6%8F%92%E5%85%A5%E7%BC%93%E5%86%B2%E3%80%81%E4%B8%A4%E6%AC%A1%E5%86%99%E5%92%8C%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</a></li>\n<li><a href=\"https://blog.csdn.net/tanliqing2010/article/details/81509539\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tanliqing2010/article/details/81509539</a></li>\n<li><a href=\"https://www.cnblogs.com/geaozhang/p/7341333.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/geaozhang/p/7341333.html</a></li>\n<li><a href=\"https://draveness.me/mysql-innodb\" target=\"_blank\" rel=\"noopener\">https://draveness.me/mysql-innodb</a></li>\n<li><a href=\"http://richfisher.me/blog/2017/12/18/innodb-notes/\" target=\"_blank\" rel=\"noopener\">http://richfisher.me/blog/2017/12/18/innodb-notes/</a></li>\n<li><a href=\"https://www.docs4dev.com/docs/zh/mysql/5.7/reference/innodb-architecture.html#innodb%E6%9E%B6%E6%9E%84\" target=\"_blank\" rel=\"noopener\">https://www.docs4dev.com/docs/zh/mysql/5.7/reference/innodb-architecture.html#innodb%E6%9E%B6%E6%9E%84</a></li>\n<li>MySQL技术内幕：InnoDB存储引擎(第2版)</li>\n</ul>"},{"title":"JAVA-线程池","date":"2019-10-21T09:23:04.000Z","author":"Guyuqing","copyright":true,"comments":0,"_content":"# 线程\n\n#### 概念\n操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程， 这些线程都拥有各自的计数器、 堆栈和局部变量等属性， 并且能够访问共享的内存变量。 处理器在这些线程上高速切换， 让使用者感觉到这些线程在同时执行。\n<!-- more -->\n#### 线程的创建\n\n* 通过继承Thread类来创建一个线程\n* 实现Runnable接口并重写run()方法，new Thread(runnable).start()，线程启动时就会自动调用该对象的run方法\n* 实现Callable接口并实现call()方法，使用FutureTask类包装Callable对象，使用FutureTask对象作为Thread对象的targer创建并启动线程；也可以使用线程池启动\n       Runnable 和 Callable 的区别\n        1. Runnable规定方法是run方法，Callable规定方法是call方法\n        2. Runnable任务执行后无返回值，Callable任务执行后可返回值\n        3. run方法无法抛出异常，call方法可以抛出异常\n        4. 运行Callable任务可以拿到一个Future对象，Future表示异步计算结果，他提供了检查计算是否完成的方法，以等待计算完成并获取结果。计算完成后用get()方法获取结果，如果线程没有执行完，get()方法会阻塞当前线程执行。如果线程出现异常，get()方法会抛出异常。\n* 线程池：Executors类提供了方便的工厂方法来创建不同类型的 executor services。无论Runnable还是Callable都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行\n      1. public static ExecutorService newCachedThreadPool() 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程，但是在之前构造的线程可用时将重用它们。\n      2. public static ExecutorService newFixedThreadPool(int nThreads)  创建一个定长线程池，可控制线程最大并发数，以共享的无界队列方式来运行线程，超出的线程会在队列中等待。\n      3. public static ExecutorService newSingleThreadExecutor() 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，以无界队列方式来运行线程，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n      4. public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) 创建一个周期线程池，支持定时及周期性任务执行。\n      5. public static ExecutorService newWorkStealingPool() 创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要穿一个并行级别的参数，如果不传，则被设定为默认的CPU数量，这个线程池实际上是ForkJoinPool的扩展，适合使用在很耗时的任务中，能够合理的使用CPU进行并行操作。\n\n#### 线程的管理\n* ForkJoinPool 的每个工作线程都维护了一个工作队列(WorkQueue)，这是一个双端队列，里面存放的对象是任务(ForkJoinTask)\n  * 每个工作线程在运行中产生新的任务(通常是因为调用了fork())，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是LIFO方式，也就是每次从队尾取任务执行。\n  * 每个工作线程在处理自己的工作队列时，会尝试窃取一个任务(或是来自刚刚提交到pool的任务，或是来自其他的工作队列)，窃取的任务位于其他线程工作队列的队首，也就是使用FIFO方式。\n  * 在遇到join()时如果join的任务尚未完成，则会先处理其他任务，并等待其完成。\n* ExecutorCompletionService 内部维护了一个阻塞队列(BlockingQueue), 只有完成的任务才被加入到队列中。如果队列中的数据为空时, 调用take()就会阻塞直到有完成的任务加入队列，基于FutureTask实现。\n\n# 线程池原理\n\n## ThreadPoolExecutor\n\n```java\n    public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.acc = System.getSecurityManager() == null ?\n                null :\n                AccessController.getContext();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n\n\n* corePoolSize 核心线程数量，当有新任务在exectue()方法提交时，会执行以下判断：\n        1. 如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；\n        2. 如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；\n        3. 如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；\n        4. 如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；\n        5. 所以，任务提交时，判断的顺序为 corePoolSize –> workQueue –> maximumPoolSize\n* maximumPoolSize 最大线程数量；\n* keepAliveTime 线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；\n* workQueue 保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:\n  * **直接切换**：这种方式常用的队列是SynchronousQueue\n  * **使用无界队列**：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。\n  * **使用有界队列**：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。\n* threadFactory 它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。\n* handler 它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：\n  * AbortPolicy：直接抛出异常，这是默认策略；\n  * CallerRunsPolicy：用调用者所在的线程来执行任务；\n  * DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；\n  * DiscardPolicy：直接丢弃任务；\n\n## 核心源码\n\n### 线程池执行源码\n\n#### execute\n```java\n    public void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n        \n        // clt记录着runState和workerCount\n        int c = ctl.get();\n        \n        // workerCountOf方法取出低29位的值，表示当前活动的线程数；\n        // 如果当前活动线程数小于corePoolSize，则新建一个线程放入线程池中，并把任务添加到该线程中；\n        if (workerCountOf(c) < corePoolSize) {\n            \n            // addWorker中的第二个参数表示限制添加线程的数量是根据corePoolSize来判断还是maximumPoolSize来判断；\n            // 如果为true，根据corePoolSize来判断；\n            // 如果为false，则根据maximumPoolSize来判断\n            if (addWorker(command, true))\n                return;\n            \n            // 如果添加失败，则重新获取ctl值\n            c = ctl.get();\n        }\n        \n        // 如果当前线程池是运行状态 并且 任务能够成功添加到工作队列\n        if (isRunning(c) && workQueue.offer(command)) {\n            \n            // 重新获取ctl值\n            int recheck = ctl.get();\n            \n            // 再次判断线程池的运行状态，如果不是运行状态，由于之前已经把command添加到workQueue中了，\n            // 这时需要移除该command\n            // 执行过后通过handler使用拒绝策略对该任务进行处理，整个方法返回\n            if (! isRunning(recheck) && remove(command))\n                reject(command);\n            \n            // 获取线程池中的有效线程数，如果数量是0，则执行addWorker方法\n            // 1. 第一个参数为null，表示在线程池中创建一个线程，但不去启动；\n            // 2. 第二个参数为false，将线程池的有限线程数量的上限设置为maximumPoolSize，添加线程时根据maximumPoolSize来判断；\n            // 如果判断workerCount大于0，则直接返回，在workQueue中新增的command会在将来的某个时刻被执行。\n            else if (workerCountOf(recheck) == 0)\n                addWorker(null, false);\n        }\n        // 如果执行到这里，有两种情况：\n        // 1.线程池已经不是RUNNING状态；\n        // 2.线程池是RUNNING状态，但workerCount >= corePoolSize并且workQueue已满;\n        // 这时，再次调用addWorker方法，但第二个参数传入为false，将线程池的有限线程数量的上限设置为maximumPoolSize；\n        // 如果失败则拒绝该任务 \n        else if (!addWorker(command, false))\n            reject(command);\n    }\n\n```\n\nrunState和workCount变量怎么存储在一个int中？参考：https://blog.csdn.net/weixin_34396902/article/details/94527424\n\n#### addWorker\n\n```java\n    private boolean addWorker(Runnable firstTask, boolean core) {\n        // 循环CAS操作，将线程池中的线程数+1\n        retry:\n        for (;;) {\n            \n            // clt记录着runState和workerCount\n            int c = ctl.get();\n            \n            // 获取运行状态\n            int rs = runStateOf(c);\n\n            // 如果rs >= SHUTDOWN，则表示此时不再接收新任务；\n            // 接着判断以下3个条件，只要有1个不满足，则返回false：\n            // 1. rs == SHUTDOWN，这时表示关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务\n            // 2. firsTask为空\n            // 3. 阻塞队列不为空\n            //\n            // rs == SHUTDOWN的情况\n            // 这种情况下不会接受新提交的任务，所以在firstTask不为空的时候会返回false；\n            // 如果firstTask为空，并且workQueue也为空，因为队列中已经没有任务了，不需要再添加线程了，则返回false，\n            if (rs >= SHUTDOWN &&\n                ! (rs == SHUTDOWN &&\n                   firstTask == null &&\n                   ! workQueue.isEmpty()))\n                return false;\n\n            for (;;) {\n                // 获取线程数\n                int wc = workerCountOf(c);\n                \n                // 如果wc超过CAPACITY(最大线程数线程数),也就是ctl的低29位的最大值（二进制是29个1），返回false；\n                // core是addWorker方法的第二个参数,如果为true表示根据corePoolSize来比较，如果为false则根据maximumPoolSize来比较;\n                if (wc >= CAPACITY ||\n                    wc >= (core ? corePoolSize : maximumPoolSize))\n                    return false;\n                \n                // CAS操作尝试增加workerCount，修改clt的值+1，如果成功，则跳出第一个for循环\n                if (compareAndIncrementWorkerCount(c))\n                    break retry;\n                \n                // 如果增加workerCount失败，则重新获取ctl的值\n                c = ctl.get();  \n                // 如果当前的运行状态不等于rs，说明状态已被改变，返回第一个for循环继续执行\n                if (runStateOf(c) != rs)\n                    continue retry;\n            }\n        }\n\n        // 新建线程，并加入到线程池workers中。\n        boolean workerStarted = false;\n        boolean workerAdded = false;\n        Worker w = null;\n        try {\n            // 根据firstTask来创建Worker对象\n            w = new Worker(firstTask);\n            \n            // 每一个Worker对象都会创建一个线程\n            final Thread t = w.thread;\n            \n            \n            if (t != null) {\n                // 对workers操作要通过加锁来实现\n                final ReentrantLock mainLock = this.mainLock;\n                mainLock.lock();\n                try {\n                    // 获取运行状态\n                    int rs = runStateOf(ctl.get());\n                    \n                    // rs < SHUTDOWN表示是RUNNING状态；\n                    // 如果rs是RUNNING状态或者rs是SHUTDOWN状态并且firstTask为null，向线程池中添加线程。\n                    // 因为在SHUTDOWN时不会在添加新的任务，但还是会执行workQueue中的任务\n                    if (rs < SHUTDOWN ||\n                        (rs == SHUTDOWN && firstTask == null)) {\n                        // 判断添加的任务状态,如果已经开始丢出异常\n                        if (t.isAlive()) \n                            throw new IllegalThreadStateException();\n                        \n                        // 将新建的线程加入到线程池中，workers是一个hashSet\n                        workers.add(w);\n                        int s = workers.size();\n                        \n                        // largestPoolSize记录着线程池中出现过的最大线程数量\n                        if (s > largestPoolSize)\n                            largestPoolSize = s;\n                        //标记任务添加\n                        workerAdded = true;\n                    }\n                } finally {\n                    mainLock.unlock();\n                }\n                if (workerAdded) {\n                    // 启动线程\n                    t.start();\n                    // 标记线程启动\n                    workerStarted = true;\n                }\n            }\n        } finally {\n            // 线程添加线程池失败或者线程start失败，则需要调用addWorkerFailed函数\n            // 如果添加成功则需要移除线程，并恢复复clt的值\n            if (! workerStarted)\n                addWorkerFailed(w);\n        }\n        return workerStarted;\n    }\n\n```\nt.start()这个语句，启动时会调用Worker类中的run方法，Worker本身实现了Runnable接口，所以一个Worker类型的对象也是一个线程。\n\n#### Worker类\n\n```java\n    private final class Worker extends AbstractQueuedSynchronizer implements Runnable\n    {\n\n        private static final long serialVersionUID = 6138294804551838833L;\n\n        /** 线程池中正真运行的线程。通过我们指定的线程工厂创建而来 **/\n        final Thread thread;\n        /** 线程包装的任务。thread 在run时主要调用了该任务的run方法 */\n        Runnable firstTask;\n        /** 记录当前线程完成的任务数 */\n        volatile long completedTasks;\n\n        /**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */\n        Worker(Runnable firstTask) {\n            setState(-1); // 在调用runWorker()前，禁止interrupt中断，在interruptIfStarted()方法中会判断 getState()>=0\n            this.firstTask = firstTask;\n            // 利用我们指定的线程工厂创建一个线程\n            this.thread = getThreadFactory().newThread(this);\n        }\n\n        /** Delegates main run loop to outer runWorker  */\n        public void run() {\n            runWorker(this);\n        }\n\n        // Lock methods\n        //\n        // The value 0 represents the unlocked state.\n        // The value 1 represents the locked state.\n\n        protected boolean isHeldExclusively() {\n            return getState() != 0;\n        }\n\n        /**\n        * 尝试获取锁\n        */\n        protected boolean tryAcquire(int unused) {\n            //尝试一次将state从0设置为1，即“锁定”状态，\n            if (compareAndSetState(0, 1)) {\n                //设置exclusiveOwnerThread=当前线程\n                setExclusiveOwnerThread(Thread.currentThread());\n                return true;\n            }\n            return false;\n        }\n\n        /**\n        * 尝试释放锁\n        */\n        protected boolean tryRelease(int unused) {\n            setExclusiveOwnerThread(null);\n            setState(0);\n            return true;\n        }\n\n        public void lock()        { acquire(1); }\n        public boolean tryLock()  { return tryAcquire(1); }\n        public void unlock()      { release(1); }\n        public boolean isLocked() { return isHeldExclusively(); }\n\n\n        /**\n        * 中断（如果运行）\n        * shutdownNow时会循环对worker线程执行\n        * 且不需要获取worker锁，即使在worker运行时也可以中断\n        */\n        void interruptIfStarted() {\n            Thread t;\n            // 如果state>=0、t!=null、且t没有被中断\n            // new Worker()时state==-1，说明不能中断\n            if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {\n                try {\n                    t.interrupt();\n                } catch (SecurityException ignore) {\n                }\n            }\n        }\n    }\n```\n\nWorker类投机取巧的继承了AbstractQueuedSynchronizer来简化在执行任务时的获取、释放锁,这样防止了中断在运行中的任务，只会唤醒(中断)在等待从workQueue中获取任务的线程.\n不直接执行execute(command)提交的command，而要在外面包一层Worker主要是为了使用用AQS锁控制中断，当运行时上锁，就不能中断，TreadPoolExecutor的shutdown()方法中断前都要获取worker锁，只有在等待从workQueue中获取任务getTask()时才能中断。\n\n#### runWorker 方法\n\n在Worker类中的run方法调用了runWorker方法来执行任务.\n\n```java\n\n    final void runWorker(Worker w) {\n        Thread wt = Thread.currentThread();\n        \n        // 获取第一个任务\n        Runnable task = w.firstTask;\n        w.firstTask = null;\n        w.unlock(); // 允许中断\n        \n         // 是否因为异常退出循环\n        boolean completedAbruptly = true;\n        try {\n            \n            // 如果task为空，则通过getTask来获取任务\n            while (task != null || (task = getTask()) != null) {\n                w.lock();\n                // If pool is stopping, ensure thread is interrupted;\n                // if not, ensure thread is not interrupted.  This\n                // requires a recheck in second case to deal with\n                // shutdownNow race while clearing interrupt\n                // 线程池处于stop状态或者当前线程被中断时，线程池状态是stop状态\n                // 但是当前线程没有中断，则发出中断请求\n                if ((runStateAtLeast(ctl.get(), STOP) ||\n                     (Thread.interrupted() &&\n                      runStateAtLeast(ctl.get(), STOP))) &&\n                    !wt.isInterrupted())\n                    wt.interrupt();\n                try {\n                    //开始执行任务前的Hook，类似回调函数\n                    beforeExecute(wt, task);\n                    Throwable thrown = null;\n                    try {\n                        //执行任务\n                        task.run();\n                    } catch (RuntimeException x) {\n                        thrown = x; throw x;\n                    } catch (Error x) {\n                        thrown = x; throw x;\n                    } catch (Throwable x) {\n                        thrown = x; throw new Error(x);\n                    } finally {\n                        //任务执行后的Hook，类似回调函数\n                        afterExecute(task, thrown);\n                    }\n                } finally {\n                    //执行完毕后task重置，completedTasks计数器++，解锁\n                    task = null;\n                    w.completedTasks++;\n                    w.unlock();\n                }\n            }\n            //标记正常退出\n            completedAbruptly = false;\n        } finally {\n            //线程空闲达到我们设定的值时，Worker退出销毁。\n            processWorkerExit(w, completedAbruptly);\n        }\n    }\n\n```\n#### getTask 方法\n\nrunWorker函数中最重要的是getTask()，不断的从阻塞队列中取任务交给线程执行，并且负责线程回收\n\n```java\n    private Runnable getTask() {\n        // 表示上次从阻塞队列中取任务时是否超时\n        boolean timedOut = false; // Did the last poll() time out?\n\n        for (;;) {\n            int c = ctl.get();\n            int rs = runStateOf(c);\n\n            // 如果线程池处于shutdown状态，\n            // 并且队列为空，或者线程池处于stop或者terminate状态，\n            // 在线程池数量-1，返回null，回收线程\n            if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n                decrementWorkerCount();\n                return null;\n            }\n\n            // 获取线程数\n            int wc = workerCountOf(c);\n\n            // timed变量用于判断是否需要进行超时控制。\n            // allowCoreThreadTimeOut默认是false，也就是核心线程不允许进行超时；\n            // wc > corePoolSize，表示当前线程池中的线程数量大于核心线程数量；\n            // 对于超过核心线程数量的这些线程，需要进行超时控制\n            boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n            // 如果线程数目大于最大线程数目 或 当前操作需要进行超时控制，并且上次从阻塞队列中获取任务发生了超时\n            // 并且 线程数目大于1 或 工作队列为空\n            // 尝试将workerCount减1；\n            if ((wc > maximumPoolSize || (timed && timedOut))\n                && (wc > 1 || workQueue.isEmpty())) {\n                if (compareAndDecrementWorkerCount(c))\n                    return null;\n                continue;\n            }\n\n            try {\n                //**保证核心线程不被销毁**\n                // 根据timed来判断，如果为true，则通过阻塞队列的poll方法进行超时控制，如果在keepAliveTime时间内没有获取到任务，则返回null；\n                // 否则通过take方法，如果这时队列为空，则take方法会阻塞直到队列不为空。\n                Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n                if (r != null)\n                    return r;\n                \n                // 如果 r == null，说明已经超时，timedOut设置为true，进入下一个循环\n                timedOut = true;\n            } catch (InterruptedException retry) {\n                // 如果获取任务时当前线程发生了中断，则设置timedOut为false并返回循环重试\n                timedOut = false;\n            }\n        }\n    }\n```\n### FutureTask源码\n\n```java\n\npublic class FutureTask<V> implements RunnableFuture<V> {\n\n    /**\n     * state字段用来保存FutureTask内部的任务执行状态，一共有7中状态，每种状态及其对应的值如下\n     * NEW:表示是个新的任务或者还没被执行完的任务。这是初始状态。\n     * COMPLETING:任务已经执行完成或者执行任务的时候发生异常，但是任务执行结果或者异常原因还没有保存到outcome字段(outcome字段用来保存任务执行结果，如果发生异常，则用来保存异常原因)的时候，状态会从NEW变更到COMPLETING。但是这个状态会时间会比较短，属于中间状态。\n     * NORMAL:任务已经执行完成并且任务执行结果已经保存到outcome字段，状态会从COMPLETING转换到NORMAL。这是一个最终态。\n     * EXCEPTIONAL:任务执行发生异常并且异常原因已经保存到outcome字段中后，状态会从COMPLETING转换到EXCEPTIONAL。这是一个最终态。\n     * CANCELLED:任务还没开始执行或者已经开始执行但是还没有执行完成的时候，用户调用了cancel(false)方法取消任务且不中断任务执行线程，这个时候状态会从NEW转化为CANCELLED状态。这是一个最终态。\n     * INTERRUPTING: 任务还没开始执行或者已经执行但是还没有执行完成的时候，用户调用了cancel(true)方法取消任务并且要中断任务执行线程但是还没有中断任务执行线程之前，状态会从NEW转化为INTERRUPTING。这是一个中间状态。\n     * INTERRUPTED:调用interrupt()中断任务执行线程之后状态会从INTERRUPTING转换到INTERRUPTED。这是一个最终态。\n     * \n     * NEW -> COMPLETING -> NORMAL 正常执行并返回\n     * NEW -> COMPLETING -> EXCEPTIONAL 执行过程中出现了异常\n     * NEW -> CANCELLED 执行前被取消\n     * NEW -> INTERRUPTING -> INTERRUPTED 取消时被中断\n     */\n    private volatile int state;\n    private static final int NEW          = 0;\n    private static final int COMPLETING   = 1;//大于这个值就是完成状态\n    private static final int NORMAL       = 2;\n    private static final int EXCEPTIONAL  = 3;\n    private static final int CANCELLED    = 4;\n    private static final int INTERRUPTING = 5;\n    private static final int INTERRUPTED  = 6;\n\n    /** The underlying callable; nulled out after running */\n    private Callable<V> callable;\n    /** The result to return or exception to throw from get() */\n    private Object outcome; // non-volatile, protected by state reads/writes\n    /** 执行callable的线程 **/\n    private volatile Thread runner;\n    /** 使用Treiber算法实现的无阻塞的Stack，用于存放等待的线程 */\n    private volatile WaitNode waiters;\n\n    @SuppressWarnings(\"unchecked\")\n    private V report(int s) throws ExecutionException {\n        // 拿到返回结果\n        Object x = outcome;\n        // 判断状态\n        if (s == NORMAL)\n            // 状态正常，就返回结果值\n            return (V)x;\n        // 判断异常，就抛出异常。\n        if (s >= CANCELLED)\n            throw new CancellationException();\n        throw new ExecutionException((Throwable)x);\n    }\n\n    /**\n     * 构造方法\n     */\n    public FutureTask(Callable<V> callable) {\n        if (callable == null)\n            throw new NullPointerException();\n        this.callable = callable;\n        this.state = NEW;       // ensure visibility of callable\n    }\n\n    /**\n     * 这个构造方法会把传入的Runnable封装成一个Callable对象保存在callable字段中，同时如果任务执行成功的话就会返回传入的result。\n     * 这种情况下如果不需要返回值的话可以传入一个null。\n     */\n    public FutureTask(Runnable runnable, V result) {\n        this.callable = Executors.callable(runnable, result);\n        this.state = NEW;       // ensure visibility of callable\n    }\n\n    //判断任务是否被取消\n    public boolean isCancelled() {\n        return state >= CANCELLED;\n    }\n    //判断任务是否完成\n    public boolean isDone() {\n        return state != NEW;\n    }\n\n    public boolean cancel(boolean mayInterruptIfRunning) {\n        // 1. 任务是new状态 并且 根据mayInterruptIfRunning把状态从NEW转化到INTERRUPTING或CANCELLED \n        // 不符合上述状态，返回false\n        if (!(state == NEW &&\n              UNSAFE.compareAndSwapInt(this, stateOffset, NEW,\n                  mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))\n            return false;\n        try {    \n        // 2. 如果需要中断任务执行线程\n            if (mayInterruptIfRunning) {\n                try {\n                    // runner保存着当前执行任务的线程\n                    Thread t = runner;\n                    if (t != null)\n                        //中断任务执行线程\n                        t.interrupt();\n                } finally { // final state\n                    // 修改状态为INTERRUPTED\n                    UNSAFE.putOrderedInt(this, stateOffset, INTERRUPTED);\n                }\n            }\n        } finally {\n            finishCompletion();\n        }\n        return true;\n    }\n\n\n    public V get() throws InterruptedException, ExecutionException {\n        int s = state;\n        // 判断任务当前的state <= COMPLETING是否成立。\n        if (s <= COMPLETING)\n            // 如果成立，表明任务还没有结束(这里的结束包括任务正常执行完毕，任务执行异常，任务被取消)\n            // 调用awaitDone()进行阻塞等待。\n            s = awaitDone(false, 0L);\n        // 任务已经结束，调用report()返回结果。\n        return report(s);\n    }\n\n\n    public V get(long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException {\n        if (unit == null)\n            throw new NullPointerException();\n        int s = state;\n        // 如果awaitDone()超时返回之后任务还没结束，则抛出异常\n        if (s <= COMPLETING &&\n            (s = awaitDone(true, unit.toNanos(timeout))) <= COMPLETING)\n            throw new TimeoutException();\n        return report(s);\n    }\n\n\n    protected void done() { }\n\n\n    protected void set(V v) {\n        // 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。\n        if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n            // 把任务执行结果保存在outcome字段中。\n            outcome = v;\n            // CAS的把当前任务状态从COMPLETING变更为NORMAL\n            UNSAFE.putOrderedInt(this, stateOffset, NORMAL); // final state\n            finishCompletion();\n        }\n    }\n\n\n    protected void setException(Throwable t) {\n        // 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。\n        if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n            // 把异常原因保存在outcome字段中，outcome字段用来保存任务执行结果或者异常原因。\n            outcome = t;\n            // CAS的把当前任务状态从COMPLETING变更为EXCEPTIONAL。\n            UNSAFE.putOrderedInt(this, stateOffset, EXCEPTIONAL); // final state\n            finishCompletion();\n        }\n    }\n\n\n    public void run() {\n        // 状态如果不是NEW，说明任务或者已经执行过，或者已经被取消，直接返回\n        // 状态如果是NEW，则尝试把当前执行线程保存在runner字段(runnerOffset)中，如果赋值失败则直接返回\n        if (state != NEW ||\n            !UNSAFE.compareAndSwapObject(this, runnerOffset,\n                                         null, Thread.currentThread()))\n            return;\n        try {\n            Callable<V> c = callable;\n            // 只有初始状态才会执行\n            if (c != null && state == NEW) {\n                V result;\n                boolean ran;\n                try {\n                    // 执行任务  计算逻辑\n                    result = c.call();\n                    ran = true;\n                } catch (Throwable ex) {\n                    result = null;\n                    ran = false;\n                    // 保存异常\n                    setException(ex);\n                }\n                if (ran)\n                    // 任务执行成功，保存返回结果\n                    set(result);\n            }\n        } finally {\n            // 无论是否执行成功，把runner设置为null\n            runner = null;\n            // state must be re-read after nulling runner to prevent\n            // leaked interrupts\n            int s = state;\n            // 如果任务被中断，执行中断处理\n            if (s >= INTERRUPTING)\n                handlePossibleCancellationInterrupt(s);\n        }\n    }\n\n    /**\n     * 与run方法类似，区别在于这个方法不会设置任务的执行结果值\n     *\n     * @return {@code true} if successfully run and reset\n     */\n    protected boolean runAndReset() {\n        if (state != NEW ||\n            !UNSAFE.compareAndSwapObject(this, runnerOffset,\n                                         null, Thread.currentThread()))\n            return false;\n        boolean ran = false;\n        int s = state;\n        try {\n            Callable<V> c = callable;\n            if (c != null && s == NEW) {\n                try {\n                    // 不获取和设置返回值\n                    c.call(); // don't set result\n                    ran = true;\n                } catch (Throwable ex) {\n                    setException(ex);\n                }\n            }\n        } finally {\n\n            runner = null;\n            s = state;\n            if (s >= INTERRUPTING)\n                handlePossibleCancellationInterrupt(s);\n        }\n        // 是否正确的执行并复位\n        return ran && s == NEW;\n    }\n\n\n    private void handlePossibleCancellationInterrupt(int s) {\n        if (s == INTERRUPTING)\n            while (state == INTERRUPTING)\n                Thread.yield(); // wait out pending interrupt\n\n        // 确保cancel(true)产生的中断发生在run或runAndReset方法执行的过程中。\n        //这里会循环的调用Thread.yield()来确保状态在cancel方法中被设置为INTERRUPTED。\n    }\n\n    /**\n     * Simple linked list nodes to record waiting threads in a Treiber\n     * stack.  See other classes such as Phaser and SynchronousQueue\n     * for more detailed explanation.\n     */\n    static final class WaitNode {\n        volatile Thread thread;\n        volatile WaitNode next;\n        WaitNode() { thread = Thread.currentThread(); }\n    }\n\n    /**\n     * Removes and signals all waiting threads, invokes done(), and\n     * nulls out callable.\n     */\n    private void finishCompletion() {\n        // assert state > COMPLETING;\n        // 执行该方法时state必须大于COMPLETING\n        // 依次遍历waiters链表\n        for (WaitNode q; (q = waiters) != null;) {\n            // 设置栈顶节点为null\n            if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) {\n                for (;;) {\n                    Thread t = q.thread;\n                    if (t != null) {\n                        q.thread = null;\n                        // 唤醒等待线程\n                        LockSupport.unpark(t);\n                    }\n                    WaitNode next = q.next;\n                    // 如果next为空，说明栈空了，跳出循环\n                    if (next == null)\n                        break;\n                    // 方便gc回收\n                    q.next = null; \n                    // 重新设置栈顶node\n                    q = next;\n                }\n                break;\n            }\n        }\n        // 空方法，留给子类扩展\n        done();\n\n        callable = null;        // to reduce footprint\n    }\n\n    /**\n     * Awaits completion or aborts on interrupt or timeout.\n     *\n     * @param timed true if use timed waits\n     * @param nanos time to wait, if timed\n     * @return state upon completion\n     */\n    private int awaitDone(boolean timed, long nanos)\n        throws InterruptedException {\n        // 计算等待截止时间\n        final long deadline = timed ? System.nanoTime() + nanos : 0L;\n        WaitNode q = null;\n        boolean queued = false;\n        for (;;) {\n            // 1. 判断阻塞线程是否被中断\n            if (Thread.interrupted()) {\n                // 被中断则在等待队列中删除该节点\n                removeWaiter(q);\n                // 抛出InterruptedException异常\n                throw new InterruptedException();\n            }\n\n            int s = state;\n            // 2. 获取当前状态，如果状态大于COMPLETING\n            if (s > COMPLETING) {\n                // 说明任务已经结束(要么正常结束，要么异常结束，要么被取消)\n                if (q != null)\n                    // 把thread显示置空\n                    q.thread = null;\n                // 返回结果\n                return s;\n            }\n            // 3. 如果状态处于中间状态COMPLETING\n            // 表示任务已经结束但是任务执行线程还没来得及给outcome赋值\n            else if (s == COMPLETING) // cannot time out yet\n                Thread.yield();// 让出执行权让其他线程优先执行\n            // 4. 如果等待节点为空，则构造一个等待节点\n            else if (q == null)\n                q = new WaitNode();\n            // 5. 如果还没有入队列，则把当前节点加入waiters首节点并替换原来waiters\n            else if (!queued)\n                queued = UNSAFE.compareAndSwapObject(this, waitersOffset,\n                                                     q.next = waiters, q);\n            else if (timed) {\n                // 如果需要等待特定时间，则先计算要等待的时间\n                // 如果已经超时，则删除对应节点并返回对应的状态\n                nanos = deadline - System.nanoTime();\n                if (nanos <= 0L) {\n                    removeWaiter(q);\n                    return state;\n                }\n                // 6. 阻塞等待特定时间\n                LockSupport.parkNanos(this, nanos);\n            }\n            // 6. 阻塞等待直到被其他线程唤醒\n            else\n                LockSupport.park(this);\n        }\n    }\n\n\n    private void removeWaiter(WaitNode node) {\n        if (node != null) {\n            // 将thread设置为null是因为下面要根据thread是否为null判断是否要把node移出\n            node.thread = null;\n            // 这里自旋保证删除成功\n            retry:\n            for (;;) {          // restart on removeWaiter race\n                for (WaitNode pred = null, q = waiters, s; q != null; q = s) {\n                    s = q.next;\n                    // q.thread != null说明该q节点不需要移除\n                    if (q.thread != null)\n                        pred = q;\n                    // 如果q.thread == null，且pred != null，需要删除q节点\n                    else if (pred != null) {\n                        // 删除q节点\n                        pred.next = s;\n                         // pred.thread == null时说明在并发情况下被其他线程修改了；\n                         // 返回第一个for循环重试\n                        if (pred.thread == null) // check for race\n                            continue retry;\n                    }\n                     // 如果q.thread != null且pred == null，说明q是栈顶节点\n                     // 设置栈顶元素为s节点，如果失败则返回重试\n                    else if (!UNSAFE.compareAndSwapObject(this, waitersOffset,\n                                                          q, s))\n                        continue retry;\n                }\n                break;\n            }\n        }\n    }\n\n    // Unsafe mechanics\n    private static final sun.misc.Unsafe UNSAFE;\n    private static final long stateOffset;\n    private static final long runnerOffset;\n    private static final long waitersOffset;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> k = FutureTask.class;\n            stateOffset = UNSAFE.objectFieldOffset\n                (k.getDeclaredField(\"state\"));\n            runnerOffset = UNSAFE.objectFieldOffset\n                (k.getDeclaredField(\"runner\"));\n            waitersOffset = UNSAFE.objectFieldOffset\n                (k.getDeclaredField(\"waiters\"));\n        } catch (Exception e) {\n            throw new Error(e);\n        }\n    }\n\n}\n\n```\n## 线程池中的线程初始化\n\n　　默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：\n* prestartCoreThread()：初始化一个核心线程；\n* prestartAllCoreThreads()：初始化所有核心线程\n\n## 线程池的关闭\nThreadPoolExecutor提供了两个方法，用于线程池的关闭\n* shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务\n* shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务\n\n## 线程池大小\n1. 粗略\n    1. 如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1\n    2. 如果是IO密集型任务，参考值可以设置为2*NCPU\n2. 精确：（(线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目\n3. 最佳：压测\n\n## 任务缓存队列\n\n**workQueue**，它用来存放等待执行的任务。BlockingQueue 是个接口，你需要使用它的实现之一来使用BlockingQueue，java.util.concurrent包下具有以下 BlockingQueue 接口的实现类：\n* ArrayBlockingQueue：ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其初始化的时候设定这个上限，但之后就无法对这个上限进行修改了(译者注：因为它是基于数组实现的，也就具有数组的特性：一旦初始化，大小就无法修改)。\n* LinkedBlockingQueue：LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。\n* DelayQueue：DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口。\n* PriorityBlockingQueue：PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。\n* SynchronousQueue：SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。\n\n\n## 线程池总结\n1. 线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。\n2. 当调用 execute() 方法添加一个任务时，线程池会做如下判断：\n     1. 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；\n     2. 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；\n     3. 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；\n     4. 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException。\n     5. 当一个线程完成任务时，它会从队列中取下一个任务来执行。\n     6. 当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。\n\n","source":"_posts/Java-ThreadPool.md","raw":"---\ntitle: JAVA-线程池\ndate: 2019-10-21 17:23:04\ntags:\n    - JAVA\n    - 线程池\n    - 学习笔记\ncategories: JAVA\nauthor: Guyuqing\ncopyright: true\ncomments: false\n---\n# 线程\n\n#### 概念\n操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程， 这些线程都拥有各自的计数器、 堆栈和局部变量等属性， 并且能够访问共享的内存变量。 处理器在这些线程上高速切换， 让使用者感觉到这些线程在同时执行。\n<!-- more -->\n#### 线程的创建\n\n* 通过继承Thread类来创建一个线程\n* 实现Runnable接口并重写run()方法，new Thread(runnable).start()，线程启动时就会自动调用该对象的run方法\n* 实现Callable接口并实现call()方法，使用FutureTask类包装Callable对象，使用FutureTask对象作为Thread对象的targer创建并启动线程；也可以使用线程池启动\n       Runnable 和 Callable 的区别\n        1. Runnable规定方法是run方法，Callable规定方法是call方法\n        2. Runnable任务执行后无返回值，Callable任务执行后可返回值\n        3. run方法无法抛出异常，call方法可以抛出异常\n        4. 运行Callable任务可以拿到一个Future对象，Future表示异步计算结果，他提供了检查计算是否完成的方法，以等待计算完成并获取结果。计算完成后用get()方法获取结果，如果线程没有执行完，get()方法会阻塞当前线程执行。如果线程出现异常，get()方法会抛出异常。\n* 线程池：Executors类提供了方便的工厂方法来创建不同类型的 executor services。无论Runnable还是Callable都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行\n      1. public static ExecutorService newCachedThreadPool() 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程，但是在之前构造的线程可用时将重用它们。\n      2. public static ExecutorService newFixedThreadPool(int nThreads)  创建一个定长线程池，可控制线程最大并发数，以共享的无界队列方式来运行线程，超出的线程会在队列中等待。\n      3. public static ExecutorService newSingleThreadExecutor() 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，以无界队列方式来运行线程，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n      4. public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) 创建一个周期线程池，支持定时及周期性任务执行。\n      5. public static ExecutorService newWorkStealingPool() 创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要穿一个并行级别的参数，如果不传，则被设定为默认的CPU数量，这个线程池实际上是ForkJoinPool的扩展，适合使用在很耗时的任务中，能够合理的使用CPU进行并行操作。\n\n#### 线程的管理\n* ForkJoinPool 的每个工作线程都维护了一个工作队列(WorkQueue)，这是一个双端队列，里面存放的对象是任务(ForkJoinTask)\n  * 每个工作线程在运行中产生新的任务(通常是因为调用了fork())，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是LIFO方式，也就是每次从队尾取任务执行。\n  * 每个工作线程在处理自己的工作队列时，会尝试窃取一个任务(或是来自刚刚提交到pool的任务，或是来自其他的工作队列)，窃取的任务位于其他线程工作队列的队首，也就是使用FIFO方式。\n  * 在遇到join()时如果join的任务尚未完成，则会先处理其他任务，并等待其完成。\n* ExecutorCompletionService 内部维护了一个阻塞队列(BlockingQueue), 只有完成的任务才被加入到队列中。如果队列中的数据为空时, 调用take()就会阻塞直到有完成的任务加入队列，基于FutureTask实现。\n\n# 线程池原理\n\n## ThreadPoolExecutor\n\n```java\n    public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.acc = System.getSecurityManager() == null ?\n                null :\n                AccessController.getContext();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n\n\n* corePoolSize 核心线程数量，当有新任务在exectue()方法提交时，会执行以下判断：\n        1. 如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；\n        2. 如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；\n        3. 如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；\n        4. 如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；\n        5. 所以，任务提交时，判断的顺序为 corePoolSize –> workQueue –> maximumPoolSize\n* maximumPoolSize 最大线程数量；\n* keepAliveTime 线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；\n* workQueue 保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:\n  * **直接切换**：这种方式常用的队列是SynchronousQueue\n  * **使用无界队列**：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。\n  * **使用有界队列**：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。\n* threadFactory 它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。\n* handler 它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：\n  * AbortPolicy：直接抛出异常，这是默认策略；\n  * CallerRunsPolicy：用调用者所在的线程来执行任务；\n  * DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；\n  * DiscardPolicy：直接丢弃任务；\n\n## 核心源码\n\n### 线程池执行源码\n\n#### execute\n```java\n    public void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n        \n        // clt记录着runState和workerCount\n        int c = ctl.get();\n        \n        // workerCountOf方法取出低29位的值，表示当前活动的线程数；\n        // 如果当前活动线程数小于corePoolSize，则新建一个线程放入线程池中，并把任务添加到该线程中；\n        if (workerCountOf(c) < corePoolSize) {\n            \n            // addWorker中的第二个参数表示限制添加线程的数量是根据corePoolSize来判断还是maximumPoolSize来判断；\n            // 如果为true，根据corePoolSize来判断；\n            // 如果为false，则根据maximumPoolSize来判断\n            if (addWorker(command, true))\n                return;\n            \n            // 如果添加失败，则重新获取ctl值\n            c = ctl.get();\n        }\n        \n        // 如果当前线程池是运行状态 并且 任务能够成功添加到工作队列\n        if (isRunning(c) && workQueue.offer(command)) {\n            \n            // 重新获取ctl值\n            int recheck = ctl.get();\n            \n            // 再次判断线程池的运行状态，如果不是运行状态，由于之前已经把command添加到workQueue中了，\n            // 这时需要移除该command\n            // 执行过后通过handler使用拒绝策略对该任务进行处理，整个方法返回\n            if (! isRunning(recheck) && remove(command))\n                reject(command);\n            \n            // 获取线程池中的有效线程数，如果数量是0，则执行addWorker方法\n            // 1. 第一个参数为null，表示在线程池中创建一个线程，但不去启动；\n            // 2. 第二个参数为false，将线程池的有限线程数量的上限设置为maximumPoolSize，添加线程时根据maximumPoolSize来判断；\n            // 如果判断workerCount大于0，则直接返回，在workQueue中新增的command会在将来的某个时刻被执行。\n            else if (workerCountOf(recheck) == 0)\n                addWorker(null, false);\n        }\n        // 如果执行到这里，有两种情况：\n        // 1.线程池已经不是RUNNING状态；\n        // 2.线程池是RUNNING状态，但workerCount >= corePoolSize并且workQueue已满;\n        // 这时，再次调用addWorker方法，但第二个参数传入为false，将线程池的有限线程数量的上限设置为maximumPoolSize；\n        // 如果失败则拒绝该任务 \n        else if (!addWorker(command, false))\n            reject(command);\n    }\n\n```\n\nrunState和workCount变量怎么存储在一个int中？参考：https://blog.csdn.net/weixin_34396902/article/details/94527424\n\n#### addWorker\n\n```java\n    private boolean addWorker(Runnable firstTask, boolean core) {\n        // 循环CAS操作，将线程池中的线程数+1\n        retry:\n        for (;;) {\n            \n            // clt记录着runState和workerCount\n            int c = ctl.get();\n            \n            // 获取运行状态\n            int rs = runStateOf(c);\n\n            // 如果rs >= SHUTDOWN，则表示此时不再接收新任务；\n            // 接着判断以下3个条件，只要有1个不满足，则返回false：\n            // 1. rs == SHUTDOWN，这时表示关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务\n            // 2. firsTask为空\n            // 3. 阻塞队列不为空\n            //\n            // rs == SHUTDOWN的情况\n            // 这种情况下不会接受新提交的任务，所以在firstTask不为空的时候会返回false；\n            // 如果firstTask为空，并且workQueue也为空，因为队列中已经没有任务了，不需要再添加线程了，则返回false，\n            if (rs >= SHUTDOWN &&\n                ! (rs == SHUTDOWN &&\n                   firstTask == null &&\n                   ! workQueue.isEmpty()))\n                return false;\n\n            for (;;) {\n                // 获取线程数\n                int wc = workerCountOf(c);\n                \n                // 如果wc超过CAPACITY(最大线程数线程数),也就是ctl的低29位的最大值（二进制是29个1），返回false；\n                // core是addWorker方法的第二个参数,如果为true表示根据corePoolSize来比较，如果为false则根据maximumPoolSize来比较;\n                if (wc >= CAPACITY ||\n                    wc >= (core ? corePoolSize : maximumPoolSize))\n                    return false;\n                \n                // CAS操作尝试增加workerCount，修改clt的值+1，如果成功，则跳出第一个for循环\n                if (compareAndIncrementWorkerCount(c))\n                    break retry;\n                \n                // 如果增加workerCount失败，则重新获取ctl的值\n                c = ctl.get();  \n                // 如果当前的运行状态不等于rs，说明状态已被改变，返回第一个for循环继续执行\n                if (runStateOf(c) != rs)\n                    continue retry;\n            }\n        }\n\n        // 新建线程，并加入到线程池workers中。\n        boolean workerStarted = false;\n        boolean workerAdded = false;\n        Worker w = null;\n        try {\n            // 根据firstTask来创建Worker对象\n            w = new Worker(firstTask);\n            \n            // 每一个Worker对象都会创建一个线程\n            final Thread t = w.thread;\n            \n            \n            if (t != null) {\n                // 对workers操作要通过加锁来实现\n                final ReentrantLock mainLock = this.mainLock;\n                mainLock.lock();\n                try {\n                    // 获取运行状态\n                    int rs = runStateOf(ctl.get());\n                    \n                    // rs < SHUTDOWN表示是RUNNING状态；\n                    // 如果rs是RUNNING状态或者rs是SHUTDOWN状态并且firstTask为null，向线程池中添加线程。\n                    // 因为在SHUTDOWN时不会在添加新的任务，但还是会执行workQueue中的任务\n                    if (rs < SHUTDOWN ||\n                        (rs == SHUTDOWN && firstTask == null)) {\n                        // 判断添加的任务状态,如果已经开始丢出异常\n                        if (t.isAlive()) \n                            throw new IllegalThreadStateException();\n                        \n                        // 将新建的线程加入到线程池中，workers是一个hashSet\n                        workers.add(w);\n                        int s = workers.size();\n                        \n                        // largestPoolSize记录着线程池中出现过的最大线程数量\n                        if (s > largestPoolSize)\n                            largestPoolSize = s;\n                        //标记任务添加\n                        workerAdded = true;\n                    }\n                } finally {\n                    mainLock.unlock();\n                }\n                if (workerAdded) {\n                    // 启动线程\n                    t.start();\n                    // 标记线程启动\n                    workerStarted = true;\n                }\n            }\n        } finally {\n            // 线程添加线程池失败或者线程start失败，则需要调用addWorkerFailed函数\n            // 如果添加成功则需要移除线程，并恢复复clt的值\n            if (! workerStarted)\n                addWorkerFailed(w);\n        }\n        return workerStarted;\n    }\n\n```\nt.start()这个语句，启动时会调用Worker类中的run方法，Worker本身实现了Runnable接口，所以一个Worker类型的对象也是一个线程。\n\n#### Worker类\n\n```java\n    private final class Worker extends AbstractQueuedSynchronizer implements Runnable\n    {\n\n        private static final long serialVersionUID = 6138294804551838833L;\n\n        /** 线程池中正真运行的线程。通过我们指定的线程工厂创建而来 **/\n        final Thread thread;\n        /** 线程包装的任务。thread 在run时主要调用了该任务的run方法 */\n        Runnable firstTask;\n        /** 记录当前线程完成的任务数 */\n        volatile long completedTasks;\n\n        /**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */\n        Worker(Runnable firstTask) {\n            setState(-1); // 在调用runWorker()前，禁止interrupt中断，在interruptIfStarted()方法中会判断 getState()>=0\n            this.firstTask = firstTask;\n            // 利用我们指定的线程工厂创建一个线程\n            this.thread = getThreadFactory().newThread(this);\n        }\n\n        /** Delegates main run loop to outer runWorker  */\n        public void run() {\n            runWorker(this);\n        }\n\n        // Lock methods\n        //\n        // The value 0 represents the unlocked state.\n        // The value 1 represents the locked state.\n\n        protected boolean isHeldExclusively() {\n            return getState() != 0;\n        }\n\n        /**\n        * 尝试获取锁\n        */\n        protected boolean tryAcquire(int unused) {\n            //尝试一次将state从0设置为1，即“锁定”状态，\n            if (compareAndSetState(0, 1)) {\n                //设置exclusiveOwnerThread=当前线程\n                setExclusiveOwnerThread(Thread.currentThread());\n                return true;\n            }\n            return false;\n        }\n\n        /**\n        * 尝试释放锁\n        */\n        protected boolean tryRelease(int unused) {\n            setExclusiveOwnerThread(null);\n            setState(0);\n            return true;\n        }\n\n        public void lock()        { acquire(1); }\n        public boolean tryLock()  { return tryAcquire(1); }\n        public void unlock()      { release(1); }\n        public boolean isLocked() { return isHeldExclusively(); }\n\n\n        /**\n        * 中断（如果运行）\n        * shutdownNow时会循环对worker线程执行\n        * 且不需要获取worker锁，即使在worker运行时也可以中断\n        */\n        void interruptIfStarted() {\n            Thread t;\n            // 如果state>=0、t!=null、且t没有被中断\n            // new Worker()时state==-1，说明不能中断\n            if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {\n                try {\n                    t.interrupt();\n                } catch (SecurityException ignore) {\n                }\n            }\n        }\n    }\n```\n\nWorker类投机取巧的继承了AbstractQueuedSynchronizer来简化在执行任务时的获取、释放锁,这样防止了中断在运行中的任务，只会唤醒(中断)在等待从workQueue中获取任务的线程.\n不直接执行execute(command)提交的command，而要在外面包一层Worker主要是为了使用用AQS锁控制中断，当运行时上锁，就不能中断，TreadPoolExecutor的shutdown()方法中断前都要获取worker锁，只有在等待从workQueue中获取任务getTask()时才能中断。\n\n#### runWorker 方法\n\n在Worker类中的run方法调用了runWorker方法来执行任务.\n\n```java\n\n    final void runWorker(Worker w) {\n        Thread wt = Thread.currentThread();\n        \n        // 获取第一个任务\n        Runnable task = w.firstTask;\n        w.firstTask = null;\n        w.unlock(); // 允许中断\n        \n         // 是否因为异常退出循环\n        boolean completedAbruptly = true;\n        try {\n            \n            // 如果task为空，则通过getTask来获取任务\n            while (task != null || (task = getTask()) != null) {\n                w.lock();\n                // If pool is stopping, ensure thread is interrupted;\n                // if not, ensure thread is not interrupted.  This\n                // requires a recheck in second case to deal with\n                // shutdownNow race while clearing interrupt\n                // 线程池处于stop状态或者当前线程被中断时，线程池状态是stop状态\n                // 但是当前线程没有中断，则发出中断请求\n                if ((runStateAtLeast(ctl.get(), STOP) ||\n                     (Thread.interrupted() &&\n                      runStateAtLeast(ctl.get(), STOP))) &&\n                    !wt.isInterrupted())\n                    wt.interrupt();\n                try {\n                    //开始执行任务前的Hook，类似回调函数\n                    beforeExecute(wt, task);\n                    Throwable thrown = null;\n                    try {\n                        //执行任务\n                        task.run();\n                    } catch (RuntimeException x) {\n                        thrown = x; throw x;\n                    } catch (Error x) {\n                        thrown = x; throw x;\n                    } catch (Throwable x) {\n                        thrown = x; throw new Error(x);\n                    } finally {\n                        //任务执行后的Hook，类似回调函数\n                        afterExecute(task, thrown);\n                    }\n                } finally {\n                    //执行完毕后task重置，completedTasks计数器++，解锁\n                    task = null;\n                    w.completedTasks++;\n                    w.unlock();\n                }\n            }\n            //标记正常退出\n            completedAbruptly = false;\n        } finally {\n            //线程空闲达到我们设定的值时，Worker退出销毁。\n            processWorkerExit(w, completedAbruptly);\n        }\n    }\n\n```\n#### getTask 方法\n\nrunWorker函数中最重要的是getTask()，不断的从阻塞队列中取任务交给线程执行，并且负责线程回收\n\n```java\n    private Runnable getTask() {\n        // 表示上次从阻塞队列中取任务时是否超时\n        boolean timedOut = false; // Did the last poll() time out?\n\n        for (;;) {\n            int c = ctl.get();\n            int rs = runStateOf(c);\n\n            // 如果线程池处于shutdown状态，\n            // 并且队列为空，或者线程池处于stop或者terminate状态，\n            // 在线程池数量-1，返回null，回收线程\n            if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n                decrementWorkerCount();\n                return null;\n            }\n\n            // 获取线程数\n            int wc = workerCountOf(c);\n\n            // timed变量用于判断是否需要进行超时控制。\n            // allowCoreThreadTimeOut默认是false，也就是核心线程不允许进行超时；\n            // wc > corePoolSize，表示当前线程池中的线程数量大于核心线程数量；\n            // 对于超过核心线程数量的这些线程，需要进行超时控制\n            boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n            // 如果线程数目大于最大线程数目 或 当前操作需要进行超时控制，并且上次从阻塞队列中获取任务发生了超时\n            // 并且 线程数目大于1 或 工作队列为空\n            // 尝试将workerCount减1；\n            if ((wc > maximumPoolSize || (timed && timedOut))\n                && (wc > 1 || workQueue.isEmpty())) {\n                if (compareAndDecrementWorkerCount(c))\n                    return null;\n                continue;\n            }\n\n            try {\n                //**保证核心线程不被销毁**\n                // 根据timed来判断，如果为true，则通过阻塞队列的poll方法进行超时控制，如果在keepAliveTime时间内没有获取到任务，则返回null；\n                // 否则通过take方法，如果这时队列为空，则take方法会阻塞直到队列不为空。\n                Runnable r = timed ?\n                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                    workQueue.take();\n                if (r != null)\n                    return r;\n                \n                // 如果 r == null，说明已经超时，timedOut设置为true，进入下一个循环\n                timedOut = true;\n            } catch (InterruptedException retry) {\n                // 如果获取任务时当前线程发生了中断，则设置timedOut为false并返回循环重试\n                timedOut = false;\n            }\n        }\n    }\n```\n### FutureTask源码\n\n```java\n\npublic class FutureTask<V> implements RunnableFuture<V> {\n\n    /**\n     * state字段用来保存FutureTask内部的任务执行状态，一共有7中状态，每种状态及其对应的值如下\n     * NEW:表示是个新的任务或者还没被执行完的任务。这是初始状态。\n     * COMPLETING:任务已经执行完成或者执行任务的时候发生异常，但是任务执行结果或者异常原因还没有保存到outcome字段(outcome字段用来保存任务执行结果，如果发生异常，则用来保存异常原因)的时候，状态会从NEW变更到COMPLETING。但是这个状态会时间会比较短，属于中间状态。\n     * NORMAL:任务已经执行完成并且任务执行结果已经保存到outcome字段，状态会从COMPLETING转换到NORMAL。这是一个最终态。\n     * EXCEPTIONAL:任务执行发生异常并且异常原因已经保存到outcome字段中后，状态会从COMPLETING转换到EXCEPTIONAL。这是一个最终态。\n     * CANCELLED:任务还没开始执行或者已经开始执行但是还没有执行完成的时候，用户调用了cancel(false)方法取消任务且不中断任务执行线程，这个时候状态会从NEW转化为CANCELLED状态。这是一个最终态。\n     * INTERRUPTING: 任务还没开始执行或者已经执行但是还没有执行完成的时候，用户调用了cancel(true)方法取消任务并且要中断任务执行线程但是还没有中断任务执行线程之前，状态会从NEW转化为INTERRUPTING。这是一个中间状态。\n     * INTERRUPTED:调用interrupt()中断任务执行线程之后状态会从INTERRUPTING转换到INTERRUPTED。这是一个最终态。\n     * \n     * NEW -> COMPLETING -> NORMAL 正常执行并返回\n     * NEW -> COMPLETING -> EXCEPTIONAL 执行过程中出现了异常\n     * NEW -> CANCELLED 执行前被取消\n     * NEW -> INTERRUPTING -> INTERRUPTED 取消时被中断\n     */\n    private volatile int state;\n    private static final int NEW          = 0;\n    private static final int COMPLETING   = 1;//大于这个值就是完成状态\n    private static final int NORMAL       = 2;\n    private static final int EXCEPTIONAL  = 3;\n    private static final int CANCELLED    = 4;\n    private static final int INTERRUPTING = 5;\n    private static final int INTERRUPTED  = 6;\n\n    /** The underlying callable; nulled out after running */\n    private Callable<V> callable;\n    /** The result to return or exception to throw from get() */\n    private Object outcome; // non-volatile, protected by state reads/writes\n    /** 执行callable的线程 **/\n    private volatile Thread runner;\n    /** 使用Treiber算法实现的无阻塞的Stack，用于存放等待的线程 */\n    private volatile WaitNode waiters;\n\n    @SuppressWarnings(\"unchecked\")\n    private V report(int s) throws ExecutionException {\n        // 拿到返回结果\n        Object x = outcome;\n        // 判断状态\n        if (s == NORMAL)\n            // 状态正常，就返回结果值\n            return (V)x;\n        // 判断异常，就抛出异常。\n        if (s >= CANCELLED)\n            throw new CancellationException();\n        throw new ExecutionException((Throwable)x);\n    }\n\n    /**\n     * 构造方法\n     */\n    public FutureTask(Callable<V> callable) {\n        if (callable == null)\n            throw new NullPointerException();\n        this.callable = callable;\n        this.state = NEW;       // ensure visibility of callable\n    }\n\n    /**\n     * 这个构造方法会把传入的Runnable封装成一个Callable对象保存在callable字段中，同时如果任务执行成功的话就会返回传入的result。\n     * 这种情况下如果不需要返回值的话可以传入一个null。\n     */\n    public FutureTask(Runnable runnable, V result) {\n        this.callable = Executors.callable(runnable, result);\n        this.state = NEW;       // ensure visibility of callable\n    }\n\n    //判断任务是否被取消\n    public boolean isCancelled() {\n        return state >= CANCELLED;\n    }\n    //判断任务是否完成\n    public boolean isDone() {\n        return state != NEW;\n    }\n\n    public boolean cancel(boolean mayInterruptIfRunning) {\n        // 1. 任务是new状态 并且 根据mayInterruptIfRunning把状态从NEW转化到INTERRUPTING或CANCELLED \n        // 不符合上述状态，返回false\n        if (!(state == NEW &&\n              UNSAFE.compareAndSwapInt(this, stateOffset, NEW,\n                  mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))\n            return false;\n        try {    \n        // 2. 如果需要中断任务执行线程\n            if (mayInterruptIfRunning) {\n                try {\n                    // runner保存着当前执行任务的线程\n                    Thread t = runner;\n                    if (t != null)\n                        //中断任务执行线程\n                        t.interrupt();\n                } finally { // final state\n                    // 修改状态为INTERRUPTED\n                    UNSAFE.putOrderedInt(this, stateOffset, INTERRUPTED);\n                }\n            }\n        } finally {\n            finishCompletion();\n        }\n        return true;\n    }\n\n\n    public V get() throws InterruptedException, ExecutionException {\n        int s = state;\n        // 判断任务当前的state <= COMPLETING是否成立。\n        if (s <= COMPLETING)\n            // 如果成立，表明任务还没有结束(这里的结束包括任务正常执行完毕，任务执行异常，任务被取消)\n            // 调用awaitDone()进行阻塞等待。\n            s = awaitDone(false, 0L);\n        // 任务已经结束，调用report()返回结果。\n        return report(s);\n    }\n\n\n    public V get(long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException {\n        if (unit == null)\n            throw new NullPointerException();\n        int s = state;\n        // 如果awaitDone()超时返回之后任务还没结束，则抛出异常\n        if (s <= COMPLETING &&\n            (s = awaitDone(true, unit.toNanos(timeout))) <= COMPLETING)\n            throw new TimeoutException();\n        return report(s);\n    }\n\n\n    protected void done() { }\n\n\n    protected void set(V v) {\n        // 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。\n        if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n            // 把任务执行结果保存在outcome字段中。\n            outcome = v;\n            // CAS的把当前任务状态从COMPLETING变更为NORMAL\n            UNSAFE.putOrderedInt(this, stateOffset, NORMAL); // final state\n            finishCompletion();\n        }\n    }\n\n\n    protected void setException(Throwable t) {\n        // 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。\n        if (UNSAFE.compareAndSwapInt(this, stateOffset, NEW, COMPLETING)) {\n            // 把异常原因保存在outcome字段中，outcome字段用来保存任务执行结果或者异常原因。\n            outcome = t;\n            // CAS的把当前任务状态从COMPLETING变更为EXCEPTIONAL。\n            UNSAFE.putOrderedInt(this, stateOffset, EXCEPTIONAL); // final state\n            finishCompletion();\n        }\n    }\n\n\n    public void run() {\n        // 状态如果不是NEW，说明任务或者已经执行过，或者已经被取消，直接返回\n        // 状态如果是NEW，则尝试把当前执行线程保存在runner字段(runnerOffset)中，如果赋值失败则直接返回\n        if (state != NEW ||\n            !UNSAFE.compareAndSwapObject(this, runnerOffset,\n                                         null, Thread.currentThread()))\n            return;\n        try {\n            Callable<V> c = callable;\n            // 只有初始状态才会执行\n            if (c != null && state == NEW) {\n                V result;\n                boolean ran;\n                try {\n                    // 执行任务  计算逻辑\n                    result = c.call();\n                    ran = true;\n                } catch (Throwable ex) {\n                    result = null;\n                    ran = false;\n                    // 保存异常\n                    setException(ex);\n                }\n                if (ran)\n                    // 任务执行成功，保存返回结果\n                    set(result);\n            }\n        } finally {\n            // 无论是否执行成功，把runner设置为null\n            runner = null;\n            // state must be re-read after nulling runner to prevent\n            // leaked interrupts\n            int s = state;\n            // 如果任务被中断，执行中断处理\n            if (s >= INTERRUPTING)\n                handlePossibleCancellationInterrupt(s);\n        }\n    }\n\n    /**\n     * 与run方法类似，区别在于这个方法不会设置任务的执行结果值\n     *\n     * @return {@code true} if successfully run and reset\n     */\n    protected boolean runAndReset() {\n        if (state != NEW ||\n            !UNSAFE.compareAndSwapObject(this, runnerOffset,\n                                         null, Thread.currentThread()))\n            return false;\n        boolean ran = false;\n        int s = state;\n        try {\n            Callable<V> c = callable;\n            if (c != null && s == NEW) {\n                try {\n                    // 不获取和设置返回值\n                    c.call(); // don't set result\n                    ran = true;\n                } catch (Throwable ex) {\n                    setException(ex);\n                }\n            }\n        } finally {\n\n            runner = null;\n            s = state;\n            if (s >= INTERRUPTING)\n                handlePossibleCancellationInterrupt(s);\n        }\n        // 是否正确的执行并复位\n        return ran && s == NEW;\n    }\n\n\n    private void handlePossibleCancellationInterrupt(int s) {\n        if (s == INTERRUPTING)\n            while (state == INTERRUPTING)\n                Thread.yield(); // wait out pending interrupt\n\n        // 确保cancel(true)产生的中断发生在run或runAndReset方法执行的过程中。\n        //这里会循环的调用Thread.yield()来确保状态在cancel方法中被设置为INTERRUPTED。\n    }\n\n    /**\n     * Simple linked list nodes to record waiting threads in a Treiber\n     * stack.  See other classes such as Phaser and SynchronousQueue\n     * for more detailed explanation.\n     */\n    static final class WaitNode {\n        volatile Thread thread;\n        volatile WaitNode next;\n        WaitNode() { thread = Thread.currentThread(); }\n    }\n\n    /**\n     * Removes and signals all waiting threads, invokes done(), and\n     * nulls out callable.\n     */\n    private void finishCompletion() {\n        // assert state > COMPLETING;\n        // 执行该方法时state必须大于COMPLETING\n        // 依次遍历waiters链表\n        for (WaitNode q; (q = waiters) != null;) {\n            // 设置栈顶节点为null\n            if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) {\n                for (;;) {\n                    Thread t = q.thread;\n                    if (t != null) {\n                        q.thread = null;\n                        // 唤醒等待线程\n                        LockSupport.unpark(t);\n                    }\n                    WaitNode next = q.next;\n                    // 如果next为空，说明栈空了，跳出循环\n                    if (next == null)\n                        break;\n                    // 方便gc回收\n                    q.next = null; \n                    // 重新设置栈顶node\n                    q = next;\n                }\n                break;\n            }\n        }\n        // 空方法，留给子类扩展\n        done();\n\n        callable = null;        // to reduce footprint\n    }\n\n    /**\n     * Awaits completion or aborts on interrupt or timeout.\n     *\n     * @param timed true if use timed waits\n     * @param nanos time to wait, if timed\n     * @return state upon completion\n     */\n    private int awaitDone(boolean timed, long nanos)\n        throws InterruptedException {\n        // 计算等待截止时间\n        final long deadline = timed ? System.nanoTime() + nanos : 0L;\n        WaitNode q = null;\n        boolean queued = false;\n        for (;;) {\n            // 1. 判断阻塞线程是否被中断\n            if (Thread.interrupted()) {\n                // 被中断则在等待队列中删除该节点\n                removeWaiter(q);\n                // 抛出InterruptedException异常\n                throw new InterruptedException();\n            }\n\n            int s = state;\n            // 2. 获取当前状态，如果状态大于COMPLETING\n            if (s > COMPLETING) {\n                // 说明任务已经结束(要么正常结束，要么异常结束，要么被取消)\n                if (q != null)\n                    // 把thread显示置空\n                    q.thread = null;\n                // 返回结果\n                return s;\n            }\n            // 3. 如果状态处于中间状态COMPLETING\n            // 表示任务已经结束但是任务执行线程还没来得及给outcome赋值\n            else if (s == COMPLETING) // cannot time out yet\n                Thread.yield();// 让出执行权让其他线程优先执行\n            // 4. 如果等待节点为空，则构造一个等待节点\n            else if (q == null)\n                q = new WaitNode();\n            // 5. 如果还没有入队列，则把当前节点加入waiters首节点并替换原来waiters\n            else if (!queued)\n                queued = UNSAFE.compareAndSwapObject(this, waitersOffset,\n                                                     q.next = waiters, q);\n            else if (timed) {\n                // 如果需要等待特定时间，则先计算要等待的时间\n                // 如果已经超时，则删除对应节点并返回对应的状态\n                nanos = deadline - System.nanoTime();\n                if (nanos <= 0L) {\n                    removeWaiter(q);\n                    return state;\n                }\n                // 6. 阻塞等待特定时间\n                LockSupport.parkNanos(this, nanos);\n            }\n            // 6. 阻塞等待直到被其他线程唤醒\n            else\n                LockSupport.park(this);\n        }\n    }\n\n\n    private void removeWaiter(WaitNode node) {\n        if (node != null) {\n            // 将thread设置为null是因为下面要根据thread是否为null判断是否要把node移出\n            node.thread = null;\n            // 这里自旋保证删除成功\n            retry:\n            for (;;) {          // restart on removeWaiter race\n                for (WaitNode pred = null, q = waiters, s; q != null; q = s) {\n                    s = q.next;\n                    // q.thread != null说明该q节点不需要移除\n                    if (q.thread != null)\n                        pred = q;\n                    // 如果q.thread == null，且pred != null，需要删除q节点\n                    else if (pred != null) {\n                        // 删除q节点\n                        pred.next = s;\n                         // pred.thread == null时说明在并发情况下被其他线程修改了；\n                         // 返回第一个for循环重试\n                        if (pred.thread == null) // check for race\n                            continue retry;\n                    }\n                     // 如果q.thread != null且pred == null，说明q是栈顶节点\n                     // 设置栈顶元素为s节点，如果失败则返回重试\n                    else if (!UNSAFE.compareAndSwapObject(this, waitersOffset,\n                                                          q, s))\n                        continue retry;\n                }\n                break;\n            }\n        }\n    }\n\n    // Unsafe mechanics\n    private static final sun.misc.Unsafe UNSAFE;\n    private static final long stateOffset;\n    private static final long runnerOffset;\n    private static final long waitersOffset;\n    static {\n        try {\n            UNSAFE = sun.misc.Unsafe.getUnsafe();\n            Class<?> k = FutureTask.class;\n            stateOffset = UNSAFE.objectFieldOffset\n                (k.getDeclaredField(\"state\"));\n            runnerOffset = UNSAFE.objectFieldOffset\n                (k.getDeclaredField(\"runner\"));\n            waitersOffset = UNSAFE.objectFieldOffset\n                (k.getDeclaredField(\"waiters\"));\n        } catch (Exception e) {\n            throw new Error(e);\n        }\n    }\n\n}\n\n```\n## 线程池中的线程初始化\n\n　　默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：\n* prestartCoreThread()：初始化一个核心线程；\n* prestartAllCoreThreads()：初始化所有核心线程\n\n## 线程池的关闭\nThreadPoolExecutor提供了两个方法，用于线程池的关闭\n* shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务\n* shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务\n\n## 线程池大小\n1. 粗略\n    1. 如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1\n    2. 如果是IO密集型任务，参考值可以设置为2*NCPU\n2. 精确：（(线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目\n3. 最佳：压测\n\n## 任务缓存队列\n\n**workQueue**，它用来存放等待执行的任务。BlockingQueue 是个接口，你需要使用它的实现之一来使用BlockingQueue，java.util.concurrent包下具有以下 BlockingQueue 接口的实现类：\n* ArrayBlockingQueue：ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其初始化的时候设定这个上限，但之后就无法对这个上限进行修改了(译者注：因为它是基于数组实现的，也就具有数组的特性：一旦初始化，大小就无法修改)。\n* LinkedBlockingQueue：LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。\n* DelayQueue：DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口。\n* PriorityBlockingQueue：PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。\n* SynchronousQueue：SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。\n\n\n## 线程池总结\n1. 线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。\n2. 当调用 execute() 方法添加一个任务时，线程池会做如下判断：\n     1. 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；\n     2. 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；\n     3. 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；\n     4. 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException。\n     5. 当一个线程完成任务时，它会从队列中取下一个任务来执行。\n     6. 当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。\n\n","slug":"Java-ThreadPool","published":1,"updated":"2019-12-13T11:13:27.644Z","layout":"post","photos":[],"link":"","_id":"ck4859yg20053t0fy2bdu8e0b","content":"<h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程， 这些线程都拥有各自的计数器、 堆栈和局部变量等属性， 并且能够访问共享的内存变量。 处理器在这些线程上高速切换， 让使用者感觉到这些线程在同时执行。</p>\n<a id=\"more\"></a>\n<h4 id=\"线程的创建\"><a href=\"#线程的创建\" class=\"headerlink\" title=\"线程的创建\"></a>线程的创建</h4><ul>\n<li>通过继承Thread类来创建一个线程</li>\n<li>实现Runnable接口并重写run()方法，new Thread(runnable).start()，线程启动时就会自动调用该对象的run方法</li>\n<li>实现Callable接口并实现call()方法，使用FutureTask类包装Callable对象，使用FutureTask对象作为Thread对象的targer创建并启动线程；也可以使用线程池启动<pre><code>Runnable 和 Callable 的区别\n 1. Runnable规定方法是run方法，Callable规定方法是call方法\n 2. Runnable任务执行后无返回值，Callable任务执行后可返回值\n 3. run方法无法抛出异常，call方法可以抛出异常\n 4. 运行Callable任务可以拿到一个Future对象，Future表示异步计算结果，他提供了检查计算是否完成的方法，以等待计算完成并获取结果。计算完成后用get()方法获取结果，如果线程没有执行完，get()方法会阻塞当前线程执行。如果线程出现异常，get()方法会抛出异常。</code></pre></li>\n<li>线程池：Executors类提供了方便的工厂方法来创建不同类型的 executor services。无论Runnable还是Callable都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行<pre><code>1. public static ExecutorService newCachedThreadPool() 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程，但是在之前构造的线程可用时将重用它们。\n2. public static ExecutorService newFixedThreadPool(int nThreads)  创建一个定长线程池，可控制线程最大并发数，以共享的无界队列方式来运行线程，超出的线程会在队列中等待。\n3. public static ExecutorService newSingleThreadExecutor() 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，以无界队列方式来运行线程，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n4. public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) 创建一个周期线程池，支持定时及周期性任务执行。\n5. public static ExecutorService newWorkStealingPool() 创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要穿一个并行级别的参数，如果不传，则被设定为默认的CPU数量，这个线程池实际上是ForkJoinPool的扩展，适合使用在很耗时的任务中，能够合理的使用CPU进行并行操作。</code></pre></li>\n</ul>\n<h4 id=\"线程的管理\"><a href=\"#线程的管理\" class=\"headerlink\" title=\"线程的管理\"></a>线程的管理</h4><ul>\n<li>ForkJoinPool 的每个工作线程都维护了一个工作队列(WorkQueue)，这是一个双端队列，里面存放的对象是任务(ForkJoinTask)<ul>\n<li>每个工作线程在运行中产生新的任务(通常是因为调用了fork())，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是LIFO方式，也就是每次从队尾取任务执行。</li>\n<li>每个工作线程在处理自己的工作队列时，会尝试窃取一个任务(或是来自刚刚提交到pool的任务，或是来自其他的工作队列)，窃取的任务位于其他线程工作队列的队首，也就是使用FIFO方式。</li>\n<li>在遇到join()时如果join的任务尚未完成，则会先处理其他任务，并等待其完成。</li>\n</ul>\n</li>\n<li>ExecutorCompletionService 内部维护了一个阻塞队列(BlockingQueue), 只有完成的任务才被加入到队列中。如果队列中的数据为空时, 调用take()就会阻塞直到有完成的任务加入队列，基于FutureTask实现。</li>\n</ul>\n<h1 id=\"线程池原理\"><a href=\"#线程池原理\" class=\"headerlink\" title=\"线程池原理\"></a>线程池原理</h1><h2 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.acc = System.getSecurityManager() == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> :</span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>corePoolSize 核心线程数量，当有新任务在exectue()方法提交时，会执行以下判断：<pre><code>1. 如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；\n2. 如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；\n3. 如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；\n4. 如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；\n5. 所以，任务提交时，判断的顺序为 corePoolSize –&gt; workQueue –&gt; maximumPoolSize</code></pre></li>\n<li>maximumPoolSize 最大线程数量；</li>\n<li>keepAliveTime 线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；</li>\n<li>workQueue 保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:<ul>\n<li><strong>直接切换</strong>：这种方式常用的队列是SynchronousQueue</li>\n<li><strong>使用无界队列</strong>：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。</li>\n<li><strong>使用有界队列</strong>：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。</li>\n</ul>\n</li>\n<li>threadFactory 它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。</li>\n<li>handler 它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：<ul>\n<li>AbortPolicy：直接抛出异常，这是默认策略；</li>\n<li>CallerRunsPolicy：用调用者所在的线程来执行任务；</li>\n<li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</li>\n<li>DiscardPolicy：直接丢弃任务；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"核心源码\"><a href=\"#核心源码\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h2><h3 id=\"线程池执行源码\"><a href=\"#线程池执行源码\" class=\"headerlink\" title=\"线程池执行源码\"></a>线程池执行源码</h3><h4 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// clt记录着runState和workerCount</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// workerCountOf方法取出低29位的值，表示当前活动的线程数；</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前活动线程数小于corePoolSize，则新建一个线程放入线程池中，并把任务添加到该线程中；</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// addWorker中的第二个参数表示限制添加线程的数量是根据corePoolSize来判断还是maximumPoolSize来判断；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果为true，根据corePoolSize来判断；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果为false，则根据maximumPoolSize来判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"keyword\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果添加失败，则重新获取ctl值</span></span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果当前线程池是运行状态 并且 任务能够成功添加到工作队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 重新获取ctl值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> recheck = ctl.get();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 再次判断线程池的运行状态，如果不是运行状态，由于之前已经把command添加到workQueue中了，</span></span><br><span class=\"line\">        <span class=\"comment\">// 这时需要移除该command</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行过后通过handler使用拒绝策略对该任务进行处理，整个方法返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取线程池中的有效线程数，如果数量是0，则执行addWorker方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 第一个参数为null，表示在线程池中创建一个线程，但不去启动；</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 第二个参数为false，将线程池的有限线程数量的上限设置为maximumPoolSize，添加线程时根据maximumPoolSize来判断；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果判断workerCount大于0，则直接返回，在workQueue中新增的command会在将来的某个时刻被执行。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果执行到这里，有两种情况：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.线程池已经不是RUNNING状态；</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.线程池是RUNNING状态，但workerCount &gt;= corePoolSize并且workQueue已满;</span></span><br><span class=\"line\">    <span class=\"comment\">// 这时，再次调用addWorker方法，但第二个参数传入为false，将线程池的有限线程数量的上限设置为maximumPoolSize；</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果失败则拒绝该任务 </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"keyword\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>runState和workCount变量怎么存储在一个int中？参考：<a href=\"https://blog.csdn.net/weixin_34396902/article/details/94527424\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_34396902/article/details/94527424</a></p>\n<h4 id=\"addWorker\"><a href=\"#addWorker\" class=\"headerlink\" title=\"addWorker\"></a>addWorker</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addWorker</span><span class=\"params\">(Runnable firstTask, <span class=\"keyword\">boolean</span> core)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环CAS操作，将线程池中的线程数+1</span></span><br><span class=\"line\">    retry:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// clt记录着runState和workerCount</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取运行状态</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果rs &gt;= SHUTDOWN，则表示此时不再接收新任务；</span></span><br><span class=\"line\">        <span class=\"comment\">// 接着判断以下3个条件，只要有1个不满足，则返回false：</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. rs == SHUTDOWN，这时表示关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. firsTask为空</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 阻塞队列不为空</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// rs == SHUTDOWN的情况</span></span><br><span class=\"line\">        <span class=\"comment\">// 这种情况下不会接受新提交的任务，所以在firstTask不为空的时候会返回false；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果firstTask为空，并且workQueue也为空，因为队列中已经没有任务了，不需要再添加线程了，则返回false，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class=\"line\">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class=\"line\">               firstTask == <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               ! workQueue.isEmpty()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取线程数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> wc = workerCountOf(c);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果wc超过CAPACITY(最大线程数线程数),也就是ctl的低29位的最大值（二进制是29个1），返回false；</span></span><br><span class=\"line\">            <span class=\"comment\">// core是addWorker方法的第二个参数,如果为true表示根据corePoolSize来比较，如果为false则根据maximumPoolSize来比较;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wc &gt;= CAPACITY ||</span><br><span class=\"line\">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// CAS操作尝试增加workerCount，修改clt的值+1，如果成功，则跳出第一个for循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">break</span> retry;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果增加workerCount失败，则重新获取ctl的值</span></span><br><span class=\"line\">            c = ctl.get();  </span><br><span class=\"line\">            <span class=\"comment\">// 如果当前的运行状态不等于rs，说明状态已被改变，返回第一个for循环继续执行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runStateOf(c) != rs)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新建线程，并加入到线程池workers中。</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> workerStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> workerAdded = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Worker w = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据firstTask来创建Worker对象</span></span><br><span class=\"line\">        w = <span class=\"keyword\">new</span> Worker(firstTask);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 每一个Worker对象都会创建一个线程</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread t = w.thread;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对workers操作要通过加锁来实现</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> ReentrantLock mainLock = <span class=\"keyword\">this</span>.mainLock;</span><br><span class=\"line\">            mainLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取运行状态</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rs = runStateOf(ctl.get());</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// rs &lt; SHUTDOWN表示是RUNNING状态；</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果rs是RUNNING状态或者rs是SHUTDOWN状态并且firstTask为null，向线程池中添加线程。</span></span><br><span class=\"line\">                <span class=\"comment\">// 因为在SHUTDOWN时不会在添加新的任务，但还是会执行workQueue中的任务</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rs &lt; SHUTDOWN ||</span><br><span class=\"line\">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 判断添加的任务状态,如果已经开始丢出异常</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.isAlive()) </span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalThreadStateException();</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">// 将新建的线程加入到线程池中，workers是一个hashSet</span></span><br><span class=\"line\">                    workers.add(w);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> s = workers.size();</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">// largestPoolSize记录着线程池中出现过的最大线程数量</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s &gt; largestPoolSize)</span><br><span class=\"line\">                        largestPoolSize = s;</span><br><span class=\"line\">                    <span class=\"comment\">//标记任务添加</span></span><br><span class=\"line\">                    workerAdded = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mainLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workerAdded) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">                <span class=\"comment\">// 标记线程启动</span></span><br><span class=\"line\">                workerStarted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 线程添加线程池失败或者线程start失败，则需要调用addWorkerFailed函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果添加成功则需要移除线程，并恢复复clt的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! workerStarted)</span><br><span class=\"line\">            addWorkerFailed(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workerStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>t.start()这个语句，启动时会调用Worker类中的run方法，Worker本身实现了Runnable接口，所以一个Worker类型的对象也是一个线程。</p>\n<h4 id=\"Worker类\"><a href=\"#Worker类\" class=\"headerlink\" title=\"Worker类\"></a>Worker类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueuedSynchronizer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6138294804551838833L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 线程池中正真运行的线程。通过我们指定的线程工厂创建而来 **/</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread thread;</span><br><span class=\"line\">    <span class=\"comment\">/** 线程包装的任务。thread 在run时主要调用了该任务的run方法 */</span></span><br><span class=\"line\">    Runnable firstTask;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前线程完成的任务数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> completedTasks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates with given first task and thread from ThreadFactory.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> firstTask the first task (null if none)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Worker(Runnable firstTask) &#123;</span><br><span class=\"line\">        setState(-<span class=\"number\">1</span>); <span class=\"comment\">// 在调用runWorker()前，禁止interrupt中断，在interruptIfStarted()方法中会判断 getState()&gt;=0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstTask = firstTask;</span><br><span class=\"line\">        <span class=\"comment\">// 利用我们指定的线程工厂创建一个线程</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.thread = getThreadFactory().newThread(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Delegates main run loop to outer runWorker  */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        runWorker(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Lock methods</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// The value 0 represents the unlocked state.</span></span><br><span class=\"line\">    <span class=\"comment\">// The value 1 represents the locked state.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHeldExclusively</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getState() != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 尝试获取锁</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> unused)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//尝试一次将state从0设置为1，即“锁定”状态，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置exclusiveOwnerThread=当前线程</span></span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 尝试释放锁</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> unused)</span> </span>&#123;</span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        setState(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span>        </span>&#123; acquire(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span>  </span>&#123; <span class=\"keyword\">return</span> tryAcquire(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span>      </span>&#123; release(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLocked</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> isHeldExclusively(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 中断（如果运行）</span></span><br><span class=\"line\"><span class=\"comment\">    * shutdownNow时会循环对worker线程执行</span></span><br><span class=\"line\"><span class=\"comment\">    * 且不需要获取worker锁，即使在worker运行时也可以中断</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">interruptIfStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread t;</span><br><span class=\"line\">        <span class=\"comment\">// 如果state&gt;=0、t!=null、且t没有被中断</span></span><br><span class=\"line\">        <span class=\"comment\">// new Worker()时state==-1，说明不能中断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getState() &gt;= <span class=\"number\">0</span> &amp;&amp; (t = thread) != <span class=\"keyword\">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                t.interrupt();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SecurityException ignore) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Worker类投机取巧的继承了AbstractQueuedSynchronizer来简化在执行任务时的获取、释放锁,这样防止了中断在运行中的任务，只会唤醒(中断)在等待从workQueue中获取任务的线程.<br>不直接执行execute(command)提交的command，而要在外面包一层Worker主要是为了使用用AQS锁控制中断，当运行时上锁，就不能中断，TreadPoolExecutor的shutdown()方法中断前都要获取worker锁，只有在等待从workQueue中获取任务getTask()时才能中断。</p>\n<h4 id=\"runWorker-方法\"><a href=\"#runWorker-方法\" class=\"headerlink\" title=\"runWorker 方法\"></a>runWorker 方法</h4><p>在Worker类中的run方法调用了runWorker方法来执行任务.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">runWorker</span><span class=\"params\">(Worker w)</span> </span>&#123;</span><br><span class=\"line\">    Thread wt = Thread.currentThread();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取第一个任务</span></span><br><span class=\"line\">    Runnable task = w.firstTask;</span><br><span class=\"line\">    w.firstTask = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    w.unlock(); <span class=\"comment\">// 允许中断</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"comment\">// 是否因为异常退出循环</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> completedAbruptly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果task为空，则通过getTask来获取任务</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (task != <span class=\"keyword\">null</span> || (task = getTask()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            w.lock();</span><br><span class=\"line\">            <span class=\"comment\">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class=\"line\">            <span class=\"comment\">// if not, ensure thread is not interrupted.  This</span></span><br><span class=\"line\">            <span class=\"comment\">// requires a recheck in second case to deal with</span></span><br><span class=\"line\">            <span class=\"comment\">// shutdownNow race while clearing interrupt</span></span><br><span class=\"line\">            <span class=\"comment\">// 线程池处于stop状态或者当前线程被中断时，线程池状态是stop状态</span></span><br><span class=\"line\">            <span class=\"comment\">// 但是当前线程没有中断，则发出中断请求</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class=\"line\">                 (Thread.interrupted() &amp;&amp;</span><br><span class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class=\"line\">                !wt.isInterrupted())</span><br><span class=\"line\">                wt.interrupt();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//开始执行任务前的Hook，类似回调函数</span></span><br><span class=\"line\">                beforeExecute(wt, task);</span><br><span class=\"line\">                Throwable thrown = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//执行任务</span></span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//任务执行后的Hook，类似回调函数</span></span><br><span class=\"line\">                    afterExecute(task, thrown);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//执行完毕后task重置，completedTasks计数器++，解锁</span></span><br><span class=\"line\">                task = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                w.completedTasks++;</span><br><span class=\"line\">                w.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//标记正常退出</span></span><br><span class=\"line\">        completedAbruptly = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程空闲达到我们设定的值时，Worker退出销毁。</span></span><br><span class=\"line\">        processWorkerExit(w, completedAbruptly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getTask-方法\"><a href=\"#getTask-方法\" class=\"headerlink\" title=\"getTask 方法\"></a>getTask 方法</h4><p>runWorker函数中最重要的是getTask()，不断的从阻塞队列中取任务交给线程执行，并且负责线程回收</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Runnable <span class=\"title\">getTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表示上次从阻塞队列中取任务时是否超时</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> timedOut = <span class=\"keyword\">false</span>; <span class=\"comment\">// Did the last poll() time out?</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果线程池处于shutdown状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 并且队列为空，或者线程池处于stop或者terminate状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 在线程池数量-1，返回null，回收线程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class=\"line\">            decrementWorkerCount();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取线程数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> wc = workerCountOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// timed变量用于判断是否需要进行超时控制。</span></span><br><span class=\"line\">        <span class=\"comment\">// allowCoreThreadTimeOut默认是false，也就是核心线程不允许进行超时；</span></span><br><span class=\"line\">        <span class=\"comment\">// wc &gt; corePoolSize，表示当前线程池中的线程数量大于核心线程数量；</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于超过核心线程数量的这些线程，需要进行超时控制</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果线程数目大于最大线程数目 或 当前操作需要进行超时控制，并且上次从阻塞队列中获取任务发生了超时</span></span><br><span class=\"line\">        <span class=\"comment\">// 并且 线程数目大于1 或 工作队列为空</span></span><br><span class=\"line\">        <span class=\"comment\">// 尝试将workerCount减1；</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class=\"line\">            &amp;&amp; (wc &gt; <span class=\"number\">1</span> || workQueue.isEmpty())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//**保证核心线程不被销毁**</span></span><br><span class=\"line\">            <span class=\"comment\">// 根据timed来判断，如果为true，则通过阻塞队列的poll方法进行超时控制，如果在keepAliveTime时间内没有获取到任务，则返回null；</span></span><br><span class=\"line\">            <span class=\"comment\">// 否则通过take方法，如果这时队列为空，则take方法会阻塞直到队列不为空。</span></span><br><span class=\"line\">            Runnable r = timed ?</span><br><span class=\"line\">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class=\"line\">                workQueue.take();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果 r == null，说明已经超时，timedOut设置为true，进入下一个循环</span></span><br><span class=\"line\">            timedOut = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException retry) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果获取任务时当前线程发生了中断，则设置timedOut为false并返回循环重试</span></span><br><span class=\"line\">            timedOut = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FutureTask源码\"><a href=\"#FutureTask源码\" class=\"headerlink\" title=\"FutureTask源码\"></a>FutureTask源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * state字段用来保存FutureTask内部的任务执行状态，一共有7中状态，每种状态及其对应的值如下</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW:表示是个新的任务或者还没被执行完的任务。这是初始状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * COMPLETING:任务已经执行完成或者执行任务的时候发生异常，但是任务执行结果或者异常原因还没有保存到outcome字段(outcome字段用来保存任务执行结果，如果发生异常，则用来保存异常原因)的时候，状态会从NEW变更到COMPLETING。但是这个状态会时间会比较短，属于中间状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * NORMAL:任务已经执行完成并且任务执行结果已经保存到outcome字段，状态会从COMPLETING转换到NORMAL。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * EXCEPTIONAL:任务执行发生异常并且异常原因已经保存到outcome字段中后，状态会从COMPLETING转换到EXCEPTIONAL。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * CANCELLED:任务还没开始执行或者已经开始执行但是还没有执行完成的时候，用户调用了cancel(false)方法取消任务且不中断任务执行线程，这个时候状态会从NEW转化为CANCELLED状态。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * INTERRUPTING: 任务还没开始执行或者已经执行但是还没有执行完成的时候，用户调用了cancel(true)方法取消任务并且要中断任务执行线程但是还没有中断任务执行线程之前，状态会从NEW转化为INTERRUPTING。这是一个中间状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * INTERRUPTED:调用interrupt()中断任务执行线程之后状态会从INTERRUPTING转换到INTERRUPTED。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; COMPLETING -&gt; NORMAL 正常执行并返回</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL 执行过程中出现了异常</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; CANCELLED 执行前被取消</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED 取消时被中断</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NEW          = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COMPLETING   = <span class=\"number\">1</span>;<span class=\"comment\">//大于这个值就是完成状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NORMAL       = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXCEPTIONAL  = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED    = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INTERRUPTING = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INTERRUPTED  = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The underlying callable; nulled out after running */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Callable&lt;V&gt; callable;</span><br><span class=\"line\">    <span class=\"comment\">/** The result to return or exception to throw from get() */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object outcome; <span class=\"comment\">// non-volatile, protected by state reads/writes</span></span><br><span class=\"line\">    <span class=\"comment\">/** 执行callable的线程 **/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Thread runner;</span><br><span class=\"line\">    <span class=\"comment\">/** 使用Treiber算法实现的无阻塞的Stack，用于存放等待的线程 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> WaitNode waiters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> V <span class=\"title\">report</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> <span class=\"keyword\">throws</span> ExecutionException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拿到返回结果</span></span><br><span class=\"line\">        Object x = outcome;</span><br><span class=\"line\">        <span class=\"comment\">// 判断状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == NORMAL)</span><br><span class=\"line\">            <span class=\"comment\">// 状态正常，就返回结果值</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (V)x;</span><br><span class=\"line\">        <span class=\"comment\">// 判断异常，就抛出异常。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &gt;= CANCELLED)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CancellationException();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExecutionException((Throwable)x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FutureTask</span><span class=\"params\">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callable == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callable = callable;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = NEW;       <span class=\"comment\">// ensure visibility of callable</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个构造方法会把传入的Runnable封装成一个Callable对象保存在callable字段中，同时如果任务执行成功的话就会返回传入的result。</span></span><br><span class=\"line\"><span class=\"comment\">     * 这种情况下如果不需要返回值的话可以传入一个null。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FutureTask</span><span class=\"params\">(Runnable runnable, V result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callable = Executors.callable(runnable, result);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = NEW;       <span class=\"comment\">// ensure visibility of callable</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断任务是否被取消</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCancelled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state &gt;= CANCELLED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断任务是否完成</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state != NEW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 任务是new状态 并且 根据mayInterruptIfRunning把状态从NEW转化到INTERRUPTING或CANCELLED </span></span><br><span class=\"line\">        <span class=\"comment\">// 不符合上述状态，返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(state == NEW &amp;&amp;</span><br><span class=\"line\">              UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW,</span><br><span class=\"line\">                  mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;    </span><br><span class=\"line\">        <span class=\"comment\">// 2. 如果需要中断任务执行线程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mayInterruptIfRunning) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// runner保存着当前执行任务的线程</span></span><br><span class=\"line\">                    Thread t = runner;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        <span class=\"comment\">//中断任务执行线程</span></span><br><span class=\"line\">                        t.interrupt();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123; <span class=\"comment\">// final state</span></span><br><span class=\"line\">                    <span class=\"comment\">// 修改状态为INTERRUPTED</span></span><br><span class=\"line\">                    UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, INTERRUPTED);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            finishCompletion();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">        <span class=\"comment\">// 判断任务当前的state &lt;= COMPLETING是否成立。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &lt;= COMPLETING)</span><br><span class=\"line\">            <span class=\"comment\">// 如果成立，表明任务还没有结束(这里的结束包括任务正常执行完毕，任务执行异常，任务被取消)</span></span><br><span class=\"line\">            <span class=\"comment\">// 调用awaitDone()进行阻塞等待。</span></span><br><span class=\"line\">            s = awaitDone(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 任务已经结束，调用report()返回结果。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> report(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unit == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">        <span class=\"comment\">// 如果awaitDone()超时返回之后任务还没结束，则抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &lt;= COMPLETING &amp;&amp;</span><br><span class=\"line\">            (s = awaitDone(<span class=\"keyword\">true</span>, unit.toNanos(timeout))) &lt;= COMPLETING)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TimeoutException();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> report(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">done</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(V v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把任务执行结果保存在outcome字段中。</span></span><br><span class=\"line\">            outcome = v;</span><br><span class=\"line\">            <span class=\"comment\">// CAS的把当前任务状态从COMPLETING变更为NORMAL</span></span><br><span class=\"line\">            UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, NORMAL); <span class=\"comment\">// final state</span></span><br><span class=\"line\">            finishCompletion();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setException</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把异常原因保存在outcome字段中，outcome字段用来保存任务执行结果或者异常原因。</span></span><br><span class=\"line\">            outcome = t;</span><br><span class=\"line\">            <span class=\"comment\">// CAS的把当前任务状态从COMPLETING变更为EXCEPTIONAL。</span></span><br><span class=\"line\">            UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, EXCEPTIONAL); <span class=\"comment\">// final state</span></span><br><span class=\"line\">            finishCompletion();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态如果不是NEW，说明任务或者已经执行过，或者已经被取消，直接返回</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态如果是NEW，则尝试把当前执行线程保存在runner字段(runnerOffset)中，如果赋值失败则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state != NEW ||</span><br><span class=\"line\">            !UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, runnerOffset,</span><br><span class=\"line\">                                         <span class=\"keyword\">null</span>, Thread.currentThread()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Callable&lt;V&gt; c = callable;</span><br><span class=\"line\">            <span class=\"comment\">// 只有初始状态才会执行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class=\"line\">                V result;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> ran;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行任务  计算逻辑</span></span><br><span class=\"line\">                    result = c.call();</span><br><span class=\"line\">                    ran = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">                    result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    ran = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 保存异常</span></span><br><span class=\"line\">                    setException(ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ran)</span><br><span class=\"line\">                    <span class=\"comment\">// 任务执行成功，保存返回结果</span></span><br><span class=\"line\">                    set(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否执行成功，把runner设置为null</span></span><br><span class=\"line\">            runner = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// state must be re-read after nulling runner to prevent</span></span><br><span class=\"line\">            <span class=\"comment\">// leaked interrupts</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">            <span class=\"comment\">// 如果任务被中断，执行中断处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s &gt;= INTERRUPTING)</span><br><span class=\"line\">                handlePossibleCancellationInterrupt(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 与run方法类似，区别在于这个方法不会设置任务的执行结果值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successfully run and reset</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">runAndReset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state != NEW ||</span><br><span class=\"line\">            !UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, runnerOffset,</span><br><span class=\"line\">                                         <span class=\"keyword\">null</span>, Thread.currentThread()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ran = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Callable&lt;V&gt; c = callable;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; s == NEW) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 不获取和设置返回值</span></span><br><span class=\"line\">                    c.call(); <span class=\"comment\">// don't set result</span></span><br><span class=\"line\">                    ran = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">                    setException(ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            runner = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            s = state;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s &gt;= INTERRUPTING)</span><br><span class=\"line\">                handlePossibleCancellationInterrupt(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 是否正确的执行并复位</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ran &amp;&amp; s == NEW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handlePossibleCancellationInterrupt</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == INTERRUPTING)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (state == INTERRUPTING)</span><br><span class=\"line\">                Thread.yield(); <span class=\"comment\">// wait out pending interrupt</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确保cancel(true)产生的中断发生在run或runAndReset方法执行的过程中。</span></span><br><span class=\"line\">        <span class=\"comment\">//这里会循环的调用Thread.yield()来确保状态在cancel方法中被设置为INTERRUPTED。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Simple linked list nodes to record waiting threads in a Treiber</span></span><br><span class=\"line\"><span class=\"comment\">     * stack.  See other classes such as Phaser and SynchronousQueue</span></span><br><span class=\"line\"><span class=\"comment\">     * for more detailed explanation.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitNode</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> Thread thread;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> WaitNode next;</span><br><span class=\"line\">        WaitNode() &#123; thread = Thread.currentThread(); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes and signals all waiting threads, invokes done(), and</span></span><br><span class=\"line\"><span class=\"comment\">     * nulls out callable.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">finishCompletion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// assert state &gt; COMPLETING;</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行该方法时state必须大于COMPLETING</span></span><br><span class=\"line\">        <span class=\"comment\">// 依次遍历waiters链表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (WaitNode q; (q = waiters) != <span class=\"keyword\">null</span>;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置栈顶节点为null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset, q, <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                    Thread t = q.thread;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        q.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 唤醒等待线程</span></span><br><span class=\"line\">                        LockSupport.unpark(t);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    WaitNode next = q.next;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果next为空，说明栈空了，跳出循环</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 方便gc回收</span></span><br><span class=\"line\">                    q.next = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">                    <span class=\"comment\">// 重新设置栈顶node</span></span><br><span class=\"line\">                    q = next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 空方法，留给子类扩展</span></span><br><span class=\"line\">        done();</span><br><span class=\"line\"></span><br><span class=\"line\">        callable = <span class=\"keyword\">null</span>;        <span class=\"comment\">// to reduce footprint</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Awaits completion or aborts on interrupt or timeout.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timed true if use timed waits</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nanos time to wait, if timed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> state upon completion</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">awaitDone</span><span class=\"params\">(<span class=\"keyword\">boolean</span> timed, <span class=\"keyword\">long</span> nanos)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 计算等待截止时间</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> deadline = timed ? System.nanoTime() + nanos : <span class=\"number\">0L</span>;</span><br><span class=\"line\">        WaitNode q = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> queued = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 判断阻塞线程是否被中断</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 被中断则在等待队列中删除该节点</span></span><br><span class=\"line\">                removeWaiter(q);</span><br><span class=\"line\">                <span class=\"comment\">// 抛出InterruptedException异常</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InterruptedException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 获取当前状态，如果状态大于COMPLETING</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s &gt; COMPLETING) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 说明任务已经结束(要么正常结束，要么异常结束，要么被取消)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (q != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"comment\">// 把thread显示置空</span></span><br><span class=\"line\">                    q.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果状态处于中间状态COMPLETING</span></span><br><span class=\"line\">            <span class=\"comment\">// 表示任务已经结束但是任务执行线程还没来得及给outcome赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == COMPLETING) <span class=\"comment\">// cannot time out yet</span></span><br><span class=\"line\">                Thread.yield();<span class=\"comment\">// 让出执行权让其他线程优先执行</span></span><br><span class=\"line\">            <span class=\"comment\">// 4. 如果等待节点为空，则构造一个等待节点</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                q = <span class=\"keyword\">new</span> WaitNode();</span><br><span class=\"line\">            <span class=\"comment\">// 5. 如果还没有入队列，则把当前节点加入waiters首节点并替换原来waiters</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!queued)</span><br><span class=\"line\">                queued = UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset,</span><br><span class=\"line\">                                                     q.next = waiters, q);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (timed) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果需要等待特定时间，则先计算要等待的时间</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果已经超时，则删除对应节点并返回对应的状态</span></span><br><span class=\"line\">                nanos = deadline - System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nanos &lt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                    removeWaiter(q);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 6. 阻塞等待特定时间</span></span><br><span class=\"line\">                LockSupport.parkNanos(<span class=\"keyword\">this</span>, nanos);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 6. 阻塞等待直到被其他线程唤醒</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                LockSupport.park(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeWaiter</span><span class=\"params\">(WaitNode node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将thread设置为null是因为下面要根据thread是否为null判断是否要把node移出</span></span><br><span class=\"line\">            node.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 这里自旋保证删除成功</span></span><br><span class=\"line\">            retry:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;          <span class=\"comment\">// restart on removeWaiter race</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (WaitNode pred = <span class=\"keyword\">null</span>, q = waiters, s; q != <span class=\"keyword\">null</span>; q = s) &#123;</span><br><span class=\"line\">                    s = q.next;</span><br><span class=\"line\">                    <span class=\"comment\">// q.thread != null说明该q节点不需要移除</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (q.thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        pred = q;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果q.thread == null，且pred != null，需要删除q节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pred != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 删除q节点</span></span><br><span class=\"line\">                        pred.next = s;</span><br><span class=\"line\">                         <span class=\"comment\">// pred.thread == null时说明在并发情况下被其他线程修改了；</span></span><br><span class=\"line\">                         <span class=\"comment\">// 返回第一个for循环重试</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (pred.thread == <span class=\"keyword\">null</span>) <span class=\"comment\">// check for race</span></span><br><span class=\"line\">                            <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                     <span class=\"comment\">// 如果q.thread != null且pred == null，说明q是栈顶节点</span></span><br><span class=\"line\">                     <span class=\"comment\">// 设置栈顶元素为s节点，如果失败则返回重试</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset,</span><br><span class=\"line\">                                                          q, s))</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Unsafe mechanics</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> stateOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> runnerOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> waitersOffset;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; k = FutureTask.class;</span><br><span class=\"line\">            stateOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (k.getDeclaredField(<span class=\"string\">\"state\"</span>));</span><br><span class=\"line\">            runnerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (k.getDeclaredField(<span class=\"string\">\"runner\"</span>));</span><br><span class=\"line\">            waitersOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (k.getDeclaredField(<span class=\"string\">\"waiters\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程池中的线程初始化\"><a href=\"#线程池中的线程初始化\" class=\"headerlink\" title=\"线程池中的线程初始化\"></a>线程池中的线程初始化</h2><p>　　默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：</p>\n<ul>\n<li>prestartCoreThread()：初始化一个核心线程；</li>\n<li>prestartAllCoreThreads()：初始化所有核心线程</li>\n</ul>\n<h2 id=\"线程池的关闭\"><a href=\"#线程池的关闭\" class=\"headerlink\" title=\"线程池的关闭\"></a>线程池的关闭</h2><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭</p>\n<ul>\n<li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务</li>\n<li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</li>\n</ul>\n<h2 id=\"线程池大小\"><a href=\"#线程池大小\" class=\"headerlink\" title=\"线程池大小\"></a>线程池大小</h2><ol>\n<li>粗略<ol>\n<li>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1</li>\n<li>如果是IO密集型任务，参考值可以设置为2*NCPU</li>\n</ol>\n</li>\n<li>精确：（(线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</li>\n<li>最佳：压测</li>\n</ol>\n<h2 id=\"任务缓存队列\"><a href=\"#任务缓存队列\" class=\"headerlink\" title=\"任务缓存队列\"></a>任务缓存队列</h2><p><strong>workQueue</strong>，它用来存放等待执行的任务。BlockingQueue 是个接口，你需要使用它的实现之一来使用BlockingQueue，java.util.concurrent包下具有以下 BlockingQueue 接口的实现类：</p>\n<ul>\n<li>ArrayBlockingQueue：ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其初始化的时候设定这个上限，但之后就无法对这个上限进行修改了(译者注：因为它是基于数组实现的，也就具有数组的特性：一旦初始化，大小就无法修改)。</li>\n<li>LinkedBlockingQueue：LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。</li>\n<li>DelayQueue：DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口。</li>\n<li>PriorityBlockingQueue：PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。</li>\n<li>SynchronousQueue：SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。</li>\n</ul>\n<h2 id=\"线程池总结\"><a href=\"#线程池总结\" class=\"headerlink\" title=\"线程池总结\"></a>线程池总结</h2><ol>\n<li>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</li>\n<li>当调用 execute() 方法添加一个任务时，线程池会做如下判断：<ol>\n<li>如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；</li>\n<li>如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；</li>\n<li>如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li>\n<li>如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException。</li>\n<li>当一个线程完成任务时，它会从队列中取下一个任务来执行。</li>\n<li>当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p>操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程， 这些线程都拥有各自的计数器、 堆栈和局部变量等属性， 并且能够访问共享的内存变量。 处理器在这些线程上高速切换， 让使用者感觉到这些线程在同时执行。</p>","more":"<h4 id=\"线程的创建\"><a href=\"#线程的创建\" class=\"headerlink\" title=\"线程的创建\"></a>线程的创建</h4><ul>\n<li>通过继承Thread类来创建一个线程</li>\n<li>实现Runnable接口并重写run()方法，new Thread(runnable).start()，线程启动时就会自动调用该对象的run方法</li>\n<li>实现Callable接口并实现call()方法，使用FutureTask类包装Callable对象，使用FutureTask对象作为Thread对象的targer创建并启动线程；也可以使用线程池启动<pre><code>Runnable 和 Callable 的区别\n 1. Runnable规定方法是run方法，Callable规定方法是call方法\n 2. Runnable任务执行后无返回值，Callable任务执行后可返回值\n 3. run方法无法抛出异常，call方法可以抛出异常\n 4. 运行Callable任务可以拿到一个Future对象，Future表示异步计算结果，他提供了检查计算是否完成的方法，以等待计算完成并获取结果。计算完成后用get()方法获取结果，如果线程没有执行完，get()方法会阻塞当前线程执行。如果线程出现异常，get()方法会抛出异常。</code></pre></li>\n<li>线程池：Executors类提供了方便的工厂方法来创建不同类型的 executor services。无论Runnable还是Callable都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行<pre><code>1. public static ExecutorService newCachedThreadPool() 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程，但是在之前构造的线程可用时将重用它们。\n2. public static ExecutorService newFixedThreadPool(int nThreads)  创建一个定长线程池，可控制线程最大并发数，以共享的无界队列方式来运行线程，超出的线程会在队列中等待。\n3. public static ExecutorService newSingleThreadExecutor() 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，以无界队列方式来运行线程，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n4. public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) 创建一个周期线程池，支持定时及周期性任务执行。\n5. public static ExecutorService newWorkStealingPool() 创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要穿一个并行级别的参数，如果不传，则被设定为默认的CPU数量，这个线程池实际上是ForkJoinPool的扩展，适合使用在很耗时的任务中，能够合理的使用CPU进行并行操作。</code></pre></li>\n</ul>\n<h4 id=\"线程的管理\"><a href=\"#线程的管理\" class=\"headerlink\" title=\"线程的管理\"></a>线程的管理</h4><ul>\n<li>ForkJoinPool 的每个工作线程都维护了一个工作队列(WorkQueue)，这是一个双端队列，里面存放的对象是任务(ForkJoinTask)<ul>\n<li>每个工作线程在运行中产生新的任务(通常是因为调用了fork())，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是LIFO方式，也就是每次从队尾取任务执行。</li>\n<li>每个工作线程在处理自己的工作队列时，会尝试窃取一个任务(或是来自刚刚提交到pool的任务，或是来自其他的工作队列)，窃取的任务位于其他线程工作队列的队首，也就是使用FIFO方式。</li>\n<li>在遇到join()时如果join的任务尚未完成，则会先处理其他任务，并等待其完成。</li>\n</ul>\n</li>\n<li>ExecutorCompletionService 内部维护了一个阻塞队列(BlockingQueue), 只有完成的任务才被加入到队列中。如果队列中的数据为空时, 调用take()就会阻塞直到有完成的任务加入队列，基于FutureTask实现。</li>\n</ul>\n<h1 id=\"线程池原理\"><a href=\"#线程池原理\" class=\"headerlink\" title=\"线程池原理\"></a>线程池原理</h1><h2 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.acc = System.getSecurityManager() == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> :</span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>corePoolSize 核心线程数量，当有新任务在exectue()方法提交时，会执行以下判断：<pre><code>1. 如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；\n2. 如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；\n3. 如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；\n4. 如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；\n5. 所以，任务提交时，判断的顺序为 corePoolSize –&gt; workQueue –&gt; maximumPoolSize</code></pre></li>\n<li>maximumPoolSize 最大线程数量；</li>\n<li>keepAliveTime 线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime；</li>\n<li>workQueue 保存等待执行的任务的阻塞队列，当提交一个新的任务到线程池以后, 线程池会根据当前线程池中正在运行着的线程的数量来决定对该任务的处理方式，主要有以下几种处理方式:<ul>\n<li><strong>直接切换</strong>：这种方式常用的队列是SynchronousQueue</li>\n<li><strong>使用无界队列</strong>：一般使用基于链表的阻塞队列LinkedBlockingQueue。如果使用这种方式，那么线程池中能够创建的最大线程数就是corePoolSize，而maximumPoolSize就不会起作用了。当线程池中所有的核心线程都是RUNNING状态时，这时一个新的任务提交就会放入等待队列中。</li>\n<li><strong>使用有界队列</strong>：一般使用ArrayBlockingQueue。使用该方式可以将线程池的最大线程数量限制为maximumPoolSize，这样能够降低资源的消耗，但同时这种方式也使得线程池对线程的调度变得更困难，因为线程池和队列的容量都是有限的值，所以要想使线程池处理任务的吞吐率达到一个相对合理的范围，又想使线程调度相对简单，并且还要尽可能的降低线程池对资源的消耗，就需要合理的设置这两个数量。</li>\n</ul>\n</li>\n<li>threadFactory 它是ThreadFactory类型的变量，用来创建新线程。默认使用Executors.defaultThreadFactory() 来创建线程。使用默认的ThreadFactory来创建线程时，会使新创建的线程具有相同的NORM_PRIORITY优先级并且是非守护线程，同时也设置了线程的名称。</li>\n<li>handler 它是RejectedExecutionHandler类型的变量，表示线程池的饱和策略。如果阻塞队列满了并且没有空闲的线程，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：<ul>\n<li>AbortPolicy：直接抛出异常，这是默认策略；</li>\n<li>CallerRunsPolicy：用调用者所在的线程来执行任务；</li>\n<li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</li>\n<li>DiscardPolicy：直接丢弃任务；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"核心源码\"><a href=\"#核心源码\" class=\"headerlink\" title=\"核心源码\"></a>核心源码</h2><h3 id=\"线程池执行源码\"><a href=\"#线程池执行源码\" class=\"headerlink\" title=\"线程池执行源码\"></a>线程池执行源码</h3><h4 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// clt记录着runState和workerCount</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// workerCountOf方法取出低29位的值，表示当前活动的线程数；</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果当前活动线程数小于corePoolSize，则新建一个线程放入线程池中，并把任务添加到该线程中；</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// addWorker中的第二个参数表示限制添加线程的数量是根据corePoolSize来判断还是maximumPoolSize来判断；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果为true，根据corePoolSize来判断；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果为false，则根据maximumPoolSize来判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"keyword\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果添加失败，则重新获取ctl值</span></span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果当前线程池是运行状态 并且 任务能够成功添加到工作队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 重新获取ctl值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> recheck = ctl.get();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 再次判断线程池的运行状态，如果不是运行状态，由于之前已经把command添加到workQueue中了，</span></span><br><span class=\"line\">        <span class=\"comment\">// 这时需要移除该command</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行过后通过handler使用拒绝策略对该任务进行处理，整个方法返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取线程池中的有效线程数，如果数量是0，则执行addWorker方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 第一个参数为null，表示在线程池中创建一个线程，但不去启动；</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 第二个参数为false，将线程池的有限线程数量的上限设置为maximumPoolSize，添加线程时根据maximumPoolSize来判断；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果判断workerCount大于0，则直接返回，在workQueue中新增的command会在将来的某个时刻被执行。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果执行到这里，有两种情况：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.线程池已经不是RUNNING状态；</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.线程池是RUNNING状态，但workerCount &gt;= corePoolSize并且workQueue已满;</span></span><br><span class=\"line\">    <span class=\"comment\">// 这时，再次调用addWorker方法，但第二个参数传入为false，将线程池的有限线程数量的上限设置为maximumPoolSize；</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果失败则拒绝该任务 </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"keyword\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>runState和workCount变量怎么存储在一个int中？参考：<a href=\"https://blog.csdn.net/weixin_34396902/article/details/94527424\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_34396902/article/details/94527424</a></p>\n<h4 id=\"addWorker\"><a href=\"#addWorker\" class=\"headerlink\" title=\"addWorker\"></a>addWorker</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">addWorker</span><span class=\"params\">(Runnable firstTask, <span class=\"keyword\">boolean</span> core)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环CAS操作，将线程池中的线程数+1</span></span><br><span class=\"line\">    retry:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// clt记录着runState和workerCount</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 获取运行状态</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果rs &gt;= SHUTDOWN，则表示此时不再接收新任务；</span></span><br><span class=\"line\">        <span class=\"comment\">// 接着判断以下3个条件，只要有1个不满足，则返回false：</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. rs == SHUTDOWN，这时表示关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. firsTask为空</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 阻塞队列不为空</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// rs == SHUTDOWN的情况</span></span><br><span class=\"line\">        <span class=\"comment\">// 这种情况下不会接受新提交的任务，所以在firstTask不为空的时候会返回false；</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果firstTask为空，并且workQueue也为空，因为队列中已经没有任务了，不需要再添加线程了，则返回false，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class=\"line\">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class=\"line\">               firstTask == <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">               ! workQueue.isEmpty()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取线程数</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> wc = workerCountOf(c);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果wc超过CAPACITY(最大线程数线程数),也就是ctl的低29位的最大值（二进制是29个1），返回false；</span></span><br><span class=\"line\">            <span class=\"comment\">// core是addWorker方法的第二个参数,如果为true表示根据corePoolSize来比较，如果为false则根据maximumPoolSize来比较;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wc &gt;= CAPACITY ||</span><br><span class=\"line\">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// CAS操作尝试增加workerCount，修改clt的值+1，如果成功，则跳出第一个for循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">break</span> retry;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果增加workerCount失败，则重新获取ctl的值</span></span><br><span class=\"line\">            c = ctl.get();  </span><br><span class=\"line\">            <span class=\"comment\">// 如果当前的运行状态不等于rs，说明状态已被改变，返回第一个for循环继续执行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runStateOf(c) != rs)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新建线程，并加入到线程池workers中。</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> workerStarted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> workerAdded = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Worker w = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据firstTask来创建Worker对象</span></span><br><span class=\"line\">        w = <span class=\"keyword\">new</span> Worker(firstTask);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 每一个Worker对象都会创建一个线程</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread t = w.thread;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对workers操作要通过加锁来实现</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> ReentrantLock mainLock = <span class=\"keyword\">this</span>.mainLock;</span><br><span class=\"line\">            mainLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取运行状态</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rs = runStateOf(ctl.get());</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// rs &lt; SHUTDOWN表示是RUNNING状态；</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果rs是RUNNING状态或者rs是SHUTDOWN状态并且firstTask为null，向线程池中添加线程。</span></span><br><span class=\"line\">                <span class=\"comment\">// 因为在SHUTDOWN时不会在添加新的任务，但还是会执行workQueue中的任务</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rs &lt; SHUTDOWN ||</span><br><span class=\"line\">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 判断添加的任务状态,如果已经开始丢出异常</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.isAlive()) </span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalThreadStateException();</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">// 将新建的线程加入到线程池中，workers是一个hashSet</span></span><br><span class=\"line\">                    workers.add(w);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> s = workers.size();</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">// largestPoolSize记录着线程池中出现过的最大线程数量</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s &gt; largestPoolSize)</span><br><span class=\"line\">                        largestPoolSize = s;</span><br><span class=\"line\">                    <span class=\"comment\">//标记任务添加</span></span><br><span class=\"line\">                    workerAdded = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mainLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workerAdded) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">                <span class=\"comment\">// 标记线程启动</span></span><br><span class=\"line\">                workerStarted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 线程添加线程池失败或者线程start失败，则需要调用addWorkerFailed函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果添加成功则需要移除线程，并恢复复clt的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! workerStarted)</span><br><span class=\"line\">            addWorkerFailed(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workerStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>t.start()这个语句，启动时会调用Worker类中的run方法，Worker本身实现了Runnable接口，所以一个Worker类型的对象也是一个线程。</p>\n<h4 id=\"Worker类\"><a href=\"#Worker类\" class=\"headerlink\" title=\"Worker类\"></a>Worker类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueuedSynchronizer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">6138294804551838833L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 线程池中正真运行的线程。通过我们指定的线程工厂创建而来 **/</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread thread;</span><br><span class=\"line\">    <span class=\"comment\">/** 线程包装的任务。thread 在run时主要调用了该任务的run方法 */</span></span><br><span class=\"line\">    Runnable firstTask;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前线程完成的任务数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> completedTasks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates with given first task and thread from ThreadFactory.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> firstTask the first task (null if none)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Worker(Runnable firstTask) &#123;</span><br><span class=\"line\">        setState(-<span class=\"number\">1</span>); <span class=\"comment\">// 在调用runWorker()前，禁止interrupt中断，在interruptIfStarted()方法中会判断 getState()&gt;=0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstTask = firstTask;</span><br><span class=\"line\">        <span class=\"comment\">// 利用我们指定的线程工厂创建一个线程</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.thread = getThreadFactory().newThread(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Delegates main run loop to outer runWorker  */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        runWorker(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Lock methods</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// The value 0 represents the unlocked state.</span></span><br><span class=\"line\">    <span class=\"comment\">// The value 1 represents the locked state.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHeldExclusively</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getState() != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 尝试获取锁</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> unused)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//尝试一次将state从0设置为1，即“锁定”状态，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置exclusiveOwnerThread=当前线程</span></span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 尝试释放锁</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> unused)</span> </span>&#123;</span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        setState(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span>        </span>&#123; acquire(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span>  </span>&#123; <span class=\"keyword\">return</span> tryAcquire(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span>      </span>&#123; release(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLocked</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> isHeldExclusively(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 中断（如果运行）</span></span><br><span class=\"line\"><span class=\"comment\">    * shutdownNow时会循环对worker线程执行</span></span><br><span class=\"line\"><span class=\"comment\">    * 且不需要获取worker锁，即使在worker运行时也可以中断</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">interruptIfStarted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Thread t;</span><br><span class=\"line\">        <span class=\"comment\">// 如果state&gt;=0、t!=null、且t没有被中断</span></span><br><span class=\"line\">        <span class=\"comment\">// new Worker()时state==-1，说明不能中断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getState() &gt;= <span class=\"number\">0</span> &amp;&amp; (t = thread) != <span class=\"keyword\">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                t.interrupt();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SecurityException ignore) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Worker类投机取巧的继承了AbstractQueuedSynchronizer来简化在执行任务时的获取、释放锁,这样防止了中断在运行中的任务，只会唤醒(中断)在等待从workQueue中获取任务的线程.<br>不直接执行execute(command)提交的command，而要在外面包一层Worker主要是为了使用用AQS锁控制中断，当运行时上锁，就不能中断，TreadPoolExecutor的shutdown()方法中断前都要获取worker锁，只有在等待从workQueue中获取任务getTask()时才能中断。</p>\n<h4 id=\"runWorker-方法\"><a href=\"#runWorker-方法\" class=\"headerlink\" title=\"runWorker 方法\"></a>runWorker 方法</h4><p>在Worker类中的run方法调用了runWorker方法来执行任务.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">runWorker</span><span class=\"params\">(Worker w)</span> </span>&#123;</span><br><span class=\"line\">    Thread wt = Thread.currentThread();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取第一个任务</span></span><br><span class=\"line\">    Runnable task = w.firstTask;</span><br><span class=\"line\">    w.firstTask = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    w.unlock(); <span class=\"comment\">// 允许中断</span></span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"comment\">// 是否因为异常退出循环</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> completedAbruptly = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果task为空，则通过getTask来获取任务</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (task != <span class=\"keyword\">null</span> || (task = getTask()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            w.lock();</span><br><span class=\"line\">            <span class=\"comment\">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class=\"line\">            <span class=\"comment\">// if not, ensure thread is not interrupted.  This</span></span><br><span class=\"line\">            <span class=\"comment\">// requires a recheck in second case to deal with</span></span><br><span class=\"line\">            <span class=\"comment\">// shutdownNow race while clearing interrupt</span></span><br><span class=\"line\">            <span class=\"comment\">// 线程池处于stop状态或者当前线程被中断时，线程池状态是stop状态</span></span><br><span class=\"line\">            <span class=\"comment\">// 但是当前线程没有中断，则发出中断请求</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class=\"line\">                 (Thread.interrupted() &amp;&amp;</span><br><span class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class=\"line\">                !wt.isInterrupted())</span><br><span class=\"line\">                wt.interrupt();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//开始执行任务前的Hook，类似回调函数</span></span><br><span class=\"line\">                beforeExecute(wt, task);</span><br><span class=\"line\">                Throwable thrown = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//执行任务</span></span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//任务执行后的Hook，类似回调函数</span></span><br><span class=\"line\">                    afterExecute(task, thrown);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//执行完毕后task重置，completedTasks计数器++，解锁</span></span><br><span class=\"line\">                task = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                w.completedTasks++;</span><br><span class=\"line\">                w.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//标记正常退出</span></span><br><span class=\"line\">        completedAbruptly = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程空闲达到我们设定的值时，Worker退出销毁。</span></span><br><span class=\"line\">        processWorkerExit(w, completedAbruptly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getTask-方法\"><a href=\"#getTask-方法\" class=\"headerlink\" title=\"getTask 方法\"></a>getTask 方法</h4><p>runWorker函数中最重要的是getTask()，不断的从阻塞队列中取任务交给线程执行，并且负责线程回收</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Runnable <span class=\"title\">getTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 表示上次从阻塞队列中取任务时是否超时</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> timedOut = <span class=\"keyword\">false</span>; <span class=\"comment\">// Did the last poll() time out?</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = ctl.get();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rs = runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果线程池处于shutdown状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 并且队列为空，或者线程池处于stop或者terminate状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 在线程池数量-1，返回null，回收线程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class=\"line\">            decrementWorkerCount();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取线程数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> wc = workerCountOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// timed变量用于判断是否需要进行超时控制。</span></span><br><span class=\"line\">        <span class=\"comment\">// allowCoreThreadTimeOut默认是false，也就是核心线程不允许进行超时；</span></span><br><span class=\"line\">        <span class=\"comment\">// wc &gt; corePoolSize，表示当前线程池中的线程数量大于核心线程数量；</span></span><br><span class=\"line\">        <span class=\"comment\">// 对于超过核心线程数量的这些线程，需要进行超时控制</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果线程数目大于最大线程数目 或 当前操作需要进行超时控制，并且上次从阻塞队列中获取任务发生了超时</span></span><br><span class=\"line\">        <span class=\"comment\">// 并且 线程数目大于1 或 工作队列为空</span></span><br><span class=\"line\">        <span class=\"comment\">// 尝试将workerCount减1；</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class=\"line\">            &amp;&amp; (wc &gt; <span class=\"number\">1</span> || workQueue.isEmpty())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//**保证核心线程不被销毁**</span></span><br><span class=\"line\">            <span class=\"comment\">// 根据timed来判断，如果为true，则通过阻塞队列的poll方法进行超时控制，如果在keepAliveTime时间内没有获取到任务，则返回null；</span></span><br><span class=\"line\">            <span class=\"comment\">// 否则通过take方法，如果这时队列为空，则take方法会阻塞直到队列不为空。</span></span><br><span class=\"line\">            Runnable r = timed ?</span><br><span class=\"line\">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class=\"line\">                workQueue.take();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 如果 r == null，说明已经超时，timedOut设置为true，进入下一个循环</span></span><br><span class=\"line\">            timedOut = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException retry) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果获取任务时当前线程发生了中断，则设置timedOut为false并返回循环重试</span></span><br><span class=\"line\">            timedOut = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FutureTask源码\"><a href=\"#FutureTask源码\" class=\"headerlink\" title=\"FutureTask源码\"></a>FutureTask源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FutureTask</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RunnableFuture</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * state字段用来保存FutureTask内部的任务执行状态，一共有7中状态，每种状态及其对应的值如下</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW:表示是个新的任务或者还没被执行完的任务。这是初始状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * COMPLETING:任务已经执行完成或者执行任务的时候发生异常，但是任务执行结果或者异常原因还没有保存到outcome字段(outcome字段用来保存任务执行结果，如果发生异常，则用来保存异常原因)的时候，状态会从NEW变更到COMPLETING。但是这个状态会时间会比较短，属于中间状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * NORMAL:任务已经执行完成并且任务执行结果已经保存到outcome字段，状态会从COMPLETING转换到NORMAL。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * EXCEPTIONAL:任务执行发生异常并且异常原因已经保存到outcome字段中后，状态会从COMPLETING转换到EXCEPTIONAL。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * CANCELLED:任务还没开始执行或者已经开始执行但是还没有执行完成的时候，用户调用了cancel(false)方法取消任务且不中断任务执行线程，这个时候状态会从NEW转化为CANCELLED状态。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * INTERRUPTING: 任务还没开始执行或者已经执行但是还没有执行完成的时候，用户调用了cancel(true)方法取消任务并且要中断任务执行线程但是还没有中断任务执行线程之前，状态会从NEW转化为INTERRUPTING。这是一个中间状态。</span></span><br><span class=\"line\"><span class=\"comment\">     * INTERRUPTED:调用interrupt()中断任务执行线程之后状态会从INTERRUPTING转换到INTERRUPTED。这是一个最终态。</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; COMPLETING -&gt; NORMAL 正常执行并返回</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL 执行过程中出现了异常</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; CANCELLED 执行前被取消</span></span><br><span class=\"line\"><span class=\"comment\">     * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED 取消时被中断</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NEW          = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COMPLETING   = <span class=\"number\">1</span>;<span class=\"comment\">//大于这个值就是完成状态</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NORMAL       = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EXCEPTIONAL  = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED    = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INTERRUPTING = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INTERRUPTED  = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The underlying callable; nulled out after running */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Callable&lt;V&gt; callable;</span><br><span class=\"line\">    <span class=\"comment\">/** The result to return or exception to throw from get() */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object outcome; <span class=\"comment\">// non-volatile, protected by state reads/writes</span></span><br><span class=\"line\">    <span class=\"comment\">/** 执行callable的线程 **/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Thread runner;</span><br><span class=\"line\">    <span class=\"comment\">/** 使用Treiber算法实现的无阻塞的Stack，用于存放等待的线程 */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> WaitNode waiters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> V <span class=\"title\">report</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> <span class=\"keyword\">throws</span> ExecutionException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拿到返回结果</span></span><br><span class=\"line\">        Object x = outcome;</span><br><span class=\"line\">        <span class=\"comment\">// 判断状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == NORMAL)</span><br><span class=\"line\">            <span class=\"comment\">// 状态正常，就返回结果值</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (V)x;</span><br><span class=\"line\">        <span class=\"comment\">// 判断异常，就抛出异常。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &gt;= CANCELLED)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CancellationException();</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExecutionException((Throwable)x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FutureTask</span><span class=\"params\">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callable == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callable = callable;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = NEW;       <span class=\"comment\">// ensure visibility of callable</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个构造方法会把传入的Runnable封装成一个Callable对象保存在callable字段中，同时如果任务执行成功的话就会返回传入的result。</span></span><br><span class=\"line\"><span class=\"comment\">     * 这种情况下如果不需要返回值的话可以传入一个null。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FutureTask</span><span class=\"params\">(Runnable runnable, V result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callable = Executors.callable(runnable, result);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = NEW;       <span class=\"comment\">// ensure visibility of callable</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断任务是否被取消</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCancelled</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state &gt;= CANCELLED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断任务是否完成</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state != NEW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 任务是new状态 并且 根据mayInterruptIfRunning把状态从NEW转化到INTERRUPTING或CANCELLED </span></span><br><span class=\"line\">        <span class=\"comment\">// 不符合上述状态，返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(state == NEW &amp;&amp;</span><br><span class=\"line\">              UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW,</span><br><span class=\"line\">                  mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;    </span><br><span class=\"line\">        <span class=\"comment\">// 2. 如果需要中断任务执行线程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mayInterruptIfRunning) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// runner保存着当前执行任务的线程</span></span><br><span class=\"line\">                    Thread t = runner;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        <span class=\"comment\">//中断任务执行线程</span></span><br><span class=\"line\">                        t.interrupt();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123; <span class=\"comment\">// final state</span></span><br><span class=\"line\">                    <span class=\"comment\">// 修改状态为INTERRUPTED</span></span><br><span class=\"line\">                    UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, INTERRUPTED);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            finishCompletion();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">        <span class=\"comment\">// 判断任务当前的state &lt;= COMPLETING是否成立。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &lt;= COMPLETING)</span><br><span class=\"line\">            <span class=\"comment\">// 如果成立，表明任务还没有结束(这里的结束包括任务正常执行完毕，任务执行异常，任务被取消)</span></span><br><span class=\"line\">            <span class=\"comment\">// 调用awaitDone()进行阻塞等待。</span></span><br><span class=\"line\">            s = awaitDone(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 任务已经结束，调用report()返回结果。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> report(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> timeout, TimeUnit unit)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unit == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">        <span class=\"comment\">// 如果awaitDone()超时返回之后任务还没结束，则抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s &lt;= COMPLETING &amp;&amp;</span><br><span class=\"line\">            (s = awaitDone(<span class=\"keyword\">true</span>, unit.toNanos(timeout))) &lt;= COMPLETING)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TimeoutException();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> report(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">done</span><span class=\"params\">()</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(V v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把任务执行结果保存在outcome字段中。</span></span><br><span class=\"line\">            outcome = v;</span><br><span class=\"line\">            <span class=\"comment\">// CAS的把当前任务状态从COMPLETING变更为NORMAL</span></span><br><span class=\"line\">            UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, NORMAL); <span class=\"comment\">// final state</span></span><br><span class=\"line\">            finishCompletion();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setException</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 尝试CAS操作，把当前的状态从NEW变更为COMPLETING(中间状态)状态。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapInt(<span class=\"keyword\">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把异常原因保存在outcome字段中，outcome字段用来保存任务执行结果或者异常原因。</span></span><br><span class=\"line\">            outcome = t;</span><br><span class=\"line\">            <span class=\"comment\">// CAS的把当前任务状态从COMPLETING变更为EXCEPTIONAL。</span></span><br><span class=\"line\">            UNSAFE.putOrderedInt(<span class=\"keyword\">this</span>, stateOffset, EXCEPTIONAL); <span class=\"comment\">// final state</span></span><br><span class=\"line\">            finishCompletion();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 状态如果不是NEW，说明任务或者已经执行过，或者已经被取消，直接返回</span></span><br><span class=\"line\">        <span class=\"comment\">// 状态如果是NEW，则尝试把当前执行线程保存在runner字段(runnerOffset)中，如果赋值失败则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state != NEW ||</span><br><span class=\"line\">            !UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, runnerOffset,</span><br><span class=\"line\">                                         <span class=\"keyword\">null</span>, Thread.currentThread()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Callable&lt;V&gt; c = callable;</span><br><span class=\"line\">            <span class=\"comment\">// 只有初始状态才会执行</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class=\"line\">                V result;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> ran;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 执行任务  计算逻辑</span></span><br><span class=\"line\">                    result = c.call();</span><br><span class=\"line\">                    ran = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">                    result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    ran = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 保存异常</span></span><br><span class=\"line\">                    setException(ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ran)</span><br><span class=\"line\">                    <span class=\"comment\">// 任务执行成功，保存返回结果</span></span><br><span class=\"line\">                    set(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无论是否执行成功，把runner设置为null</span></span><br><span class=\"line\">            runner = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// state must be re-read after nulling runner to prevent</span></span><br><span class=\"line\">            <span class=\"comment\">// leaked interrupts</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">            <span class=\"comment\">// 如果任务被中断，执行中断处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s &gt;= INTERRUPTING)</span><br><span class=\"line\">                handlePossibleCancellationInterrupt(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 与run方法类似，区别在于这个方法不会设置任务的执行结果值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if successfully run and reset</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">runAndReset</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state != NEW ||</span><br><span class=\"line\">            !UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, runnerOffset,</span><br><span class=\"line\">                                         <span class=\"keyword\">null</span>, Thread.currentThread()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ran = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Callable&lt;V&gt; c = callable;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span> &amp;&amp; s == NEW) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 不获取和设置返回值</span></span><br><span class=\"line\">                    c.call(); <span class=\"comment\">// don't set result</span></span><br><span class=\"line\">                    ran = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">                    setException(ex);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            runner = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            s = state;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s &gt;= INTERRUPTING)</span><br><span class=\"line\">                handlePossibleCancellationInterrupt(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 是否正确的执行并复位</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ran &amp;&amp; s == NEW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">handlePossibleCancellationInterrupt</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == INTERRUPTING)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (state == INTERRUPTING)</span><br><span class=\"line\">                Thread.yield(); <span class=\"comment\">// wait out pending interrupt</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确保cancel(true)产生的中断发生在run或runAndReset方法执行的过程中。</span></span><br><span class=\"line\">        <span class=\"comment\">//这里会循环的调用Thread.yield()来确保状态在cancel方法中被设置为INTERRUPTED。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Simple linked list nodes to record waiting threads in a Treiber</span></span><br><span class=\"line\"><span class=\"comment\">     * stack.  See other classes such as Phaser and SynchronousQueue</span></span><br><span class=\"line\"><span class=\"comment\">     * for more detailed explanation.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitNode</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> Thread thread;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> WaitNode next;</span><br><span class=\"line\">        WaitNode() &#123; thread = Thread.currentThread(); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Removes and signals all waiting threads, invokes done(), and</span></span><br><span class=\"line\"><span class=\"comment\">     * nulls out callable.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">finishCompletion</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// assert state &gt; COMPLETING;</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行该方法时state必须大于COMPLETING</span></span><br><span class=\"line\">        <span class=\"comment\">// 依次遍历waiters链表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (WaitNode q; (q = waiters) != <span class=\"keyword\">null</span>;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置栈顶节点为null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset, q, <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                    Thread t = q.thread;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        q.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 唤醒等待线程</span></span><br><span class=\"line\">                        LockSupport.unpark(t);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    WaitNode next = q.next;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果next为空，说明栈空了，跳出循环</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// 方便gc回收</span></span><br><span class=\"line\">                    q.next = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">                    <span class=\"comment\">// 重新设置栈顶node</span></span><br><span class=\"line\">                    q = next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 空方法，留给子类扩展</span></span><br><span class=\"line\">        done();</span><br><span class=\"line\"></span><br><span class=\"line\">        callable = <span class=\"keyword\">null</span>;        <span class=\"comment\">// to reduce footprint</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Awaits completion or aborts on interrupt or timeout.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timed true if use timed waits</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nanos time to wait, if timed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> state upon completion</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">awaitDone</span><span class=\"params\">(<span class=\"keyword\">boolean</span> timed, <span class=\"keyword\">long</span> nanos)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 计算等待截止时间</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> deadline = timed ? System.nanoTime() + nanos : <span class=\"number\">0L</span>;</span><br><span class=\"line\">        WaitNode q = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> queued = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 1. 判断阻塞线程是否被中断</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Thread.interrupted()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 被中断则在等待队列中删除该节点</span></span><br><span class=\"line\">                removeWaiter(q);</span><br><span class=\"line\">                <span class=\"comment\">// 抛出InterruptedException异常</span></span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InterruptedException();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> s = state;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 获取当前状态，如果状态大于COMPLETING</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s &gt; COMPLETING) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 说明任务已经结束(要么正常结束，要么异常结束，要么被取消)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (q != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    <span class=\"comment\">// 把thread显示置空</span></span><br><span class=\"line\">                    q.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 3. 如果状态处于中间状态COMPLETING</span></span><br><span class=\"line\">            <span class=\"comment\">// 表示任务已经结束但是任务执行线程还没来得及给outcome赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s == COMPLETING) <span class=\"comment\">// cannot time out yet</span></span><br><span class=\"line\">                Thread.yield();<span class=\"comment\">// 让出执行权让其他线程优先执行</span></span><br><span class=\"line\">            <span class=\"comment\">// 4. 如果等待节点为空，则构造一个等待节点</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (q == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                q = <span class=\"keyword\">new</span> WaitNode();</span><br><span class=\"line\">            <span class=\"comment\">// 5. 如果还没有入队列，则把当前节点加入waiters首节点并替换原来waiters</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!queued)</span><br><span class=\"line\">                queued = UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset,</span><br><span class=\"line\">                                                     q.next = waiters, q);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (timed) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果需要等待特定时间，则先计算要等待的时间</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果已经超时，则删除对应节点并返回对应的状态</span></span><br><span class=\"line\">                nanos = deadline - System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nanos &lt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                    removeWaiter(q);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 6. 阻塞等待特定时间</span></span><br><span class=\"line\">                LockSupport.parkNanos(<span class=\"keyword\">this</span>, nanos);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 6. 阻塞等待直到被其他线程唤醒</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                LockSupport.park(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeWaiter</span><span class=\"params\">(WaitNode node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将thread设置为null是因为下面要根据thread是否为null判断是否要把node移出</span></span><br><span class=\"line\">            node.thread = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 这里自旋保证删除成功</span></span><br><span class=\"line\">            retry:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;          <span class=\"comment\">// restart on removeWaiter race</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (WaitNode pred = <span class=\"keyword\">null</span>, q = waiters, s; q != <span class=\"keyword\">null</span>; q = s) &#123;</span><br><span class=\"line\">                    s = q.next;</span><br><span class=\"line\">                    <span class=\"comment\">// q.thread != null说明该q节点不需要移除</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (q.thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                        pred = q;</span><br><span class=\"line\">                    <span class=\"comment\">// 如果q.thread == null，且pred != null，需要删除q节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pred != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 删除q节点</span></span><br><span class=\"line\">                        pred.next = s;</span><br><span class=\"line\">                         <span class=\"comment\">// pred.thread == null时说明在并发情况下被其他线程修改了；</span></span><br><span class=\"line\">                         <span class=\"comment\">// 返回第一个for循环重试</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (pred.thread == <span class=\"keyword\">null</span>) <span class=\"comment\">// check for race</span></span><br><span class=\"line\">                            <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                     <span class=\"comment\">// 如果q.thread != null且pred == null，说明q是栈顶节点</span></span><br><span class=\"line\">                     <span class=\"comment\">// 设置栈顶元素为s节点，如果失败则返回重试</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!UNSAFE.compareAndSwapObject(<span class=\"keyword\">this</span>, waitersOffset,</span><br><span class=\"line\">                                                          q, s))</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Unsafe mechanics</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> stateOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> runnerOffset;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> waitersOffset;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class=\"line\">            Class&lt;?&gt; k = FutureTask.class;</span><br><span class=\"line\">            stateOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (k.getDeclaredField(<span class=\"string\">\"state\"</span>));</span><br><span class=\"line\">            runnerOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (k.getDeclaredField(<span class=\"string\">\"runner\"</span>));</span><br><span class=\"line\">            waitersOffset = UNSAFE.objectFieldOffset</span><br><span class=\"line\">                (k.getDeclaredField(<span class=\"string\">\"waiters\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程池中的线程初始化\"><a href=\"#线程池中的线程初始化\" class=\"headerlink\" title=\"线程池中的线程初始化\"></a>线程池中的线程初始化</h2><p>　　默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：</p>\n<ul>\n<li>prestartCoreThread()：初始化一个核心线程；</li>\n<li>prestartAllCoreThreads()：初始化所有核心线程</li>\n</ul>\n<h2 id=\"线程池的关闭\"><a href=\"#线程池的关闭\" class=\"headerlink\" title=\"线程池的关闭\"></a>线程池的关闭</h2><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭</p>\n<ul>\n<li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务</li>\n<li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</li>\n</ul>\n<h2 id=\"线程池大小\"><a href=\"#线程池大小\" class=\"headerlink\" title=\"线程池大小\"></a>线程池大小</h2><ol>\n<li>粗略<ol>\n<li>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1</li>\n<li>如果是IO密集型任务，参考值可以设置为2*NCPU</li>\n</ol>\n</li>\n<li>精确：（(线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</li>\n<li>最佳：压测</li>\n</ol>\n<h2 id=\"任务缓存队列\"><a href=\"#任务缓存队列\" class=\"headerlink\" title=\"任务缓存队列\"></a>任务缓存队列</h2><p><strong>workQueue</strong>，它用来存放等待执行的任务。BlockingQueue 是个接口，你需要使用它的实现之一来使用BlockingQueue，java.util.concurrent包下具有以下 BlockingQueue 接口的实现类：</p>\n<ul>\n<li>ArrayBlockingQueue：ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其初始化的时候设定这个上限，但之后就无法对这个上限进行修改了(译者注：因为它是基于数组实现的，也就具有数组的特性：一旦初始化，大小就无法修改)。</li>\n<li>LinkedBlockingQueue：LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。</li>\n<li>DelayQueue：DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口。</li>\n<li>PriorityBlockingQueue：PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。</li>\n<li>SynchronousQueue：SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。</li>\n</ul>\n<h2 id=\"线程池总结\"><a href=\"#线程池总结\" class=\"headerlink\" title=\"线程池总结\"></a>线程池总结</h2><ol>\n<li>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</li>\n<li>当调用 execute() 方法添加一个任务时，线程池会做如下判断：<ol>\n<li>如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；</li>\n<li>如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；</li>\n<li>如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li>\n<li>如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常RejectExecutionException。</li>\n<li>当一个线程完成任务时，它会从队列中取下一个任务来执行。</li>\n<li>当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。</li>\n</ol>\n</li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/Github-Pages-Blog/setting.png","slug":"setting.png","post":"ck4859y93003lt0fyvlndcm24","modified":1,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/valine.png","slug":"valine.png","post":"ck4859y93003lt0fyvlndcm24","modified":1,"renderable":0},{"_id":"source/_posts/Mysql01/01.jpg","slug":"01.jpg","post":"ck4859y3e000ut0fyts0xzyjh","modified":1,"renderable":0},{"_id":"source/_posts/Design-Pattern-Strategy/1.png","slug":"1.png","post":"ck4859y2u0009t0fy5cbsap0e","modified":1,"renderable":0},{"_id":"source/_posts/Design-Pattern-Strategy/2.png","slug":"2.png","post":"ck4859y2u0009t0fy5cbsap0e","modified":1,"renderable":0},{"_id":"source/_posts/Design-Pattern-Observer/2.png","slug":"2.png","post":"ck4859y92003kt0fym8za61n9","modified":1,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/create-repository.png","slug":"create-repository.png","post":"ck4859y93003lt0fyvlndcm24","modified":1,"renderable":0},{"_id":"source/_posts/Kafka-Background/4.jpg","slug":"4.jpg","post":"ck4859yb4004kt0fyeb9xqpka","modified":1,"renderable":0},{"_id":"source/_posts/C++-02/1.png","slug":"1.png","post":"ck4859y2s0008t0fy3l37j2fz","modified":1,"renderable":0},{"_id":"source/_posts/Mysql-LSN/LOG.png","slug":"LOG.png","post":"ck4859y35000pt0fyylafrkhm","modified":1,"renderable":0},{"_id":"source/_posts/Kafka-Producer/cert_override.png","post":"ck4859y34000ot0fynih21mp8","slug":"cert_override.png","modified":1,"renderable":1},{"_id":"source/_posts/Kafka-Producer/producer.png","post":"ck4859y34000ot0fynih21mp8","slug":"producer.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql-RedoAndUndo/redo-buffer.png","post":"ck4859y3j000xt0fy4lky1513","slug":"redo-buffer.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql-RedoAndUndo/undo-Segment.png","post":"ck4859y3j000xt0fy4lky1513","slug":"undo-Segment.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BBT1.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BBT1.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BBT2.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BBT2.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BBT3.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BBT3.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BBT4.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BBT4.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BST_delete1.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BST_delete1.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BST_delete2.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BST_delete2.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BST_insert.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BST_insert.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql05/BST_linked.png","post":"ck4859y3q0013t0fyyxk4qmtl","slug":"BST_linked.png","modified":1,"renderable":1},{"_id":"source/_posts/Thailand-Raiders/1.png","post":"ck4859y3s0017t0fyzc60sa62","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Thailand-Raiders/10.jpeg","post":"ck4859y3s0017t0fyzc60sa62","slug":"10.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Thailand-Raiders/11.png","slug":"11.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/2.png","slug":"2.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/3.png","slug":"3.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/4.png","slug":"4.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/455-2.jpeg","slug":"455-2.jpeg","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/455-3.jpeg","slug":"455-3.jpeg","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/455.jpeg","slug":"455.jpeg","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/5.png","post":"ck4859y3s0017t0fyzc60sa62","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Thailand-Raiders/6.png","slug":"6.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/7.png","slug":"7.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/8.png","slug":"8.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/9.png","slug":"9.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-45-53-237_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-11-45-53-237_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-45-57-687_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-11-45-57-687_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-46-00-652_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-11-46-00-652_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-46-03-072_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-11-46-03-072_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-11-46-08-364_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-11-46-08-364_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-14-972_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-12-05-14-972_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-18-389_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-12-05-18-389_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-20-912_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-12-05-20-912_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-23-188_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-12-05-23-188_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-25-297_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-12-05-25-297_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-12-05-30-499_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-12-05-30-499_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-13-11-50-782_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-13-11-50-782_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-13-11-56-133_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-13-11-56-133_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-13-12-27-105_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-13-12-27-105_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-14-05-58-003_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-14-05-58-003_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Screenshot_2019-08-31-14-25-04-833_com.xingin.xhs.png","slug":"Screenshot_2019-08-31-14-25-04-833_com.xingin.xhs.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/Tiffany.png","slug":"Tiffany.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/WechatIMG38.jpeg","slug":"WechatIMG38.jpeg","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Thailand-Raiders/WechatIMG39.png","post":"ck4859y3s0017t0fyzc60sa62","slug":"WechatIMG39.png","modified":1,"renderable":1},{"_id":"source/_posts/Thailand-Raiders/WechatIMG40.png","post":"ck4859y3s0017t0fyzc60sa62","slug":"WechatIMG40.png","modified":1,"renderable":1},{"_id":"source/_posts/Thailand-Raiders/tianjin-airport.png","slug":"tianjin-airport.png","post":"ck4859y3s0017t0fyzc60sa62","modified":1,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/copy-url.png","slug":"copy-url.png","post":"ck4859y93003lt0fyvlndcm24","modified":1,"renderable":0},{"_id":"source/_posts/Project-Module/4.png","slug":"4.png","post":"ck4859yb5004lt0fy34mg0llc","modified":1,"renderable":0},{"_id":"source/_posts/Redis-sds/sdshdr.png","post":"ck4859y99003tt0fyqzh5afwk","slug":"sdshdr.png","modified":1,"renderable":1},{"_id":"source/_posts/Redis-adlist/list.png","post":"ck4859y9a003vt0fywpon18c5","slug":"list.png","modified":1,"renderable":1},{"_id":"source/_posts/Design-Pattern-Observer/1.png","slug":"1.png","post":"ck4859y92003kt0fym8za61n9","modified":1,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/blog-icon.png","post":"ck4859y93003lt0fyvlndcm24","slug":"blog-icon.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-Blog/categories.png","post":"ck4859y93003lt0fyvlndcm24","slug":"categories.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-Blog/change-theme.png","post":"ck4859y93003lt0fyvlndcm24","slug":"change-theme.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-Blog/comment-delete.png","post":"ck4859y93003lt0fyvlndcm24","slug":"comment-delete.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-Blog/create-project.png","post":"ck4859y93003lt0fyvlndcm24","slug":"create-project.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-Blog/deploy-position.png","post":"ck4859y93003lt0fyvlndcm24","slug":"deploy-position.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-Blog/github-pages.png","post":"ck4859y93003lt0fyvlndcm24","slug":"github-pages.png","modified":1,"renderable":1},{"_id":"source/_posts/Github-Pages-Blog/select-theme.png","slug":"select-theme.png","post":"ck4859y93003lt0fyvlndcm24","modified":1,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/tags.png","post":"ck4859y93003lt0fyvlndcm24","slug":"tags.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/1.png","slug":"1.png","post":"ck4859yb5004lt0fy34mg0llc","modified":1,"renderable":0},{"_id":"source/_posts/Kafka-Background/1.png","post":"ck4859yb4004kt0fyeb9xqpka","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Kafka-Background/2.png","post":"ck4859yb4004kt0fyeb9xqpka","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Kafka-Background/3.jpg","post":"ck4859yb4004kt0fyeb9xqpka","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Kafka-Background/5.jpeg","post":"ck4859yb4004kt0fyeb9xqpka","slug":"5.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Kafka-Background/6.png","slug":"6.png","post":"ck4859yb4004kt0fyeb9xqpka","modified":1,"renderable":0},{"_id":"source/_posts/Project-Module/10.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"10.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/11.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/12.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"12.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/17.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"17.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/19.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"19.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/2.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/24.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"24.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/3.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/30.1.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"30.1.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/30.2.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"30.2.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/32.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"32.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/5.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/6.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/7.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/8.png","post":"ck4859yb5004lt0fy34mg0llc","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/Project-Module/9.png","slug":"9.png","post":"ck4859yb5004lt0fy34mg0llc","modified":1,"renderable":0},{"_id":"source/_posts/Mysql-storage/640.png","post":"ck4859yd3004vt0fyo8ktt58x","slug":"640.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/1.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/2.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/IO.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"IO.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/Insert-Buffer.svg","post":"ck4859yd5004wt0fyazelh5h3","slug":"Insert-Buffer.svg","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/doublewrite.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"doublewrite.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/index-update.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"index-update.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/innodb-Architecture.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"innodb-Architecture.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/innodb-buffer-pool-list.jpg","post":"ck4859yd5004wt0fyazelh5h3","slug":"innodb-buffer-pool-list.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/insert-buffer.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"insert-buffer.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/read.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"read.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/read.svg","post":"ck4859yd5004wt0fyazelh5h3","slug":"read.svg","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/redo-buffer.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"redo-buffer.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/three-list.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"three-list.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/three-list2.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"three-list2.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/write.png","post":"ck4859yd5004wt0fyazelh5h3","slug":"write.png","modified":1,"renderable":1},{"_id":"source/_posts/Mysql02/write.svg","post":"ck4859yd5004wt0fyazelh5h3","slug":"write.svg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck4859y2a0000t0fydtstsw7o","category_id":"ck4859y2p0004t0fyvq59ozee","_id":"ck4859y2z000et0fyq79kyvwj"},{"post_id":"ck4859y2n0002t0fyras55fxe","category_id":"ck4859y2v000at0fy97kyjs0v","_id":"ck4859y32000lt0fyc1q44p65"},{"post_id":"ck4859y2q0006t0fyn4wm021x","category_id":"ck4859y2z000ft0fy7qa2n5cz","_id":"ck4859y39000rt0fytk20de93"},{"post_id":"ck4859y2s0008t0fy3l37j2fz","category_id":"ck4859y2z000ft0fy7qa2n5cz","_id":"ck4859y3i000vt0fy3gf8utw0"},{"post_id":"ck4859y2u0009t0fy5cbsap0e","category_id":"ck4859y39000qt0fytruffvv0","_id":"ck4859y3q0011t0fy7hvh95us"},{"post_id":"ck4859y2v000ct0fy3uk7y04f","category_id":"ck4859y3j000wt0fyc0m7pryq","_id":"ck4859y3t0019t0fyur368907"},{"post_id":"ck4859y2w000dt0fyewnpn50g","category_id":"ck4859y3r0014t0fyjyfuw2m7","_id":"ck4859y3u001dt0fy8pgxdfif"},{"post_id":"ck4859y30000ht0fyhsbmm1di","category_id":"ck4859y3t001at0fyfz8ufpd7","_id":"ck4859y3v001it0fyaku9u2bo"},{"post_id":"ck4859y31000jt0fymae8x1as","category_id":"ck4859y3t001at0fyfz8ufpd7","_id":"ck4859y3v001kt0fyek8eijqy"},{"post_id":"ck4859y34000ot0fynih21mp8","category_id":"ck4859y3v001ht0fy67xd10v9","_id":"ck4859y3w001ot0fyfjch7vm3"},{"post_id":"ck4859y35000pt0fyylafrkhm","category_id":"ck4859y3v001lt0fy1691rvmm","_id":"ck4859y3w001tt0fyura12vz6"},{"post_id":"ck4859y3a000tt0fycscho9bt","category_id":"ck4859y3v001ht0fy67xd10v9","_id":"ck4859y3x001xt0fywrx2rhq2"},{"post_id":"ck4859y3e000ut0fyts0xzyjh","category_id":"ck4859y3v001lt0fy1691rvmm","_id":"ck4859y3y0021t0fyntbrqvbb"},{"post_id":"ck4859y3j000xt0fy4lky1513","category_id":"ck4859y3v001lt0fy1691rvmm","_id":"ck4859y3z0024t0fyefocg8rw"},{"post_id":"ck4859y3m0010t0fyihbt1gcj","category_id":"ck4859y3v001lt0fy1691rvmm","_id":"ck4859y3z0027t0fy7wv0nlpf"},{"post_id":"ck4859y3q0013t0fyyxk4qmtl","category_id":"ck4859y3v001lt0fy1691rvmm","_id":"ck4859y40002at0fy303ww73r"},{"post_id":"ck4859y3s0017t0fyzc60sa62","category_id":"ck4859y3z0026t0fybz4smcrg","_id":"ck4859y41002et0fy9rf223jf"},{"post_id":"ck4859y92003kt0fym8za61n9","category_id":"ck4859y39000qt0fytruffvv0","_id":"ck4859y98003rt0fyhcdnxx24"},{"post_id":"ck4859y95003nt0fy0uoxgqzp","category_id":"ck4859y3t001at0fyfz8ufpd7","_id":"ck4859y9b003wt0fyod1hhtd7"},{"post_id":"ck4859y99003tt0fyqzh5afwk","category_id":"ck4859y2p0004t0fyvq59ozee","_id":"ck4859y9d0041t0fycn2fiwjd"},{"post_id":"ck4859y93003lt0fyvlndcm24","category_id":"ck4859y97003ot0fyk2w5e503","_id":"ck4859y9d0043t0fy6f12zp96"},{"post_id":"ck4859y9a003vt0fywpon18c5","category_id":"ck4859y2p0004t0fyvq59ozee","_id":"ck4859y9e0044t0fy6q42hte3"},{"post_id":"ck4859y97003qt0fyx99lwk3g","category_id":"ck4859y9b003xt0fy9y6jho6y","_id":"ck4859y9f0046t0fyxbif1p3l"},{"post_id":"ck4859yb4004kt0fyeb9xqpka","category_id":"ck4859y3v001ht0fy67xd10v9","_id":"ck4859yb6004pt0fy99joy991"},{"post_id":"ck4859yb5004lt0fy34mg0llc","category_id":"ck4859y3j000wt0fyc0m7pryq","_id":"ck4859yba004rt0fyxrjns0pz"},{"post_id":"ck4859yd3004vt0fyo8ktt58x","category_id":"ck4859y3v001lt0fy1691rvmm","_id":"ck4859yd7004zt0fykkd1f1v6"},{"post_id":"ck4859yd5004wt0fyazelh5h3","category_id":"ck4859y3v001lt0fy1691rvmm","_id":"ck4859yd80051t0fytw7yrkce"},{"post_id":"ck4859yg20053t0fy2bdu8e0b","category_id":"ck4859y9b003xt0fy9y6jho6y","_id":"ck4859yg50055t0fyit4zvuyu"}],"PostTag":[{"post_id":"ck4859y2a0000t0fydtstsw7o","tag_id":"ck4859y2q0005t0fy06prz4lx","_id":"ck4859y31000it0fyor4mn0lv"},{"post_id":"ck4859y2a0000t0fydtstsw7o","tag_id":"ck4859y2v000bt0fy9hi8pa73","_id":"ck4859y32000kt0fy1ymr43qq"},{"post_id":"ck4859y2n0002t0fyras55fxe","tag_id":"ck4859y2z000gt0fy0r9twitc","_id":"ck4859y3m000zt0fy3smkpmag"},{"post_id":"ck4859y2n0002t0fyras55fxe","tag_id":"ck4859y32000nt0fyf3hpr4pu","_id":"ck4859y3q0012t0fyf3dne6rl"},{"post_id":"ck4859y2n0002t0fyras55fxe","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y3s0016t0fyqp44qw0l"},{"post_id":"ck4859y2q0006t0fyn4wm021x","tag_id":"ck4859y3j000yt0fyk9olhtf0","_id":"ck4859y3t0018t0fyhbjs49h5"},{"post_id":"ck4859y2s0008t0fy3l37j2fz","tag_id":"ck4859y3j000yt0fyk9olhtf0","_id":"ck4859y3u001ct0fyoqv0zav9"},{"post_id":"ck4859y2u0009t0fy5cbsap0e","tag_id":"ck4859y3t001bt0fyjc24hwye","_id":"ck4859y3u001gt0fylzx7cqcq"},{"post_id":"ck4859y2v000ct0fy3uk7y04f","tag_id":"ck4859y3u001ft0fyc7xvremp","_id":"ck4859y3w001nt0fyj24z765g"},{"post_id":"ck4859y2v000ct0fy3uk7y04f","tag_id":"ck4859y3v001jt0fypudr19nl","_id":"ck4859y3w001pt0fyd5a8latp"},{"post_id":"ck4859y2w000dt0fyewnpn50g","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859y3x001vt0fyfrw5kik0"},{"post_id":"ck4859y2w000dt0fyewnpn50g","tag_id":"ck4859y3w001rt0fyvbtw5vw0","_id":"ck4859y3x001yt0fy2rmkf3fj"},{"post_id":"ck4859y30000ht0fyhsbmm1di","tag_id":"ck4859y3x001ut0fyqyyt87zk","_id":"ck4859y400029t0fyubykxkda"},{"post_id":"ck4859y30000ht0fyhsbmm1di","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859y40002bt0fye324ftzh"},{"post_id":"ck4859y30000ht0fyhsbmm1di","tag_id":"ck4859y3y0022t0fyey0wvjm6","_id":"ck4859y41002dt0fyur1eg2df"},{"post_id":"ck4859y30000ht0fyhsbmm1di","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y41002ft0fydnzljzzc"},{"post_id":"ck4859y31000jt0fymae8x1as","tag_id":"ck4859y3x001ut0fyqyyt87zk","_id":"ck4859y42002jt0fyigmufcs0"},{"post_id":"ck4859y31000jt0fymae8x1as","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859y42002kt0fy6jujxgfa"},{"post_id":"ck4859y31000jt0fymae8x1as","tag_id":"ck4859y3y0022t0fyey0wvjm6","_id":"ck4859y42002mt0fyyoapedvg"},{"post_id":"ck4859y31000jt0fymae8x1as","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y42002nt0fym0gf2ozk"},{"post_id":"ck4859y34000ot0fynih21mp8","tag_id":"ck4859y42002it0fylv186y1o","_id":"ck4859y43002qt0fylfygcsd4"},{"post_id":"ck4859y34000ot0fynih21mp8","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859y43002rt0fybr4chhrh"},{"post_id":"ck4859y34000ot0fynih21mp8","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y43002tt0fyk3aztt4m"},{"post_id":"ck4859y35000pt0fyylafrkhm","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y44002vt0fy1rdcc7q6"},{"post_id":"ck4859y35000pt0fyylafrkhm","tag_id":"ck4859y43002st0fyzk6ou1a5","_id":"ck4859y44002wt0fykautz36d"},{"post_id":"ck4859y3a000tt0fycscho9bt","tag_id":"ck4859y42002it0fylv186y1o","_id":"ck4859y450030t0fydhn62fua"},{"post_id":"ck4859y3a000tt0fycscho9bt","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859y450031t0fy6rtpdlw7"},{"post_id":"ck4859y3a000tt0fycscho9bt","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y450033t0fycnvoc52n"},{"post_id":"ck4859y3e000ut0fyts0xzyjh","tag_id":"ck4859y43002st0fyzk6ou1a5","_id":"ck4859y450034t0fyuqnn7kvd"},{"post_id":"ck4859y3e000ut0fyts0xzyjh","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y460036t0fyh7zwdlya"},{"post_id":"ck4859y3j000xt0fy4lky1513","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y460037t0fyly97hcln"},{"post_id":"ck4859y3j000xt0fy4lky1513","tag_id":"ck4859y43002st0fyzk6ou1a5","_id":"ck4859y470039t0fy2as52tsk"},{"post_id":"ck4859y3m0010t0fyihbt1gcj","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y48003bt0fybg0x6iw5"},{"post_id":"ck4859y3m0010t0fyihbt1gcj","tag_id":"ck4859y43002st0fyzk6ou1a5","_id":"ck4859y48003ct0fysnrn0fdw"},{"post_id":"ck4859y3m0010t0fyihbt1gcj","tag_id":"ck4859y460038t0fyfqemw6q5","_id":"ck4859y48003et0fyw4y9d43w"},{"post_id":"ck4859y3q0013t0fyyxk4qmtl","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y49003gt0fywmq7n98y"},{"post_id":"ck4859y3q0013t0fyyxk4qmtl","tag_id":"ck4859y43002st0fyzk6ou1a5","_id":"ck4859y49003ht0fyti7wtlt4"},{"post_id":"ck4859y3q0013t0fyyxk4qmtl","tag_id":"ck4859y460038t0fyfqemw6q5","_id":"ck4859y49003it0fypgz7d4o6"},{"post_id":"ck4859y3s0017t0fyzc60sa62","tag_id":"ck4859y48003ft0fyed7mewnm","_id":"ck4859y49003jt0fyek6h1f28"},{"post_id":"ck4859y92003kt0fym8za61n9","tag_id":"ck4859y3t001bt0fyjc24hwye","_id":"ck4859y95003mt0fy4k4bcia7"},{"post_id":"ck4859y95003nt0fy0uoxgqzp","tag_id":"ck4859y3x001ut0fyqyyt87zk","_id":"ck4859y99003st0fy0xf6uxjh"},{"post_id":"ck4859y95003nt0fy0uoxgqzp","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859y9a003ut0fy0ajiiv7q"},{"post_id":"ck4859y95003nt0fy0uoxgqzp","tag_id":"ck4859y3y0022t0fyey0wvjm6","_id":"ck4859y9c003zt0fyqcgn6xuf"},{"post_id":"ck4859y95003nt0fy0uoxgqzp","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y9c0040t0fyzou8ef3a"},{"post_id":"ck4859y93003lt0fyvlndcm24","tag_id":"ck4859y97003pt0fygdizdf4v","_id":"ck4859y9f0047t0fyuf19xybc"},{"post_id":"ck4859y93003lt0fyvlndcm24","tag_id":"ck4859y9b003yt0fygvwfcjib","_id":"ck4859y9g0048t0fyuyvor3lr"},{"post_id":"ck4859y93003lt0fyvlndcm24","tag_id":"ck4859y3v001jt0fypudr19nl","_id":"ck4859y9h004at0fy89cd7yvj"},{"post_id":"ck4859y93003lt0fyvlndcm24","tag_id":"ck4859y9d0042t0fynd1dub37","_id":"ck4859y9h004bt0fy4gz2bpqw"},{"post_id":"ck4859y97003qt0fyx99lwk3g","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859y9i004dt0fy405g4o5z"},{"post_id":"ck4859y97003qt0fyx99lwk3g","tag_id":"ck4859y9e0045t0fypebspl6g","_id":"ck4859y9i004et0fymuy9x3pt"},{"post_id":"ck4859y97003qt0fyx99lwk3g","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859y9i004ft0fyixjyzh31"},{"post_id":"ck4859y99003tt0fyqzh5afwk","tag_id":"ck4859y2q0005t0fy06prz4lx","_id":"ck4859y9j004gt0fyamht609q"},{"post_id":"ck4859y99003tt0fyqzh5afwk","tag_id":"ck4859y9g0049t0fyjil4i4lc","_id":"ck4859y9j004ht0fy3ggom1p3"},{"post_id":"ck4859y9a003vt0fywpon18c5","tag_id":"ck4859y2q0005t0fy06prz4lx","_id":"ck4859y9j004it0fyh7omsm17"},{"post_id":"ck4859y9a003vt0fywpon18c5","tag_id":"ck4859y9g0049t0fyjil4i4lc","_id":"ck4859y9j004jt0fypjhit389"},{"post_id":"ck4859yb4004kt0fyeb9xqpka","tag_id":"ck4859y42002it0fylv186y1o","_id":"ck4859yb6004mt0fyeeqfqubj"},{"post_id":"ck4859yb4004kt0fyeb9xqpka","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859yb6004ot0fyavmir77g"},{"post_id":"ck4859yb4004kt0fyeb9xqpka","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859yba004qt0fyil84da98"},{"post_id":"ck4859yb5004lt0fy34mg0llc","tag_id":"ck4859y2z000gt0fy0r9twitc","_id":"ck4859ybh004st0fy0c9vb2bp"},{"post_id":"ck4859yb5004lt0fy34mg0llc","tag_id":"ck4859y3v001jt0fypudr19nl","_id":"ck4859ybl004tt0fykjp8r8cq"},{"post_id":"ck4859yb5004lt0fy34mg0llc","tag_id":"ck4859yb6004nt0fyczm84wgy","_id":"ck4859ybo004ut0fynvpe0sq9"},{"post_id":"ck4859yd3004vt0fyo8ktt58x","tag_id":"ck4859y43002st0fyzk6ou1a5","_id":"ck4859yd6004xt0fygl50zl1f"},{"post_id":"ck4859yd5004wt0fyazelh5h3","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859yd7004yt0fy8vnwdf2u"},{"post_id":"ck4859yd5004wt0fyazelh5h3","tag_id":"ck4859y43002st0fyzk6ou1a5","_id":"ck4859yd80050t0fy6qyenohr"},{"post_id":"ck4859yd5004wt0fyazelh5h3","tag_id":"ck4859y460038t0fyfqemw6q5","_id":"ck4859yd80052t0fyt2in19dz"},{"post_id":"ck4859yg20053t0fy2bdu8e0b","tag_id":"ck4859y3v001mt0fy980eyotp","_id":"ck4859yg70056t0fymuuxt765"},{"post_id":"ck4859yg20053t0fy2bdu8e0b","tag_id":"ck4859yg40054t0fy9naheq48","_id":"ck4859yg70057t0fyeb5h73l1"},{"post_id":"ck4859yg20053t0fy2bdu8e0b","tag_id":"ck4859y3a000st0fy86sxl2he","_id":"ck4859yg80058t0fyj22lrrlq"}],"Tag":[{"name":"redis","_id":"ck4859y2q0005t0fy06prz4lx"},{"name":"面试总结","_id":"ck4859y2v000bt0fy9hi8pa73"},{"name":"MyBatis","_id":"ck4859y2z000gt0fy0r9twitc"},{"name":"框架","_id":"ck4859y32000nt0fyf3hpr4pu"},{"name":"学习笔记","_id":"ck4859y3a000st0fy86sxl2he"},{"name":"C++","_id":"ck4859y3j000yt0fyk9olhtf0"},{"name":"设计模式","_id":"ck4859y3t001bt0fyjc24hwye"},{"name":"git","_id":"ck4859y3u001ft0fyc7xvremp"},{"name":"教程","_id":"ck4859y3v001jt0fypudr19nl"},{"name":"JAVA","_id":"ck4859y3v001mt0fy980eyotp"},{"name":"GUAVA","_id":"ck4859y3w001rt0fyvbtw5vw0"},{"name":"JVM","_id":"ck4859y3x001ut0fyqyyt87zk"},{"name":"GO","_id":"ck4859y3y0022t0fyey0wvjm6"},{"name":"Kafka","_id":"ck4859y42002it0fylv186y1o"},{"name":"MySql","_id":"ck4859y43002st0fyzk6ou1a5"},{"name":"InnoDB","_id":"ck4859y460038t0fyfqemw6q5"},{"name":"旅游攻略","_id":"ck4859y48003ft0fyed7mewnm"},{"name":"github","_id":"ck4859y97003pt0fygdizdf4v"},{"name":"hexo","_id":"ck4859y9b003yt0fygvwfcjib"},{"name":"blog","_id":"ck4859y9d0042t0fynd1dub37"},{"name":"CAS","_id":"ck4859y9e0045t0fypebspl6g"},{"name":"源码","_id":"ck4859y9g0049t0fyjil4i4lc"},{"name":"Spring Boot","_id":"ck4859yb6004nt0fyczm84wgy"},{"name":"线程池","_id":"ck4859yg40054t0fy9naheq48"}]}}