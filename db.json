{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/C++-01.md","hash":"29b0fc685a21ded211c62f7605741485e4bf6d28","modified":1562814179892},{"_id":"source/_posts/GIt-Ignore.md","hash":"4945e63510ea155849086e7acf935611ab305d1c","modified":1562816684433},{"_id":"source/_posts/Github-Pages-Blog.md","hash":"5cec7d4b5e2263acbc062c82af540edb41ef75b3","modified":1553669424302},{"_id":"source/_posts/JVM1.md","hash":"59482277525b03cf1994b2a9bb37077b0b3f336f","modified":1550125486000},{"_id":"source/_posts/JVM2.md","hash":"7eb0fc78f81e827392ae6d3d4634282d3a7151ac","modified":1550125486000},{"_id":"source/_posts/JVM3.md","hash":"d7d82ca1ba98fccb90a3535ab856fb9ce8340364","modified":1550125486000},{"_id":"source/_posts/Kafka-Background.md","hash":"39f194cc210d5dd3395ae7c973b0c7efe12cfbf5","modified":1562815607383},{"_id":"source/_posts/Project-Module.md","hash":"b2f3f08674224d4dd5535a05bc87374bd6d7c944","modified":1562591048038},{"_id":"source/_posts/Redis-adlist.md","hash":"3cf59cb08825a36d4a7ac5e8918069b4d6dca010","modified":1553768316039},{"_id":"source/_posts/Redis-sds.md","hash":"1c1ee668573131c85d6e75e73b5f78cbcc75a539","modified":1553760257837},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1548818372000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1548818372000},{"_id":"source/_drafts/Redis.md","hash":"b7c466dce97ff94f7efcb60de711a291306982c7","modified":1553669424318},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1548818372000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1548818372000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1548818372000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1548818372000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1548818372000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1548818372000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1548818372000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1548818372000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1548818372000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1548818372000},{"_id":"themes/next/_config.yml","hash":"4f442caf601083fffc8d9ed2770772566d90270b","modified":1548926979000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1548818372000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1548818372000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1548818372000},{"_id":"source/categories/index.md","hash":"aee2c5e57dc28322f727617488ec89ca13299877","modified":1553669424318},{"_id":"source/tags/index.md","hash":"924a602ccdf829c5c1fd0faced2eb9b0f656d9d8","modified":1553669424318},{"_id":"source/_posts/Github-Pages-Blog/blog-icon.png","hash":"b4198f97a457236f7c5677680634cbbff15bc837","modified":1553669424303},{"_id":"source/_posts/Github-Pages-Blog/categories.png","hash":"9d225500581c6625ccb43c90446ea702e2ad3d27","modified":1553669424303},{"_id":"source/_posts/Github-Pages-Blog/change-theme.png","hash":"80d61b4a4f7cba6f53e903cff176b394f9b7bdfa","modified":1553669424304},{"_id":"source/_posts/Github-Pages-Blog/create-project.png","hash":"8111130d13191b07f4de818e818120f8f4941c65","modified":1553669424307},{"_id":"source/_posts/Github-Pages-Blog/deploy-position.png","hash":"710e477d8ff93bdd654228e4edfaeb8419fc32cb","modified":1553669424309},{"_id":"source/_posts/Github-Pages-Blog/tags.png","hash":"ebae8e66598ef4ab1354a3f8b21f27ec29ef667f","modified":1553669424316},{"_id":"source/_posts/Kafka-Background/3.jpg","hash":"a4c2e32670e49c09a2d377caff93c8aaa1d70b09","modified":1562815622273},{"_id":"source/_posts/Kafka-Background/5.jpeg","hash":"2b65edd6da76ce3d4a5e9952e443a42cc26b33b2","modified":1562815610845},{"_id":"source/_posts/Project-Module/12.png","hash":"0c0eac591fb404c7b4bf7652807cb36468b41f50","modified":1562157821438},{"_id":"source/_posts/Project-Module/17.png","hash":"78271020841f963b565f5bbadbd0fd5e4053f79e","modified":1562158155946},{"_id":"source/_posts/Project-Module/19.png","hash":"3e5db4c7a07dc0e56bd19f93ff9d6fb0002f1802","modified":1562234502599},{"_id":"source/_posts/Project-Module/24.png","hash":"9bf2ce87e94232e26d6793509c69b2a15368646f","modified":1562244649617},{"_id":"source/_posts/Project-Module/32.png","hash":"b04d5ce74316668a7034f5c6a25cea90b0825289","modified":1562590688582},{"_id":"source/_posts/Project-Module/30.2.png","hash":"4a74cb3845660e82405f5a58d6707d8952c3536a","modified":1562587657499},{"_id":"source/_posts/Project-Module/6.png","hash":"12c3edf7adc454d9d40b4cf1e06f13cd5d8ac1e7","modified":1562073502235},{"_id":"source/_posts/Project-Module/7.png","hash":"42eb5628fe0a2771a62be81dcab1912d28293cdd","modified":1562073686413},{"_id":"source/_posts/Project-Module/8.png","hash":"408186cdf11cf8fd9e44b01ddb300ce89853e874","modified":1562157397710},{"_id":"source/_posts/Redis-sds/sdshdr.png","hash":"a0297688ecc572e7a8a01e6c3d67055a34270da1","modified":1553744715067},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1548818372000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1548818372000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1548818372000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1548818372000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1548818372000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1548818372000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1548818372000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1548818372000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1548818372000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1548818372000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1548818372000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1548818372000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1548818372000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1548818372000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1548818372000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1548818372000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1548818372000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1548818372000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1548818372000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1548818372000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1548818372000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1548818372000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1548818372000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1548818372000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1548818372000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1548818372000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1548818372000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1548818372000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1548818372000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1548818372000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1548818372000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1548818372000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1548818372000},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1548922370000},{"_id":"source/_posts/Kafka-Background/1.png","hash":"f970b02b874a9e4a4ae888ee84153951b6e82153","modified":1562815616709},{"_id":"source/_posts/Project-Module/11.png","hash":"9b094ebe0fbdfd04aa207b9ce540c69a5c0c3f45","modified":1562157501724},{"_id":"source/_posts/Project-Module/3.png","hash":"be6b1ece28049a1871b51a8c184e2e1952ae6da2","modified":1562073027513},{"_id":"source/_posts/Project-Module/5.png","hash":"77180f160369fde5065dd5b6139c5e506c60671b","modified":1562073148167},{"_id":"source/_posts/Redis-adlist/list.png","hash":"8c42024153090d4e8dc85dd26313b98ae394a2fc","modified":1553762050803},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/comment-delete.png","hash":"e8e8f4226ffb96387f1e15a45df8e28d6fe219f2","modified":1553669424305},{"_id":"source/_posts/Github-Pages-Blog/github-pages.png","hash":"cb19bd12e2c73729f622bb439c7ca2bfc6fa1706","modified":1553669424310},{"_id":"source/_posts/Github-Pages-Blog/setting.png","hash":"d78c0cf7a9a0d795e350eff8c0ab9ef0262cc01d","modified":1553669424316},{"_id":"source/_posts/Project-Module/1.png","hash":"0d13a4094fe66b80ad104b87698f7d95c422acf0","modified":1562072882808},{"_id":"source/_posts/Project-Module/10.png","hash":"5db18541d543dd31c8345d1fc67cef3c0a41f755","modified":1562157481092},{"_id":"source/_posts/Project-Module/2.png","hash":"23d9f5a8c391d42f884d2921d3ae263f17510a41","modified":1562072968734},{"_id":"source/_posts/Project-Module/30.1.png","hash":"8d2eb3439248383787e3593bf7fd1693efe90ea9","modified":1562587529735},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548818372000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548818372000},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"905366d63b0d6274d09c53a1ea3520f6acbe657d","modified":1562813726237},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1548818372000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1548818372000},{"_id":"themes/next/layout/_macro/post-end-tag.swig","hash":"51118e29759de4dce54b348eb8197cd0044aa45c","modified":1548926225000},{"_id":"themes/next/layout/_macro/post.swig","hash":"5db4a61ac8facea9664dd8c53bd4256b25b36a6d","modified":1548926261000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1548818372000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1548818372000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1548818372000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1548818372000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1548818372000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1548818372000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1548818372000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1548818372000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1548818372000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1548818372000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1548818372000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1548818372000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1548818372000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1548818372000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"891f51bab9c163d9bd02a45c4687bafa29c1da88","modified":1548847069000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1548818372000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1548818372000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1548818372000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1548818372000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1548818372000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1548818372000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1548818372000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1548818372000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1548818372000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1548818372000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1548818372000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1548818372000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1548818372000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1548818372000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1548818372000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1548818372000},{"_id":"themes/next/source/images/alipay.jpg","hash":"499aab03d01ae8b1e2f2eb593bdcd6e989188b9e","modified":1548922023000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548818372000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1548818372000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1548818372000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1548818372000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548818372000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548818372000},{"_id":"themes/next/source/images/favicon.ico","hash":"85da2faa392c9c975434e11a311e70fc6e8ca55e","modified":1546966292000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548818372000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1548818372000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548818372000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1548818372000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1548818372000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548818372000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"a6529134a0531dda88058747a8f41f4aab5e9abe","modified":1548922040000},{"_id":"source/_posts/Github-Pages-Blog/create-repository.png","hash":"9bdbb8073bb7b6f37f42577ef8843d09028cd026","modified":1553669424309},{"_id":"source/_posts/Github-Pages-Blog/valine.png","hash":"b35df8378b9559765b74f7d6bb9909a1372d115e","modified":1553669424317},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/images/avatar.png","hash":"2fc664b73fb0dc51c0025d6d605f70440f3712c1","modified":1538126136000},{"_id":"source/_posts/Kafka-Background/2.png","hash":"ab3ac1493d4e8a787578f5ad348c1164e137fa03","modified":1562815619501},{"_id":"source/_posts/Kafka-Background/4.jpg","hash":"2f17548f83ba5831e21fca29aaed2dc64ef1a4db","modified":1562815610851},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1548818372000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1548818372000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1548818372000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1548818372000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1548818372000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1548818372000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1548818372000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1548818372000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1548818372000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548818372000},{"_id":"themes/next/source/js/src/motion.js","hash":"6a96c556378d10ec3250850be7ba4a5b55f5b5d7","modified":1548926393000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1548818372000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1548818372000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1548818372000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1548818372000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"365945e7908bbd9131a9f4452dd8f1f6b61de6dd","modified":1548926331000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1548818372000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"890cfaa4e771d2a7624389042febe40604d285cf","modified":1548926869000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1548818372000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548818372000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1548818372000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1548818372000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1548818372000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1548818372000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1548818372000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/copy-url.png","hash":"fb7edbabddfe278a5fc1db57a90a99f690daafe5","modified":1553669424307},{"_id":"source/_posts/Project-Module/4.png","hash":"10d542aa156ac37480249b2be21cd83ee6902804","modified":1562073097537},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1548818372000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1548818372000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"f05d6881daddfba936f7936fb7ea8b8debe07c01","modified":1548926869000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1548818372000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6109209e94d4d06513ce194a11e05a5640927e41","modified":1548926501000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548818372000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548818372000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548818372000},{"_id":"source/_posts/Kafka-Background/6.png","hash":"95bb5f40b31f98bec90ca4eb43fa1fcb6a6d2b1d","modified":1562815610839},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1548843928000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"90d78b7270739eaab5b054226b684631a319011a","modified":1548844058000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"8f40a758fe6dff1f45268f2dc875b4336e551335","modified":1548837748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548818372000},{"_id":"source/_posts/Project-Module/9.png","hash":"b7a7304228d094b97030b6a3851d60c0cd40db8c","modified":1562157438227},{"_id":"source/_posts/Github-Pages-Blog/select-theme.png","hash":"2f05fcf89dee3dbaf7042198d28ab27c567b6a0d","modified":1553669424315},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548818372000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1548818372000},{"_id":"public/categories/index.html","hash":"a312b01f520f1fd8bc412281550ca371c5c14ecd","modified":1562826938120},{"_id":"public/tags/index.html","hash":"29ccb1a9132a3ca4a8560c81d24b5a595e84f721","modified":1562826938120},{"_id":"public/archives/2019/01/index.html","hash":"db517f1949be791e3c1abb44d61186986bbd9d51","modified":1562826938120},{"_id":"public/archives/2019/02/index.html","hash":"dc3f0cd5632416b46c8ddd167f3d7ec48321ed57","modified":1562826938120},{"_id":"public/archives/2019/03/index.html","hash":"5fa4b4b7096614b397639364f0713f0e78cc421e","modified":1562826938121},{"_id":"public/archives/2019/05/index.html","hash":"4674d08019802910e5cd4dd0a083a6bb99c5ab72","modified":1562826938121},{"_id":"public/archives/2019/06/index.html","hash":"d6c3cb4a71b274aff46e0dc291752a455922f17d","modified":1562826938121},{"_id":"public/archives/2019/07/index.html","hash":"0844df11e3db6213db3ad2c6cc6d478dc456712e","modified":1562826938121},{"_id":"public/categories/C/index.html","hash":"dd6614b75587c49d2a2de0a07533c7037c58068c","modified":1562826938121},{"_id":"public/categories/项目搭建/index.html","hash":"17a3b94c989a24d4a50d075f82111f26cba27135","modified":1562826938121},{"_id":"public/categories/blog/index.html","hash":"86d56229b0d1868110970a4e7eceb4ad7fc9fca3","modified":1562826938121},{"_id":"public/categories/JVM/index.html","hash":"e871129cdf13734fdf58d3cf9af749b5303f95d0","modified":1562826938121},{"_id":"public/categories/redis/index.html","hash":"7e3b1bb2d3b010f3852af32b997a92b7a623899c","modified":1562826938121},{"_id":"public/categories/Kafka/index.html","hash":"4338c4169cda6c562c7ebb0015f98fc6211ba705","modified":1562826938121},{"_id":"public/tags/C/index.html","hash":"7c26a4833ce8f43ebd8d2c3432d6d8e875781660","modified":1562826938121},{"_id":"public/tags/git/index.html","hash":"ce64653a0283b7c4057786395a689f96b52c6159","modified":1562826938121},{"_id":"public/tags/教程/index.html","hash":"83b7948fb54f894b37f669fd130f9adbd861a857","modified":1562826938122},{"_id":"public/tags/github/index.html","hash":"a69a8262252b611adb837565f230ea25582c5223","modified":1562826938122},{"_id":"public/tags/hexo/index.html","hash":"921da8191854809b898fa30a922884f220c2ccb3","modified":1562826938122},{"_id":"public/tags/blog/index.html","hash":"731c54c66cfd10e91e182b5d6b5977d5f46b4b42","modified":1562826938122},{"_id":"public/tags/JVM/index.html","hash":"8a81a9e791494a49862393ac4c17eeff8866b99e","modified":1562826938122},{"_id":"public/tags/JAVA/index.html","hash":"6ef0d1b9042c299c445166fea0d3ef66acc30043","modified":1562826938122},{"_id":"public/tags/GO/index.html","hash":"9ddf69cc5078eabb2d451b4a79eb68088d6c6c1d","modified":1562826938122},{"_id":"public/tags/学习笔记/index.html","hash":"988272e289cad5ba42cd62badca279e89ceeef47","modified":1562826938122},{"_id":"public/tags/redis/index.html","hash":"d5f77b486b467fdf285d1c5c6bd565a3000af590","modified":1562826938122},{"_id":"public/tags/源码/index.html","hash":"86a53113335abda5cbea390f0196b19986aae14f","modified":1562826938122},{"_id":"public/tags/Kafka/index.html","hash":"2dcb207f652142ac1113cceb911d4817044465f3","modified":1562826938122},{"_id":"public/tags/MyBatis/index.html","hash":"20343531afd090dba787555b14fc595202697adc","modified":1562826938122},{"_id":"public/tags/Spring-Boot/index.html","hash":"74e133c6abd2e707963a99cc9e2109a4a486091b","modified":1562826938122},{"_id":"public/2019/07/11/GIt-Ignore/index.html","hash":"3ebe2d518fb3615e43042262eab5fb9a8ace5513","modified":1562826938122},{"_id":"public/2019/07/09/C++-01/index.html","hash":"59e7830daeea734e9478a2375f40add938c79d14","modified":1562826938123},{"_id":"public/2019/06/02/Project-Module/index.html","hash":"e71472c8dcbf77803f404226885a700e155fff7f","modified":1562826938123},{"_id":"public/2019/05/25/Kafka-Background/index.html","hash":"d4d8161a857119954de834f5071550e4801a099f","modified":1562826938123},{"_id":"public/2019/03/28/Redis-adlist/index.html","hash":"6d6b28bc3d516316d9823b8390ea4fd968c9a578","modified":1562826938123},{"_id":"public/2019/03/27/Redis-sds/index.html","hash":"d647675869054ecebd1b88299d78fd9fcd79b0d0","modified":1562826938123},{"_id":"public/2019/02/14/JVM3/index.html","hash":"6a14d189a56720587678c2f5caf343680697bcfb","modified":1562826938123},{"_id":"public/2019/02/12/JVM2/index.html","hash":"4304a9a1024a6322a74677e5ead2fd63abe4906b","modified":1562826938123},{"_id":"public/2019/02/11/JVM1/index.html","hash":"bc6aa6b094685cc272b786edfc28fe098172d1fd","modified":1562826938123},{"_id":"public/2019/01/30/Github-Pages-Blog/index.html","hash":"532fac67391ae46cab3d45c198dbde5b39c7f234","modified":1562826938123},{"_id":"public/archives/index.html","hash":"08ae18f31fce67311fa12d54693f9343d8babc27","modified":1562826938123},{"_id":"public/archives/2019/index.html","hash":"69128588c925a052429b3a56b14cde244a93a307","modified":1562826938123},{"_id":"public/index.html","hash":"bc02d3f5908b7390f09c16aee8b1bbfa8c05474d","modified":1562826938123},{"_id":"public/page/2/index.html","hash":"ab38bf501f60948456a4cd9ffe2f1dfd499b9209","modified":1562826938123},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1562826938141},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1562826938142},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1562826938142},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1562826938142},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1562826938142},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1562826938142},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1562826938142},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1562826938142},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1562826938142},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1562826938142},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1562826938142},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1562826938142},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1562826938142},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1562826938142},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1562826938143},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1562826938143},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1562826938143},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1562826938143},{"_id":"public/images/wechatpay.jpg","hash":"a6529134a0531dda88058747a8f41f4aab5e9abe","modified":1562826938143},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1562826938143},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1562826938143},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1562826938143},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1562826938143},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1562826938143},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1562826938143},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1562826938143},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1562826938143},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1562826938143},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1562826938144},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1562826938144},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1562826938144},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1562826938144},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1562826938144},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1562826938144},{"_id":"public/2019/01/30/Github-Pages-Blog/blog-icon.png","hash":"b4198f97a457236f7c5677680634cbbff15bc837","modified":1562826938144},{"_id":"public/2019/01/30/Github-Pages-Blog/change-theme.png","hash":"80d61b4a4f7cba6f53e903cff176b394f9b7bdfa","modified":1562826938144},{"_id":"public/2019/01/30/Github-Pages-Blog/create-project.png","hash":"8111130d13191b07f4de818e818120f8f4941c65","modified":1562826938144},{"_id":"public/2019/01/30/Github-Pages-Blog/deploy-position.png","hash":"710e477d8ff93bdd654228e4edfaeb8419fc32cb","modified":1562826938144},{"_id":"public/2019/01/30/Github-Pages-Blog/tags.png","hash":"ebae8e66598ef4ab1354a3f8b21f27ec29ef667f","modified":1562826938144},{"_id":"public/2019/05/25/Kafka-Background/3.jpg","hash":"a4c2e32670e49c09a2d377caff93c8aaa1d70b09","modified":1562826938144},{"_id":"public/2019/05/25/Kafka-Background/5.jpeg","hash":"2b65edd6da76ce3d4a5e9952e443a42cc26b33b2","modified":1562826938144},{"_id":"public/2019/06/02/Project-Module/12.png","hash":"0c0eac591fb404c7b4bf7652807cb36468b41f50","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/17.png","hash":"78271020841f963b565f5bbadbd0fd5e4053f79e","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/19.png","hash":"3e5db4c7a07dc0e56bd19f93ff9d6fb0002f1802","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/24.png","hash":"9bf2ce87e94232e26d6793509c69b2a15368646f","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/32.png","hash":"b04d5ce74316668a7034f5c6a25cea90b0825289","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/30.2.png","hash":"4a74cb3845660e82405f5a58d6707d8952c3536a","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/6.png","hash":"12c3edf7adc454d9d40b4cf1e06f13cd5d8ac1e7","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/8.png","hash":"408186cdf11cf8fd9e44b01ddb300ce89853e874","modified":1562826938145},{"_id":"public/2019/06/02/Project-Module/7.png","hash":"42eb5628fe0a2771a62be81dcab1912d28293cdd","modified":1562826938145},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1562826938145},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1562826938145},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1562826938145},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1562826938146},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1562826938147},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1562826938148},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1562826938148},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1562826938148},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1562826938148},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1562826938148},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1562826938148},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1562826938148},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1562826938148},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1562826938148},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1562826938148},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1562826938148},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1562826938148},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1562826938148},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1562826938149},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1562826938149},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"6e013af9c502b2e63ac5e42944e3244f8f515eb7","modified":1562826938149},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1562826938149},{"_id":"public/images/alipay.jpg","hash":"499aab03d01ae8b1e2f2eb593bdcd6e989188b9e","modified":1562826938638},{"_id":"public/images/favicon.ico","hash":"85da2faa392c9c975434e11a311e70fc6e8ca55e","modified":1562826938643},{"_id":"public/images/avatar.png","hash":"2fc664b73fb0dc51c0025d6d605f70440f3712c1","modified":1562826938645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1562826938645},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1562826938645},{"_id":"public/2019/01/30/Github-Pages-Blog/categories.png","hash":"9d225500581c6625ccb43c90446ea702e2ad3d27","modified":1562826938645},{"_id":"public/2019/03/28/Redis-adlist/list.png","hash":"8c42024153090d4e8dc85dd26313b98ae394a2fc","modified":1562826938645},{"_id":"public/2019/03/27/Redis-sds/sdshdr.png","hash":"a0297688ecc572e7a8a01e6c3d67055a34270da1","modified":1562826938645},{"_id":"public/2019/05/25/Kafka-Background/1.png","hash":"f970b02b874a9e4a4ae888ee84153951b6e82153","modified":1562826938646},{"_id":"public/2019/06/02/Project-Module/10.png","hash":"5db18541d543dd31c8345d1fc67cef3c0a41f755","modified":1562826938646},{"_id":"public/2019/06/02/Project-Module/11.png","hash":"9b094ebe0fbdfd04aa207b9ce540c69a5c0c3f45","modified":1562826938646},{"_id":"public/2019/06/02/Project-Module/3.png","hash":"be6b1ece28049a1871b51a8c184e2e1952ae6da2","modified":1562826938646},{"_id":"public/2019/06/02/Project-Module/5.png","hash":"77180f160369fde5065dd5b6139c5e506c60671b","modified":1562826938646},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1562826938646},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1562826938646},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1562826938647},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1562826938647},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1562826938647},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1562826938647},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1562826938648},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1562826938659},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1562826938659},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1562826938660},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1562826938660},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1562826938660},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1562826938660},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1562826938660},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1562826938661},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1562826938661},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1562826938661},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1562826938661},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1562826938661},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1562826938661},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1562826938661},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1562826938661},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1562826938661},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1562826938661},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1562826938661},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1562826938661},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1562826938661},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1562826938662},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1562826938662},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1562826938662},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1562826938662},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1562826938662},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1562826938662},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1562826938663},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1562826938663},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1562826938663},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1562826938663},{"_id":"public/404.html","hash":"a297c49cc8f27898c7f3d265617fac0cfa05e87e","modified":1562826938663},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1562826938663},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1562826938663},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1562826938663},{"_id":"public/css/main.css","hash":"6a0517fc1f3f375b2d0ab43baa2bb3bf5b7ea016","modified":1562826938663},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1562826938663},{"_id":"public/2019/01/30/Github-Pages-Blog/comment-delete.png","hash":"e8e8f4226ffb96387f1e15a45df8e28d6fe219f2","modified":1562826938663},{"_id":"public/2019/01/30/Github-Pages-Blog/github-pages.png","hash":"cb19bd12e2c73729f622bb439c7ca2bfc6fa1706","modified":1562826938664},{"_id":"public/2019/01/30/Github-Pages-Blog/setting.png","hash":"d78c0cf7a9a0d795e350eff8c0ab9ef0262cc01d","modified":1562826938664},{"_id":"public/2019/06/02/Project-Module/2.png","hash":"23d9f5a8c391d42f884d2921d3ae263f17510a41","modified":1562826938664},{"_id":"public/2019/06/02/Project-Module/30.1.png","hash":"8d2eb3439248383787e3593bf7fd1693efe90ea9","modified":1562826938664},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1562826938664},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1562826938664},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"7d3a9c937317b9c15f2c3a872f0e26607a729458","modified":1562826938664},{"_id":"public/js/src/motion.js","hash":"6a96c556378d10ec3250850be7ba4a5b55f5b5d7","modified":1562826938680},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1562826938680},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1562826938681},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1562826938681},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1562826938681},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1562826938681},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1562826938682},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1562826938682},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1562826938682},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1562826938682},{"_id":"public/2019/01/30/Github-Pages-Blog/create-repository.png","hash":"9bdbb8073bb7b6f37f42577ef8843d09028cd026","modified":1562826938682},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1562826938682},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"5e7669733ecd0b1bc3881d2cf7fcc01e2990a07d","modified":1562826938683},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1562826938704},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1562826938704},{"_id":"public/2019/01/30/Github-Pages-Blog/valine.png","hash":"b35df8378b9559765b74f7d6bb9909a1372d115e","modified":1562826938705},{"_id":"public/2019/05/25/Kafka-Background/2.png","hash":"ab3ac1493d4e8a787578f5ad348c1164e137fa03","modified":1562826938705},{"_id":"public/2019/05/25/Kafka-Background/4.jpg","hash":"2f17548f83ba5831e21fca29aaed2dc64ef1a4db","modified":1562826938705},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1562826938732},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1562826938737},{"_id":"public/2019/01/30/Github-Pages-Blog/copy-url.png","hash":"fb7edbabddfe278a5fc1db57a90a99f690daafe5","modified":1562826938740},{"_id":"public/2019/06/02/Project-Module/4.png","hash":"10d542aa156ac37480249b2be21cd83ee6902804","modified":1562826938740},{"_id":"public/2019/06/02/Project-Module/1.png","hash":"0d13a4094fe66b80ad104b87698f7d95c422acf0","modified":1562826938740},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1562826938773},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1562826938773},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1562826938775},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1562826938775},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1562826938775},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1562826938775},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1562826938776},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1562826938791},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1562826938791},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1562826938792},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1562826938805},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1562826938815},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1562826938831},{"_id":"public/2019/05/25/Kafka-Background/6.png","hash":"95bb5f40b31f98bec90ca4eb43fa1fcb6a6d2b1d","modified":1562826938831},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1562826938845},{"_id":"public/2019/06/02/Project-Module/9.png","hash":"b7a7304228d094b97030b6a3851d60c0cd40db8c","modified":1562826938851},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"09521263ecc625a246b3406c385300e99e966a2e","modified":1562826938852},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1562826938854},{"_id":"public/2019/01/30/Github-Pages-Blog/select-theme.png","hash":"2f05fcf89dee3dbaf7042198d28ab27c567b6a0d","modified":1562826938856},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1562826938868},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1562826938882},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1562826938888}],"Category":[{"name":"C++","_id":"cjxyaqjdc0002jnfydorvwhf3"},{"name":"项目搭建","_id":"cjxyaqjdn0007jnfyzj9bj857"},{"name":"blog","_id":"cjxyaqjdu000bjnfygjmz42bs"},{"name":"JVM","_id":"cjxyaqjdy000ejnfygyj6fefx"},{"name":"redis","_id":"cjxyaqjf1001fjnfyjgvq9t16"},{"name":"Kafka","_id":"cjxyaqjgk0024jnfydheg4p0x"}],"Data":[],"Page":[{"title":"categories","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n","date":"2019-03-27T06:50:24.318Z","updated":"2019-03-27T06:50:24.318Z","path":"categories/index.html","layout":"page","_id":"cjxyaqjev001ajnfynals7m25","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ncomments: false\n---","date":"2019-03-27T06:50:24.318Z","updated":"2019-03-27T06:50:24.318Z","path":"tags/index.html","layout":"page","_id":"cjxyaqjex001cjnfye4pp8n2t","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C++强制类型转换","date":"2019-07-09T12:17:00.000Z","copyright":true,"comments":1,"_content":"## C语言类型转换\nc语言类型转换有如下两种(旧式转型)\n```C++\n(T)expression  //将 expression 转型为T\nT(expression)  //将 expression 转型为T\n```\n## C++新式类型转换\nC++类型转换有如下四种\n```C++\nconst_cast<T>(expression)\ndynamic_cast<T>(expression)\nreinterpret_cast<T>(expression)\nstatic_cast<T>(expression)\n```\n### const_cast\n一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以`cout << a << endl;`输出为1。\n```C++\n#include <iostream>\nusing namespace std;\nint main(int argc, char *argv[]) {\n\tconst int a = 1;\n\tint* b = const_cast<int*> (&a);\n\t*b = 2;\n\tcout << a << \" \" << *(&a) << \" \" << *b << endl;\n}\n// 输出：1 2 2\n```\n### dynamic_cast\ndynamic_cast 主要作用是将指向**派生类对象**的**基类指针或引用**，安全的转换为指向**派生类对象**的**派生类指针或引用**，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。\n在如下3种情况中转换可以成功\n- expression的类型与待转换类型相同。则转换必定成功。\n- expression的类型为待转换类型的公有派生类。(指针向上转换)\n- expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)\n   - 当expression为指向派生类的指针或引用派生类对象的基类引用。\n   - 基类中必须包含虚函数，也就是必须具备多态性。\n\n假设有如下两个类\n```C++\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n\tBase() {}\n\tBase(string s) : str(s) {}\n\tvirtual void Print() {cout << str << endl;}\nprivate:\n\tstring str;\n};\n\nclass Derived : public Base {\npublic:\n\tDerived() {}\n\tDerived(string s, int i) : Base(s), ival(i) {}\n\tvoid Print() {\n\t\tBase::Print();\n\t\tcout << ival << endl;\n\t}\n\tvoid PrintIval() {\n\t\tcout << ival << endl;\n\t}\nprivate:\n\tint ival;\n};\n```\nexample:\n```C++\nint main(int argc, char *argv[])\n{\n\t//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。\n\tBase* b = new Derived(\"test\", 1);\n\t//使用基类指针无法调用派生类独有的函数，编译无法通过\n\tb->PrintIval();\n\t//类型转换至派生类指针就可以调用到派生类独有的函数\n\tDerived* d = dynamic_cast<Derived*> (b);\n\td->PrintIval();\n\treturn 0;\n}\n```\n### reinterpret_cast\nreinterpret_cast 主要的作用为允许任意**长度相同**的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，**reinterpret_cast无法去掉源对象的const、volatile属性**。\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 1;\n\t//将a的指针转化为长整型数\n\tlong b = reinterpret_cast<long>(&a);\n\t//将空指针转化为长整型数\n\tlong d = reinterpret_cast<long>(NULL);\n\t//编译报错 int 4字节，而指针8字节\n\tint e = reinterpret_cast<int>(&a);\n\treturn 0;\n}\n```\n需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。\n\n### static_cast\nstatic_cast 类似C语言强制类型转换，它可以完成如下一些转换\n- 编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大->精度小使用位截断处理)\n- 将任意类型表达式转换为void类型，或从void*指针中找回其中的值。\n- 基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 'a';\n\t//将 char -> int\n\tint i = static_cast<int>(a);\n\t\n\tBase* b = new Base(\"123\");\n\t//将 Base 转换为 void*\n\tvoid* v = static_cast<void*>(b);\n\t//将 *void 转换为 Base\n\tb = static_cast<Base*>(v);\n\t\n\tDerived* d = new Derived(\"123\", 123);\n\t//向上转换 将Derived* 转换为 Base*\n\tBase* bb = static_cast<Base*>(d);\n\t//向下转换 将Base* 转换为 Derived*\n\tDerived* dd = static_cast<Derived*>(b);\n\t//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!\n\tdd->PrintIval();\n}\n```","source":"_posts/C++-01.md","raw":"---\ntitle: C++强制类型转换\ndate: 2019-07-09 20:17:00\ntags:\n    - C++\ncategories: C++\ncopyright: true\ncomments: true\n---\n## C语言类型转换\nc语言类型转换有如下两种(旧式转型)\n```C++\n(T)expression  //将 expression 转型为T\nT(expression)  //将 expression 转型为T\n```\n## C++新式类型转换\nC++类型转换有如下四种\n```C++\nconst_cast<T>(expression)\ndynamic_cast<T>(expression)\nreinterpret_cast<T>(expression)\nstatic_cast<T>(expression)\n```\n### const_cast\n一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以`cout << a << endl;`输出为1。\n```C++\n#include <iostream>\nusing namespace std;\nint main(int argc, char *argv[]) {\n\tconst int a = 1;\n\tint* b = const_cast<int*> (&a);\n\t*b = 2;\n\tcout << a << \" \" << *(&a) << \" \" << *b << endl;\n}\n// 输出：1 2 2\n```\n### dynamic_cast\ndynamic_cast 主要作用是将指向**派生类对象**的**基类指针或引用**，安全的转换为指向**派生类对象**的**派生类指针或引用**，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。\n在如下3种情况中转换可以成功\n- expression的类型与待转换类型相同。则转换必定成功。\n- expression的类型为待转换类型的公有派生类。(指针向上转换)\n- expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)\n   - 当expression为指向派生类的指针或引用派生类对象的基类引用。\n   - 基类中必须包含虚函数，也就是必须具备多态性。\n\n假设有如下两个类\n```C++\n#include <string>\n#include <iostream>\nusing namespace std;\n\nclass Base {\npublic:\n\tBase() {}\n\tBase(string s) : str(s) {}\n\tvirtual void Print() {cout << str << endl;}\nprivate:\n\tstring str;\n};\n\nclass Derived : public Base {\npublic:\n\tDerived() {}\n\tDerived(string s, int i) : Base(s), ival(i) {}\n\tvoid Print() {\n\t\tBase::Print();\n\t\tcout << ival << endl;\n\t}\n\tvoid PrintIval() {\n\t\tcout << ival << endl;\n\t}\nprivate:\n\tint ival;\n};\n```\nexample:\n```C++\nint main(int argc, char *argv[])\n{\n\t//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。\n\tBase* b = new Derived(\"test\", 1);\n\t//使用基类指针无法调用派生类独有的函数，编译无法通过\n\tb->PrintIval();\n\t//类型转换至派生类指针就可以调用到派生类独有的函数\n\tDerived* d = dynamic_cast<Derived*> (b);\n\td->PrintIval();\n\treturn 0;\n}\n```\n### reinterpret_cast\nreinterpret_cast 主要的作用为允许任意**长度相同**的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，**reinterpret_cast无法去掉源对象的const、volatile属性**。\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 1;\n\t//将a的指针转化为长整型数\n\tlong b = reinterpret_cast<long>(&a);\n\t//将空指针转化为长整型数\n\tlong d = reinterpret_cast<long>(NULL);\n\t//编译报错 int 4字节，而指针8字节\n\tint e = reinterpret_cast<int>(&a);\n\treturn 0;\n}\n```\n需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。\n\n### static_cast\nstatic_cast 类似C语言强制类型转换，它可以完成如下一些转换\n- 编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大->精度小使用位截断处理)\n- 将任意类型表达式转换为void类型，或从void*指针中找回其中的值。\n- 基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。\n```C++\nint main(int argc, char *argv[])\n{\n\tchar a = 'a';\n\t//将 char -> int\n\tint i = static_cast<int>(a);\n\t\n\tBase* b = new Base(\"123\");\n\t//将 Base 转换为 void*\n\tvoid* v = static_cast<void*>(b);\n\t//将 *void 转换为 Base\n\tb = static_cast<Base*>(v);\n\t\n\tDerived* d = new Derived(\"123\", 123);\n\t//向上转换 将Derived* 转换为 Base*\n\tBase* bb = static_cast<Base*>(d);\n\t//向下转换 将Base* 转换为 Derived*\n\tDerived* dd = static_cast<Derived*>(b);\n\t//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!\n\tdd->PrintIval();\n}\n```","slug":"C++-01","published":1,"updated":"2019-07-11T03:02:59.892Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjd50000jnfyr18dsdbb","content":"<h2 id=\"C语言类型转换\"><a href=\"#C语言类型转换\" class=\"headerlink\" title=\"C语言类型转换\"></a>C语言类型转换</h2><p>c语言类型转换有如下两种(旧式转型)<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(T)expression  <span class=\"comment\">//将 expression 转型为T</span></span><br><span class=\"line\">T(expression)  <span class=\"comment\">//将 expression 转型为T</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"C-新式类型转换\"><a href=\"#C-新式类型转换\" class=\"headerlink\" title=\"C++新式类型转换\"></a>C++新式类型转换</h2><p>C++类型转换有如下四种<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">dynamic_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">static_cast</span>&lt;T&gt;(expression)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"const-cast\"><a href=\"#const-cast\" class=\"headerlink\" title=\"const_cast\"></a>const_cast</h3><p>一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以<code>cout &lt;&lt; a &lt;&lt; endl;</code>输出为1。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* b = <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">int</span>*&gt; (&amp;a);</span><br><span class=\"line\">\t*b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *(&amp;a) &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1 2 2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dynamic-cast\"><a href=\"#dynamic-cast\" class=\"headerlink\" title=\"dynamic_cast\"></a>dynamic_cast</h3><p>dynamic_cast 主要作用是将指向<strong>派生类对象</strong>的<strong>基类指针或引用</strong>，安全的转换为指向<strong>派生类对象</strong>的<strong>派生类指针或引用</strong>，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。<br>在如下3种情况中转换可以成功</p>\n<ul>\n<li>expression的类型与待转换类型相同。则转换必定成功。</li>\n<li>expression的类型为待转换类型的公有派生类。(指针向上转换)</li>\n<li>expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)<ul>\n<li>当expression为指向派生类的指针或引用派生类对象的基类引用。</li>\n<li>基类中必须包含虚函数，也就是必须具备多态性。</li>\n</ul>\n</li>\n</ul>\n<p>假设有如下两个类<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase() &#123;&#125;</span><br><span class=\"line\">\tBase(<span class=\"built_in\">string</span> s) : str(s) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> :</span> <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDerived() &#123;&#125;</span><br><span class=\"line\">\tDerived(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> i) : Base(s), ival(i) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tBase::Print();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintIval</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ival;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>example:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。</span></span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//使用基类指针无法调用派生类独有的函数，编译无法通过</span></span><br><span class=\"line\">\tb-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"comment\">//类型转换至派生类指针就可以调用到派生类独有的函数</span></span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">dynamic_cast</span>&lt;Derived*&gt; (b);</span><br><span class=\"line\">\td-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reinterpret-cast\"><a href=\"#reinterpret-cast\" class=\"headerlink\" title=\"reinterpret_cast\"></a>reinterpret_cast</h3><p>reinterpret_cast 主要的作用为允许任意<strong>长度相同</strong>的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，<strong>reinterpret_cast无法去掉源对象的const、volatile属性</strong>。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将a的指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> b = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"comment\">//将空指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> d = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//编译报错 int 4字节，而指针8字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。</p>\n<h3 id=\"static-cast\"><a href=\"#static-cast\" class=\"headerlink\" title=\"static_cast\"></a>static_cast</h3><p>static_cast 类似C语言强制类型转换，它可以完成如下一些转换</p>\n<ul>\n<li>编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大-&gt;精度小使用位截断处理)</li>\n<li>将任意类型表达式转换为void类型，或从void*指针中找回其中的值。</li>\n<li>基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将 char -&gt; int</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(a);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Base(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//将 Base 转换为 void*</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* v = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">void</span>*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//将 *void 转换为 Base</span></span><br><span class=\"line\">\tb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(v);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"123\"</span>, <span class=\"number\">123</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//向上转换 将Derived* 转换为 Base*</span></span><br><span class=\"line\">\tBase* bb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(d);</span><br><span class=\"line\">\t<span class=\"comment\">//向下转换 将Base* 转换为 Derived*</span></span><br><span class=\"line\">\tDerived* dd = <span class=\"keyword\">static_cast</span>&lt;Derived*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!</span></span><br><span class=\"line\">\tdd-&gt;PrintIval();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"C语言类型转换\"><a href=\"#C语言类型转换\" class=\"headerlink\" title=\"C语言类型转换\"></a>C语言类型转换</h2><p>c语言类型转换有如下两种(旧式转型)<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(T)expression  <span class=\"comment\">//将 expression 转型为T</span></span><br><span class=\"line\">T(expression)  <span class=\"comment\">//将 expression 转型为T</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"C-新式类型转换\"><a href=\"#C-新式类型转换\" class=\"headerlink\" title=\"C++新式类型转换\"></a>C++新式类型转换</h2><p>C++类型转换有如下四种<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">dynamic_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">reinterpret_cast</span>&lt;T&gt;(expression)</span><br><span class=\"line\"><span class=\"keyword\">static_cast</span>&lt;T&gt;(expression)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"const-cast\"><a href=\"#const-cast\" class=\"headerlink\" title=\"const_cast\"></a>const_cast</h3><p>一般用于移除对象的const与volatile。如下图所示，b可以修改a的值。但是注意，编译器会进行优化，将数字常量1替代a常量。所以<code>cout &lt;&lt; a &lt;&lt; endl;</code>输出为1。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* b = <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">int</span>*&gt; (&amp;a);</span><br><span class=\"line\">\t*b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *(&amp;a) &lt;&lt; <span class=\"string\">\" \"</span> &lt;&lt; *b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：1 2 2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"dynamic-cast\"><a href=\"#dynamic-cast\" class=\"headerlink\" title=\"dynamic_cast\"></a>dynamic_cast</h3><p>dynamic_cast 主要作用是将指向<strong>派生类对象</strong>的<strong>基类指针或引用</strong>，安全的转换为指向<strong>派生类对象</strong>的<strong>派生类指针或引用</strong>，并使用转换后的指针调用派生类独有的函数(非虚函数)。如果转换指针转换失败，则将返回空指针；如果转换引用失败，则将会抛出一个名为std::bad_cast的异常。<br>在如下3种情况中转换可以成功</p>\n<ul>\n<li>expression的类型与待转换类型相同。则转换必定成功。</li>\n<li>expression的类型为待转换类型的公有派生类。(指针向上转换)</li>\n<li>expression的类型为待转换类型的公有基类时，必须满足以下两个要求，才会转换成功，否则转换失败。(指针向下转换)<ul>\n<li>当expression为指向派生类的指针或引用派生类对象的基类引用。</li>\n<li>基类中必须包含虚函数，也就是必须具备多态性。</li>\n</ul>\n</li>\n</ul>\n<p>假设有如下两个类<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tBase() &#123;&#125;</span><br><span class=\"line\">\tBase(<span class=\"built_in\">string</span> s) : str(s) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">string</span> str;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> :</span> <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tDerived() &#123;&#125;</span><br><span class=\"line\">\tDerived(<span class=\"built_in\">string</span> s, <span class=\"keyword\">int</span> i) : Base(s), ival(i) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tBase::Print();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PrintIval</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; ival &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ival;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>example:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//基类指针指向派生类对象，基类中包含虚函数，符合向下转换规则。</span></span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"test\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//使用基类指针无法调用派生类独有的函数，编译无法通过</span></span><br><span class=\"line\">\tb-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"comment\">//类型转换至派生类指针就可以调用到派生类独有的函数</span></span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">dynamic_cast</span>&lt;Derived*&gt; (b);</span><br><span class=\"line\">\td-&gt;PrintIval();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reinterpret-cast\"><a href=\"#reinterpret-cast\" class=\"headerlink\" title=\"reinterpret_cast\"></a>reinterpret_cast</h3><p>reinterpret_cast 主要的作用为允许任意<strong>长度相同</strong>的对象之间进行转换，而转换的安全性，则全部由程序员所保证，它只关注对象之间长度是否相同，长度不相同则无法通过编译。注意，<strong>reinterpret_cast无法去掉源对象的const、volatile属性</strong>。<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将a的指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> b = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"comment\">//将空指针转化为长整型数</span></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> d = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">long</span>&gt;(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//编译报错 int 4字节，而指针8字节</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(&amp;a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>需注意在32位机器上，指针为4字节，而在64位机器上，指针为8字节。</p>\n<h3 id=\"static-cast\"><a href=\"#static-cast\" class=\"headerlink\" title=\"static_cast\"></a>static_cast</h3><p>static_cast 类似C语言强制类型转换，它可以完成如下一些转换</p>\n<ul>\n<li>编译器隐式执行的类型转换，如int与float、double与char、enum与int之间的转换等。(精度大-&gt;精度小使用位截断处理)</li>\n<li>将任意类型表达式转换为void类型，或从void*指针中找回其中的值。</li>\n<li>基类与派生类指针或引用类型之间的转换，注意，由派生类转换至基类时(向上转换)是安全的，由基类至派生类转换时(向下转换)是非安全的。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//将 char -&gt; int</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(a);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tBase* b = <span class=\"keyword\">new</span> Base(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//将 Base 转换为 void*</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* v = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">void</span>*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//将 *void 转换为 Base</span></span><br><span class=\"line\">\tb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(v);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tDerived* d = <span class=\"keyword\">new</span> Derived(<span class=\"string\">\"123\"</span>, <span class=\"number\">123</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//向上转换 将Derived* 转换为 Base*</span></span><br><span class=\"line\">\tBase* bb = <span class=\"keyword\">static_cast</span>&lt;Base*&gt;(d);</span><br><span class=\"line\">\t<span class=\"comment\">//向下转换 将Base* 转换为 Derived*</span></span><br><span class=\"line\">\tDerived* dd = <span class=\"keyword\">static_cast</span>&lt;Derived*&gt;(b);</span><br><span class=\"line\">\t<span class=\"comment\">//未定义的行为!非常危险!父类对象并不包含该函数，编译不会报错!</span></span><br><span class=\"line\">\tdd-&gt;PrintIval();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"设置git忽略.idea文件","date":"2019-07-11T03:39:04.000Z","copyright":true,"comments":0,"_content":"1.将.idea目录加入ignore：\n```bash\n$ echo '.idea' >> .gitignore\n```\n\n2.从git中删除idea：\n```bash\n$ git rm -r --cached .idea\n```\n\n3.将.gitignore文件加入git：\n```bash\n$ git add .gitignore\n```\n\n4.提交.gitignore文件，将.idea从代码仓库中忽略：\n```bash\n$ git commit -m '忽略.idea文件夹'\n```\n\n5、Push到Git服务器：\n\n```bash\n$ git push\n```","source":"_posts/GIt-Ignore.md","raw":"---\ntitle: 设置git忽略.idea文件\ndate: 2019-07-11 11:39:04\ntags:\n    - git\n    - 教程\ncategories: 项目搭建\ncopyright: true\ncomments: false\n---\n1.将.idea目录加入ignore：\n```bash\n$ echo '.idea' >> .gitignore\n```\n\n2.从git中删除idea：\n```bash\n$ git rm -r --cached .idea\n```\n\n3.将.gitignore文件加入git：\n```bash\n$ git add .gitignore\n```\n\n4.提交.gitignore文件，将.idea从代码仓库中忽略：\n```bash\n$ git commit -m '忽略.idea文件夹'\n```\n\n5、Push到Git服务器：\n\n```bash\n$ git push\n```","slug":"GIt-Ignore","published":1,"updated":"2019-07-11T03:44:44.433Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjda0001jnfyx4gatoxz","content":"<p>1.将.idea目录加入ignore：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'.idea'</span> &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>2.从git中删除idea：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached .idea</span><br></pre></td></tr></table></figure></p>\n<p>3.将.gitignore文件加入git：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>4.提交.gitignore文件，将.idea从代码仓库中忽略：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">'忽略.idea文件夹'</span></span><br></pre></td></tr></table></figure></p>\n<p>5、Push到Git服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>1.将.idea目录加入ignore：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'.idea'</span> &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>2.从git中删除idea：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm -r --cached .idea</span><br></pre></td></tr></table></figure></p>\n<p>3.将.gitignore文件加入git：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>4.提交.gitignore文件，将.idea从代码仓库中忽略：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">'忽略.idea文件夹'</span></span><br></pre></td></tr></table></figure></p>\n<p>5、Push到Git服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push</span><br></pre></td></tr></table></figure>"},{"title":"Mac下利用Github Pages快速搭建免费博客","date":"2019-01-30T11:30:04.000Z","copyright":true,"comments":1,"_content":"本博客利用Hexo + Next + GitHubPages 搭建博客。\n\n## 准备工作\n\n### 安装node.js\n\n``` bash\n$ brew install node\n```\n\n### 安装 git\n\n``` bash\n$ brew install git\n```\n\n### 安装yarn\n\n``` bash\n$ npm install yarn\n```\n\n如果安装失败用\n\n``` bash\n$ brew install yarn\n```\n\n### 安装hexo\n\n进入你的项目目录，举个例子我的目录是blog\n\n``` bash\n$ cd blog\n```\n\n然后用 yarn 安装 hexo\n\n``` bash\n$ yarn add hexo -S\n```\n\n如果安装失败用\n\n``` bash\n$ npm install hexo-cli -g\n$ npm install hexo-server --save\n```\n详细可见[官方文档](https://hexo.io/zh-cn/docs/)\n\n## 搭建本地博客\n\n### 项目初始化\n\n进入你的项目目录,初始化hexo\n\n``` bash\n$ cd blog\n$ hexo init\n```\n### 安装依赖\n\n``` bash\n$ yarn install\n```\n### 启动本地服务\n\n``` bash\n$ hexo server\n```\n在浏览器输入 `localhost:4000` 即可\n\n## 关联 GitHub\n### 创建项目\n\n![创建项目](Github-Pages-Blog/create-project.png)\n\n项目名称一定一定是 `[用户名].github.io`\n![创建项目](Github-Pages-Blog/create-repository.png)\n\n### 设置\n\n![设置](Github-Pages-Blog/setting.png)\n\n在设置中找到GitHub Pages ，分支选择master，点击choose a theme\n\n![设置github-pages](Github-Pages-Blog/github-pages.png)\n\n选择喜欢的主题，点击select theme即可\n![选择主题](Github-Pages-Blog/select-theme.png)\n\n到这里就可以访问你的主页啦  `https://[用户名].github.io/`,接下来复制你的项目链接\n\n![复制项目链接](Github-Pages-Blog/copy-url.png)\n\n到你的本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n![hexo设置git](Github-Pages-Blog/deploy-position.png)\n\n### 站点配置\n站点配置包括修改博客名称，描述，作者等等，建议直接查看[官方教程](https://hexo.io/zh-cn/docs/configuration)\n\n### 关联\n\n安装 hexo-deployer-git 插件\n``` bash\n$ yarn add hexo-deployer-git -S\n```\n如果失败的话尝试下面的方法\n``` bash\n$ npm install --save hexo-deployer-git\n```\n在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo\n``` bash\n$  hexo d -g\n```\n这时访问你的github主页`https://[用户名].github.io/`就可以啦\n\n## NexT主题配置\nNexT 是一个高质量并且优雅的Hexo 主题。\n详细可见[官方文档](https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md)\n\n### 安装NexT主题\n在你的项目文件夹下，执行以下命令，安装NexT主题\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n更改项目根目录下`_config.yml` 文件，如下\n![更改主题](Github-Pages-Blog/change-theme.png)\n\n重新生成本地文件并推送到github\n``` bash\n$  hexo d -g\n```\n访问你的github主页`https://[用户名].github.io/`就可以看到啦\n\n### 主题配置\n\n`themes/next`文件夹下的`_config.yml`是主题的配置文件\nnext内置了4种主题方案，选择你喜欢的方案解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\nMenu Settings是控制图中菜单的位置，根据需要解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\nmenu:\n  home: / || home\n#  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n#  archives: /archives/ || archive\n#  schedule: /schedule/ || calendar\n#  sitemap: /sitemap.xml || sitemap\n#  commonweal: /404.html || heartbeat\n```\n![更改菜单](Github-Pages-Blog/blog-icon.png)\n还有很多很多的配置请参考[官方教程](http://theme-next.iissnan.com/getting-started.html#install-next-theme),[主题个性配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html),[主题美化](http://yearito.cn/posts/hexo-theme-beautify.html)\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n也可以在本地启动服务器，在浏览器输入 `localhost:4000` 观看效果\n``` bash\n$ hexo server\n```\n## 创建文章\n\n### 添加【标签】页面\n\n新建标签页面\n``` bash\n$ hexo new page tags\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: tags\ntype: \"tags\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `tags: /tags/ || tags` 这行注释\n新建测试文章\n``` bash\n$ hexo new 'test'\n```\n在测试文章的头部添加tags信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。\n![标签](Github-Pages-Blog/tags.png)\n\n### 添加【分类】页面\n新建标签页面\n``` bash\n$ hexo new page categories\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `categories: /categories/ || th` 这行注释\n在测试文章的头部添加categories信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\ncategories: Testing\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。\n![分类](Github-Pages-Blog/categories.png)\n\n### 给博客添加图片\n在项目目录下执行\n\n``` bash\n$ npm install hexo-asset-image --save\n```\n\n在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹\n``` bash\n$ hexo new '文章名'\n```\n将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：\n``` markdown\n ![文字](xxxx/图片名.jpg)\n```\n文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n### 添加Valine评论系统\n\n首先需要去注册一个[Leancloud](https://leancloud.cn/)账号,验证邮箱\n然后随便创建一个应用，按如图所示找到`appid`，`appkey`\n![评论](Github-Pages-Blog/valine.png)\n\n按下图修改`themes/next`文件夹下的`_config.yml`主题配置文件，重新启动服务器就可以啦\n``` yaml\n # Valine.\n # You can get your appid and appkey from https://leancloud.cn\n # more info please open https://valine.js.org\n valine:\n   enable: true\n   appid: your appid  # your leancloud application appid\n   appkey: your appkey # your leancloud application appkey\n   notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n   verify: false # Verification code\n   placeholder: 描述  # comment box placeholder\n   avatar: monsterid # gravatar style\n   guest_info: nick,mail # custom comment header\n   pageSize: 10 # pagination size\n```\n如果要删除评论请到[Leancloud](https://leancloud.cn/)里删除哦\n![删除评论](Github-Pages-Blog/comment-delete.png)","source":"_posts/Github-Pages-Blog.md","raw":"---\ntitle: Mac下利用Github Pages快速搭建免费博客\ndate: 2019-01-30 19:30:04\ntags:\n    - github\n    - hexo\n    - 教程\n    - blog\ncategories: blog\ncopyright: true\ncomments: true\n---\n本博客利用Hexo + Next + GitHubPages 搭建博客。\n\n## 准备工作\n\n### 安装node.js\n\n``` bash\n$ brew install node\n```\n\n### 安装 git\n\n``` bash\n$ brew install git\n```\n\n### 安装yarn\n\n``` bash\n$ npm install yarn\n```\n\n如果安装失败用\n\n``` bash\n$ brew install yarn\n```\n\n### 安装hexo\n\n进入你的项目目录，举个例子我的目录是blog\n\n``` bash\n$ cd blog\n```\n\n然后用 yarn 安装 hexo\n\n``` bash\n$ yarn add hexo -S\n```\n\n如果安装失败用\n\n``` bash\n$ npm install hexo-cli -g\n$ npm install hexo-server --save\n```\n详细可见[官方文档](https://hexo.io/zh-cn/docs/)\n\n## 搭建本地博客\n\n### 项目初始化\n\n进入你的项目目录,初始化hexo\n\n``` bash\n$ cd blog\n$ hexo init\n```\n### 安装依赖\n\n``` bash\n$ yarn install\n```\n### 启动本地服务\n\n``` bash\n$ hexo server\n```\n在浏览器输入 `localhost:4000` 即可\n\n## 关联 GitHub\n### 创建项目\n\n![创建项目](Github-Pages-Blog/create-project.png)\n\n项目名称一定一定是 `[用户名].github.io`\n![创建项目](Github-Pages-Blog/create-repository.png)\n\n### 设置\n\n![设置](Github-Pages-Blog/setting.png)\n\n在设置中找到GitHub Pages ，分支选择master，点击choose a theme\n\n![设置github-pages](Github-Pages-Blog/github-pages.png)\n\n选择喜欢的主题，点击select theme即可\n![选择主题](Github-Pages-Blog/select-theme.png)\n\n到这里就可以访问你的主页啦  `https://[用户名].github.io/`,接下来复制你的项目链接\n\n![复制项目链接](Github-Pages-Blog/copy-url.png)\n\n到你的本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n![hexo设置git](Github-Pages-Blog/deploy-position.png)\n\n### 站点配置\n站点配置包括修改博客名称，描述，作者等等，建议直接查看[官方教程](https://hexo.io/zh-cn/docs/configuration)\n\n### 关联\n\n安装 hexo-deployer-git 插件\n``` bash\n$ yarn add hexo-deployer-git -S\n```\n如果失败的话尝试下面的方法\n``` bash\n$ npm install --save hexo-deployer-git\n```\n在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo\n``` bash\n$  hexo d -g\n```\n这时访问你的github主页`https://[用户名].github.io/`就可以啦\n\n## NexT主题配置\nNexT 是一个高质量并且优雅的Hexo 主题。\n详细可见[官方文档](https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md)\n\n### 安装NexT主题\n在你的项目文件夹下，执行以下命令，安装NexT主题\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n更改项目根目录下`_config.yml` 文件，如下\n![更改主题](Github-Pages-Blog/change-theme.png)\n\n重新生成本地文件并推送到github\n``` bash\n$  hexo d -g\n```\n访问你的github主页`https://[用户名].github.io/`就可以看到啦\n\n### 主题配置\n\n`themes/next`文件夹下的`_config.yml`是主题的配置文件\nnext内置了4种主题方案，选择你喜欢的方案解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\nMenu Settings是控制图中菜单的位置，根据需要解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\nmenu:\n  home: / || home\n#  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n#  archives: /archives/ || archive\n#  schedule: /schedule/ || calendar\n#  sitemap: /sitemap.xml || sitemap\n#  commonweal: /404.html || heartbeat\n```\n![更改菜单](Github-Pages-Blog/blog-icon.png)\n还有很多很多的配置请参考[官方教程](http://theme-next.iissnan.com/getting-started.html#install-next-theme),[主题个性配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html),[主题美化](http://yearito.cn/posts/hexo-theme-beautify.html)\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n也可以在本地启动服务器，在浏览器输入 `localhost:4000` 观看效果\n``` bash\n$ hexo server\n```\n## 创建文章\n\n### 添加【标签】页面\n\n新建标签页面\n``` bash\n$ hexo new page tags\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: tags\ntype: \"tags\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `tags: /tags/ || tags` 这行注释\n新建测试文章\n``` bash\n$ hexo new 'test'\n```\n在测试文章的头部添加tags信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。\n![标签](Github-Pages-Blog/tags.png)\n\n### 添加【分类】页面\n新建标签页面\n``` bash\n$ hexo new page categories\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `categories: /categories/ || th` 这行注释\n在测试文章的头部添加categories信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\ncategories: Testing\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。\n![分类](Github-Pages-Blog/categories.png)\n\n### 给博客添加图片\n在项目目录下执行\n\n``` bash\n$ npm install hexo-asset-image --save\n```\n\n在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹\n``` bash\n$ hexo new '文章名'\n```\n将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：\n``` markdown\n ![文字](xxxx/图片名.jpg)\n```\n文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n### 添加Valine评论系统\n\n首先需要去注册一个[Leancloud](https://leancloud.cn/)账号,验证邮箱\n然后随便创建一个应用，按如图所示找到`appid`，`appkey`\n![评论](Github-Pages-Blog/valine.png)\n\n按下图修改`themes/next`文件夹下的`_config.yml`主题配置文件，重新启动服务器就可以啦\n``` yaml\n # Valine.\n # You can get your appid and appkey from https://leancloud.cn\n # more info please open https://valine.js.org\n valine:\n   enable: true\n   appid: your appid  # your leancloud application appid\n   appkey: your appkey # your leancloud application appkey\n   notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n   verify: false # Verification code\n   placeholder: 描述  # comment box placeholder\n   avatar: monsterid # gravatar style\n   guest_info: nick,mail # custom comment header\n   pageSize: 10 # pagination size\n```\n如果要删除评论请到[Leancloud](https://leancloud.cn/)里删除哦\n![删除评论](Github-Pages-Blog/comment-delete.png)","slug":"Github-Pages-Blog","published":1,"updated":"2019-03-27T06:50:24.302Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjdf0004jnfy3hzt54ha","content":"<p>本博客利用Hexo + Next + GitHubPages 搭建博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装yarn\"><a href=\"#安装yarn\" class=\"headerlink\" title=\"安装yarn\"></a>安装yarn</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yarn</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>进入你的项目目录，举个例子我的目录是blog</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<p>然后用 yarn 安装 hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo -S</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<p>详细可见<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"搭建本地博客\"><a href=\"#搭建本地博客\" class=\"headerlink\" title=\"搭建本地博客\"></a>搭建本地博客</h2><h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><p>进入你的项目目录,初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>在浏览器输入 <code>localhost:4000</code> 即可</p>\n<h2 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/create-project.png\" alt=\"创建项目\"></p>\n<p>项目名称一定一定是 <code>[用户名].github.io</code><br><img src=\"/2019/01/30/Github-Pages-Blog/create-repository.png\" alt=\"创建项目\"></p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/setting.png\" alt=\"设置\"></p>\n<p>在设置中找到GitHub Pages ，分支选择master，点击choose a theme</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/github-pages.png\" alt=\"设置github-pages\"></p>\n<p>选择喜欢的主题，点击select theme即可<br><img src=\"/2019/01/30/Github-Pages-Blog/select-theme.png\" alt=\"选择主题\"></p>\n<p>到这里就可以访问你的主页啦  <code>https://[用户名].github.io/</code>,接下来复制你的项目链接</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/copy-url.png\" alt=\"复制项目链接\"></p>\n<p>到你的本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/deploy-position.png\" alt=\"hexo设置git\"></p>\n<h3 id=\"站点配置\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置</h3><p>站点配置包括修改博客名称，描述，作者等等，建议直接查看<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>安装 hexo-deployer-git 插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git -S</span><br></pre></td></tr></table></figure></p>\n<p>如果失败的话尝试下面的方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>这时访问你的github主页<code>https://[用户名].github.io/</code>就可以啦</p>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><p>NexT 是一个高质量并且优雅的Hexo 主题。<br>详细可见<a href=\"https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在你的项目文件夹下，执行以下命令，安装NexT主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></p>\n<p>更改项目根目录下<code>_config.yml</code> 文件，如下<br><img src=\"/2019/01/30/Github-Pages-Blog/change-theme.png\" alt=\"更改主题\"></p>\n<p>重新生成本地文件并推送到github<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>访问你的github主页<code>https://[用户名].github.io/</code>就可以看到啦</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p><code>themes/next</code>文件夹下的<code>_config.yml</code>是主题的配置文件<br>next内置了4种主题方案，选择你喜欢的方案解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></p>\n<p>Menu Settings是控制图中菜单的位置，根据需要解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"comment\">#  about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"comment\">#  archives: /archives/ || archive</span></span><br><span class=\"line\"><span class=\"comment\">#  schedule: /schedule/ || calendar</span></span><br><span class=\"line\"><span class=\"comment\">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"comment\">#  commonweal: /404.html || heartbeat</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/blog-icon.png\" alt=\"更改菜单\"><br>还有很多很多的配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" target=\"_blank\" rel=\"noopener\">官方教程</a>,<a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"noopener\">主题个性配置教程</a>,<a href=\"http://yearito.cn/posts/hexo-theme-beautify.html\" target=\"_blank\" rel=\"noopener\">主题美化</a></p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>也可以在本地启动服务器，在浏览器输入 <code>localhost:4000</code> 观看效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h2><h3 id=\"添加【标签】页面\"><a href=\"#添加【标签】页面\" class=\"headerlink\" title=\"添加【标签】页面\"></a>添加【标签】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>tags: /tags/ || tags</code> 这行注释<br>新建测试文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'test'</span></span><br></pre></td></tr></table></figure></p>\n<p>在测试文章的头部添加tags信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/tags.png\" alt=\"标签\"></p>\n<h3 id=\"添加【分类】页面\"><a href=\"#添加【分类】页面\" class=\"headerlink\" title=\"添加【分类】页面\"></a>添加【分类】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">type: \"categories\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>categories: /categories/ || th</code> 这行注释<br>在测试文章的头部添加categories信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">categories: Testing</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/categories.png\" alt=\"分类\"></p>\n<h3 id=\"给博客添加图片\"><a href=\"#给博客添加图片\" class=\"headerlink\" title=\"给博客添加图片\"></a>给博客添加图片</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'文章名'</span></span><br></pre></td></tr></table></figure></p>\n<p>将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文字</span>](<span class=\"link\">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure></p>\n<p>文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<h3 id=\"添加Valine评论系统\"><a href=\"#添加Valine评论系统\" class=\"headerlink\" title=\"添加Valine评论系统\"></a>添加Valine评论系统</h3><p>首先需要去注册一个<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>账号,验证邮箱<br>然后随便创建一个应用，按如图所示找到<code>appid</code>，<code>appkey</code><br><img src=\"/2019/01/30/Github-Pages-Blog/valine.png\" alt=\"评论\"></p>\n<p>按下图修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，重新启动服务器就可以啦<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Valine.</span></span><br><span class=\"line\"><span class=\"comment\"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class=\"line\"><span class=\"comment\"># more info please open https://valine.js.org</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"string\">your</span> <span class=\"string\">appid</span>  <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"string\">your</span> <span class=\"string\">appkey</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">描述</span>  <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要删除评论请到<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>里删除哦<br><img src=\"/2019/01/30/Github-Pages-Blog/comment-delete.png\" alt=\"删除评论\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本博客利用Hexo + Next + GitHubPages 搭建博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装yarn\"><a href=\"#安装yarn\" class=\"headerlink\" title=\"安装yarn\"></a>安装yarn</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yarn</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>进入你的项目目录，举个例子我的目录是blog</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<p>然后用 yarn 安装 hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo -S</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<p>详细可见<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"搭建本地博客\"><a href=\"#搭建本地博客\" class=\"headerlink\" title=\"搭建本地博客\"></a>搭建本地博客</h2><h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><p>进入你的项目目录,初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>在浏览器输入 <code>localhost:4000</code> 即可</p>\n<h2 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/create-project.png\" alt=\"创建项目\"></p>\n<p>项目名称一定一定是 <code>[用户名].github.io</code><br><img src=\"/2019/01/30/Github-Pages-Blog/create-repository.png\" alt=\"创建项目\"></p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/setting.png\" alt=\"设置\"></p>\n<p>在设置中找到GitHub Pages ，分支选择master，点击choose a theme</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/github-pages.png\" alt=\"设置github-pages\"></p>\n<p>选择喜欢的主题，点击select theme即可<br><img src=\"/2019/01/30/Github-Pages-Blog/select-theme.png\" alt=\"选择主题\"></p>\n<p>到这里就可以访问你的主页啦  <code>https://[用户名].github.io/</code>,接下来复制你的项目链接</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/copy-url.png\" alt=\"复制项目链接\"></p>\n<p>到你的本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/deploy-position.png\" alt=\"hexo设置git\"></p>\n<h3 id=\"站点配置\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置</h3><p>站点配置包括修改博客名称，描述，作者等等，建议直接查看<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>安装 hexo-deployer-git 插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git -S</span><br></pre></td></tr></table></figure></p>\n<p>如果失败的话尝试下面的方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>这时访问你的github主页<code>https://[用户名].github.io/</code>就可以啦</p>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><p>NexT 是一个高质量并且优雅的Hexo 主题。<br>详细可见<a href=\"https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在你的项目文件夹下，执行以下命令，安装NexT主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></p>\n<p>更改项目根目录下<code>_config.yml</code> 文件，如下<br><img src=\"/2019/01/30/Github-Pages-Blog/change-theme.png\" alt=\"更改主题\"></p>\n<p>重新生成本地文件并推送到github<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>访问你的github主页<code>https://[用户名].github.io/</code>就可以看到啦</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p><code>themes/next</code>文件夹下的<code>_config.yml</code>是主题的配置文件<br>next内置了4种主题方案，选择你喜欢的方案解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></p>\n<p>Menu Settings是控制图中菜单的位置，根据需要解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"comment\">#  about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"comment\">#  archives: /archives/ || archive</span></span><br><span class=\"line\"><span class=\"comment\">#  schedule: /schedule/ || calendar</span></span><br><span class=\"line\"><span class=\"comment\">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"comment\">#  commonweal: /404.html || heartbeat</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/blog-icon.png\" alt=\"更改菜单\"><br>还有很多很多的配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" target=\"_blank\" rel=\"noopener\">官方教程</a>,<a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"noopener\">主题个性配置教程</a>,<a href=\"http://yearito.cn/posts/hexo-theme-beautify.html\" target=\"_blank\" rel=\"noopener\">主题美化</a></p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>也可以在本地启动服务器，在浏览器输入 <code>localhost:4000</code> 观看效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h2><h3 id=\"添加【标签】页面\"><a href=\"#添加【标签】页面\" class=\"headerlink\" title=\"添加【标签】页面\"></a>添加【标签】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>tags: /tags/ || tags</code> 这行注释<br>新建测试文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'test'</span></span><br></pre></td></tr></table></figure></p>\n<p>在测试文章的头部添加tags信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/tags.png\" alt=\"标签\"></p>\n<h3 id=\"添加【分类】页面\"><a href=\"#添加【分类】页面\" class=\"headerlink\" title=\"添加【分类】页面\"></a>添加【分类】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">type: \"categories\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>categories: /categories/ || th</code> 这行注释<br>在测试文章的头部添加categories信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">categories: Testing</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/categories.png\" alt=\"分类\"></p>\n<h3 id=\"给博客添加图片\"><a href=\"#给博客添加图片\" class=\"headerlink\" title=\"给博客添加图片\"></a>给博客添加图片</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'文章名'</span></span><br></pre></td></tr></table></figure></p>\n<p>将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文字</span>](<span class=\"link\">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure></p>\n<p>文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<h3 id=\"添加Valine评论系统\"><a href=\"#添加Valine评论系统\" class=\"headerlink\" title=\"添加Valine评论系统\"></a>添加Valine评论系统</h3><p>首先需要去注册一个<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>账号,验证邮箱<br>然后随便创建一个应用，按如图所示找到<code>appid</code>，<code>appkey</code><br><img src=\"/2019/01/30/Github-Pages-Blog/valine.png\" alt=\"评论\"></p>\n<p>按下图修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，重新启动服务器就可以啦<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Valine.</span></span><br><span class=\"line\"><span class=\"comment\"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class=\"line\"><span class=\"comment\"># more info please open https://valine.js.org</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"string\">your</span> <span class=\"string\">appid</span>  <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"string\">your</span> <span class=\"string\">appkey</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">描述</span>  <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要删除评论请到<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>里删除哦<br><img src=\"/2019/01/30/Github-Pages-Blog/comment-delete.png\" alt=\"删除评论\"></p>\n"},{"title":"《自己动手写JAVA虚拟机》学习笔记一【命令行工具】","date":"2019-02-11T09:23:04.000Z","copyright":true,"comments":0,"_content":"最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。\n\n## 准备工作\n\n### 安装JDK\n从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161\n\n### 安装GO\n从[GO语言官网](https://golang.org/dl/)下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。\n测试Go环境是否安装成功\n``` bash\n～$ go version\ngo version go1.11.2 darwin/amd64\n```\n设置环境变量\n```bash\n#添加Go的运行环境路径\nexport PATH=$PATH:/usr/local/go/bin\n#添加Go工程的工作空间,可自行修改\nexport GOPATH=/home/XXX/XXX/jvmgo/go\n```\n执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,\n```base\n～$ go env\n```\n## 实现JAVA命令\n\njava命令常用选项及其用途\n\n| 选项 | 用途 |\n| :------ | :------ | \n| -version | 输出版本信息，然后退出 | \n| -?/-help\t | 输出帮助信息，然后退出 |\n| -cp/-classpath | 指定用户类路径 |\n| -Dproperty=value | 设置Java系统属性 |\n| -Xms | 设置初始堆空间大小 |\n| -Xmx | 设置最大堆空间大小 |\n| -Xss | 设置线程栈空间大小 |\n\n### 编写命令行工具\n\n首先创建项目结构\n```base\n|-jvmgo\n    |-ch01\n```\n在ch01目录下创建cmd.go文件\n```go\npackage main\n\nimport \"flag\"\nimport \"fmt\"\nimport \"os\"\n\n\n//用法: java [-options] class [args...] (执行类)\n//或  java [-options] -jar jarfile [args...] (执行 jar 文件)\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tclass string\n\targs []string\n}\n\n\n//把命令的用法打印到控制台\nfunc printUsage()  {\n\tfmt.Printf(\"Usage：%s [-options] class [args...]\\n\",os.Args[0])\n}\n\n//命令解析\nfunc parseCmd() *Cmd {\n\t\n\t//声明cmd为指向空的Cmd对象的指针\n\tcmd := &Cmd{}\n\n\t//定义flag参数\n\t//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息\n\tflag.Usage = printUsage\n\tflag.BoolVar(&cmd.helpFlag,\"help\",false,\"print help message\")\n\tflag.BoolVar(&cmd.helpFlag,\"?\",false,\"print help message\")\n\tflag.BoolVar(&cmd.versionFlag,\"version\",false,\"print version and exit\")\n\tflag.StringVar(&cmd.cpOption,\"classpath\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\t//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。\n\tflag.Parse()\n\t//flag.Args()可以捕获未被解析的参数\n\targs := flag.Args()\n\tif len(args) > 0{\n\t\tcmd.class = args[0]\n\t\tcmd.args = args[1:]\n\t}\n\n\treturn cmd\n}\n\n```\n### 测试代码\n\n在ch01目录下创建main.go文件\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcmd := parseCmd()\n\tif cmd.versionFlag {\n\t\tfmt.Println(\"version 0.0.1\")\n\t}else if cmd.helpFlag || cmd.class == \"\"{\n\t\tprintUsage()\n\t}else {\n\t\tstartJVM(cmd)\n\t}\n}\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t//还未开始写，暂时打印\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cmd.cpOption,cmd.class,cmd.args)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch01 \n$ ch01 -version\nversion 0.0.1\n```\n","source":"_posts/JVM1.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记一【命令行工具】\ndate: 2019-02-11 17:23:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\ncopyright: true\ncomments: false\n---\n最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。\n\n## 准备工作\n\n### 安装JDK\n从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161\n\n### 安装GO\n从[GO语言官网](https://golang.org/dl/)下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。\n测试Go环境是否安装成功\n``` bash\n～$ go version\ngo version go1.11.2 darwin/amd64\n```\n设置环境变量\n```bash\n#添加Go的运行环境路径\nexport PATH=$PATH:/usr/local/go/bin\n#添加Go工程的工作空间,可自行修改\nexport GOPATH=/home/XXX/XXX/jvmgo/go\n```\n执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,\n```base\n～$ go env\n```\n## 实现JAVA命令\n\njava命令常用选项及其用途\n\n| 选项 | 用途 |\n| :------ | :------ | \n| -version | 输出版本信息，然后退出 | \n| -?/-help\t | 输出帮助信息，然后退出 |\n| -cp/-classpath | 指定用户类路径 |\n| -Dproperty=value | 设置Java系统属性 |\n| -Xms | 设置初始堆空间大小 |\n| -Xmx | 设置最大堆空间大小 |\n| -Xss | 设置线程栈空间大小 |\n\n### 编写命令行工具\n\n首先创建项目结构\n```base\n|-jvmgo\n    |-ch01\n```\n在ch01目录下创建cmd.go文件\n```go\npackage main\n\nimport \"flag\"\nimport \"fmt\"\nimport \"os\"\n\n\n//用法: java [-options] class [args...] (执行类)\n//或  java [-options] -jar jarfile [args...] (执行 jar 文件)\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tclass string\n\targs []string\n}\n\n\n//把命令的用法打印到控制台\nfunc printUsage()  {\n\tfmt.Printf(\"Usage：%s [-options] class [args...]\\n\",os.Args[0])\n}\n\n//命令解析\nfunc parseCmd() *Cmd {\n\t\n\t//声明cmd为指向空的Cmd对象的指针\n\tcmd := &Cmd{}\n\n\t//定义flag参数\n\t//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息\n\tflag.Usage = printUsage\n\tflag.BoolVar(&cmd.helpFlag,\"help\",false,\"print help message\")\n\tflag.BoolVar(&cmd.helpFlag,\"?\",false,\"print help message\")\n\tflag.BoolVar(&cmd.versionFlag,\"version\",false,\"print version and exit\")\n\tflag.StringVar(&cmd.cpOption,\"classpath\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\t//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。\n\tflag.Parse()\n\t//flag.Args()可以捕获未被解析的参数\n\targs := flag.Args()\n\tif len(args) > 0{\n\t\tcmd.class = args[0]\n\t\tcmd.args = args[1:]\n\t}\n\n\treturn cmd\n}\n\n```\n### 测试代码\n\n在ch01目录下创建main.go文件\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcmd := parseCmd()\n\tif cmd.versionFlag {\n\t\tfmt.Println(\"version 0.0.1\")\n\t}else if cmd.helpFlag || cmd.class == \"\"{\n\t\tprintUsage()\n\t}else {\n\t\tstartJVM(cmd)\n\t}\n}\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t//还未开始写，暂时打印\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cmd.cpOption,cmd.class,cmd.args)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch01 \n$ ch01 -version\nversion 0.0.1\n```\n","slug":"JVM1","published":1,"updated":"2019-02-14T06:24:46.000Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjdh0005jnfywzfsvl7z","content":"<p>最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161</p>\n<h3 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h3><p>从<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">GO语言官网</a>下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。<br>测试Go环境是否安装成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go version</span><br><span class=\"line\">go version go1.11.2 darwin/amd64</span><br></pre></td></tr></table></figure></p>\n<p>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加Go的运行环境路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"><span class=\"comment\">#添加Go工程的工作空间,可自行修改</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/XXX/XXX/jvmgo/go</span><br></pre></td></tr></table></figure></p>\n<p>执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go env</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实现JAVA命令\"><a href=\"#实现JAVA命令\" class=\"headerlink\" title=\"实现JAVA命令\"></a>实现JAVA命令</h2><p>java命令常用选项及其用途</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-version</td>\n<td style=\"text-align:left\">输出版本信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-?/-help</td>\n<td style=\"text-align:left\">输出帮助信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-cp/-classpath</td>\n<td style=\"text-align:left\">指定用户类路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Dproperty=value</td>\n<td style=\"text-align:left\">设置Java系统属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xms</td>\n<td style=\"text-align:left\">设置初始堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xmx</td>\n<td style=\"text-align:left\">设置最大堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xss</td>\n<td style=\"text-align:left\">设置线程栈空间大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"编写命令行工具\"><a href=\"#编写命令行工具\" class=\"headerlink\" title=\"编写命令行工具\"></a>编写命令行工具</h3><p>首先创建项目结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br></pre></td></tr></table></figure></p>\n<p>在ch01目录下创建cmd.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用法: java [-options] class [args...] (执行类)</span></span><br><span class=\"line\"><span class=\"comment\">//或  java [-options] -jar jarfile [args...] (执行 jar 文件)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把命令的用法打印到控制台</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printUsage</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Usage：%s [-options] class [args...]\\n\"</span>,os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//声明cmd为指向空的Cmd对象的指针</span></span><br><span class=\"line\">\tcmd := &amp;Cmd&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义flag参数</span></span><br><span class=\"line\">\t<span class=\"comment\">//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息</span></span><br><span class=\"line\">\tflag.Usage = printUsage</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"help\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"?\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.versionFlag,<span class=\"string\">\"version\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print version and exit\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"classpath\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t<span class=\"comment\">//flag.Args()可以捕获未被解析的参数</span></span><br><span class=\"line\">\targs := flag.Args()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\t\tcmd.class = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tcmd.args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>在ch01目录下创建main.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := parseCmd()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cmd.versionFlag &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"version 0.0.1\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cmd.helpFlag || cmd.class == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tprintUsage()</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tstartJVM(cmd)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还未开始写，暂时打印</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch01 </span><br><span class=\"line\">$ ch01 -version</span><br><span class=\"line\">version 0.0.1</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161</p>\n<h3 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h3><p>从<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">GO语言官网</a>下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。<br>测试Go环境是否安装成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go version</span><br><span class=\"line\">go version go1.11.2 darwin/amd64</span><br></pre></td></tr></table></figure></p>\n<p>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加Go的运行环境路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"><span class=\"comment\">#添加Go工程的工作空间,可自行修改</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/XXX/XXX/jvmgo/go</span><br></pre></td></tr></table></figure></p>\n<p>执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go env</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实现JAVA命令\"><a href=\"#实现JAVA命令\" class=\"headerlink\" title=\"实现JAVA命令\"></a>实现JAVA命令</h2><p>java命令常用选项及其用途</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-version</td>\n<td style=\"text-align:left\">输出版本信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-?/-help</td>\n<td style=\"text-align:left\">输出帮助信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-cp/-classpath</td>\n<td style=\"text-align:left\">指定用户类路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Dproperty=value</td>\n<td style=\"text-align:left\">设置Java系统属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xms</td>\n<td style=\"text-align:left\">设置初始堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xmx</td>\n<td style=\"text-align:left\">设置最大堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xss</td>\n<td style=\"text-align:left\">设置线程栈空间大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"编写命令行工具\"><a href=\"#编写命令行工具\" class=\"headerlink\" title=\"编写命令行工具\"></a>编写命令行工具</h3><p>首先创建项目结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br></pre></td></tr></table></figure></p>\n<p>在ch01目录下创建cmd.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用法: java [-options] class [args...] (执行类)</span></span><br><span class=\"line\"><span class=\"comment\">//或  java [-options] -jar jarfile [args...] (执行 jar 文件)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把命令的用法打印到控制台</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printUsage</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Usage：%s [-options] class [args...]\\n\"</span>,os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//声明cmd为指向空的Cmd对象的指针</span></span><br><span class=\"line\">\tcmd := &amp;Cmd&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义flag参数</span></span><br><span class=\"line\">\t<span class=\"comment\">//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息</span></span><br><span class=\"line\">\tflag.Usage = printUsage</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"help\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"?\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.versionFlag,<span class=\"string\">\"version\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print version and exit\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"classpath\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t<span class=\"comment\">//flag.Args()可以捕获未被解析的参数</span></span><br><span class=\"line\">\targs := flag.Args()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\t\tcmd.class = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tcmd.args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>在ch01目录下创建main.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := parseCmd()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cmd.versionFlag &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"version 0.0.1\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cmd.helpFlag || cmd.class == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tprintUsage()</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tstartJVM(cmd)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还未开始写，暂时打印</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch01 </span><br><span class=\"line\">$ ch01 -version</span><br><span class=\"line\">version 0.0.1</span><br></pre></td></tr></table></figure></p>\n"},{"title":"《自己动手写JAVA虚拟机》学习笔记三【解析class文件】","date":"2019-02-14T03:38:04.000Z","copyright":true,"comments":0,"_content":"java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：\n```java\nClassFile {\n     u4             magic;//魔数\n     u2             minor_version;//主版本号\n     u2             major_version;//次版本号\n     u2             constant_pool_count;//常量池长度\n     cp_info        constant_pool[constant_pool_count-1];//常量池信息\n     u2             access_flags;//该类的访问修饰符\n     u2             this_class;//类索引\n     u2             super_class;//父类索引\n     u2             interfaces_count;//接口个数\n     u2             interfaces[interfaces_count];//接口详细信息\n     u2             fields_count;//属性个数\n     field_info     fields[fields_count];//属性详细信息\n     u2             methods_count;//方法个数\n     method_info    methods[methods_count];//方法详情\n     u2             attributes_count;//类文件属性个数\n     attribute_info attributes[attributes_count];//类文件属性详细信息\n}\n```\n### 准备工作\n\n把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n    |-ch03\n        |-classfile\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n为了学习编译后的class文件，新建一个classFileTest.java然后编译\n```java\npublic class ClassFileTest {\n    public static final boolean FLAG = true;\n    public static final byte BYTE = 123;\n    public static final char X = 'X';\n    public static final short SHORT = 12345;\n    public static final int INT = 123456789;\n    public static final long LONG = 12345678901L;\n    public static final float PI = 3.14f;\n    public static final double E = 2.71828;\n    public static void main(String[] args) throws RuntimeException {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n用作者提供的[classpy](https://github.com/zxh0/classpy)的图形化工具，可以查看反编译后的class文件。","source":"_posts/JVM3.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记三【解析class文件】\ndate: 2019-02-14 11:38:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\ncopyright: true\ncomments: false\n---\njava虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：\n```java\nClassFile {\n     u4             magic;//魔数\n     u2             minor_version;//主版本号\n     u2             major_version;//次版本号\n     u2             constant_pool_count;//常量池长度\n     cp_info        constant_pool[constant_pool_count-1];//常量池信息\n     u2             access_flags;//该类的访问修饰符\n     u2             this_class;//类索引\n     u2             super_class;//父类索引\n     u2             interfaces_count;//接口个数\n     u2             interfaces[interfaces_count];//接口详细信息\n     u2             fields_count;//属性个数\n     field_info     fields[fields_count];//属性详细信息\n     u2             methods_count;//方法个数\n     method_info    methods[methods_count];//方法详情\n     u2             attributes_count;//类文件属性个数\n     attribute_info attributes[attributes_count];//类文件属性详细信息\n}\n```\n### 准备工作\n\n把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n    |-ch03\n        |-classfile\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n为了学习编译后的class文件，新建一个classFileTest.java然后编译\n```java\npublic class ClassFileTest {\n    public static final boolean FLAG = true;\n    public static final byte BYTE = 123;\n    public static final char X = 'X';\n    public static final short SHORT = 12345;\n    public static final int INT = 123456789;\n    public static final long LONG = 12345678901L;\n    public static final float PI = 3.14f;\n    public static final double E = 2.71828;\n    public static void main(String[] args) throws RuntimeException {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n用作者提供的[classpy](https://github.com/zxh0/classpy)的图形化工具，可以查看反编译后的class文件。","slug":"JVM3","published":1,"updated":"2019-02-14T06:24:46.000Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjdk0006jnfyqg876bwn","content":"<p>java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">     u4             magic;<span class=\"comment\">//魔数</span></span><br><span class=\"line\">     u2             minor_version;<span class=\"comment\">//主版本号</span></span><br><span class=\"line\">     u2             major_version;<span class=\"comment\">//次版本号</span></span><br><span class=\"line\">     u2             constant_pool_count;<span class=\"comment\">//常量池长度</span></span><br><span class=\"line\">     cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];<span class=\"comment\">//常量池信息</span></span><br><span class=\"line\">     u2             access_flags;<span class=\"comment\">//该类的访问修饰符</span></span><br><span class=\"line\">     u2             this_class;<span class=\"comment\">//类索引</span></span><br><span class=\"line\">     u2             super_class;<span class=\"comment\">//父类索引</span></span><br><span class=\"line\">     u2             interfaces_count;<span class=\"comment\">//接口个数</span></span><br><span class=\"line\">     u2             interfaces[interfaces_count];<span class=\"comment\">//接口详细信息</span></span><br><span class=\"line\">     u2             fields_count;<span class=\"comment\">//属性个数</span></span><br><span class=\"line\">     field_info     fields[fields_count];<span class=\"comment\">//属性详细信息</span></span><br><span class=\"line\">     u2             methods_count;<span class=\"comment\">//方法个数</span></span><br><span class=\"line\">     method_info    methods[methods_count];<span class=\"comment\">//方法详情</span></span><br><span class=\"line\">     u2             attributes_count;<span class=\"comment\">//类文件属性个数</span></span><br><span class=\"line\">     attribute_info attributes[attributes_count];<span class=\"comment\">//类文件属性详细信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch03</span><br><span class=\"line\">        |-classfile</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>为了学习编译后的class文件，新建一个classFileTest.java然后编译<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> FLAG = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> X = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> SHORT = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INT = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> LONG = <span class=\"number\">12345678901L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> PI = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> E = <span class=\"number\">2.71828</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RuntimeException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用作者提供的<a href=\"https://github.com/zxh0/classpy\" target=\"_blank\" rel=\"noopener\">classpy</a>的图形化工具，可以查看反编译后的class文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">     u4             magic;<span class=\"comment\">//魔数</span></span><br><span class=\"line\">     u2             minor_version;<span class=\"comment\">//主版本号</span></span><br><span class=\"line\">     u2             major_version;<span class=\"comment\">//次版本号</span></span><br><span class=\"line\">     u2             constant_pool_count;<span class=\"comment\">//常量池长度</span></span><br><span class=\"line\">     cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];<span class=\"comment\">//常量池信息</span></span><br><span class=\"line\">     u2             access_flags;<span class=\"comment\">//该类的访问修饰符</span></span><br><span class=\"line\">     u2             this_class;<span class=\"comment\">//类索引</span></span><br><span class=\"line\">     u2             super_class;<span class=\"comment\">//父类索引</span></span><br><span class=\"line\">     u2             interfaces_count;<span class=\"comment\">//接口个数</span></span><br><span class=\"line\">     u2             interfaces[interfaces_count];<span class=\"comment\">//接口详细信息</span></span><br><span class=\"line\">     u2             fields_count;<span class=\"comment\">//属性个数</span></span><br><span class=\"line\">     field_info     fields[fields_count];<span class=\"comment\">//属性详细信息</span></span><br><span class=\"line\">     u2             methods_count;<span class=\"comment\">//方法个数</span></span><br><span class=\"line\">     method_info    methods[methods_count];<span class=\"comment\">//方法详情</span></span><br><span class=\"line\">     u2             attributes_count;<span class=\"comment\">//类文件属性个数</span></span><br><span class=\"line\">     attribute_info attributes[attributes_count];<span class=\"comment\">//类文件属性详细信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch03</span><br><span class=\"line\">        |-classfile</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>为了学习编译后的class文件，新建一个classFileTest.java然后编译<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> FLAG = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> X = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> SHORT = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INT = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> LONG = <span class=\"number\">12345678901L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> PI = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> E = <span class=\"number\">2.71828</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RuntimeException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用作者提供的<a href=\"https://github.com/zxh0/classpy\" target=\"_blank\" rel=\"noopener\">classpy</a>的图形化工具，可以查看反编译后的class文件。</p>\n"},{"title":"《自己动手写JAVA虚拟机》学习笔记二【搜索class文件】","date":"2019-02-12T08:14:04.000Z","copyright":true,"comments":0,"_content":"```java\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello, world!\");\n    }\n}\n```\n运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？\n\n## 类路径\n类路径可以分为以下三种：\n * 启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。\n * 扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。\n * 用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。\n\n### 准备工作\n\n把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n修改cmd结构体，添加XjreOption字段\n```go\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tXjreOption string\n\tclass string\n\targs []string\n}\n```\nparseCmd()函数也对应添加Xjre\n```go\n//命令解析\nfunc parseCmd() *Cmd {\n    ...//其他代码不变\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.XjreOption,\"Xjre\",\"\",\"path to jre\")\n\t//解析命令行参数到定义的flag\n\tflag.Parse()\n\t...//其他代码不变\n}\n```\n### 实现类路径 \n\n采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。\n\n首先定义一个Entry接口\n```go\n//获取系统分隔符，windows是;类UNIX系统是:号\nconst pathListSeparator = string(os.PathListSeparator)\n\ntype Entry interface {\n\t//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀\n\t//例如读取java.lang.Object入参是java/lang/Object.class\n\treadClass(classname string) ([]byte, Entry, error)\n\n\t//toString\n\tString() string\n}\n```\nEntry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry\n#### DirEntry\nDirEntry相对简单些，表示目录形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"io/ioutil\"\n)\n\ntype DirEntry struct {\n\t//存放目录的绝对路径\n\tabsDir string\n}\n\n//相当于构造函数\nfunc newDirEntry(path string) *DirEntry {\n\t//将参数转换成绝对路径\n\tabsDir, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &DirEntry{absDir}\n}\n//读取class文件\nfunc (self *DirEntry) readClass (className string) ([]byte, Entry, error) {\n\t//把目录和class名拼成完成路径\n\tfileName := filepath.Join(self.absDir,className)\n\t//读取class文件内容\n\tdata, err := ioutil.ReadFile(fileName)\n\treturn data,self,err\n}\n\n//直接返回目录\nfunc (self *DirEntry) String() string{\n\treturn self.absDir\n}\n```\n#### ZipEntry\nZipEntry表示ZIP或者JAR文件形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"archive/zip\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\n\ntype ZipEntry struct {\n\t//存放目录的绝对路径\n\tabsPath string\n}\n\n//相当于构造函数\nfunc newZipEntry(path string) *ZipEntry {\n\t//将参数转换成绝对路径\n\tabsPath, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &ZipEntry{absPath}\n}\n\n//读取class文件\nfunc (self *ZipEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//打开zip文件\n\tr, err := zip.OpenReader(self.absPath)\n\tif err != nil {\n\t\treturn nil,nil,err\n\t}\n\tdefer r.Close()\n\n\t//遍历zip包里的文件\n\tfor _, f := range r.File {\n\t\t//找到class文件\n\t\tif f.Name == classname {\n\t\t\t//打开class文件\n\t\t\trc , err := f.Open()\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\tdefer rc.Close()\n\t\t\t//读取class文件内容\n\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\treturn data,self,err\n\t\t}\n\t}\n\t//未找到class文件\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n\n//直接返回目录\nfunc (self *ZipEntry) String() string {\n\treturn self.absPath\n}\n```\n#### CompositeEntry\nCompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice\n\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"errors\"\n)\n\ntype CompositeEntry []Entry\n\n\n//将每个小路径转换成具体的Entry\nfunc newCompositeEntry(pathList string) CompositeEntry {\n\tvar compositeEntry []Entry\n\t//将路径按照分隔符进行分割\n\tfor _, path := range strings.Split(pathList,pathListSeparator){\n\t\tentry := newEntry(path)\n\t\tcompositeEntry = append(compositeEntry,entry)\n\t}\n\treturn compositeEntry\n}\n\nfunc (self CompositeEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//遍历entry数据\n\tfor _, entry := range self{\n\t\t//读取class文件，依次调用每一个子路径的readClass方法\n\t\tdata, from, err := entry.readClass(classname)\n\t\tif err == nil{\n\t\t\treturn data,from,err\n\t\t}\n\t}\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n//调用每个子路径的String方法，用分隔符拼接起来\nfunc (self CompositeEntry) String() string {\n\tstrs := make([]string,len(self))\n\tfor i, entry := range self{\n\t\tstrs[i] = entry.String()\n\t}\n\treturn strings.Join(strs,pathListSeparator)\n}\n```\n#### WildcardEntry\nWildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc newWildcardEntry(path string) CompositeEntry {\n\t//去掉尾部的*\n\tbaseDir := path[:len(path)-1]\n\tvar compositeEntry []Entry\n\twalkFn := func(path string, info os.FileInfo, err error) error{\n\t\tif err != nil{\n\t\t\treturn err\n\t\t}\n\t\t//如果不是目录，返回跳过标识\n\t\tif info.IsDir() && path != baseDir {\n\t\t\treturn filepath.SkipDir\n\t\t}\n\t\t//选出jar文件\n\t\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\"){\n\t\t\tjarEntry := newZipEntry(path)\n\t\t\tcompositeEntry = append(compositeEntry,jarEntry)\n\t\t}\n\t\treturn nil\n\t}\n\t//遍历baseDir路径，创建zipEntry\n\tfilepath.Walk(baseDir,walkFn)\n\t//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)\n\treturn compositeEntry\n}\n```\n#### Entry\n四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。\n````go\nfunc newEntry(path string) Entry {\n\t//如果路径中含有分隔符\n\tif strings.Contains(path,pathListSeparator){\n\t\treturn newCompositeEntry(path)\n\t}\n\t//如果路径末尾是*\n\tif strings.HasSuffix(path,\"*\"){\n\t\treturn newWildcardEntry(path)\n\t}\n\t//如果路径以jar或者zip结尾\n\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\")||\n\t\tstrings.HasSuffix(path,\".zip\") || strings.HasSuffix(path,\".ZIP\"){\n\t\t\treturn newZipEntry(path)\n\t}\n\treturn newDirEntry(path)\n}\n````\n#### 实现Classpath\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"os\"\n\t\"fmt\"\n)\n\ntype Classpath struct {\n\tbootClasspath Entry\n\textClasspath Entry\n\tuserClasspath Entry\n}\n//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径\nfunc Parse(jreOption,cpOption string) *Classpath  {\n\tcp := &Classpath{}\n\t//解析启动类路径和扩展类路径\n\tcp.parseBootAndExtClasspath(jreOption)\n\n\t//解析用户类路径\n\tcp.parseUserClasspath(cpOption)\n\treturn cp\n}\n\nfunc getJreDir(jreOption string) string {\n\t//优先使用用户输入的-Xjre作为目录\n\tif jreOption != \"\" && exists(jreOption){\n\t\treturn jreOption\n\t}\n\t//在当前目录下寻找jre目录\n\tif exists(\"./jre\") {\n\t\treturn \"./jre\"\n\t}\n\t//尝试使用JAVA_HOME环境变量\n\tif jh := os.Getenv(\"JAVA_HOME\"); jh != \"\"{\n\t\treturn filepath.Join(jh,\"jre\")\n\t}\n\tpanic(\"Can not find jre folder\")\n}\n\n//判断目录是否存在\nfunc exists(path string) bool {\n\tif _, err := os.Stat(path); err != nil{\n\t\tif os.IsNotExist(err){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (self *Classpath) parseBootAndExtClasspath(jreOption string) {\n\t// 获取jre目录\n\tjreDir := getJreDir(jreOption)\n\t//jre/lib/*\n\tjreLibPath := filepath.Join(jreDir,\"lib\",\"*\")\n\tself.bootClasspath = newWildcardEntry(jreLibPath)\n\t//jre/lib/ext/*\n\tjreExtPath := filepath.Join(jreDir,\"lib\",\"ext\",\"*\")\n\tself.extClasspath = newWildcardEntry(jreExtPath)\n}\n\n//解析用户类路径\nfunc (self *Classpath) parseUserClasspath(cpOption string) {\n\t// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径\n\tif cpOption == \"\"{\n\t\tcpOption = \".\"\n\t}\n\tself.userClasspath = newEntry(cpOption)\n}\n\n//寻找class方法\nfunc (self *Classpath) ReadClass(classname string) ([]byte, Entry, error) {\n\t//访问ReadClass方法只需传递类名，不用包含\".class\"后缀\n\tclassname = classname + \".class\"\n\t// 从bootClasspath寻找class文件\n\tif data, entry, err := self.bootClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从extClasspath寻找class文件\n\tif data, entry, err := self.extClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从userClasspath寻找class文件\n\treturn self.userClasspath.readClass(classname)\n}\n\nfunc (self *Classpath) String() string {\n\treturn self.userClasspath.String()\n}\n```\n### 测试代码\n\n完善main.go中的startJVM\n```go\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t// 获取Classpath\n\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cp,cmd.class,cmd.args)\n\t// 将.替换成/(java.lang.String -> java/lang/String)\n\tclassName := strings.Replace(cmd.class,\".\",\"/\",-1)\n\t// 读取class\n\tclassData, _, err := cp.ReadClass(className)\n\tif err != nil {\n\t\tfmt.Printf(\"Could not find or load main class %s\\n\",cmd.class)\n\t\treturn\n\t}\n\tfmt.Printf(\"class data : %v\\n\",classData)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch02 \n$ ch02 java.lang.String\n# 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容\n$ ch02 -Xjre /opt  java.lang.Object \n# 传递错误-Xjre会打印出Could not find or load main class java.lang.Object\n```\n","source":"_posts/JVM2.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记二【搜索class文件】\ndate: 2019-02-12 16:14:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\ncopyright: true\ncomments: false\n---\n```java\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello, world!\");\n    }\n}\n```\n运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？\n\n## 类路径\n类路径可以分为以下三种：\n * 启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。\n * 扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。\n * 用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。\n\n### 准备工作\n\n把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n修改cmd结构体，添加XjreOption字段\n```go\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tXjreOption string\n\tclass string\n\targs []string\n}\n```\nparseCmd()函数也对应添加Xjre\n```go\n//命令解析\nfunc parseCmd() *Cmd {\n    ...//其他代码不变\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.XjreOption,\"Xjre\",\"\",\"path to jre\")\n\t//解析命令行参数到定义的flag\n\tflag.Parse()\n\t...//其他代码不变\n}\n```\n### 实现类路径 \n\n采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。\n\n首先定义一个Entry接口\n```go\n//获取系统分隔符，windows是;类UNIX系统是:号\nconst pathListSeparator = string(os.PathListSeparator)\n\ntype Entry interface {\n\t//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀\n\t//例如读取java.lang.Object入参是java/lang/Object.class\n\treadClass(classname string) ([]byte, Entry, error)\n\n\t//toString\n\tString() string\n}\n```\nEntry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry\n#### DirEntry\nDirEntry相对简单些，表示目录形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"io/ioutil\"\n)\n\ntype DirEntry struct {\n\t//存放目录的绝对路径\n\tabsDir string\n}\n\n//相当于构造函数\nfunc newDirEntry(path string) *DirEntry {\n\t//将参数转换成绝对路径\n\tabsDir, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &DirEntry{absDir}\n}\n//读取class文件\nfunc (self *DirEntry) readClass (className string) ([]byte, Entry, error) {\n\t//把目录和class名拼成完成路径\n\tfileName := filepath.Join(self.absDir,className)\n\t//读取class文件内容\n\tdata, err := ioutil.ReadFile(fileName)\n\treturn data,self,err\n}\n\n//直接返回目录\nfunc (self *DirEntry) String() string{\n\treturn self.absDir\n}\n```\n#### ZipEntry\nZipEntry表示ZIP或者JAR文件形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"archive/zip\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\n\ntype ZipEntry struct {\n\t//存放目录的绝对路径\n\tabsPath string\n}\n\n//相当于构造函数\nfunc newZipEntry(path string) *ZipEntry {\n\t//将参数转换成绝对路径\n\tabsPath, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &ZipEntry{absPath}\n}\n\n//读取class文件\nfunc (self *ZipEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//打开zip文件\n\tr, err := zip.OpenReader(self.absPath)\n\tif err != nil {\n\t\treturn nil,nil,err\n\t}\n\tdefer r.Close()\n\n\t//遍历zip包里的文件\n\tfor _, f := range r.File {\n\t\t//找到class文件\n\t\tif f.Name == classname {\n\t\t\t//打开class文件\n\t\t\trc , err := f.Open()\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\tdefer rc.Close()\n\t\t\t//读取class文件内容\n\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\treturn data,self,err\n\t\t}\n\t}\n\t//未找到class文件\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n\n//直接返回目录\nfunc (self *ZipEntry) String() string {\n\treturn self.absPath\n}\n```\n#### CompositeEntry\nCompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice\n\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"errors\"\n)\n\ntype CompositeEntry []Entry\n\n\n//将每个小路径转换成具体的Entry\nfunc newCompositeEntry(pathList string) CompositeEntry {\n\tvar compositeEntry []Entry\n\t//将路径按照分隔符进行分割\n\tfor _, path := range strings.Split(pathList,pathListSeparator){\n\t\tentry := newEntry(path)\n\t\tcompositeEntry = append(compositeEntry,entry)\n\t}\n\treturn compositeEntry\n}\n\nfunc (self CompositeEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//遍历entry数据\n\tfor _, entry := range self{\n\t\t//读取class文件，依次调用每一个子路径的readClass方法\n\t\tdata, from, err := entry.readClass(classname)\n\t\tif err == nil{\n\t\t\treturn data,from,err\n\t\t}\n\t}\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n//调用每个子路径的String方法，用分隔符拼接起来\nfunc (self CompositeEntry) String() string {\n\tstrs := make([]string,len(self))\n\tfor i, entry := range self{\n\t\tstrs[i] = entry.String()\n\t}\n\treturn strings.Join(strs,pathListSeparator)\n}\n```\n#### WildcardEntry\nWildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc newWildcardEntry(path string) CompositeEntry {\n\t//去掉尾部的*\n\tbaseDir := path[:len(path)-1]\n\tvar compositeEntry []Entry\n\twalkFn := func(path string, info os.FileInfo, err error) error{\n\t\tif err != nil{\n\t\t\treturn err\n\t\t}\n\t\t//如果不是目录，返回跳过标识\n\t\tif info.IsDir() && path != baseDir {\n\t\t\treturn filepath.SkipDir\n\t\t}\n\t\t//选出jar文件\n\t\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\"){\n\t\t\tjarEntry := newZipEntry(path)\n\t\t\tcompositeEntry = append(compositeEntry,jarEntry)\n\t\t}\n\t\treturn nil\n\t}\n\t//遍历baseDir路径，创建zipEntry\n\tfilepath.Walk(baseDir,walkFn)\n\t//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)\n\treturn compositeEntry\n}\n```\n#### Entry\n四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。\n````go\nfunc newEntry(path string) Entry {\n\t//如果路径中含有分隔符\n\tif strings.Contains(path,pathListSeparator){\n\t\treturn newCompositeEntry(path)\n\t}\n\t//如果路径末尾是*\n\tif strings.HasSuffix(path,\"*\"){\n\t\treturn newWildcardEntry(path)\n\t}\n\t//如果路径以jar或者zip结尾\n\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\")||\n\t\tstrings.HasSuffix(path,\".zip\") || strings.HasSuffix(path,\".ZIP\"){\n\t\t\treturn newZipEntry(path)\n\t}\n\treturn newDirEntry(path)\n}\n````\n#### 实现Classpath\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"os\"\n\t\"fmt\"\n)\n\ntype Classpath struct {\n\tbootClasspath Entry\n\textClasspath Entry\n\tuserClasspath Entry\n}\n//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径\nfunc Parse(jreOption,cpOption string) *Classpath  {\n\tcp := &Classpath{}\n\t//解析启动类路径和扩展类路径\n\tcp.parseBootAndExtClasspath(jreOption)\n\n\t//解析用户类路径\n\tcp.parseUserClasspath(cpOption)\n\treturn cp\n}\n\nfunc getJreDir(jreOption string) string {\n\t//优先使用用户输入的-Xjre作为目录\n\tif jreOption != \"\" && exists(jreOption){\n\t\treturn jreOption\n\t}\n\t//在当前目录下寻找jre目录\n\tif exists(\"./jre\") {\n\t\treturn \"./jre\"\n\t}\n\t//尝试使用JAVA_HOME环境变量\n\tif jh := os.Getenv(\"JAVA_HOME\"); jh != \"\"{\n\t\treturn filepath.Join(jh,\"jre\")\n\t}\n\tpanic(\"Can not find jre folder\")\n}\n\n//判断目录是否存在\nfunc exists(path string) bool {\n\tif _, err := os.Stat(path); err != nil{\n\t\tif os.IsNotExist(err){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (self *Classpath) parseBootAndExtClasspath(jreOption string) {\n\t// 获取jre目录\n\tjreDir := getJreDir(jreOption)\n\t//jre/lib/*\n\tjreLibPath := filepath.Join(jreDir,\"lib\",\"*\")\n\tself.bootClasspath = newWildcardEntry(jreLibPath)\n\t//jre/lib/ext/*\n\tjreExtPath := filepath.Join(jreDir,\"lib\",\"ext\",\"*\")\n\tself.extClasspath = newWildcardEntry(jreExtPath)\n}\n\n//解析用户类路径\nfunc (self *Classpath) parseUserClasspath(cpOption string) {\n\t// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径\n\tif cpOption == \"\"{\n\t\tcpOption = \".\"\n\t}\n\tself.userClasspath = newEntry(cpOption)\n}\n\n//寻找class方法\nfunc (self *Classpath) ReadClass(classname string) ([]byte, Entry, error) {\n\t//访问ReadClass方法只需传递类名，不用包含\".class\"后缀\n\tclassname = classname + \".class\"\n\t// 从bootClasspath寻找class文件\n\tif data, entry, err := self.bootClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从extClasspath寻找class文件\n\tif data, entry, err := self.extClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从userClasspath寻找class文件\n\treturn self.userClasspath.readClass(classname)\n}\n\nfunc (self *Classpath) String() string {\n\treturn self.userClasspath.String()\n}\n```\n### 测试代码\n\n完善main.go中的startJVM\n```go\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t// 获取Classpath\n\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cp,cmd.class,cmd.args)\n\t// 将.替换成/(java.lang.String -> java/lang/String)\n\tclassName := strings.Replace(cmd.class,\".\",\"/\",-1)\n\t// 读取class\n\tclassData, _, err := cp.ReadClass(className)\n\tif err != nil {\n\t\tfmt.Printf(\"Could not find or load main class %s\\n\",cmd.class)\n\t\treturn\n\t}\n\tfmt.Printf(\"class data : %v\\n\",classData)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch02 \n$ ch02 java.lang.String\n# 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容\n$ ch02 -Xjre /opt  java.lang.Object \n# 传递错误-Xjre会打印出Could not find or load main class java.lang.Object\n```\n","slug":"JVM2","published":1,"updated":"2019-02-14T06:24:46.000Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjev0019jnfykxepb96s","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？</p>\n<h2 id=\"类路径\"><a href=\"#类路径\" class=\"headerlink\" title=\"类路径\"></a>类路径</h2><p>类路径可以分为以下三种：</p>\n<ul>\n<li>启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。</li>\n<li>扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。</li>\n<li>用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。</li>\n</ul>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>修改cmd结构体，添加XjreOption字段<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tXjreOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>parseCmd()函数也对应添加Xjre<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.XjreOption,<span class=\"string\">\"Xjre\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"path to jre\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//解析命令行参数到定义的flag</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实现类路径\"><a href=\"#实现类路径\" class=\"headerlink\" title=\"实现类路径\"></a>实现类路径</h3><p>采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。</p>\n<p>首先定义一个Entry接口<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取系统分隔符，windows是;类UNIX系统是:号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathListSeparator = <span class=\"keyword\">string</span>(os.PathListSeparator)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Entry <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀</span></span><br><span class=\"line\">\t<span class=\"comment\">//例如读取java.lang.Object入参是java/lang/Object.class</span></span><br><span class=\"line\">\treadClass(classname <span class=\"keyword\">string</span>) ([]<span class=\"keyword\">byte</span>, Entry, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//toString</span></span><br><span class=\"line\">\tString() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Entry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry</p>\n<h4 id=\"DirEntry\"><a href=\"#DirEntry\" class=\"headerlink\" title=\"DirEntry\"></a>DirEntry</h4><p>DirEntry相对简单些，表示目录形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DirEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newDirEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DirEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsDir, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;DirEntry&#123;absDir&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">readClass</span> <span class=\"params\">(className <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//把目录和class名拼成完成路径</span></span><br><span class=\"line\">\tfileName := filepath.Join(self.absDir,className)</span><br><span class=\"line\">\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\tdata, err := ioutil.ReadFile(fileName)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ZipEntry\"><a href=\"#ZipEntry\" class=\"headerlink\" title=\"ZipEntry\"></a>ZipEntry</h4><p>ZipEntry表示ZIP或者JAR文件形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"archive/zip\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ZipEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsPath <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newZipEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">ZipEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ZipEntry&#123;absPath&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打开zip文件</span></span><br><span class=\"line\">\tr, err := zip.OpenReader(self.absPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历zip包里的文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> r.File &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找到class文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f.Name == classname &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打开class文件</span></span><br><span class=\"line\">\t\t\trc , err := f.Open()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> rc.Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\t\t\tdata, err := ioutil.ReadAll(rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//未找到class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absPath</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"CompositeEntry\"><a href=\"#CompositeEntry\" class=\"headerlink\" title=\"CompositeEntry\"></a>CompositeEntry</h4><p>CompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CompositeEntry []Entry</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将每个小路径转换成具体的Entry</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCompositeEntry</span><span class=\"params\">(pathList <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\t<span class=\"comment\">//将路径按照分隔符进行分割</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, path := <span class=\"keyword\">range</span> strings.Split(pathList,pathListSeparator)&#123;</span><br><span class=\"line\">\t\tentry := newEntry(path)</span><br><span class=\"line\">\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,entry)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历entry数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//读取class文件，依次调用每一个子路径的readClass方法</span></span><br><span class=\"line\">\t\tdata, from, err := entry.readClass(classname)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,from,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用每个子路径的String方法，用分隔符拼接起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tstrs := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"built_in\">len</span>(self))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\tstrs[i] = entry.String()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(strs,pathListSeparator)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WildcardEntry\"><a href=\"#WildcardEntry\" class=\"headerlink\" title=\"WildcardEntry\"></a>WildcardEntry</h4><p>WildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWildcardEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//去掉尾部的*</span></span><br><span class=\"line\">\tbaseDir := path[:<span class=\"built_in\">len</span>(path)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\twalkFn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是目录，返回跳过标识</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &amp;&amp; path != baseDir &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> filepath.SkipDir</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//选出jar文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)&#123;</span><br><span class=\"line\">\t\t\tjarEntry := newZipEntry(path)</span><br><span class=\"line\">\t\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,jarEntry)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历baseDir路径，创建zipEntry</span></span><br><span class=\"line\">\tfilepath.Walk(baseDir,walkFn)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">Entry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径中含有分隔符</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.Contains(path,pathListSeparator)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newCompositeEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径末尾是*</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\"*\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newWildcardEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径以jar或者zip结尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)||</span><br><span class=\"line\">\t\tstrings.HasSuffix(path,<span class=\"string\">\".zip\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".ZIP\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> newZipEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newDirEntry(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现Classpath\"><a href=\"#实现Classpath\" class=\"headerlink\" title=\"实现Classpath\"></a>实现Classpath</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Classpath <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbootClasspath Entry</span><br><span class=\"line\">\textClasspath Entry</span><br><span class=\"line\">\tuserClasspath Entry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(jreOption,cpOption <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Classpath</span></span>  &#123;</span><br><span class=\"line\">\tcp := &amp;Classpath&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//解析启动类路径和扩展类路径</span></span><br><span class=\"line\">\tcp.parseBootAndExtClasspath(jreOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\">\tcp.parseUserClasspath(cpOption)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getJreDir</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//优先使用用户输入的-Xjre作为目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jreOption != <span class=\"string\">\"\"</span> &amp;&amp; exists(jreOption)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jreOption</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//在当前目录下寻找jre目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exists(<span class=\"string\">\"./jre\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"./jre\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试使用JAVA_HOME环境变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jh := os.Getenv(<span class=\"string\">\"JAVA_HOME\"</span>); jh != <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filepath.Join(jh,<span class=\"string\">\"jre\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not find jre folder\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断目录是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">exists</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stat(path); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.IsNotExist(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseBootAndExtClasspath</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取jre目录</span></span><br><span class=\"line\">\tjreDir := getJreDir(jreOption)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/*</span></span><br><span class=\"line\">\tjreLibPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.bootClasspath = newWildcardEntry(jreLibPath)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/ext/*</span></span><br><span class=\"line\">\tjreExtPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"ext\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.extClasspath = newWildcardEntry(jreExtPath)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseUserClasspath</span><span class=\"params\">(cpOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cpOption == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tcpOption = <span class=\"string\">\".\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tself.userClasspath = newEntry(cpOption)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//寻找class方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">ReadClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//访问ReadClass方法只需传递类名，不用包含\".class\"后缀</span></span><br><span class=\"line\">\tclassname = classname + <span class=\"string\">\".class\"</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从bootClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.bootClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从extClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.extClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从userClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.readClass(classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>完善main.go中的startJVM<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取Classpath</span></span><br><span class=\"line\">\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cp,cmd.class,cmd.args)</span><br><span class=\"line\">\t<span class=\"comment\">// 将.替换成/(java.lang.String -&gt; java/lang/String)</span></span><br><span class=\"line\">\tclassName := strings.Replace(cmd.class,<span class=\"string\">\".\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 读取class</span></span><br><span class=\"line\">\tclassData, _, err := cp.ReadClass(className)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Could not find or load main class %s\\n\"</span>,cmd.class)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"class data : %v\\n\"</span>,classData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch02 </span><br><span class=\"line\">$ ch02 java.lang.String</span><br><span class=\"line\"><span class=\"comment\"># 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容</span></span><br><span class=\"line\">$ ch02 -Xjre /opt  java.lang.Object </span><br><span class=\"line\"><span class=\"comment\"># 传递错误-Xjre会打印出Could not find or load main class java.lang.Object</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？</p>\n<h2 id=\"类路径\"><a href=\"#类路径\" class=\"headerlink\" title=\"类路径\"></a>类路径</h2><p>类路径可以分为以下三种：</p>\n<ul>\n<li>启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。</li>\n<li>扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。</li>\n<li>用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。</li>\n</ul>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>修改cmd结构体，添加XjreOption字段<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tXjreOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>parseCmd()函数也对应添加Xjre<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.XjreOption,<span class=\"string\">\"Xjre\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"path to jre\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//解析命令行参数到定义的flag</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实现类路径\"><a href=\"#实现类路径\" class=\"headerlink\" title=\"实现类路径\"></a>实现类路径</h3><p>采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。</p>\n<p>首先定义一个Entry接口<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取系统分隔符，windows是;类UNIX系统是:号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathListSeparator = <span class=\"keyword\">string</span>(os.PathListSeparator)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Entry <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀</span></span><br><span class=\"line\">\t<span class=\"comment\">//例如读取java.lang.Object入参是java/lang/Object.class</span></span><br><span class=\"line\">\treadClass(classname <span class=\"keyword\">string</span>) ([]<span class=\"keyword\">byte</span>, Entry, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//toString</span></span><br><span class=\"line\">\tString() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Entry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry</p>\n<h4 id=\"DirEntry\"><a href=\"#DirEntry\" class=\"headerlink\" title=\"DirEntry\"></a>DirEntry</h4><p>DirEntry相对简单些，表示目录形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DirEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newDirEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DirEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsDir, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;DirEntry&#123;absDir&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">readClass</span> <span class=\"params\">(className <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//把目录和class名拼成完成路径</span></span><br><span class=\"line\">\tfileName := filepath.Join(self.absDir,className)</span><br><span class=\"line\">\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\tdata, err := ioutil.ReadFile(fileName)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ZipEntry\"><a href=\"#ZipEntry\" class=\"headerlink\" title=\"ZipEntry\"></a>ZipEntry</h4><p>ZipEntry表示ZIP或者JAR文件形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"archive/zip\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ZipEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsPath <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newZipEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">ZipEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ZipEntry&#123;absPath&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打开zip文件</span></span><br><span class=\"line\">\tr, err := zip.OpenReader(self.absPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历zip包里的文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> r.File &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找到class文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f.Name == classname &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打开class文件</span></span><br><span class=\"line\">\t\t\trc , err := f.Open()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> rc.Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\t\t\tdata, err := ioutil.ReadAll(rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//未找到class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absPath</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"CompositeEntry\"><a href=\"#CompositeEntry\" class=\"headerlink\" title=\"CompositeEntry\"></a>CompositeEntry</h4><p>CompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CompositeEntry []Entry</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将每个小路径转换成具体的Entry</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCompositeEntry</span><span class=\"params\">(pathList <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\t<span class=\"comment\">//将路径按照分隔符进行分割</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, path := <span class=\"keyword\">range</span> strings.Split(pathList,pathListSeparator)&#123;</span><br><span class=\"line\">\t\tentry := newEntry(path)</span><br><span class=\"line\">\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,entry)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历entry数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//读取class文件，依次调用每一个子路径的readClass方法</span></span><br><span class=\"line\">\t\tdata, from, err := entry.readClass(classname)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,from,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用每个子路径的String方法，用分隔符拼接起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tstrs := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"built_in\">len</span>(self))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\tstrs[i] = entry.String()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(strs,pathListSeparator)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WildcardEntry\"><a href=\"#WildcardEntry\" class=\"headerlink\" title=\"WildcardEntry\"></a>WildcardEntry</h4><p>WildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWildcardEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//去掉尾部的*</span></span><br><span class=\"line\">\tbaseDir := path[:<span class=\"built_in\">len</span>(path)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\twalkFn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是目录，返回跳过标识</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &amp;&amp; path != baseDir &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> filepath.SkipDir</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//选出jar文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)&#123;</span><br><span class=\"line\">\t\t\tjarEntry := newZipEntry(path)</span><br><span class=\"line\">\t\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,jarEntry)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历baseDir路径，创建zipEntry</span></span><br><span class=\"line\">\tfilepath.Walk(baseDir,walkFn)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">Entry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径中含有分隔符</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.Contains(path,pathListSeparator)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newCompositeEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径末尾是*</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\"*\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newWildcardEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径以jar或者zip结尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)||</span><br><span class=\"line\">\t\tstrings.HasSuffix(path,<span class=\"string\">\".zip\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".ZIP\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> newZipEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newDirEntry(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现Classpath\"><a href=\"#实现Classpath\" class=\"headerlink\" title=\"实现Classpath\"></a>实现Classpath</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Classpath <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbootClasspath Entry</span><br><span class=\"line\">\textClasspath Entry</span><br><span class=\"line\">\tuserClasspath Entry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(jreOption,cpOption <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Classpath</span></span>  &#123;</span><br><span class=\"line\">\tcp := &amp;Classpath&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//解析启动类路径和扩展类路径</span></span><br><span class=\"line\">\tcp.parseBootAndExtClasspath(jreOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\">\tcp.parseUserClasspath(cpOption)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getJreDir</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//优先使用用户输入的-Xjre作为目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jreOption != <span class=\"string\">\"\"</span> &amp;&amp; exists(jreOption)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jreOption</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//在当前目录下寻找jre目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exists(<span class=\"string\">\"./jre\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"./jre\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试使用JAVA_HOME环境变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jh := os.Getenv(<span class=\"string\">\"JAVA_HOME\"</span>); jh != <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filepath.Join(jh,<span class=\"string\">\"jre\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not find jre folder\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断目录是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">exists</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stat(path); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.IsNotExist(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseBootAndExtClasspath</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取jre目录</span></span><br><span class=\"line\">\tjreDir := getJreDir(jreOption)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/*</span></span><br><span class=\"line\">\tjreLibPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.bootClasspath = newWildcardEntry(jreLibPath)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/ext/*</span></span><br><span class=\"line\">\tjreExtPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"ext\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.extClasspath = newWildcardEntry(jreExtPath)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseUserClasspath</span><span class=\"params\">(cpOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cpOption == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tcpOption = <span class=\"string\">\".\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tself.userClasspath = newEntry(cpOption)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//寻找class方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">ReadClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//访问ReadClass方法只需传递类名，不用包含\".class\"后缀</span></span><br><span class=\"line\">\tclassname = classname + <span class=\"string\">\".class\"</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从bootClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.bootClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从extClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.extClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从userClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.readClass(classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>完善main.go中的startJVM<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取Classpath</span></span><br><span class=\"line\">\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cp,cmd.class,cmd.args)</span><br><span class=\"line\">\t<span class=\"comment\">// 将.替换成/(java.lang.String -&gt; java/lang/String)</span></span><br><span class=\"line\">\tclassName := strings.Replace(cmd.class,<span class=\"string\">\".\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 读取class</span></span><br><span class=\"line\">\tclassData, _, err := cp.ReadClass(className)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Could not find or load main class %s\\n\"</span>,cmd.class)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"class data : %v\\n\"</span>,classData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch02 </span><br><span class=\"line\">$ ch02 java.lang.String</span><br><span class=\"line\"><span class=\"comment\"># 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容</span></span><br><span class=\"line\">$ ch02 -Xjre /opt  java.lang.Object </span><br><span class=\"line\"><span class=\"comment\"># 传递错误-Xjre会打印出Could not find or load main class java.lang.Object</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"redis-list双向链表【学习笔记】","date":"2019-03-28T08:18:04.000Z","copyright":true,"comments":0,"_content":"## list定义\n```c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n![list](Redis-adlist/list.png)\n## list常用函数\n\n### listCreate-创建新链表\n```c\n/**\n * 创建一个新的链表\n * @return  创建成功返回链表，失败返回 NULL\n * T = O(1)\n */\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n\n### listRelease-释放整个链表\n```c\n/**\n * 释放整个链表，以及链表中所有节点\n * @param list\n * T = O(N)\n */\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n### listAddNodeHead-添加新节点到链表头\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表头\n * @param list\n * @param value\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listAddNodeTail-添加新节点到链表尾\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表尾\n * @param list\n * @param value 新节点\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeTail(list *list, void *value)\n{\n    listNode *node;\n\n    // 为新节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 目标链表为空\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 目标链表非空\n    } else {\n        node->prev = list->tail;\n        node->next = NULL;\n        list->tail->next = node;\n        list->tail = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listInsertNode-将新节点添加到老节点之前或之后\n```c\n/**\n * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后\n * 如果 after 为 0 ，将新节点插入到 old_node 之前。\n * 如果 after 为 1 ，将新节点插入到 old_node 之后。\n * @param list 链表\n * @param old_node 老节点\n * @param value 值\n * @param after\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listInsertNode(list *list, listNode *old_node, void *value, int after) {\n    listNode *node;\n\n    // 创建新节点\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值\n    node->value = value;\n\n    // 将新节点添加到给定节点之后\n    if (after) {\n        node->prev = old_node;\n        node->next = old_node->next;\n        // 给定节点是原表尾节点\n        if (list->tail == old_node) {\n            list->tail = node;\n        }\n    // 将新节点添加到给定节点之前\n    } else {\n        node->next = old_node;\n        node->prev = old_node->prev;\n        // 给定节点是原表头节点\n        if (list->head == old_node) {\n            list->head = node;\n        }\n    }\n\n    // 更新新节点的前置指针\n    if (node->prev != NULL) {\n        node->prev->next = node;\n    }\n    // 更新新节点的后置指针\n    if (node->next != NULL) {\n        node->next->prev = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listDelNode-删除指定节点\n```c\n/**\n * 从链表 list 中删除给定节点 node \n * 对节点私有值(private value of the node)的释放工作由调用者进行。\n * @param list \n * @param node \n * T = O(1)\n */\nvoid listDelNode(list *list, listNode *node)\n{\n    // 调整前置节点的指针\n    if (node->prev)\n        node->prev->next = node->next;\n    else\n        list->head = node->next;\n\n    // 调整后置节点的指针\n    if (node->next)\n        node->next->prev = node->prev;\n    else\n        list->tail = node->prev;\n\n    // 释放值\n    if (list->free) list->free(node->value);\n\n    // 释放节点\n    zfree(node);\n\n    // 链表数减一\n    list->len--;\n}\n\n```\n### listGetIterator-生成链表的迭代器\n```c\n/**\n * 为给定链表创建一个迭代器，\n * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n * @param list 链表\n * @param direction 迭代方向 \n *        AL_START_HEAD ：从表头向表尾迭代\n *        AL_START_TAIL ：从表尾想表头迭代\n * @return 迭代器\n * T = O(1)\n */\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n### listNext-返回迭代器当前所指向的节点\n```c\n/**\n * 返回迭代器当前所指向的节点。\n * 删除当前节点是允许的，但不能修改链表里的其他节点。\n * @param iter 迭代器\n * @return 函数要么返回一个节点，要么返回 NULL \n * T = O(1)\n */\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n### listDup-复制整个链表\n```c\n/**\n * 复制整个链表。\n * 无论复制是成功还是失败，输入节点都不会修改。\n * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，\n * 否则，新节点将和旧节点共享同一个指针。\n * @param orig\n * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。\n * T = O(N)\n */\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n### listSearchKey-查找值为key的节点\n```c\n/**\n * 查找链表 list 中值和 key 匹配的节点。\n * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，\n * 那么直接通过对比值的指针来决定是否匹配。\n * @param list 链表\n * @param key 值\n * @return 如果匹配成功，那么第一个匹配的节点会被返回。\n *         如果没有匹配任何节点，那么返回 NULL 。\n */\nlistNode *listSearchKey(list *list, void *key)\n{\n    listIter *iter;\n    listNode *node;\n\n    // 迭代整个链表\n    iter = listGetIterator(list, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        \n        // 对比\n        if (list->match) {\n            if (list->match(node->value, key)) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        } else {\n            if (key == node->value) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        }\n    }\n    \n    listReleaseIterator(iter);\n\n    // 未找到\n    return NULL;\n}\n```\n### listIndex-返回链表在指定索引上的值\n```c\n/**\n * 返回链表在给定索引上的值。\n * @param list \n * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。\n * @return 如果索引超出范围（out of range），返回 NULL 。\n * T = O(N)\n */\nlistNode *listIndex(list *list, long index) {\n    listNode *n;\n\n    // 如果索引为负数，从表尾开始查找\n    if (index < 0) {\n        index = (-index)-1;\n        n = list->tail;\n        while(index-- && n) n = n->prev;\n    // 如果索引为正数，从表头开始查找\n    } else {\n        n = list->head;\n        while(index-- && n) n = n->next;\n    }\n\n    return n;\n}\n```\n### listRewind-设置正向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewind(list *list, listIter *li) {\n    li->next = list->head;\n    li->direction = AL_START_HEAD;\n}\n```\n### listRewindTail-设置反向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewindTail(list *list, listIter *li) {\n    li->next = list->tail;\n    li->direction = AL_START_TAIL;\n}\n```\n### listRotate-将链表尾移动到表头\n```c\n/\n * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。\n * @param list \n * T = O(1)\n */\nvoid listRotate(list *list) {\n    listNode *tail = list->tail;\n\n    if (listLength(list) <= 1) return;\n\n    // 取出表尾节点\n    list->tail = tail->prev;\n    list->tail->next = NULL;\n\n    // 插入到表头\n    list->head->prev = tail;\n    tail->prev = NULL;\n    tail->next = list->head;\n    list->head = tail;\n}\n```","source":"_posts/Redis-adlist.md","raw":"---\ntitle: redis-list双向链表【学习笔记】\ndate: 2019-03-28 16:18:04\ntags:\n    - redis\n    - 源码\ncategories: redis\ncopyright: true\ncomments: false\n---\n## list定义\n```c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n![list](Redis-adlist/list.png)\n## list常用函数\n\n### listCreate-创建新链表\n```c\n/**\n * 创建一个新的链表\n * @return  创建成功返回链表，失败返回 NULL\n * T = O(1)\n */\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n\n### listRelease-释放整个链表\n```c\n/**\n * 释放整个链表，以及链表中所有节点\n * @param list\n * T = O(N)\n */\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n### listAddNodeHead-添加新节点到链表头\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表头\n * @param list\n * @param value\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listAddNodeTail-添加新节点到链表尾\n```c\n/**\n * 将一个包含有给定值指针 value 的新节点添加到链表的表尾\n * @param list\n * @param value 新节点\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listAddNodeTail(list *list, void *value)\n{\n    listNode *node;\n\n    // 为新节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 目标链表为空\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 目标链表非空\n    } else {\n        node->prev = list->tail;\n        node->next = NULL;\n        list->tail->next = node;\n        list->tail = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listInsertNode-将新节点添加到老节点之前或之后\n```c\n/**\n * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后\n * 如果 after 为 0 ，将新节点插入到 old_node 之前。\n * 如果 after 为 1 ，将新节点插入到 old_node 之后。\n * @param list 链表\n * @param old_node 老节点\n * @param value 值\n * @param after\n * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针\n * T = O(1)\n */\nlist *listInsertNode(list *list, listNode *old_node, void *value, int after) {\n    listNode *node;\n\n    // 创建新节点\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值\n    node->value = value;\n\n    // 将新节点添加到给定节点之后\n    if (after) {\n        node->prev = old_node;\n        node->next = old_node->next;\n        // 给定节点是原表尾节点\n        if (list->tail == old_node) {\n            list->tail = node;\n        }\n    // 将新节点添加到给定节点之前\n    } else {\n        node->next = old_node;\n        node->prev = old_node->prev;\n        // 给定节点是原表头节点\n        if (list->head == old_node) {\n            list->head = node;\n        }\n    }\n\n    // 更新新节点的前置指针\n    if (node->prev != NULL) {\n        node->prev->next = node;\n    }\n    // 更新新节点的后置指针\n    if (node->next != NULL) {\n        node->next->prev = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n### listDelNode-删除指定节点\n```c\n/**\n * 从链表 list 中删除给定节点 node \n * 对节点私有值(private value of the node)的释放工作由调用者进行。\n * @param list \n * @param node \n * T = O(1)\n */\nvoid listDelNode(list *list, listNode *node)\n{\n    // 调整前置节点的指针\n    if (node->prev)\n        node->prev->next = node->next;\n    else\n        list->head = node->next;\n\n    // 调整后置节点的指针\n    if (node->next)\n        node->next->prev = node->prev;\n    else\n        list->tail = node->prev;\n\n    // 释放值\n    if (list->free) list->free(node->value);\n\n    // 释放节点\n    zfree(node);\n\n    // 链表数减一\n    list->len--;\n}\n\n```\n### listGetIterator-生成链表的迭代器\n```c\n/**\n * 为给定链表创建一个迭代器，\n * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n * @param list 链表\n * @param direction 迭代方向 \n *        AL_START_HEAD ：从表头向表尾迭代\n *        AL_START_TAIL ：从表尾想表头迭代\n * @return 迭代器\n * T = O(1)\n */\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n### listNext-返回迭代器当前所指向的节点\n```c\n/**\n * 返回迭代器当前所指向的节点。\n * 删除当前节点是允许的，但不能修改链表里的其他节点。\n * @param iter 迭代器\n * @return 函数要么返回一个节点，要么返回 NULL \n * T = O(1)\n */\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n### listDup-复制整个链表\n```c\n/**\n * 复制整个链表。\n * 无论复制是成功还是失败，输入节点都不会修改。\n * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，\n * 否则，新节点将和旧节点共享同一个指针。\n * @param orig\n * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。\n * T = O(N)\n */\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n### listSearchKey-查找值为key的节点\n```c\n/**\n * 查找链表 list 中值和 key 匹配的节点。\n * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，\n * 那么直接通过对比值的指针来决定是否匹配。\n * @param list 链表\n * @param key 值\n * @return 如果匹配成功，那么第一个匹配的节点会被返回。\n *         如果没有匹配任何节点，那么返回 NULL 。\n */\nlistNode *listSearchKey(list *list, void *key)\n{\n    listIter *iter;\n    listNode *node;\n\n    // 迭代整个链表\n    iter = listGetIterator(list, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        \n        // 对比\n        if (list->match) {\n            if (list->match(node->value, key)) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        } else {\n            if (key == node->value) {\n                listReleaseIterator(iter);\n                // 找到\n                return node;\n            }\n        }\n    }\n    \n    listReleaseIterator(iter);\n\n    // 未找到\n    return NULL;\n}\n```\n### listIndex-返回链表在指定索引上的值\n```c\n/**\n * 返回链表在给定索引上的值。\n * @param list \n * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。\n * @return 如果索引超出范围（out of range），返回 NULL 。\n * T = O(N)\n */\nlistNode *listIndex(list *list, long index) {\n    listNode *n;\n\n    // 如果索引为负数，从表尾开始查找\n    if (index < 0) {\n        index = (-index)-1;\n        n = list->tail;\n        while(index-- && n) n = n->prev;\n    // 如果索引为正数，从表头开始查找\n    } else {\n        n = list->head;\n        while(index-- && n) n = n->next;\n    }\n\n    return n;\n}\n```\n### listRewind-设置正向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewind(list *list, listIter *li) {\n    li->next = list->head;\n    li->direction = AL_START_HEAD;\n}\n```\n### listRewindTail-设置反向迭代器\n```c\n/**\n * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。\n * @param list 链表\n * @param li 迭代器\n * T = O(1)\n */\nvoid listRewindTail(list *list, listIter *li) {\n    li->next = list->tail;\n    li->direction = AL_START_TAIL;\n}\n```\n### listRotate-将链表尾移动到表头\n```c\n/\n * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。\n * @param list \n * T = O(1)\n */\nvoid listRotate(list *list) {\n    listNode *tail = list->tail;\n\n    if (listLength(list) <= 1) return;\n\n    // 取出表尾节点\n    list->tail = tail->prev;\n    list->tail->next = NULL;\n\n    // 插入到表头\n    list->head->prev = tail;\n    tail->prev = NULL;\n    tail->next = list->head;\n    list->head = tail;\n}\n```","slug":"Redis-adlist","published":1,"updated":"2019-03-28T10:18:36.039Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjew001bjnfyw2f90uq8","content":"<h2 id=\"list定义\"><a href=\"#list定义\" class=\"headerlink\" title=\"list定义\"></a>list定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/03/28/Redis-adlist/list.png\" alt=\"list\"></p>\n<h2 id=\"list常用函数\"><a href=\"#list常用函数\" class=\"headerlink\" title=\"list常用函数\"></a>list常用函数</h2><h3 id=\"listCreate-创建新链表\"><a href=\"#listCreate-创建新链表\" class=\"headerlink\" title=\"listCreate-创建新链表\"></a>listCreate-创建新链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个新的链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  创建成功返回链表，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRelease-释放整个链表\"><a href=\"#listRelease-释放整个链表\" class=\"headerlink\" title=\"listRelease-释放整个链表\"></a>listRelease-释放整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放整个链表，以及链表中所有节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listAddNodeHead-添加新节点到链表头\"><a href=\"#listAddNodeHead-添加新节点到链表头\" class=\"headerlink\" title=\"listAddNodeHead-添加新节点到链表头\"></a>listAddNodeHead-添加新节点到链表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表头</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listAddNodeTail-添加新节点到链表尾\"><a href=\"#listAddNodeTail-添加新节点到链表尾\" class=\"headerlink\" title=\"listAddNodeTail-添加新节点到链表尾\"></a>listAddNodeTail-添加新节点到链表尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 新节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为新节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 目标链表为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 目标链表非空</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail-&gt;next = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listInsertNode-将新节点添加到老节点之前或之后\"><a href=\"#listInsertNode-将新节点添加到老节点之前或之后\" class=\"headerlink\" title=\"listInsertNode-将新节点添加到老节点之前或之后\"></a>listInsertNode-将新节点添加到老节点之前或之后</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 0 ，将新节点插入到 old_node 之前。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 1 ，将新节点插入到 old_node 之后。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param old_node 老节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param after</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listInsertNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *old_node, <span class=\"keyword\">void</span> *value, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (after) &#123;</span><br><span class=\"line\">        node-&gt;prev = old_node;</span><br><span class=\"line\">        node-&gt;next = old_node-&gt;next;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;tail == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之前</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;next = old_node;</span><br><span class=\"line\">        node-&gt;prev = old_node-&gt;prev;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;head == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的前置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的后置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listDelNode-删除指定节点\"><a href=\"#listDelNode-删除指定节点\" class=\"headerlink\" title=\"listDelNode-删除指定节点\"></a>listDelNode-删除指定节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从链表 list 中删除给定节点 node </span></span><br><span class=\"line\"><span class=\"comment\"> * 对节点私有值(private value of the node)的释放工作由调用者进行。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param node </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listDelNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调整前置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev)</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调整后置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next)</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node-&gt;prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(node-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放节点</span></span><br><span class=\"line\">    zfree(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表数减一</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listGetIterator-生成链表的迭代器\"><a href=\"#listGetIterator-生成链表的迭代器\" class=\"headerlink\" title=\"listGetIterator-生成链表的迭代器\"></a>listGetIterator-生成链表的迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 为给定链表创建一个迭代器，</span></span><br><span class=\"line\"><span class=\"comment\"> * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param direction 迭代方向 </span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_HEAD ：从表头向表尾迭代</span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_TAIL ：从表尾想表头迭代</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listNext-返回迭代器当前所指向的节点\"><a href=\"#listNext-返回迭代器当前所指向的节点\" class=\"headerlink\" title=\"listNext-返回迭代器当前所指向的节点\"></a>listNext-返回迭代器当前所指向的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回迭代器当前所指向的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除当前节点是允许的，但不能修改链表里的其他节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param iter 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 函数要么返回一个节点，要么返回 NULL </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listDup-复制整个链表\"><a href=\"#listDup-复制整个链表\" class=\"headerlink\" title=\"listDup-复制整个链表\"></a>listDup-复制整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制整个链表。</span></span><br><span class=\"line\"><span class=\"comment\"> * 无论复制是成功还是失败，输入节点都不会修改。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则，新节点将和旧节点共享同一个指针。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param orig</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listSearchKey-查找值为key的节点\"><a href=\"#listSearchKey-查找值为key的节点\" class=\"headerlink\" title=\"listSearchKey-查找值为key的节点\"></a>listSearchKey-查找值为key的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找链表 list 中值和 key 匹配的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，</span></span><br><span class=\"line\"><span class=\"comment\"> * 那么直接通过对比值的指针来决定是否匹配。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果匹配成功，那么第一个匹配的节点会被返回。</span></span><br><span class=\"line\"><span class=\"comment\"> *         如果没有匹配任何节点，那么返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listSearchKey</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个链表</span></span><br><span class=\"line\">    iter = listGetIterator(<span class=\"built_in\">list</span>, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 对比</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match(node-&gt;value, key)) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == node-&gt;value) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listIndex-返回链表在指定索引上的值\"><a href=\"#listIndex-返回链表在指定索引上的值\" class=\"headerlink\" title=\"listIndex-返回链表在指定索引上的值\"></a>listIndex-返回链表在指定索引上的值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回链表在给定索引上的值。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果索引超出范围（out of range），返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listIndex</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">    listNode *n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为负数，从表尾开始查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        index = (-index)<span class=\"number\">-1</span>;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;prev;</span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为正数，从表头开始查找</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRewind-设置正向迭代器\"><a href=\"#listRewind-设置正向迭代器\" class=\"headerlink\" title=\"listRewind-设置正向迭代器\"></a>listRewind-设置正向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewind</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    li-&gt;direction = AL_START_HEAD;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRewindTail-设置反向迭代器\"><a href=\"#listRewindTail-设置反向迭代器\" class=\"headerlink\" title=\"listRewindTail-设置反向迭代器\"></a>listRewindTail-设置反向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewindTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">    li-&gt;direction = AL_START_TAIL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRotate-将链表尾移动到表头\"><a href=\"#listRotate-将链表尾移动到表头\" class=\"headerlink\" title=\"listRotate-将链表尾移动到表头\"></a>listRotate-将链表尾移动到表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/</span><br><span class=\"line\"> * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。</span><br><span class=\"line\"> * @param <span class=\"built_in\">list</span> </span><br><span class=\"line\"> * T = O(<span class=\"number\">1</span>)</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">void</span> listRotate(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">    listNode *tail = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listLength(<span class=\"built_in\">list</span>) &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出表尾节点</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail = tail-&gt;prev;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入到表头</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head-&gt;prev = tail;</span><br><span class=\"line\">    tail-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    tail-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = tail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"list定义\"><a href=\"#list定义\" class=\"headerlink\" title=\"list定义\"></a>list定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/03/28/Redis-adlist/list.png\" alt=\"list\"></p>\n<h2 id=\"list常用函数\"><a href=\"#list常用函数\" class=\"headerlink\" title=\"list常用函数\"></a>list常用函数</h2><h3 id=\"listCreate-创建新链表\"><a href=\"#listCreate-创建新链表\" class=\"headerlink\" title=\"listCreate-创建新链表\"></a>listCreate-创建新链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个新的链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @return  创建成功返回链表，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRelease-释放整个链表\"><a href=\"#listRelease-释放整个链表\" class=\"headerlink\" title=\"listRelease-释放整个链表\"></a>listRelease-释放整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放整个链表，以及链表中所有节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listAddNodeHead-添加新节点到链表头\"><a href=\"#listAddNodeHead-添加新节点到链表头\" class=\"headerlink\" title=\"listAddNodeHead-添加新节点到链表头\"></a>listAddNodeHead-添加新节点到链表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表头</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listAddNodeTail-添加新节点到链表尾\"><a href=\"#listAddNodeTail-添加新节点到链表尾\" class=\"headerlink\" title=\"listAddNodeTail-添加新节点到链表尾\"></a>listAddNodeTail-添加新节点到链表尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个包含有给定值指针 value 的新节点添加到链表的表尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 新节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为新节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 目标链表为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 目标链表非空</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail-&gt;next = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listInsertNode-将新节点添加到老节点之前或之后\"><a href=\"#listInsertNode-将新节点添加到老节点之前或之后\" class=\"headerlink\" title=\"listInsertNode-将新节点添加到老节点之前或之后\"></a>listInsertNode-将新节点添加到老节点之前或之后</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个包含值 value 的新节点，并将它插入到 old_node 的之前或之后</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 0 ，将新节点插入到 old_node 之前。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 after 为 1 ，将新节点插入到 old_node 之后。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param old_node 老节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param after</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果为新节点分配内存出错，那么不执行任何动作，仅返回 NULL，如果执行成功，返回传入的链表指针</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listInsertNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *old_node, <span class=\"keyword\">void</span> *value, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之后</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (after) &#123;</span><br><span class=\"line\">        node-&gt;prev = old_node;</span><br><span class=\"line\">        node-&gt;next = old_node-&gt;next;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表尾节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;tail == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将新节点添加到给定节点之前</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;next = old_node;</span><br><span class=\"line\">        node-&gt;prev = old_node-&gt;prev;</span><br><span class=\"line\">        <span class=\"comment\">// 给定节点是原表头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;head == old_node) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的前置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新新节点的后置指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listDelNode-删除指定节点\"><a href=\"#listDelNode-删除指定节点\" class=\"headerlink\" title=\"listDelNode-删除指定节点\"></a>listDelNode-删除指定节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从链表 list 中删除给定节点 node </span></span><br><span class=\"line\"><span class=\"comment\"> * 对节点私有值(private value of the node)的释放工作由调用者进行。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param node </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listDelNode</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listNode *node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调整前置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;prev)</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调整后置节点的指针</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node-&gt;next)</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;tail = node-&gt;prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(node-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放节点</span></span><br><span class=\"line\">    zfree(node);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表数减一</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listGetIterator-生成链表的迭代器\"><a href=\"#listGetIterator-生成链表的迭代器\" class=\"headerlink\" title=\"listGetIterator-生成链表的迭代器\"></a>listGetIterator-生成链表的迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 为给定链表创建一个迭代器，</span></span><br><span class=\"line\"><span class=\"comment\"> * 之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param direction 迭代方向 </span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_HEAD ：从表头向表尾迭代</span></span><br><span class=\"line\"><span class=\"comment\"> *        AL_START_TAIL ：从表尾想表头迭代</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listNext-返回迭代器当前所指向的节点\"><a href=\"#listNext-返回迭代器当前所指向的节点\" class=\"headerlink\" title=\"listNext-返回迭代器当前所指向的节点\"></a>listNext-返回迭代器当前所指向的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回迭代器当前所指向的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除当前节点是允许的，但不能修改链表里的其他节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param iter 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 函数要么返回一个节点，要么返回 NULL </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listDup-复制整个链表\"><a href=\"#listDup-复制整个链表\" class=\"headerlink\" title=\"listDup-复制整个链表\"></a>listDup-复制整个链表</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制整个链表。</span></span><br><span class=\"line\"><span class=\"comment\"> * 无论复制是成功还是失败，输入节点都不会修改。</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果链表有设置值复制函数 dup ，那么对值的复制将使用复制函数进行，</span></span><br><span class=\"line\"><span class=\"comment\"> * 否则，新节点将和旧节点共享同一个指针。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param orig</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回输入链表的副本，如果因为内存不足而造成复制失败，返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listSearchKey-查找值为key的节点\"><a href=\"#listSearchKey-查找值为key的节点\" class=\"headerlink\" title=\"listSearchKey-查找值为key的节点\"></a>listSearchKey-查找值为key的节点</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 查找链表 list 中值和 key 匹配的节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * 对比操作由链表的 match 函数负责进行，如果没有设置 match 函数，</span></span><br><span class=\"line\"><span class=\"comment\"> * 那么直接通过对比值的指针来决定是否匹配。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key 值</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果匹配成功，那么第一个匹配的节点会被返回。</span></span><br><span class=\"line\"><span class=\"comment\"> *         如果没有匹配任何节点，那么返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listSearchKey</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个链表</span></span><br><span class=\"line\">    iter = listGetIterator(<span class=\"built_in\">list</span>, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 对比</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;match(node-&gt;value, key)) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == node-&gt;value) &#123;</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listIndex-返回链表在指定索引上的值\"><a href=\"#listIndex-返回链表在指定索引上的值\" class=\"headerlink\" title=\"listIndex-返回链表在指定索引上的值\"></a>listIndex-返回链表在指定索引上的值</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回链表在给定索引上的值。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list </span></span><br><span class=\"line\"><span class=\"comment\"> * @param index 索引以 0 为起始，也可以是负数， -1 表示链表最后一个节点，诸如此类。</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 如果索引超出范围（out of range），返回 NULL 。</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listIndex</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">    listNode *n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为负数，从表尾开始查找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        index = (-index)<span class=\"number\">-1</span>;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;prev;</span><br><span class=\"line\">    <span class=\"comment\">// 如果索引为正数，从表头开始查找</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        n = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &amp;&amp; n) n = n-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRewind-设置正向迭代器\"><a href=\"#listRewind-设置正向迭代器\" class=\"headerlink\" title=\"listRewind-设置正向迭代器\"></a>listRewind-设置正向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_HEAD ，并将迭代指针重新指向表头节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewind</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    li-&gt;direction = AL_START_HEAD;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRewindTail-设置反向迭代器\"><a href=\"#listRewindTail-设置反向迭代器\" class=\"headerlink\" title=\"listRewindTail-设置反向迭代器\"></a>listRewindTail-设置反向迭代器</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将迭代器的方向设置为 AL_START_TAIL, 并将迭代指针重新指向表尾节点。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param list 链表</span></span><br><span class=\"line\"><span class=\"comment\"> * @param li 迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRewindTail</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, listIter *li)</span> </span>&#123;</span><br><span class=\"line\">    li-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\">    li-&gt;direction = AL_START_TAIL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listRotate-将链表尾移动到表头\"><a href=\"#listRotate-将链表尾移动到表头\" class=\"headerlink\" title=\"listRotate-将链表尾移动到表头\"></a>listRotate-将链表尾移动到表头</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/</span><br><span class=\"line\"> * 取出链表的表尾节点，并将它移动到表头，成为新的表头节点。</span><br><span class=\"line\"> * @param <span class=\"built_in\">list</span> </span><br><span class=\"line\"> * T = O(<span class=\"number\">1</span>)</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">void</span> listRotate(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">    listNode *tail = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listLength(<span class=\"built_in\">list</span>) &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取出表尾节点</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail = tail-&gt;prev;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;tail-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入到表头</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head-&gt;prev = tail;</span><br><span class=\"line\">    tail-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    tail-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = tail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"redis-sds动态字符串【学习笔记】","date":"2019-03-27T07:56:04.000Z","copyright":true,"comments":0,"_content":"## SDS定义\n\n```c\n/*\n * 类型别名，用于指向 sdshdr 的 buf 属性\n */\ntypedef char *sds;\n\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n\n```\n\n## SDS常用函数\n\n### sdslen-sds长度\n```c\n/*\n * 返回 sds 实际保存的字符串的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->len;\n}\n\n```\ns 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址\nchar buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。\n具体结构如下图\n![sdshdr](Redis-sds/sdshdr.png)\n### sdsavail-sds可用free空间长度\n```c\n/*\n * 返回 sds 可用空间的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n\n### sdsnewlen-根据字符串长度创建sds\n```c\n/**\n * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds\n * @param init 初始化字符串指针\n * @param initlen 初始化字符串的长度\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    // T = O(N)\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1);\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n### sdsnew-创建sds\n```c\n/**\n * 根据给定字符串 init ，创建一个包含同样字符串的 sds\n * @param init 如果输入为 NULL ，那么创建一个空白 sds\n * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n### sdsempty-创建空sds\n```c\n/**\n * 创建并返回一个只保存了空字符串 \"\" 的 sds\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(1)\n */\nsds sdsempty(void) {\n    return sdsnewlen(\"\",0);\n}\n```\n### sdsdup-复制sds创建副本\n```c\n/**\n * 复制给定 sds 创建副本\n * @param s sds\n * @return 创建成功返回输入 sds 的副本\n *  T = O(N)\n */\nsds sdsdup(const sds s) {\n    return sdsnewlen(s, sdslen(s));\n}\n```\n### sdsfree-释放sds\n```c\n/**\n * 释放给定的 sds\n * @param s \n * T = O(N)\n */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    zfree(s-sizeof(struct sdshdr));\n}\n```\n### sdsgrowzero-扩充sds未使用空间补0\n```c\n/**\n * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。\n * @param s\n * @param len 指定长度\n * @return 扩充成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdsgrowzero(sds s, size_t len) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    size_t totlen, curlen = sh->len;\n\n    // 如果 len 比字符串的现有长度小，\n    // 那么直接返回，不做动作\n    if (len <= curlen) return s;\n\n    // 扩展 sds\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len-curlen);\n    // 如果内存不足，直接返回\n    if (s == NULL) return NULL;\n\n    // 将新分配的空间用 0 填充，防止出现垃圾内容\n    // T = O(N)\n    sh = (void*)(s-(sizeof(struct sdshdr)));\n    memset(s+curlen,0,(len-curlen+1));\n\n    // 更新属性\n    totlen = sh->len+sh->free;\n    sh->len = len;\n    sh->free = totlen-sh->len;\n\n    // 返回新的 sds\n    return s;\n}\n\n/**\n * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，\n * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）\n * @param s \n * @param addlen \n * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL\n * T = O(N)\n */\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n\n    struct sdshdr *sh, *newsh;\n\n    // 获取 s 目前的空余空间长度\n    size_t free = sdsavail(s);\n\n    size_t len, newlen;\n\n    // s 目前的空余空间已经足够，无须再进行扩展，直接返回\n    if (free >= addlen) return s;\n\n    // 获取 s 目前已占用空间的长度\n    len = sdslen(s);\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // s 最少需要的长度\n    newlen = (len+addlen);\n\n    // 根据新长度，为 s 分配新空间所需的大小\n    if (newlen < SDS_MAX_PREALLOC)\n        // 如果新长度小于 SDS_MAX_PREALLOC \n        // 那么为它分配两倍于所需长度的空间\n        newlen *= 2;\n    else\n        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC\n        newlen += SDS_MAX_PREALLOC;\n    // T = O(N)\n    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);\n\n    // 内存不足，分配失败，返回\n    if (newsh == NULL) return NULL;\n\n    // 更新 sds 的空余长度\n    newsh->free = newlen - len;\n\n    // 返回 sds\n    return newsh->buf;\n}\n\n/*\n * 最大预分配长度\n */\n#define SDS_MAX_PREALLOC (1024*1024)\n```\n\n### sdscatlen-根据字符串长度将字符串追加到sds末尾\n```c\n/**\n *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾\n * @param s\n * @param t 字符串t\n * @param len t的长度\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatlen(sds s, const void *t, size_t len) {\n    \n    struct sdshdr *sh;\n    \n    // 原有字符串长度\n    size_t curlen = sdslen(s);\n\n    // 扩展 sds 空间\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len);\n\n    // 内存不足？直接返回\n    if (s == NULL) return NULL;\n\n    // 复制 t 中的内容到字符串后部\n    // T = O(N)\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n    memcpy(s+curlen, t, len);\n\n    // 更新属性\n    sh->len = curlen+len;\n    sh->free = sh->free-len;\n\n    // 添加新结尾符号\n    s[curlen+len] = '\\0';\n\n    // 返回新 sds\n    return s;\n}\n```\n### sdscat-将字符串追加到sds末尾\n```c\n/**\n * 将给定字符串 t 追加到 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n *  T = O(N)\n */\nsds sdscat(sds s, const char *t) {\n    return sdscatlen(s, t, strlen(t));\n}\n```\n\n### sdscatsds-将sds追加到另一个sds末尾\n```c\n/**\n * 将另一个 sds 追加到一个 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatsds(sds s, const sds t) {\n    return sdscatlen(s, t, sdslen(t));\n}\n```\n### sdscpylen-将字符串前len复制到sds\n```c\n/**\n * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符\n * 如果 sds 的长度少于 len 个字符，那么扩展 sds\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpylen(sds s, const char *t, size_t len) {\n\n    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // sds 现有 buf 的长度\n    size_t totlen = sh->free+sh->len;\n\n    // 如果 s 的 buf 长度不满足 len ，那么扩展它\n    if (totlen < len) {\n        // T = O(N)\n        s = sdsMakeRoomFor(s,len-sh->len);\n        if (s == NULL) return NULL;\n        sh = (void*) (s-(sizeof(struct sdshdr)));\n        totlen = sh->free+sh->len;\n    }\n\n    // 复制内容\n    // T = O(N)\n    memcpy(s, t, len);\n\n    // 添加终结符号\n    s[len] = '\\0';\n\n    // 更新属性\n    sh->len = len;\n    sh->free = totlen-len;\n\n    // 返回新的 sds\n    return s;\n}\n```\n### sdscpy-将字符串复制到 sds 当中\n```c\n/**\n * 将字符串复制到 sds 当中,覆盖原有的字符\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpy(sds s, const char *t) {\n    return sdscpylen(s, t, strlen(t));\n}\n```","source":"_posts/Redis-sds.md","raw":"---\ntitle: redis-sds动态字符串【学习笔记】\ndate: 2019-03-27 15:56:04\ntags:\n    - redis\n    - 源码\ncategories: redis\ncopyright: true\ncomments: false\n---\n## SDS定义\n\n```c\n/*\n * 类型别名，用于指向 sdshdr 的 buf 属性\n */\ntypedef char *sds;\n\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n\n```\n\n## SDS常用函数\n\n### sdslen-sds长度\n```c\n/*\n * 返回 sds 实际保存的字符串的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->len;\n}\n\n```\ns 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址\nchar buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。\n具体结构如下图\n![sdshdr](Redis-sds/sdshdr.png)\n### sdsavail-sds可用free空间长度\n```c\n/*\n * 返回 sds 可用空间的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n\n### sdsnewlen-根据字符串长度创建sds\n```c\n/**\n * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds\n * @param init 初始化字符串指针\n * @param initlen 初始化字符串的长度\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    // T = O(N)\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1);\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n### sdsnew-创建sds\n```c\n/**\n * 根据给定字符串 init ，创建一个包含同样字符串的 sds\n * @param init 如果输入为 NULL ，那么创建一个空白 sds\n * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL\n * T = O(N)\n */\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n### sdsempty-创建空sds\n```c\n/**\n * 创建并返回一个只保存了空字符串 \"\" 的 sds\n * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL\n * T = O(1)\n */\nsds sdsempty(void) {\n    return sdsnewlen(\"\",0);\n}\n```\n### sdsdup-复制sds创建副本\n```c\n/**\n * 复制给定 sds 创建副本\n * @param s sds\n * @return 创建成功返回输入 sds 的副本\n *  T = O(N)\n */\nsds sdsdup(const sds s) {\n    return sdsnewlen(s, sdslen(s));\n}\n```\n### sdsfree-释放sds\n```c\n/**\n * 释放给定的 sds\n * @param s \n * T = O(N)\n */\nvoid sdsfree(sds s) {\n    if (s == NULL) return;\n    zfree(s-sizeof(struct sdshdr));\n}\n```\n### sdsgrowzero-扩充sds未使用空间补0\n```c\n/**\n * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。\n * @param s\n * @param len 指定长度\n * @return 扩充成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdsgrowzero(sds s, size_t len) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    size_t totlen, curlen = sh->len;\n\n    // 如果 len 比字符串的现有长度小，\n    // 那么直接返回，不做动作\n    if (len <= curlen) return s;\n\n    // 扩展 sds\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len-curlen);\n    // 如果内存不足，直接返回\n    if (s == NULL) return NULL;\n\n    // 将新分配的空间用 0 填充，防止出现垃圾内容\n    // T = O(N)\n    sh = (void*)(s-(sizeof(struct sdshdr)));\n    memset(s+curlen,0,(len-curlen+1));\n\n    // 更新属性\n    totlen = sh->len+sh->free;\n    sh->len = len;\n    sh->free = totlen-sh->len;\n\n    // 返回新的 sds\n    return s;\n}\n\n/**\n * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，\n * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）\n * @param s \n * @param addlen \n * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL\n * T = O(N)\n */\nsds sdsMakeRoomFor(sds s, size_t addlen) {\n\n    struct sdshdr *sh, *newsh;\n\n    // 获取 s 目前的空余空间长度\n    size_t free = sdsavail(s);\n\n    size_t len, newlen;\n\n    // s 目前的空余空间已经足够，无须再进行扩展，直接返回\n    if (free >= addlen) return s;\n\n    // 获取 s 目前已占用空间的长度\n    len = sdslen(s);\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // s 最少需要的长度\n    newlen = (len+addlen);\n\n    // 根据新长度，为 s 分配新空间所需的大小\n    if (newlen < SDS_MAX_PREALLOC)\n        // 如果新长度小于 SDS_MAX_PREALLOC \n        // 那么为它分配两倍于所需长度的空间\n        newlen *= 2;\n    else\n        // 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC\n        newlen += SDS_MAX_PREALLOC;\n    // T = O(N)\n    newsh = zrealloc(sh, sizeof(struct sdshdr)+newlen+1);\n\n    // 内存不足，分配失败，返回\n    if (newsh == NULL) return NULL;\n\n    // 更新 sds 的空余长度\n    newsh->free = newlen - len;\n\n    // 返回 sds\n    return newsh->buf;\n}\n\n/*\n * 最大预分配长度\n */\n#define SDS_MAX_PREALLOC (1024*1024)\n```\n\n### sdscatlen-根据字符串长度将字符串追加到sds末尾\n```c\n/**\n *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾\n * @param s\n * @param t 字符串t\n * @param len t的长度\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatlen(sds s, const void *t, size_t len) {\n    \n    struct sdshdr *sh;\n    \n    // 原有字符串长度\n    size_t curlen = sdslen(s);\n\n    // 扩展 sds 空间\n    // T = O(N)\n    s = sdsMakeRoomFor(s,len);\n\n    // 内存不足？直接返回\n    if (s == NULL) return NULL;\n\n    // 复制 t 中的内容到字符串后部\n    // T = O(N)\n    sh = (void*) (s-(sizeof(struct sdshdr)));\n    memcpy(s+curlen, t, len);\n\n    // 更新属性\n    sh->len = curlen+len;\n    sh->free = sh->free-len;\n\n    // 添加新结尾符号\n    s[curlen+len] = '\\0';\n\n    // 返回新 sds\n    return s;\n}\n```\n### sdscat-将字符串追加到sds末尾\n```c\n/**\n * 将给定字符串 t 追加到 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n *  T = O(N)\n */\nsds sdscat(sds s, const char *t) {\n    return sdscatlen(s, t, strlen(t));\n}\n```\n\n### sdscatsds-将sds追加到另一个sds末尾\n```c\n/**\n * 将另一个 sds 追加到一个 sds 的末尾\n * @return 追加成功返回新 sds ，失败返回 NULL\n * T = O(N)\n */\nsds sdscatsds(sds s, const sds t) {\n    return sdscatlen(s, t, sdslen(t));\n}\n```\n### sdscpylen-将字符串前len复制到sds\n```c\n/**\n * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符\n * 如果 sds 的长度少于 len 个字符，那么扩展 sds\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpylen(sds s, const char *t, size_t len) {\n\n    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));\n\n    // sds 现有 buf 的长度\n    size_t totlen = sh->free+sh->len;\n\n    // 如果 s 的 buf 长度不满足 len ，那么扩展它\n    if (totlen < len) {\n        // T = O(N)\n        s = sdsMakeRoomFor(s,len-sh->len);\n        if (s == NULL) return NULL;\n        sh = (void*) (s-(sizeof(struct sdshdr)));\n        totlen = sh->free+sh->len;\n    }\n\n    // 复制内容\n    // T = O(N)\n    memcpy(s, t, len);\n\n    // 添加终结符号\n    s[len] = '\\0';\n\n    // 更新属性\n    sh->len = len;\n    sh->free = totlen-len;\n\n    // 返回新的 sds\n    return s;\n}\n```\n### sdscpy-将字符串复制到 sds 当中\n```c\n/**\n * 将字符串复制到 sds 当中,覆盖原有的字符\n * @return 复制成功返回新的 sds ，否则返回 NULL\n * T = O(N)\n */\nsds sdscpy(sds s, const char *t) {\n    return sdscpylen(s, t, strlen(t));\n}\n```","slug":"Redis-sds","published":1,"updated":"2019-03-28T08:04:17.837Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjey001ejnfykx3xsp0h","content":"<h2 id=\"SDS定义\"><a href=\"#SDS定义\" class=\"headerlink\" title=\"SDS定义\"></a>SDS定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型别名，用于指向 sdshdr 的 buf 属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *sds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SDS常用函数\"><a href=\"#SDS常用函数\" class=\"headerlink\" title=\"SDS常用函数\"></a>SDS常用函数</h2><h3 id=\"sdslen-sds长度\"><a href=\"#sdslen-sds长度\" class=\"headerlink\" title=\"sdslen-sds长度\"></a>sdslen-sds长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>s 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址<br>char buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。<br>具体结构如下图<br><img src=\"/2019/03/27/Redis-sds/sdshdr.png\" alt=\"sdshdr\"></p>\n<h3 id=\"sdsavail-sds可用free空间长度\"><a href=\"#sdsavail-sds可用free空间长度\" class=\"headerlink\" title=\"sdsavail-sds可用free空间长度\"></a>sdsavail-sds可用free空间长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsnewlen-根据字符串长度创建sds\"><a href=\"#sdsnewlen-根据字符串长度创建sds\" class=\"headerlink\" title=\"sdsnewlen-根据字符串长度创建sds\"></a>sdsnewlen-根据字符串长度创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 初始化字符串指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param initlen 初始化字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsnew-创建sds\"><a href=\"#sdsnew-创建sds\" class=\"headerlink\" title=\"sdsnew-创建sds\"></a>sdsnew-创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定字符串 init ，创建一个包含同样字符串的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 如果输入为 NULL ，那么创建一个空白 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsempty-创建空sds\"><a href=\"#sdsempty-创建空sds\" class=\"headerlink\" title=\"sdsempty-创建空sds\"></a>sdsempty-创建空sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建并返回一个只保存了空字符串 \"\" 的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(<span class=\"string\">\"\"</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsdup-复制sds创建副本\"><a href=\"#sdsdup-复制sds创建副本\" class=\"headerlink\" title=\"sdsdup-复制sds创建副本\"></a>sdsdup-复制sds创建副本</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制给定 sds 创建副本</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回输入 sds 的副本</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(s, sdslen(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsfree-释放sds\"><a href=\"#sdsfree-释放sds\" class=\"headerlink\" title=\"sdsfree-释放sds\"></a>sdsfree-释放sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放给定的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    zfree(s-<span class=\"keyword\">sizeof</span>(struct sdshdr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsgrowzero-扩充sds未使用空间补0\"><a href=\"#sdsgrowzero-扩充sds未使用空间补0\" class=\"headerlink\" title=\"sdsgrowzero-扩充sds未使用空间补0\"></a>sdsgrowzero-扩充sds未使用空间补0</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len 指定长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩充成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen, curlen = sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 len 比字符串的现有长度小，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么直接返回，不做动作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= curlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len-curlen);</span><br><span class=\"line\">    <span class=\"comment\">// 如果内存不足，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新分配的空间用 0 填充，防止出现垃圾内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*)(s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s+curlen,<span class=\"number\">0</span>,(len-curlen+<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    totlen = sh-&gt;len+sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，</span></span><br><span class=\"line\"><span class=\"comment\"> * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * @param addlen </span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsMakeRoomFor</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> addlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>, *<span class=\"title\">newsh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前的空余空间长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">free</span> = sdsavail(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len, newlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 目前的空余空间已经足够，无须再进行扩展，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt;= addlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前已占用空间的长度</span></span><br><span class=\"line\">    len = sdslen(s);</span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 最少需要的长度</span></span><br><span class=\"line\">    newlen = (len+addlen);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据新长度，为 s 分配新空间所需的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class=\"line\">        <span class=\"comment\">// 如果新长度小于 SDS_MAX_PREALLOC </span></span><br><span class=\"line\">        <span class=\"comment\">// 那么为它分配两倍于所需长度的空间</span></span><br><span class=\"line\">        newlen *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">// 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC</span></span><br><span class=\"line\">        newlen += SDS_MAX_PREALLOC;</span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    newsh = zrealloc(sh, <span class=\"keyword\">sizeof</span>(struct sdshdr)+newlen+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足，分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 sds 的空余长度</span></span><br><span class=\"line\">    newsh-&gt;<span class=\"built_in\">free</span> = newlen - len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newsh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大预分配长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_MAX_PREALLOC (1024*1024)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"><a href=\"#sdscatlen-根据字符串长度将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"></a>sdscatlen-根据字符串长度将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param t 字符串t</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len t的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 原有字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> curlen = sdslen(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds 空间</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足？直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制 t 中的内容到字符串后部</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s+curlen, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = curlen+len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = sh-&gt;<span class=\"built_in\">free</span>-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加新结尾符号</span></span><br><span class=\"line\">    s[curlen+len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscat-将字符串追加到sds末尾\"><a href=\"#sdscat-将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscat-将字符串追加到sds末尾\"></a>sdscat-将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将给定字符串 t 追加到 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscatsds-将sds追加到另一个sds末尾\"><a href=\"#sdscatsds-将sds追加到另一个sds末尾\" class=\"headerlink\" title=\"sdscatsds-将sds追加到另一个sds末尾\"></a>sdscatsds-将sds追加到另一个sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将另一个 sds 追加到一个 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, sdslen(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscpylen-将字符串前len复制到sds\"><a href=\"#sdscpylen-将字符串前len复制到sds\" class=\"headerlink\" title=\"sdscpylen-将字符串前len复制到sds\"></a>sdscpylen-将字符串前len复制到sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 sds 的长度少于 len 个字符，那么扩展 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*) (<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sds 现有 buf 的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 s 的 buf 长度不满足 len ，那么扩展它</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (totlen &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">        s = sdsMakeRoomFor(s,len-sh-&gt;len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">        totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加终结符号</span></span><br><span class=\"line\">    s[len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscpy-将字符串复制到-sds-当中\"><a href=\"#sdscpy-将字符串复制到-sds-当中\" class=\"headerlink\" title=\"sdscpy-将字符串复制到 sds 当中\"></a>sdscpy-将字符串复制到 sds 当中</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串复制到 sds 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscpylen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SDS定义\"><a href=\"#SDS定义\" class=\"headerlink\" title=\"SDS定义\"></a>SDS定义</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型别名，用于指向 sdshdr 的 buf 属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *sds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SDS常用函数\"><a href=\"#SDS常用函数\" class=\"headerlink\" title=\"SDS常用函数\"></a>SDS常用函数</h2><h3 id=\"sdslen-sds长度\"><a href=\"#sdslen-sds长度\" class=\"headerlink\" title=\"sdslen-sds长度\"></a>sdslen-sds长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>s 实际上存的是buf首个char数据的地址，也就是向前移动8个字节，就能到sdshdr的len的首地址<br>char buf[]这个数组没有大小，是所谓的柔性数组，是不占据内存大小的，所以sizeof(struct sdshdr)为8。<br>具体结构如下图<br><img src=\"/2019/03/27/Redis-sds/sdshdr.png\" alt=\"sdshdr\"></p>\n<h3 id=\"sdsavail-sds可用free空间长度\"><a href=\"#sdsavail-sds可用free空间长度\" class=\"headerlink\" title=\"sdsavail-sds可用free空间长度\"></a>sdsavail-sds可用free空间长度</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsnewlen-根据字符串长度创建sds\"><a href=\"#sdsnewlen-根据字符串长度创建sds\" class=\"headerlink\" title=\"sdsnewlen-根据字符串长度创建sds\"></a>sdsnewlen-根据字符串长度创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定的初始化字符串 init 和字符串长度 initlen,创建一个新的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 初始化字符串指针</span></span><br><span class=\"line\"><span class=\"comment\"> * @param initlen 初始化字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsnew-创建sds\"><a href=\"#sdsnew-创建sds\" class=\"headerlink\" title=\"sdsnew-创建sds\"></a>sdsnew-创建sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据给定字符串 init ，创建一个包含同样字符串的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init 如果输入为 NULL ，那么创建一个空白 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds，创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsempty-创建空sds\"><a href=\"#sdsempty-创建空sds\" class=\"headerlink\" title=\"sdsempty-创建空sds\"></a>sdsempty-创建空sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建并返回一个只保存了空字符串 \"\" 的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回 sdshdr 相对应的 sds,创建失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(<span class=\"string\">\"\"</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsdup-复制sds创建副本\"><a href=\"#sdsdup-复制sds创建副本\" class=\"headerlink\" title=\"sdsdup-复制sds创建副本\"></a>sdsdup-复制sds创建副本</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 复制给定 sds 创建副本</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建成功返回输入 sds 的副本</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(s, sdslen(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsfree-释放sds\"><a href=\"#sdsfree-释放sds\" class=\"headerlink\" title=\"sdsfree-释放sds\"></a>sdsfree-释放sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 释放给定的 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    zfree(s-<span class=\"keyword\">sizeof</span>(struct sdshdr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdsgrowzero-扩充sds未使用空间补0\"><a href=\"#sdsgrowzero-扩充sds未使用空间补0\" class=\"headerlink\" title=\"sdsgrowzero-扩充sds未使用空间补0\"></a>sdsgrowzero-扩充sds未使用空间补0</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将 sds 扩充至指定长度，未使用的空间以 0 字节填充。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len 指定长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩充成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen, curlen = sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 len 比字符串的现有长度小，</span></span><br><span class=\"line\">    <span class=\"comment\">// 那么直接返回，不做动作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= curlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len-curlen);</span><br><span class=\"line\">    <span class=\"comment\">// 如果内存不足，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将新分配的空间用 0 填充，防止出现垃圾内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*)(s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(s+curlen,<span class=\"number\">0</span>,(len-curlen+<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    totlen = sh-&gt;len+sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对 sds 中 buf 的长度进行扩展，确保在函数执行之后，</span></span><br><span class=\"line\"><span class=\"comment\"> * buf 至少会有 addlen + 1 长度的空余空间（额外的 1 字节是为 \\0 准备的）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s </span></span><br><span class=\"line\"><span class=\"comment\"> * @param addlen </span></span><br><span class=\"line\"><span class=\"comment\"> * @return 扩展成功返回扩展后的 sds，扩展失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsMakeRoomFor</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> addlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>, *<span class=\"title\">newsh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前的空余空间长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">free</span> = sdsavail(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len, newlen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 目前的空余空间已经足够，无须再进行扩展，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt;= addlen) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取 s 目前已占用空间的长度</span></span><br><span class=\"line\">    len = sdslen(s);</span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// s 最少需要的长度</span></span><br><span class=\"line\">    newlen = (len+addlen);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据新长度，为 s 分配新空间所需的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newlen &lt; SDS_MAX_PREALLOC)</span><br><span class=\"line\">        <span class=\"comment\">// 如果新长度小于 SDS_MAX_PREALLOC </span></span><br><span class=\"line\">        <span class=\"comment\">// 那么为它分配两倍于所需长度的空间</span></span><br><span class=\"line\">        newlen *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">// 否则，分配长度为目前长度加上 SDS_MAX_PREALLOC</span></span><br><span class=\"line\">        newlen += SDS_MAX_PREALLOC;</span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    newsh = zrealloc(sh, <span class=\"keyword\">sizeof</span>(struct sdshdr)+newlen+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足，分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newsh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 sds 的空余长度</span></span><br><span class=\"line\">    newsh-&gt;<span class=\"built_in\">free</span> = newlen - len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newsh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 最大预分配长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SDS_MAX_PREALLOC (1024*1024)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"><a href=\"#sdscatlen-根据字符串长度将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscatlen-根据字符串长度将字符串追加到sds末尾\"></a>sdscatlen-根据字符串长度将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  将长度为 len 的字符串 t 追加到 sds 的字符串末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @param s</span></span><br><span class=\"line\"><span class=\"comment\"> * @param t 字符串t</span></span><br><span class=\"line\"><span class=\"comment\"> * @param len t的长度</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 原有字符串长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> curlen = sdslen(s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扩展 sds 空间</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    s = sdsMakeRoomFor(s,len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存不足？直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制 t 中的内容到字符串后部</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s+curlen, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = curlen+len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = sh-&gt;<span class=\"built_in\">free</span>-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加新结尾符号</span></span><br><span class=\"line\">    s[curlen+len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscat-将字符串追加到sds末尾\"><a href=\"#sdscat-将字符串追加到sds末尾\" class=\"headerlink\" title=\"sdscat-将字符串追加到sds末尾\"></a>sdscat-将字符串追加到sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将给定字符串 t 追加到 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> *  T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscatsds-将sds追加到另一个sds末尾\"><a href=\"#sdscatsds-将sds追加到另一个sds末尾\" class=\"headerlink\" title=\"sdscatsds-将sds追加到另一个sds末尾\"></a>sdscatsds-将sds追加到另一个sds末尾</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将另一个 sds 追加到一个 sds 的末尾</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 追加成功返回新 sds ，失败返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscatlen(s, t, sdslen(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscpylen-将字符串前len复制到sds\"><a href=\"#sdscpylen-将字符串前len复制到sds\" class=\"headerlink\" title=\"sdscpylen-将字符串前len复制到sds\"></a>sdscpylen-将字符串前len复制到sds</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串 t 的前 len 个字符复制到 sds s 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * 如果 sds 的长度少于 len 个字符，那么扩展 sds</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*) (<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// sds 现有 buf 的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果 s 的 buf 长度不满足 len ，那么扩展它</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (totlen &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">        s = sdsMakeRoomFor(s,len-sh-&gt;len);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        sh = (<span class=\"keyword\">void</span>*) (s-(<span class=\"keyword\">sizeof</span>(struct sdshdr)));</span><br><span class=\"line\">        totlen = sh-&gt;<span class=\"built_in\">free</span>+sh-&gt;len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制内容</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(s, t, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加终结符号</span></span><br><span class=\"line\">    s[len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新属性</span></span><br><span class=\"line\">    sh-&gt;len = len;</span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = totlen-len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的 sds</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"sdscpy-将字符串复制到-sds-当中\"><a href=\"#sdscpy-将字符串复制到-sds-当中\" class=\"headerlink\" title=\"sdscpy-将字符串复制到 sds 当中\"></a>sdscpy-将字符串复制到 sds 当中</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将字符串复制到 sds 当中,覆盖原有的字符</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 复制成功返回新的 sds ，否则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(N)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdscpylen(s, t, <span class=\"built_in\">strlen</span>(t));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"redis常见面试题","date":"2019-03-13T14:33:04.000Z","copyright":true,"comments":0,"_content":"#### 什么是redis?\n```bash\nRedis 是一个基于内存的高性能key-value数据库。\n```\n\n#### Redis支持哪几种数据结构\n``` bash\nString（字符串）: set key value\nHash（哈希）: hmset name  key1 value1 key2 value2\nList（列表）：lpush  name  value\nSet（集合）：sadd  name  value\nzset(sorted set：有序集合)： zadd  name score value\n```\n#### Redis为什么这么快？redis采用多线程会有哪些问题？\n```bash\nRedis效率高的主要原因有下面几个：\n\n    （1）基于内存操作，速度非常快\n    （2）采用单线程，避免了上下文的切换导致消耗CPU\n    （3）采用单线程，不用去考虑各种加锁释放锁的问题\n    （4）使用IO多路复用模型，非阻塞IO\n```\n#### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n```bash\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。\nAOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。\n```\n#### 一个字符串类型的值能存储最大容量是多少？\n```bash\n512M\n```\n#### Redis集群方案什么情况下会导致整个集群不可用？\n```bash\n有A，B，C三个节点的集群,在没有<复制模型>的情况下.\n如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。\n```\n#### Redis哈希槽的概念？\n```bash\nRedis集群没有使用一致性hash,而是引入了哈希槽的概念.\nRedis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.\n集群的每个节点负责一部分hash槽。\n```\n#### Redis集群的主从复制模型？\n```bash\n为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，\n所以集群使用了主从复制模型,每个节点都会有N-1个复制品.\n```\n#### Redis事务相关的命令有哪几个？\n```bash\ndiscard命令-取消事务,发起执行事务块里的所有命令.\nexec命令-执行所有事务块内的命令.\nmulti命令-标记一个事务块的开始.\nwatch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.\nunwatch命令-取消watch命令对所有key的监视.\n```\n\n#### redis的过期策略\n```bash\nredis采用的是定期删除+惰性删除策略。\n\n定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。\n因此，如果只采用定期删除策略，会导致很多key到时间没有删除。\n\n惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。\n```\n#### 为什么不用定时删除策略?\n```bash\n定时删除,用一个定时器来负责监视key,过期则自动删除。\n虽然内存及时释放，但是十分消耗CPU资源。\n在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.\n```\n","source":"_drafts/Redis.md","raw":"---\ntitle: redis常见面试题\ndate: 2019-03-13 22:33:04\ntags:\n    - redis\n    - 面试总结\ncategories: redis\ncopyright: true\ncomments: false\n---\n#### 什么是redis?\n```bash\nRedis 是一个基于内存的高性能key-value数据库。\n```\n\n#### Redis支持哪几种数据结构\n``` bash\nString（字符串）: set key value\nHash（哈希）: hmset name  key1 value1 key2 value2\nList（列表）：lpush  name  value\nSet（集合）：sadd  name  value\nzset(sorted set：有序集合)： zadd  name score value\n```\n#### Redis为什么这么快？redis采用多线程会有哪些问题？\n```bash\nRedis效率高的主要原因有下面几个：\n\n    （1）基于内存操作，速度非常快\n    （2）采用单线程，避免了上下文的切换导致消耗CPU\n    （3）采用单线程，不用去考虑各种加锁释放锁的问题\n    （4）使用IO多路复用模型，非阻塞IO\n```\n#### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n```bash\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。\nAOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。\n```\n#### 一个字符串类型的值能存储最大容量是多少？\n```bash\n512M\n```\n#### Redis集群方案什么情况下会导致整个集群不可用？\n```bash\n有A，B，C三个节点的集群,在没有<复制模型>的情况下.\n如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。\n```\n#### Redis哈希槽的概念？\n```bash\nRedis集群没有使用一致性hash,而是引入了哈希槽的概念.\nRedis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.\n集群的每个节点负责一部分hash槽。\n```\n#### Redis集群的主从复制模型？\n```bash\n为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，\n所以集群使用了主从复制模型,每个节点都会有N-1个复制品.\n```\n#### Redis事务相关的命令有哪几个？\n```bash\ndiscard命令-取消事务,发起执行事务块里的所有命令.\nexec命令-执行所有事务块内的命令.\nmulti命令-标记一个事务块的开始.\nwatch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.\nunwatch命令-取消watch命令对所有key的监视.\n```\n\n#### redis的过期策略\n```bash\nredis采用的是定期删除+惰性删除策略。\n\n定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。\n因此，如果只采用定期删除策略，会导致很多key到时间没有删除。\n\n惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。\n```\n#### 为什么不用定时删除策略?\n```bash\n定时删除,用一个定时器来负责监视key,过期则自动删除。\n虽然内存及时释放，但是十分消耗CPU资源。\n在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.\n```\n","slug":"Redis","published":0,"updated":"2019-03-27T06:50:24.318Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjf2001ijnfyejpry1e8","content":"<h4 id=\"什么是redis\"><a href=\"#什么是redis\" class=\"headerlink\" title=\"什么是redis?\"></a>什么是redis?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 是一个基于内存的高性能key-value数据库。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis支持哪几种数据结构\"><a href=\"#Redis支持哪几种数据结构\" class=\"headerlink\" title=\"Redis支持哪几种数据结构\"></a>Redis支持哪几种数据结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String（字符串）: <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">Hash（哈希）: hmset name  key1 value1 key2 value2</span><br><span class=\"line\">List（列表）：lpush  name  value</span><br><span class=\"line\">Set（集合）：sadd  name  value</span><br><span class=\"line\">zset(sorted <span class=\"built_in\">set</span>：有序集合)： zadd  name score value</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"><a href=\"#Redis为什么这么快？redis采用多线程会有哪些问题？\" class=\"headerlink\" title=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"></a>Redis为什么这么快？redis采用多线程会有哪些问题？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis效率高的主要原因有下面几个：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）基于内存操作，速度非常快</span><br><span class=\"line\">    （2）采用单线程，避免了上下文的切换导致消耗CPU</span><br><span class=\"line\">    （3）采用单线程，不用去考虑各种加锁释放锁的问题</span><br><span class=\"line\">    （4）使用IO多路复用模型，非阻塞IO</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 提供了两种持久化方式:RDB（默认） 和AOF </span><br><span class=\"line\">RDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。</span><br><span class=\"line\">AOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。</span><br></pre></td></tr></table></figure>\n<h4 id=\"一个字符串类型的值能存储最大容量是多少？\"><a href=\"#一个字符串类型的值能存储最大容量是多少？\" class=\"headerlink\" title=\"一个字符串类型的值能存储最大容量是多少？\"></a>一个字符串类型的值能存储最大容量是多少？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512M</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群方案什么情况下会导致整个集群不可用？\"><a href=\"#Redis集群方案什么情况下会导致整个集群不可用？\" class=\"headerlink\" title=\"Redis集群方案什么情况下会导致整个集群不可用？\"></a>Redis集群方案什么情况下会导致整个集群不可用？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有A，B，C三个节点的集群,在没有&lt;复制模型&gt;的情况下.</span><br><span class=\"line\">如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis哈希槽的概念？\"><a href=\"#Redis哈希槽的概念？\" class=\"headerlink\" title=\"Redis哈希槽的概念？\"></a>Redis哈希槽的概念？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群没有使用一致性<span class=\"built_in\">hash</span>,而是引入了哈希槽的概念.</span><br><span class=\"line\">Redis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.</span><br><span class=\"line\">集群的每个节点负责一部分<span class=\"built_in\">hash</span>槽。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群的主从复制模型？\"><a href=\"#Redis集群的主从复制模型？\" class=\"headerlink\" title=\"Redis集群的主从复制模型？\"></a>Redis集群的主从复制模型？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，</span><br><span class=\"line\">所以集群使用了主从复制模型,每个节点都会有N-1个复制品.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis事务相关的命令有哪几个？\"><a href=\"#Redis事务相关的命令有哪几个？\" class=\"headerlink\" title=\"Redis事务相关的命令有哪几个？\"></a>Redis事务相关的命令有哪几个？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discard命令-取消事务,发起执行事务块里的所有命令.</span><br><span class=\"line\"><span class=\"built_in\">exec</span>命令-执行所有事务块内的命令.</span><br><span class=\"line\">multi命令-标记一个事务块的开始.</span><br><span class=\"line\">watch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.</span><br><span class=\"line\">unwatch命令-取消watch命令对所有key的监视.</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis的过期策略\"><a href=\"#redis的过期策略\" class=\"headerlink\" title=\"redis的过期策略\"></a>redis的过期策略</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis采用的是定期删除+惰性删除策略。</span><br><span class=\"line\"></span><br><span class=\"line\">定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。</span><br><span class=\"line\">因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</span><br><span class=\"line\"></span><br><span class=\"line\">惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</span><br></pre></td></tr></table></figure>\n<h4 id=\"为什么不用定时删除策略\"><a href=\"#为什么不用定时删除策略\" class=\"headerlink\" title=\"为什么不用定时删除策略?\"></a>为什么不用定时删除策略?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定时删除,用一个定时器来负责监视key,过期则自动删除。</span><br><span class=\"line\">虽然内存及时释放，但是十分消耗CPU资源。</span><br><span class=\"line\">在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是redis\"><a href=\"#什么是redis\" class=\"headerlink\" title=\"什么是redis?\"></a>什么是redis?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 是一个基于内存的高性能key-value数据库。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis支持哪几种数据结构\"><a href=\"#Redis支持哪几种数据结构\" class=\"headerlink\" title=\"Redis支持哪几种数据结构\"></a>Redis支持哪几种数据结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String（字符串）: <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">Hash（哈希）: hmset name  key1 value1 key2 value2</span><br><span class=\"line\">List（列表）：lpush  name  value</span><br><span class=\"line\">Set（集合）：sadd  name  value</span><br><span class=\"line\">zset(sorted <span class=\"built_in\">set</span>：有序集合)： zadd  name score value</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"><a href=\"#Redis为什么这么快？redis采用多线程会有哪些问题？\" class=\"headerlink\" title=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"></a>Redis为什么这么快？redis采用多线程会有哪些问题？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis效率高的主要原因有下面几个：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）基于内存操作，速度非常快</span><br><span class=\"line\">    （2）采用单线程，避免了上下文的切换导致消耗CPU</span><br><span class=\"line\">    （3）采用单线程，不用去考虑各种加锁释放锁的问题</span><br><span class=\"line\">    （4）使用IO多路复用模型，非阻塞IO</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 提供了两种持久化方式:RDB（默认） 和AOF </span><br><span class=\"line\">RDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。</span><br><span class=\"line\">AOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。</span><br></pre></td></tr></table></figure>\n<h4 id=\"一个字符串类型的值能存储最大容量是多少？\"><a href=\"#一个字符串类型的值能存储最大容量是多少？\" class=\"headerlink\" title=\"一个字符串类型的值能存储最大容量是多少？\"></a>一个字符串类型的值能存储最大容量是多少？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512M</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群方案什么情况下会导致整个集群不可用？\"><a href=\"#Redis集群方案什么情况下会导致整个集群不可用？\" class=\"headerlink\" title=\"Redis集群方案什么情况下会导致整个集群不可用？\"></a>Redis集群方案什么情况下会导致整个集群不可用？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有A，B，C三个节点的集群,在没有&lt;复制模型&gt;的情况下.</span><br><span class=\"line\">如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis哈希槽的概念？\"><a href=\"#Redis哈希槽的概念？\" class=\"headerlink\" title=\"Redis哈希槽的概念？\"></a>Redis哈希槽的概念？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群没有使用一致性<span class=\"built_in\">hash</span>,而是引入了哈希槽的概念.</span><br><span class=\"line\">Redis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.</span><br><span class=\"line\">集群的每个节点负责一部分<span class=\"built_in\">hash</span>槽。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群的主从复制模型？\"><a href=\"#Redis集群的主从复制模型？\" class=\"headerlink\" title=\"Redis集群的主从复制模型？\"></a>Redis集群的主从复制模型？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，</span><br><span class=\"line\">所以集群使用了主从复制模型,每个节点都会有N-1个复制品.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis事务相关的命令有哪几个？\"><a href=\"#Redis事务相关的命令有哪几个？\" class=\"headerlink\" title=\"Redis事务相关的命令有哪几个？\"></a>Redis事务相关的命令有哪几个？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discard命令-取消事务,发起执行事务块里的所有命令.</span><br><span class=\"line\"><span class=\"built_in\">exec</span>命令-执行所有事务块内的命令.</span><br><span class=\"line\">multi命令-标记一个事务块的开始.</span><br><span class=\"line\">watch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.</span><br><span class=\"line\">unwatch命令-取消watch命令对所有key的监视.</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis的过期策略\"><a href=\"#redis的过期策略\" class=\"headerlink\" title=\"redis的过期策略\"></a>redis的过期策略</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis采用的是定期删除+惰性删除策略。</span><br><span class=\"line\"></span><br><span class=\"line\">定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。</span><br><span class=\"line\">因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</span><br><span class=\"line\"></span><br><span class=\"line\">惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</span><br></pre></td></tr></table></figure>\n<h4 id=\"为什么不用定时删除策略\"><a href=\"#为什么不用定时删除策略\" class=\"headerlink\" title=\"为什么不用定时删除策略?\"></a>为什么不用定时删除策略?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定时删除,用一个定时器来负责监视key,过期则自动删除。</span><br><span class=\"line\">虽然内存及时释放，但是十分消耗CPU资源。</span><br><span class=\"line\">在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</span><br></pre></td></tr></table></figure>\n"},{"title":"Kafka背景及架构介绍","date":"2019-05-25T03:38:04.000Z","copyright":true,"comments":0,"_content":"## Kafka创建背景\nkafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。\n\n## Kafka简介\nKafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。\n\nkafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。\n\n每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。\n\n## Kafka架构\n\n### 一、名词解释\n* **Broker**：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成\n* **Topic**：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic\n* **Partition**：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的\n* **Producer**：生产者，负责发布消息到broker\n* **Consumer**：消费者，从broker读取消息\n* **ConsumerGroup**：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息\n* **replica**：partition 的副本，保障 partition 的高可用。\n* **leader**：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。\n* **follower**：replica 中的一个角色，从 leader 中复制数据。\n* **controller**：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等\n* **zookeeper**：Kafka 通过 zookeeper 来存储集群的 meta 信息。\n\n### 二、架构图\n#### 总体数据流\n![](Kafka-Background/1.png)\nProducers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。\n\n#### 生产者\n![](Kafka-Background/2.png)\n①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。\n\n②调用send() 方法进行消息发送。\n\n③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。\n\n④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。\n\n⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。\n\n③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。\n\nkey的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区\n\n#### topic\n![](Kafka-Background/3.jpg)\n从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。\n\nTopic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。\n\n#### partition\n![](Kafka-Background/4.jpg)\n\n每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。\n\nkafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。\n\n分区的原因：\n\n* 方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;\n* 可以提高并发，因为可以以 Partition 为单位读写了。\n\n#### Replication\n同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。\n\n没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。\n\n引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。\n\n### 消费者\n![](Kafka-Background/5.jpeg)\n订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。\n\n同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，`就是一个partition，只能被消费组里的一个消费者消费`，但是可以同时被多个消费组消费。\n\n因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。\n\n### Kafka Zookeeper 节点\n![](Kafka-Background/6.png)\n\n\n## Kafka常见的应用场景\n#### 1.消息队列\n比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。\n\n#### 2.行为跟踪\n行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。\n\n#### 3.元信息监控\n与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。\n\n#### 4.日志收集\n日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。\n\n#### 5.流处理\n保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。\n\n#### 6.持久性日志（commit log）\nKafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。\n\n#### 7.事件源\n将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。\n\n`实际应用中，适用最多最广泛的自然是MQ的功能。`\n\n## Kafka用作MQ时与常用MQ的对比\n\n**RabbitMQ**——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。\n\n**ZeroMQ**——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，`介于应用层和传输层之间`（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。\n\n**RocketMQ**——阿里开源的一款高性能、高吞吐量的分布式消息中间件。\n\n**ActiveMQ**——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。\n\n\n特性 | Kafka | RabbitMQ | ZeroMQ | RocketMQ | ActiveMQ\n:-: | :-: | :-: | :-: | :-: | :-:\n开发语言 | Scala | Erlang | C | Java | Java\n支持协议 | 自行设计的基于TCP层的协议 | AMQP | TCP、UDP | 自行设计 | OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS\n消息存储 | 内存、磁盘、数据库。支持大量堆积。 | 内存、磁盘。支持少量堆积。 | 消息发送端的内存或者磁盘中。不支持持久化。 | 磁盘。支持大量堆积。 | 内存、磁盘、数据库。支持少量堆积。\n消息事务 | 支持 | 支持 | 不支持 | 支持 | 支持\n负载均衡\t| 支持 | 支持但支持的不好\t | 去中心化，不支持负载均衡。本身只是一个多线程网络库。 | 支持 | 支持，可以基于zookeeper实现\n集群方式 | 天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。 | 支持简单集群，’复制’模式，对高级集群模式支持不好。 | 去中心化，不支持集群。 | ‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master | 支持简单集群模式，比如’主-备’，对高级集群模式支持不好。\n可用性 | 非常高（分布式） | 高（主从） | 高 | 非常高（分布式） | 高（主从）\n消息重复 | 支持at least once、at most once | 支持at least once、at most once | 只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once | 支持at least once | 支持at least once\n吞吐量TPS | 极大 | 比较大 | 极大 | 大（发送端不是批量发送） | 比较大\n时效性 | ms以内 | us级 |   | ms级 | ms级\n订阅形式和消息分发 | 基于topic以及按照topic进行正则匹配的发布订阅模式。 | 提供了4种方式：direct, topic ,Headers和fanout。 | 点对点(p2p) | 基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式 | 点对点(p2p)、广播（发布-订阅）\n顺序消息 | 支持 | 不支持 | 不支持 | 支持 | 不支持\n消息确认 | 支持 | 支持 | 支持 | 支持 | 支持\n消息回溯\t| 支持指定分区offset位置的回溯 | 不支持 | 不支持 | 支持指定时间点的回溯 | 不支持\n消费失败重试 | 不支持，但可以通过指定分区offset位置实现。 | 不支持，但是可以利用消息确认机制实现。 | 不支持 | 支持 | 不支持\n并发度 | 高 | 极高 | 高 | 高 | 高\n资料文档 | 中。有kafka作者自己写的书，网上资料也有一些。 | 多。有一些不错的书，网上资料多。 | 少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。 | 少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。 | 多。没有专门写activemq的书，网上资料多。\n\n### 常用MQ的优缺点\n\n#### Kafka\n##### 优点\n* 性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。\n* 时效性：ms级\n* 可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用\n* 消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;\n* 有优秀的第三方Kafka Web管理界面Kafka-Manager；\n* 在日志领域比较成熟，被多家公司和多个开源项目使用；\n* 功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用\n\n##### 缺点\n* Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长\n* 使用短轮询方式，实时性取决于轮询间隔时间；\n* 消费失败不支持重试；\n* 支持消息顺序，但是一台代理宕机后，就会产生消息乱序；\n* 社区更新较慢；\n\n#### RabbitMQ\n##### 优点\n* 由于erlang语言的特性，mq 性能较好，高并发；\n* 吞吐量到万级，MQ功能比较完备 \n* 健壮、稳定、易用、跨平台、支持多种语言、文档齐全；\n* 开源提供的管理界面非常棒，用起来很好用\n* 社区活跃度高；\n\n##### 缺点\n* erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。\n* RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。\n* 需要学习比较复杂的接口和协议，学习和维护成本较高。\n\n#### ZeroMQ\n##### 优点\n* 吞吐量：百万级\n* 扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。\n\n##### 缺点\n* 原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。\n* 在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：十万级\n* 可用性：非常高，分布式架构\n* 消息可靠性：经过参数优化配置，消息可以做到0丢失\n* 功能支持：MQ功能较为完善，还是分布式的，扩展性好\n* 支持10亿级别的消息堆积，不会因为堆积导致性能下降\n* 源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控\n\n##### 缺点\n* 支持的客户端语言不多，目前是java及c++，其中c++不成熟；\n* 社区活跃度一般\n* MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：万级\n* topic数量都吞吐量的影响：\n* 时效性：ms级\n* 可用性：高，基于主从架构实现高可用性\n* 消息可靠性：有较低的概率丢失数据\n* 功能支持：MQ领域的功能极其完备\n* 遵循JMS规范安装部署方便\n\n##### 缺点\n* 在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。\n* 官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。\n\n\n\n\n\n\n","source":"_posts/Kafka-Background.md","raw":"---\ntitle: Kafka背景及架构介绍\ndate: 2019-05-25 11:38:04\ntags:\n    - Kafka\n    - JAVA\n    - 学习笔记\ncategories: Kafka\ncopyright: true\ncomments: false\n---\n## Kafka创建背景\nkafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。\n\n## Kafka简介\nKafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。\n\nkafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。\n\n每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。\n\n## Kafka架构\n\n### 一、名词解释\n* **Broker**：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成\n* **Topic**：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic\n* **Partition**：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的\n* **Producer**：生产者，负责发布消息到broker\n* **Consumer**：消费者，从broker读取消息\n* **ConsumerGroup**：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息\n* **replica**：partition 的副本，保障 partition 的高可用。\n* **leader**：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。\n* **follower**：replica 中的一个角色，从 leader 中复制数据。\n* **controller**：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等\n* **zookeeper**：Kafka 通过 zookeeper 来存储集群的 meta 信息。\n\n### 二、架构图\n#### 总体数据流\n![](Kafka-Background/1.png)\nProducers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。\n\n#### 生产者\n![](Kafka-Background/2.png)\n①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。\n\n②调用send() 方法进行消息发送。\n\n③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。\n\n④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。\n\n⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。\n\n③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。\n\nkey的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区\n\n#### topic\n![](Kafka-Background/3.jpg)\n从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。\n\nTopic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。\n\n#### partition\n![](Kafka-Background/4.jpg)\n\n每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。\n\nkafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。\n\n分区的原因：\n\n* 方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;\n* 可以提高并发，因为可以以 Partition 为单位读写了。\n\n#### Replication\n同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。\n\n没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。\n\n引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。\n\n### 消费者\n![](Kafka-Background/5.jpeg)\n订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。\n\n同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，`就是一个partition，只能被消费组里的一个消费者消费`，但是可以同时被多个消费组消费。\n\n因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。\n\n### Kafka Zookeeper 节点\n![](Kafka-Background/6.png)\n\n\n## Kafka常见的应用场景\n#### 1.消息队列\n比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。\n\n#### 2.行为跟踪\n行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。\n\n#### 3.元信息监控\n与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。\n\n#### 4.日志收集\n日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。\n\n#### 5.流处理\n保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。\n\n#### 6.持久性日志（commit log）\nKafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。\n\n#### 7.事件源\n将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。\n\n`实际应用中，适用最多最广泛的自然是MQ的功能。`\n\n## Kafka用作MQ时与常用MQ的对比\n\n**RabbitMQ**——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。\n\n**ZeroMQ**——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，`介于应用层和传输层之间`（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。\n\n**RocketMQ**——阿里开源的一款高性能、高吞吐量的分布式消息中间件。\n\n**ActiveMQ**——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。\n\n\n特性 | Kafka | RabbitMQ | ZeroMQ | RocketMQ | ActiveMQ\n:-: | :-: | :-: | :-: | :-: | :-:\n开发语言 | Scala | Erlang | C | Java | Java\n支持协议 | 自行设计的基于TCP层的协议 | AMQP | TCP、UDP | 自行设计 | OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS\n消息存储 | 内存、磁盘、数据库。支持大量堆积。 | 内存、磁盘。支持少量堆积。 | 消息发送端的内存或者磁盘中。不支持持久化。 | 磁盘。支持大量堆积。 | 内存、磁盘、数据库。支持少量堆积。\n消息事务 | 支持 | 支持 | 不支持 | 支持 | 支持\n负载均衡\t| 支持 | 支持但支持的不好\t | 去中心化，不支持负载均衡。本身只是一个多线程网络库。 | 支持 | 支持，可以基于zookeeper实现\n集群方式 | 天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。 | 支持简单集群，’复制’模式，对高级集群模式支持不好。 | 去中心化，不支持集群。 | ‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master | 支持简单集群模式，比如’主-备’，对高级集群模式支持不好。\n可用性 | 非常高（分布式） | 高（主从） | 高 | 非常高（分布式） | 高（主从）\n消息重复 | 支持at least once、at most once | 支持at least once、at most once | 只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once | 支持at least once | 支持at least once\n吞吐量TPS | 极大 | 比较大 | 极大 | 大（发送端不是批量发送） | 比较大\n时效性 | ms以内 | us级 |   | ms级 | ms级\n订阅形式和消息分发 | 基于topic以及按照topic进行正则匹配的发布订阅模式。 | 提供了4种方式：direct, topic ,Headers和fanout。 | 点对点(p2p) | 基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式 | 点对点(p2p)、广播（发布-订阅）\n顺序消息 | 支持 | 不支持 | 不支持 | 支持 | 不支持\n消息确认 | 支持 | 支持 | 支持 | 支持 | 支持\n消息回溯\t| 支持指定分区offset位置的回溯 | 不支持 | 不支持 | 支持指定时间点的回溯 | 不支持\n消费失败重试 | 不支持，但可以通过指定分区offset位置实现。 | 不支持，但是可以利用消息确认机制实现。 | 不支持 | 支持 | 不支持\n并发度 | 高 | 极高 | 高 | 高 | 高\n资料文档 | 中。有kafka作者自己写的书，网上资料也有一些。 | 多。有一些不错的书，网上资料多。 | 少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。 | 少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。 | 多。没有专门写activemq的书，网上资料多。\n\n### 常用MQ的优缺点\n\n#### Kafka\n##### 优点\n* 性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。\n* 时效性：ms级\n* 可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用\n* 消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;\n* 有优秀的第三方Kafka Web管理界面Kafka-Manager；\n* 在日志领域比较成熟，被多家公司和多个开源项目使用；\n* 功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用\n\n##### 缺点\n* Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长\n* 使用短轮询方式，实时性取决于轮询间隔时间；\n* 消费失败不支持重试；\n* 支持消息顺序，但是一台代理宕机后，就会产生消息乱序；\n* 社区更新较慢；\n\n#### RabbitMQ\n##### 优点\n* 由于erlang语言的特性，mq 性能较好，高并发；\n* 吞吐量到万级，MQ功能比较完备 \n* 健壮、稳定、易用、跨平台、支持多种语言、文档齐全；\n* 开源提供的管理界面非常棒，用起来很好用\n* 社区活跃度高；\n\n##### 缺点\n* erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。\n* RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。\n* 需要学习比较复杂的接口和协议，学习和维护成本较高。\n\n#### ZeroMQ\n##### 优点\n* 吞吐量：百万级\n* 扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。\n\n##### 缺点\n* 原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。\n* 在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：十万级\n* 可用性：非常高，分布式架构\n* 消息可靠性：经过参数优化配置，消息可以做到0丢失\n* 功能支持：MQ功能较为完善，还是分布式的，扩展性好\n* 支持10亿级别的消息堆积，不会因为堆积导致性能下降\n* 源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控\n\n##### 缺点\n* 支持的客户端语言不多，目前是java及c++，其中c++不成熟；\n* 社区活跃度一般\n* MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码\n\n#### RocketMQ\n##### 优点\n* 单机吞吐量：万级\n* topic数量都吞吐量的影响：\n* 时效性：ms级\n* 可用性：高，基于主从架构实现高可用性\n* 消息可靠性：有较低的概率丢失数据\n* 功能支持：MQ领域的功能极其完备\n* 遵循JMS规范安装部署方便\n\n##### 缺点\n* 在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。\n* 官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。\n\n\n\n\n\n\n","slug":"Kafka-Background","published":1,"updated":"2019-07-11T03:26:47.383Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjgh0022jnfynxlgtd9t","content":"<h2 id=\"Kafka创建背景\"><a href=\"#Kafka创建背景\" class=\"headerlink\" title=\"Kafka创建背景\"></a>Kafka创建背景</h2><p>kafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。</p>\n<h2 id=\"Kafka简介\"><a href=\"#Kafka简介\" class=\"headerlink\" title=\"Kafka简介\"></a>Kafka简介</h2><p>Kafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。</p>\n<p>kafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。</p>\n<p>每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。</p>\n<h2 id=\"Kafka架构\"><a href=\"#Kafka架构\" class=\"headerlink\" title=\"Kafka架构\"></a>Kafka架构</h2><h3 id=\"一、名词解释\"><a href=\"#一、名词解释\" class=\"headerlink\" title=\"一、名词解释\"></a>一、名词解释</h3><ul>\n<li><strong>Broker</strong>：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成</li>\n<li><strong>Topic</strong>：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic</li>\n<li><strong>Partition</strong>：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的</li>\n<li><strong>Producer</strong>：生产者，负责发布消息到broker</li>\n<li><strong>Consumer</strong>：消费者，从broker读取消息</li>\n<li><strong>ConsumerGroup</strong>：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息</li>\n<li><strong>replica</strong>：partition 的副本，保障 partition 的高可用。</li>\n<li><strong>leader</strong>：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。</li>\n<li><strong>follower</strong>：replica 中的一个角色，从 leader 中复制数据。</li>\n<li><strong>controller</strong>：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等</li>\n<li><strong>zookeeper</strong>：Kafka 通过 zookeeper 来存储集群的 meta 信息。</li>\n</ul>\n<h3 id=\"二、架构图\"><a href=\"#二、架构图\" class=\"headerlink\" title=\"二、架构图\"></a>二、架构图</h3><h4 id=\"总体数据流\"><a href=\"#总体数据流\" class=\"headerlink\" title=\"总体数据流\"></a>总体数据流</h4><p><img src=\"/2019/05/25/Kafka-Background/1.png\" alt=\"\"><br>Producers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。</p>\n<h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p><img src=\"/2019/05/25/Kafka-Background/2.png\" alt=\"\"><br>①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。</p>\n<p>②调用send() 方法进行消息发送。</p>\n<p>③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。</p>\n<p>④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。</p>\n<p>⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。</p>\n<p>③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。</p>\n<p>key的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区</p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p><img src=\"/2019/05/25/Kafka-Background/3.jpg\" alt=\"\"><br>从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。</p>\n<p>Topic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。</p>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a>partition</h4><p><img src=\"/2019/05/25/Kafka-Background/4.jpg\" alt=\"\"></p>\n<p>每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。</p>\n<p>kafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。</p>\n<p>分区的原因：</p>\n<ul>\n<li>方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;</li>\n<li>可以提高并发，因为可以以 Partition 为单位读写了。</li>\n</ul>\n<h4 id=\"Replication\"><a href=\"#Replication\" class=\"headerlink\" title=\"Replication\"></a>Replication</h4><p>同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。</p>\n<p>没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。</p>\n<p>引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。</p>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p><img src=\"/2019/05/25/Kafka-Background/5.jpeg\" alt=\"\"><br>订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。</p>\n<p>同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，<code>就是一个partition，只能被消费组里的一个消费者消费</code>，但是可以同时被多个消费组消费。</p>\n<p>因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。</p>\n<h3 id=\"Kafka-Zookeeper-节点\"><a href=\"#Kafka-Zookeeper-节点\" class=\"headerlink\" title=\"Kafka Zookeeper 节点\"></a>Kafka Zookeeper 节点</h3><p><img src=\"/2019/05/25/Kafka-Background/6.png\" alt=\"\"></p>\n<h2 id=\"Kafka常见的应用场景\"><a href=\"#Kafka常见的应用场景\" class=\"headerlink\" title=\"Kafka常见的应用场景\"></a>Kafka常见的应用场景</h2><h4 id=\"1-消息队列\"><a href=\"#1-消息队列\" class=\"headerlink\" title=\"1.消息队列\"></a>1.消息队列</h4><p>比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。</p>\n<h4 id=\"2-行为跟踪\"><a href=\"#2-行为跟踪\" class=\"headerlink\" title=\"2.行为跟踪\"></a>2.行为跟踪</h4><p>行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。</p>\n<h4 id=\"3-元信息监控\"><a href=\"#3-元信息监控\" class=\"headerlink\" title=\"3.元信息监控\"></a>3.元信息监控</h4><p>与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。</p>\n<h4 id=\"4-日志收集\"><a href=\"#4-日志收集\" class=\"headerlink\" title=\"4.日志收集\"></a>4.日志收集</h4><p>日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。</p>\n<h4 id=\"5-流处理\"><a href=\"#5-流处理\" class=\"headerlink\" title=\"5.流处理\"></a>5.流处理</h4><p>保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。</p>\n<h4 id=\"6-持久性日志（commit-log）\"><a href=\"#6-持久性日志（commit-log）\" class=\"headerlink\" title=\"6.持久性日志（commit log）\"></a>6.持久性日志（commit log）</h4><p>Kafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。</p>\n<h4 id=\"7-事件源\"><a href=\"#7-事件源\" class=\"headerlink\" title=\"7.事件源\"></a>7.事件源</h4><p>将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。</p>\n<p><code>实际应用中，适用最多最广泛的自然是MQ的功能。</code></p>\n<h2 id=\"Kafka用作MQ时与常用MQ的对比\"><a href=\"#Kafka用作MQ时与常用MQ的对比\" class=\"headerlink\" title=\"Kafka用作MQ时与常用MQ的对比\"></a>Kafka用作MQ时与常用MQ的对比</h2><p><strong>RabbitMQ</strong>——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。</p>\n<p><strong>ZeroMQ</strong>——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，<code>介于应用层和传输层之间</code>（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。</p>\n<p><strong>RocketMQ</strong>——阿里开源的一款高性能、高吞吐量的分布式消息中间件。</p>\n<p><strong>ActiveMQ</strong>——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">Kafka</th>\n<th style=\"text-align:center\">RabbitMQ</th>\n<th style=\"text-align:center\">ZeroMQ</th>\n<th style=\"text-align:center\">RocketMQ</th>\n<th style=\"text-align:center\">ActiveMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">开发语言</td>\n<td style=\"text-align:center\">Scala</td>\n<td style=\"text-align:center\">Erlang</td>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">Java</td>\n<td style=\"text-align:center\">Java</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持协议</td>\n<td style=\"text-align:center\">自行设计的基于TCP层的协议</td>\n<td style=\"text-align:center\">AMQP</td>\n<td style=\"text-align:center\">TCP、UDP</td>\n<td style=\"text-align:center\">自行设计</td>\n<td style=\"text-align:center\">OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息存储</td>\n<td style=\"text-align:center\">内存、磁盘、数据库。支持大量堆积。</td>\n<td style=\"text-align:center\">内存、磁盘。支持少量堆积。</td>\n<td style=\"text-align:center\">消息发送端的内存或者磁盘中。不支持持久化。</td>\n<td style=\"text-align:center\">磁盘。支持大量堆积。</td>\n<td style=\"text-align:center\">内存、磁盘、数据库。支持少量堆积。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息事务</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">负载均衡</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持但支持的不好</td>\n<td style=\"text-align:center\">去中心化，不支持负载均衡。本身只是一个多线程网络库。</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持，可以基于zookeeper实现</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">集群方式</td>\n<td style=\"text-align:center\">天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。</td>\n<td style=\"text-align:center\">支持简单集群，’复制’模式，对高级集群模式支持不好。</td>\n<td style=\"text-align:center\">去中心化，不支持集群。</td>\n<td style=\"text-align:center\">‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master</td>\n<td style=\"text-align:center\">支持简单集群模式，比如’主-备’，对高级集群模式支持不好。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可用性</td>\n<td style=\"text-align:center\">非常高（分布式）</td>\n<td style=\"text-align:center\">高（主从）</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">非常高（分布式）</td>\n<td style=\"text-align:center\">高（主从）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息重复</td>\n<td style=\"text-align:center\">支持at least once、at most once</td>\n<td style=\"text-align:center\">支持at least once、at most once</td>\n<td style=\"text-align:center\">只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once</td>\n<td style=\"text-align:center\">支持at least once</td>\n<td style=\"text-align:center\">支持at least once</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">吞吐量TPS</td>\n<td style=\"text-align:center\">极大</td>\n<td style=\"text-align:center\">比较大</td>\n<td style=\"text-align:center\">极大</td>\n<td style=\"text-align:center\">大（发送端不是批量发送）</td>\n<td style=\"text-align:center\">比较大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">时效性</td>\n<td style=\"text-align:center\">ms以内</td>\n<td style=\"text-align:center\">us级</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ms级</td>\n<td style=\"text-align:center\">ms级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">订阅形式和消息分发</td>\n<td style=\"text-align:center\">基于topic以及按照topic进行正则匹配的发布订阅模式。</td>\n<td style=\"text-align:center\">提供了4种方式：direct, topic ,Headers和fanout。</td>\n<td style=\"text-align:center\">点对点(p2p)</td>\n<td style=\"text-align:center\">基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式</td>\n<td style=\"text-align:center\">点对点(p2p)、广播（发布-订阅）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">顺序消息</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息确认</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息回溯</td>\n<td style=\"text-align:center\">支持指定分区offset位置的回溯</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持指定时间点的回溯</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消费失败重试</td>\n<td style=\"text-align:center\">不支持，但可以通过指定分区offset位置实现。</td>\n<td style=\"text-align:center\">不支持，但是可以利用消息确认机制实现。</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">并发度</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">极高</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">资料文档</td>\n<td style=\"text-align:center\">中。有kafka作者自己写的书，网上资料也有一些。</td>\n<td style=\"text-align:center\">多。有一些不错的书，网上资料多。</td>\n<td style=\"text-align:center\">少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。</td>\n<td style=\"text-align:center\">少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。</td>\n<td style=\"text-align:center\">多。没有专门写activemq的书，网上资料多。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用MQ的优缺点\"><a href=\"#常用MQ的优缺点\" class=\"headerlink\" title=\"常用MQ的优缺点\"></a>常用MQ的优缺点</h3><h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。</li>\n<li>时效性：ms级</li>\n<li>可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</li>\n<li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;</li>\n<li>有优秀的第三方Kafka Web管理界面Kafka-Manager；</li>\n<li>在日志领域比较成熟，被多家公司和多个开源项目使用；</li>\n<li>功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li>\n<li>使用短轮询方式，实时性取决于轮询间隔时间；</li>\n<li>消费失败不支持重试；</li>\n<li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li>\n<li>社区更新较慢；</li>\n</ul>\n<h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>由于erlang语言的特性，mq 性能较好，高并发；</li>\n<li>吞吐量到万级，MQ功能比较完备 </li>\n<li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全；</li>\n<li>开源提供的管理界面非常棒，用起来很好用</li>\n<li>社区活跃度高；</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。</li>\n<li>RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。</li>\n<li>需要学习比较复杂的接口和协议，学习和维护成本较高。</li>\n</ul>\n<h4 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h4><h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>吞吐量：百万级</li>\n<li>扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。</li>\n</ul>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。</li>\n<li>在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。</li>\n</ul>\n<h4 id=\"RocketMQ\"><a href=\"#RocketMQ\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：十万级</li>\n<li>可用性：非常高，分布式架构</li>\n<li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li>\n<li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li>\n<li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li>\n<li>源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控</li>\n</ul>\n<h5 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>支持的客户端语言不多，目前是java及c++，其中c++不成熟；</li>\n<li>社区活跃度一般</li>\n<li>MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码</li>\n</ul>\n<h4 id=\"RocketMQ-1\"><a href=\"#RocketMQ-1\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：万级</li>\n<li>topic数量都吞吐量的影响：</li>\n<li>时效性：ms级</li>\n<li>可用性：高，基于主从架构实现高可用性</li>\n<li>消息可靠性：有较低的概率丢失数据</li>\n<li>功能支持：MQ领域的功能极其完备</li>\n<li>遵循JMS规范安装部署方便</li>\n</ul>\n<h5 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。</li>\n<li>官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Kafka创建背景\"><a href=\"#Kafka创建背景\" class=\"headerlink\" title=\"Kafka创建背景\"></a>Kafka创建背景</h2><p>kafka最初是LinkedIn的一个内部基础设施系统。最初开发的起因是，LinkedIn虽然有了数据库和其他系统可以用来存储数据，但是缺乏一个可以帮助处理持续数据流的组件。它的设计目的是提供一个高性能的消息系统，可以处理多种类型数据，并能够实时提供纯洁且结构化的用户活动数据和系统度量指标。</p>\n<h2 id=\"Kafka简介\"><a href=\"#Kafka简介\" class=\"headerlink\" title=\"Kafka简介\"></a>Kafka简介</h2><p>Kafka是由LinkedIn开发，使用Scala编写的一个分布式的消息系统，具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。</p>\n<p>kafka对外使用topic的概念，生产者往topic里写消息，消费者从读消息。为了做到水平扩展，一个topic实际是由多个partition组成的，遇到瓶颈时，可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。</p>\n<p>每新写一条消息，kafka就是在对应的文件append写，所以性能非常高。</p>\n<h2 id=\"Kafka架构\"><a href=\"#Kafka架构\" class=\"headerlink\" title=\"Kafka架构\"></a>Kafka架构</h2><h3 id=\"一、名词解释\"><a href=\"#一、名词解释\" class=\"headerlink\" title=\"一、名词解释\"></a>一、名词解释</h3><ul>\n<li><strong>Broker</strong>：消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成</li>\n<li><strong>Topic</strong>：Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic</li>\n<li><strong>Partition</strong>：物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的</li>\n<li><strong>Producer</strong>：生产者，负责发布消息到broker</li>\n<li><strong>Consumer</strong>：消费者，从broker读取消息</li>\n<li><strong>ConsumerGroup</strong>：每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息</li>\n<li><strong>replica</strong>：partition 的副本，保障 partition 的高可用。</li>\n<li><strong>leader</strong>：replica 中的一个角色， producer 和 consumer 只跟 leader 交互。</li>\n<li><strong>follower</strong>：replica 中的一个角色，从 leader 中复制数据。</li>\n<li><strong>controller</strong>：每个集群都有一个broker同时充当了集群控制器角色（自动从集群的活跃成员中选举出来），负责管理工作包括分配分区给broker，监控broker等等</li>\n<li><strong>zookeeper</strong>：Kafka 通过 zookeeper 来存储集群的 meta 信息。</li>\n</ul>\n<h3 id=\"二、架构图\"><a href=\"#二、架构图\" class=\"headerlink\" title=\"二、架构图\"></a>二、架构图</h3><h4 id=\"总体数据流\"><a href=\"#总体数据流\" class=\"headerlink\" title=\"总体数据流\"></a>总体数据流</h4><p><img src=\"/2019/05/25/Kafka-Background/1.png\" alt=\"\"><br>Producers往Brokers里面的指定Topic中写消息，Consumers从Brokers里面拉去指定Topic的消息，然后进行业务处理。</p>\n<h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p><img src=\"/2019/05/25/Kafka-Background/2.png\" alt=\"\"><br>①首先要构造一个 ProducerRecord 对象，该对象可以声明主题Topic、分区Partition、键 Key以及值 Value，主题和值是必须要声明的，分区和键可以不用指定。</p>\n<p>②调用send() 方法进行消息发送。</p>\n<p>③因为消息要到网络上进行传输，所以必须进行序列化，序列化器的作用就是把消息的 key 和 value对象序列化成字节数组。</p>\n<p>④接下来数据传到分区器，如果之间的 ProducerRecord 对象指定了分区，那么分区器将不再做任何事，直接把指定的分区返回；如果没有，那么分区器会根据 Key 来选择一个分区，选择好分区之后，生产者就知道该往哪个主题和分区发送记录了。</p>\n<p>⑤接着这条记录会被添加到一个记录批次里面，这个批次里所有的消息会被发送到相同的主题和分区。会有一个独立的线程来把这些记录批次发送到相应的 Broker 上。</p>\n<p>③Broker成功接收到消息，表示发送成功，返回消息的元数据（包括主题和分区信息以及记录在分区里的偏移量）。发送失败，可以选择重试或者直接抛出异常。</p>\n<p>key的作用：可以为消息的附加消息，也可以用来决定消息该被写到哪个主题分区，拥有相同key的消息将会被写到同一分区</p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p><img src=\"/2019/05/25/Kafka-Background/3.jpg\" alt=\"\"><br>从上图可以看出，Topic中数据是顺序不可变序列，采用log追加方式写入，因而kafka中无因随机写入导致性能低下的问题。</p>\n<p>Topic的数据可存储在多个partition中，即可存放在不同的服务器上。这可使Topic大小不限于一台server容量。同时，消息存在多个partition上，可以实现Topic上消息的并发访问。</p>\n<h4 id=\"partition\"><a href=\"#partition\" class=\"headerlink\" title=\"partition\"></a>partition</h4><p><img src=\"/2019/05/25/Kafka-Background/4.jpg\" alt=\"\"></p>\n<p>每个 Partition 中的消息都是有序的，生产的消息被不断追加到 Partition log 上，其中的每一个消息都被赋予了一个唯一的 offset 值。 因此数据不会因消费而丢失，所以只要consumer指定offset，一个消息可被不同的consumer多次消费。</p>\n<p>kafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序。</p>\n<p>分区的原因：</p>\n<ul>\n<li>方便在集群中扩展，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic 又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了;</li>\n<li>可以提高并发，因为可以以 Partition 为单位读写了。</li>\n</ul>\n<h4 id=\"Replication\"><a href=\"#Replication\" class=\"headerlink\" title=\"Replication\"></a>Replication</h4><p>同一个 partition 可能会有多个 replication(对应 server.properties 配置中的 default.replication.factor=N)。</p>\n<p>没有 replication 的情况下，一旦 broker 宕机，其上所有 patition 的数据都不可被消费，同时 producer 也不能再将数据存于其上的 patition。</p>\n<p>引入 replication 之 后，同一个 partition 可能会有多个 replication，而这时需要在这些 replication 之间选出一个 leader，producer 和 consumer 只与这个 leader 交互，其它 replication 作为 follower 从 leader 中复制数据。</p>\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p><img src=\"/2019/05/25/Kafka-Background/5.jpeg\" alt=\"\"><br>订阅topic是以一个消费组来订阅的，一个消费组里面可以有多个消费者。</p>\n<p>同一个消费组中的两个消费者，不会同时消费一个partition。换句话来说，<code>就是一个partition，只能被消费组里的一个消费者消费</code>，但是可以同时被多个消费组消费。</p>\n<p>因此，如果消费组内的消费者如果比partition多的话，那么就会有个别消费者一直空闲。</p>\n<h3 id=\"Kafka-Zookeeper-节点\"><a href=\"#Kafka-Zookeeper-节点\" class=\"headerlink\" title=\"Kafka Zookeeper 节点\"></a>Kafka Zookeeper 节点</h3><p><img src=\"/2019/05/25/Kafka-Background/6.png\" alt=\"\"></p>\n<h2 id=\"Kafka常见的应用场景\"><a href=\"#Kafka常见的应用场景\" class=\"headerlink\" title=\"Kafka常见的应用场景\"></a>Kafka常见的应用场景</h2><h4 id=\"1-消息队列\"><a href=\"#1-消息队列\" class=\"headerlink\" title=\"1.消息队列\"></a>1.消息队列</h4><p>比起大多数的消息系统来说，Kafka有更好的吞吐量，内置的分区，冗余及容错性，这让Kafka成为了一个很好的大规模消息处理应用的解决方案。 消息系统一般吞吐量相对较低，但是需要更小的端到端延时，并尝尝依赖于Kafka提供的强大的持久性保障。在这个领域，Kafka足以媲美传统消息系统， 如ActiveMQ或RabbitMQ。</p>\n<h4 id=\"2-行为跟踪\"><a href=\"#2-行为跟踪\" class=\"headerlink\" title=\"2.行为跟踪\"></a>2.行为跟踪</h4><p>行为跟踪是kafka基于发布订阅模式的扩展应用，当我们跟踪用户浏览页面、搜索及其他行为时，以发布-订阅的模式实时记录到对应的topic里那么这些结果被订阅者拿到后，就可以做进一步的实时处理，或实时监控，或放到hadoop/离线数据仓库里处理。</p>\n<h4 id=\"3-元信息监控\"><a href=\"#3-元信息监控\" class=\"headerlink\" title=\"3.元信息监控\"></a>3.元信息监控</h4><p>与行为跟踪相似，作为操作记录的监控模块来使用，即汇集记录一些操作信息，可以理解为运维性质的数据监控吧。</p>\n<h4 id=\"4-日志收集\"><a href=\"#4-日志收集\" class=\"headerlink\" title=\"4.日志收集\"></a>4.日志收集</h4><p>日志收集方面，其实开源产品有很多，包括Scribe、Apache Flume。很多人使用Kafka代替日志聚合（log aggregation）。日志聚合一般来说是从服务器上收集日志文件，然后放到一个集中的位置（文件服务器或分布式文件系统）进行处理。然而Kafka忽略掉文件的细节，将其更清晰地抽象成一个个日志或事件的消息流。这就让Kafka处理过程延迟更低，更容易支持多数据源和分布式数据处理。比其他系统Kafka具有更高的扩展性，高效的性能和因为复制导致的更高的耐用性保证，以及更低的端到端延迟。</p>\n<h4 id=\"5-流处理\"><a href=\"#5-流处理\" class=\"headerlink\" title=\"5.流处理\"></a>5.流处理</h4><p>保存收集上游的流数据，以提供到下游的Storm或其他流式计算框架进行处理。很多用户会将那些从原始topic来的数据进行阶段性处理，汇总，扩充或者以其他的方式转换到新的topic下再继续后面的处理。例如一个文章推荐的处理流程，可能是先从数据源中抓取文章的内容，然后将其丢入一个叫做“文章”的topic中；后续操作可能是需要对这个内容进行清理，比如回复正常数据或者删除重复数据，最后再将内容匹配的结果返还给用户。这就在一个独立的topic之外，产生了一系列的实时数据处理的流程。Strom和Samza是非常著名的实现这种类型数据转换的框架。</p>\n<h4 id=\"6-持久性日志（commit-log）\"><a href=\"#6-持久性日志（commit-log）\" class=\"headerlink\" title=\"6.持久性日志（commit log）\"></a>6.持久性日志（commit log）</h4><p>Kafka可以为一种外部的持久性日志的分布式系统提供服务。这种日志可以在节点之外进行持久性日志的记录，节点间备份数据，并为故障节点数据回复提供一种重新同步的机制。Kafka中提供了日志压缩功能，日志压缩之后整体的日志状态仍然保留，并且通过日志回溯可以实现持久性日志的功能。在这种用法中，Kafka类似于Apache BookKeeper项目。</p>\n<h4 id=\"7-事件源\"><a href=\"#7-事件源\" class=\"headerlink\" title=\"7.事件源\"></a>7.事件源</h4><p>将状态转移作为按时间顺序排列的记录序列，这种序列可以按时间回溯整个事件的状态变更，kafka本身的持久性，代表着他可以存储大量的日志，并且这些可以根据这些日志进行汇总和回溯等等。</p>\n<p><code>实际应用中，适用最多最广泛的自然是MQ的功能。</code></p>\n<h2 id=\"Kafka用作MQ时与常用MQ的对比\"><a href=\"#Kafka用作MQ时与常用MQ的对比\" class=\"headerlink\" title=\"Kafka用作MQ时与常用MQ的对比\"></a>Kafka用作MQ时与常用MQ的对比</h2><p><strong>RabbitMQ</strong>——Rabbit Message Queue的简写，但不能仅仅理解其为消息队列，消息代理更合适。 RabbitMQ是一个由Erlang 语言开发的AMQP（高级消息队列协议）的开源实现。 RabbitMQ作为一个消息代理，主要和消息打交道，负责接收并转发消息。</p>\n<p><strong>ZeroMQ</strong>——是一个基于消息队列的多线程网络库，其对套接字类型、连接处理、帧、甚至路由的底层细节进行抽象，提供跨越多种传输协议的套接字。是网络通信中新的一层，<code>介于应用层和传输层之间</code>（按照TCP/IP划分），其是一个可伸缩层，可并行运行，分散在分布式系统间。</p>\n<p><strong>RocketMQ</strong>——阿里开源的一款高性能、高吞吐量的分布式消息中间件。</p>\n<p><strong>ActiveMQ</strong>——是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">Kafka</th>\n<th style=\"text-align:center\">RabbitMQ</th>\n<th style=\"text-align:center\">ZeroMQ</th>\n<th style=\"text-align:center\">RocketMQ</th>\n<th style=\"text-align:center\">ActiveMQ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">开发语言</td>\n<td style=\"text-align:center\">Scala</td>\n<td style=\"text-align:center\">Erlang</td>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">Java</td>\n<td style=\"text-align:center\">Java</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持协议</td>\n<td style=\"text-align:center\">自行设计的基于TCP层的协议</td>\n<td style=\"text-align:center\">AMQP</td>\n<td style=\"text-align:center\">TCP、UDP</td>\n<td style=\"text-align:center\">自行设计</td>\n<td style=\"text-align:center\">OpenWire、STOMP、REST、MQTT、XMPP、AMQP、WS</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息存储</td>\n<td style=\"text-align:center\">内存、磁盘、数据库。支持大量堆积。</td>\n<td style=\"text-align:center\">内存、磁盘。支持少量堆积。</td>\n<td style=\"text-align:center\">消息发送端的内存或者磁盘中。不支持持久化。</td>\n<td style=\"text-align:center\">磁盘。支持大量堆积。</td>\n<td style=\"text-align:center\">内存、磁盘、数据库。支持少量堆积。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息事务</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">负载均衡</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持但支持的不好</td>\n<td style=\"text-align:center\">去中心化，不支持负载均衡。本身只是一个多线程网络库。</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持，可以基于zookeeper实现</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">集群方式</td>\n<td style=\"text-align:center\">天然的‘‘Leader-Slave’无状态集群，每台服务器既是Master也是Slave。</td>\n<td style=\"text-align:center\">支持简单集群，’复制’模式，对高级集群模式支持不好。</td>\n<td style=\"text-align:center\">去中心化，不支持集群。</td>\n<td style=\"text-align:center\">‘Master-Slave’ 模式，开源版本需手动切换Slave变成Master</td>\n<td style=\"text-align:center\">支持简单集群模式，比如’主-备’，对高级集群模式支持不好。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可用性</td>\n<td style=\"text-align:center\">非常高（分布式）</td>\n<td style=\"text-align:center\">高（主从）</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">非常高（分布式）</td>\n<td style=\"text-align:center\">高（主从）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息重复</td>\n<td style=\"text-align:center\">支持at least once、at most once</td>\n<td style=\"text-align:center\">支持at least once、at most once</td>\n<td style=\"text-align:center\">只有重传机制，但是没有持久化，消息丢了重传也没有用。既不是at least once、也不是at most once、更不是exactly only once</td>\n<td style=\"text-align:center\">支持at least once</td>\n<td style=\"text-align:center\">支持at least once</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">吞吐量TPS</td>\n<td style=\"text-align:center\">极大</td>\n<td style=\"text-align:center\">比较大</td>\n<td style=\"text-align:center\">极大</td>\n<td style=\"text-align:center\">大（发送端不是批量发送）</td>\n<td style=\"text-align:center\">比较大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">时效性</td>\n<td style=\"text-align:center\">ms以内</td>\n<td style=\"text-align:center\">us级</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ms级</td>\n<td style=\"text-align:center\">ms级</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">订阅形式和消息分发</td>\n<td style=\"text-align:center\">基于topic以及按照topic进行正则匹配的发布订阅模式。</td>\n<td style=\"text-align:center\">提供了4种方式：direct, topic ,Headers和fanout。</td>\n<td style=\"text-align:center\">点对点(p2p)</td>\n<td style=\"text-align:center\">基于topic/messageTag以及按照消息类型、属性进行正则匹配的发布订阅模式</td>\n<td style=\"text-align:center\">点对点(p2p)、广播（发布-订阅）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">顺序消息</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息确认</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息回溯</td>\n<td style=\"text-align:center\">支持指定分区offset位置的回溯</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持指定时间点的回溯</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消费失败重试</td>\n<td style=\"text-align:center\">不支持，但可以通过指定分区offset位置实现。</td>\n<td style=\"text-align:center\">不支持，但是可以利用消息确认机制实现。</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">并发度</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">极高</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">资料文档</td>\n<td style=\"text-align:center\">中。有kafka作者自己写的书，网上资料也有一些。</td>\n<td style=\"text-align:center\">多。有一些不错的书，网上资料多。</td>\n<td style=\"text-align:center\">少。没有专门写zeromq的书，网上的资料多是一些代码的实现和简单介绍。</td>\n<td style=\"text-align:center\">少。没有专门写rocketmq的书，网上的资料良莠不齐，官方文档很简洁，但是对技术细节没有过多的描述。</td>\n<td style=\"text-align:center\">多。没有专门写activemq的书，网上资料多。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用MQ的优缺点\"><a href=\"#常用MQ的优缺点\" class=\"headerlink\" title=\"常用MQ的优缺点\"></a>常用MQ的优缺点</h3><h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><h5 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。</li>\n<li>时效性：ms级</li>\n<li>可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</li>\n<li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;</li>\n<li>有优秀的第三方Kafka Web管理界面Kafka-Manager；</li>\n<li>在日志领域比较成熟，被多家公司和多个开源项目使用；</li>\n<li>功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</li>\n</ul>\n<h5 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长</li>\n<li>使用短轮询方式，实时性取决于轮询间隔时间；</li>\n<li>消费失败不支持重试；</li>\n<li>支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li>\n<li>社区更新较慢；</li>\n</ul>\n<h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><h5 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>由于erlang语言的特性，mq 性能较好，高并发；</li>\n<li>吞吐量到万级，MQ功能比较完备 </li>\n<li>健壮、稳定、易用、跨平台、支持多种语言、文档齐全；</li>\n<li>开源提供的管理界面非常棒，用起来很好用</li>\n<li>社区活跃度高；</li>\n</ul>\n<h5 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug，不利于做二次开发和维护。</li>\n<li>RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。</li>\n<li>需要学习比较复杂的接口和协议，学习和维护成本较高。</li>\n</ul>\n<h4 id=\"ZeroMQ\"><a href=\"#ZeroMQ\" class=\"headerlink\" title=\"ZeroMQ\"></a>ZeroMQ</h4><h5 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>吞吐量：百万级</li>\n<li>扩展性强，其他MQ都已经是成形的产品，已经是一款应用程序了。而ZeroMQ说白了就是一组库函数。</li>\n</ul>\n<h5 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>原生不支持持久化，仅支持相当有限的本地缓存，如需要消息持久化需要自己进行扩展。</li>\n<li>在高并发环境下不会出问题，但是有可能会导致本地的缓存区被塞满而导致消息丢失的情况。</li>\n</ul>\n<h4 id=\"RocketMQ\"><a href=\"#RocketMQ\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-3\"><a href=\"#优点-3\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：十万级</li>\n<li>可用性：非常高，分布式架构</li>\n<li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li>\n<li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li>\n<li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li>\n<li>源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控</li>\n</ul>\n<h5 id=\"缺点-3\"><a href=\"#缺点-3\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>支持的客户端语言不多，目前是java及c++，其中c++不成熟；</li>\n<li>社区活跃度一般</li>\n<li>MQ核心代码未遵循JMS规范，有些系统要迁移需要修改大量代码</li>\n</ul>\n<h4 id=\"RocketMQ-1\"><a href=\"#RocketMQ-1\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h4><h5 id=\"优点-4\"><a href=\"#优点-4\" class=\"headerlink\" title=\"优点\"></a>优点</h5><ul>\n<li>单机吞吐量：万级</li>\n<li>topic数量都吞吐量的影响：</li>\n<li>时效性：ms级</li>\n<li>可用性：高，基于主从架构实现高可用性</li>\n<li>消息可靠性：有较低的概率丢失数据</li>\n<li>功能支持：MQ领域的功能极其完备</li>\n<li>遵循JMS规范安装部署方便</li>\n</ul>\n<h5 id=\"缺点-4\"><a href=\"#缺点-4\" class=\"headerlink\" title=\"缺点\"></a>缺点</h5><ul>\n<li>在并发较多时，消费端只能接收一部分，会出现丢失消息情况，需重启消费端才能接收到那部分剩下的消息。</li>\n<li>官方社区现在对ActiveMQ 5.x维护越来越少，较少在大规模吞吐的场景中使用。</li>\n</ul>\n"},{"title":"Spring Boot + MyBatis 多模块项目搭建","date":"2019-06-02T07:30:04.000Z","copyright":true,"comments":0,"_content":"### 准备\n#### 开发工具及系统环境\n* IDE：IntelliJ IDEA 2019.1\n* 系统环境：mac OSX\n\n#### 项目目录结构\n* biz层：业务逻辑层\n* dao层：数据持久层，使用MB插件生成相关代码及xml\n* common层：提供工程层面的基础工具类。\n* web层：请求处理层\n\n### 搭建步骤\n\n#### 搭建父工程\n\n1、 IDEA 工具栏选择菜单 File -> New -> Project...\n![](Project-Module/1.png)\n2、选择Spring Initializr，Initializr默认选择Default，点击Next\n![](Project-Module/2.png)\n3、填写项目资料,点击Next\n![](Project-Module/3.png)\n4、直接点击Next\n![](Project-Module/4.png)\n5、填写name，点击Finish\n![](Project-Module/5.png)\n6、项目结构如下\n![](Project-Module/6.png)\n7、删除多余目录，只留如下结构\n![](Project-Module/7.png)\n\n#### 创建子模块\n8、选择项目根目录,右键->New -> Module\n![](Project-Module/8.png)\n9、选择Maven，点击Next\n![](Project-Module/9.png)\n10、填写ArifactId，点击Next\n![](Project-Module/10.png)\n11、点击Finish\n![](Project-Module/11.png)\n12、同理添加其他子模块，最终项目目录结构如下图\n![](Project-Module/12.png)\n\n#### 模块间依赖关系\n\n各个子模块的依赖关系：\n* biz层：依赖dao层，common层\n* dao层：不依赖\n* common层：不依赖\n* web层：依赖biz层，common层。\n\n13、父pom文件中声明所有子模块依赖\n```xml\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n14、biz层pom文件中添加dao层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>dao</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n15、web层pom文件中添加biz层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>biz</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n#### 运行项目\n16、在web层pom文件中添加spring-boot-starter-web\n```xml\n        <!-- spring-boot -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n\n17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下\n![](Project-Module/17.png)\n入口类代码如下：\n```java\n\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n\n```\n18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return \"Hello World!\";\n    }\n}\n```\n\n19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/19.png)\n\n20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：\n```java\npackage com.example.test.demo.biz;\n\npublic interface DemoService {\n    String test();\n}\n\n```\n\n21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Override\n    public String test() {\n        return \"biz test\";\n    }\n}\n```\n\n22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return demoService.test();\n    }\n}\n```\n\n23、在入口类AppServiceApplication上添加@ComponentScan注解\n```java\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n@ComponentScan(basePackages = {\n        \"com.example.test.demo.*\"\n})\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n```\n\n24、更改完之后运行main方法，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/24.png)\n\n25、其他层同理验证。\n\n#### 集成Mybatis\n\n26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>pom</packaging>\n    <modules>\n        <module>biz</module>\n        <module>dao</module>\n        <module>common</module>\n        <module>web</module>\n    </modules>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example.test</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <mysql-connector.version>8.0.11</mysql-connector.version>\n        <mybatis.version>1.3.2</mybatis.version>\n        <mybatis.generator.version>1.3.2</mybatis.generator.version>\n    </properties>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                </plugin>\n                <!--mybatis-->\n                <plugin>\n                    <groupId>org.mybatis.generator</groupId>\n                    <artifactId>mybatis-generator-maven-plugin</artifactId>\n                    <version>${mybatis.generator.version}</version>\n                    <dependencies>\n                        <dependency>\n                            <groupId>mysql</groupId>\n                            <artifactId>mysql-connector-java</artifactId>\n                            <version>${mysql-connector.version}</version>\n                        </dependency>\n                        <dependency>\n                            <groupId>org.mybatis.generator</groupId>\n                            <artifactId>mybatis-generator-core</artifactId>\n                            <version>${mybatis.generator.version}</version>\n                        </dependency>\n                    </dependencies>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n    </build>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter</artifactId>\n            </dependency>\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-test</artifactId>\n                <scope>test</scope>\n            </dependency>\n\n            <!--mybatis-->\n            <dependency>\n                <groupId>org.mybatis.spring.boot</groupId>\n                <artifactId>mybatis-spring-boot-starter</artifactId>\n                <version>${mybatis.version}</version>\n            </dependency>\n\n            <!-- mysql -->\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>${mysql-connector.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n\n```\n27、在dao层中的pom文件中添加以下依赖\n```xml\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <configuration>\n                    <configurationFile>${basedir}/src/main/resources/mybatis-generator.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n28、在web/src/main/resources下添加application.properties\n\n* **com.mysql.jdbc.Driver** 是 mysql-connector-java 5中的\n* **com.mysql.cj.jdbc.Driver** 是 mysql-connector-java 6中的\n\n```properties\nspring.datasource.driverClassName = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF8&connectTimeout=1000&socketTimeout=3000\nspring.datasource.username = root\nspring.datasource.password = qwertyui\n\nmybatis.type-aliases-package = com.example.test.demo.dao.po\nmybatis.mapper-locations = classpath:mapper/*.xml\n```\n29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!-- 引入SpringBoot配置文件 -->\n    <properties resource=\"application.properties\"/>\n\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n        <!-- 生成的pojo，将implements Serializable-->\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\"/>\n\n        <commentGenerator>\n            <!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否-->\n            <property name=\"suppressDate\" value=\"true\" />\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"${spring.datasource.driverClassName}\"\n                        connectionURL=\"${spring.datasource.url}\"\n                        userId=\"${spring.datasource.username}\"\n                        password=\"${spring.datasource.password}\">\n        </jdbcConnection>\n\n        <!--\n       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，\n       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下\n       -->\n        <javaModelGenerator targetPackage=\"com.example.test.demo.dao.po\" targetProject=\"../dao/src/main/java\" >\n            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n\n        <!--对应的mapper.xml文件 -->\n        <sqlMapGenerator targetPackage=\"mapper\"\n                         targetProject=\"../dao/src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n\n        <!-- 对应的Mapper接口类文件 -->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.example.test.demo.dao.mapper\"\n                             targetProject=\"../dao/src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n\n        <!-- 表名及对应po类名称-->\n        <table tableName=\"user_info\" domainObjectName=\"UserInfoPO\"\n               enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\"\n               enableSelectByExample=\"true\" selectByExampleQueryId=\"false\">\n            <property name=\"useActualColumnNames\" value=\"false\"/>\n            <generatedKey column=\"id\" identity=\"true\" sqlStatement=\"MySql\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\n30、根据表自动生成对应的Mapper以及po类,步骤如下。\n![](Project-Module/30.1.png)\n得到目录如下\n![](Project-Module/30.2.png)\n\n30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport com.example.test.demo.dao.mapper.UserInfoPOMapper;\nimport com.example.test.demo.dao.po.UserInfoPO;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Autowired\n    private UserInfoPOMapper userInfoPOMapper;\n\n    @Override\n    public String test() {\n        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(1L);\n        return \"UserInfo name is:\" + po.getName();\n    }\n}\n```\n31、在入口类AppServiceApplication上中添加注解\n```java\n@MapperScan(\"com.example.test.demo.dao.mapper\")\n```\n32、运行main方法启动项目\n![](Project-Module/32.png)\n\n### 遇到的坑\nmybatis 自动生成时遇到\n> Client does not support authentication protocol requested by server; consider upgrading MySQL client\n\n解决方法登录mysql：\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwertyui';\nSELECT plugin FROM mysql.user WHERE User = 'root';\n```","source":"_posts/Project-Module.md","raw":"---\ntitle: Spring Boot + MyBatis 多模块项目搭建\ndate: 2019-06-02 15:30:04\ntags:\n    - MyBatis\n    - 教程\n    - Spring Boot\ncategories: 项目搭建\ncopyright: true\ncomments: false\n---\n### 准备\n#### 开发工具及系统环境\n* IDE：IntelliJ IDEA 2019.1\n* 系统环境：mac OSX\n\n#### 项目目录结构\n* biz层：业务逻辑层\n* dao层：数据持久层，使用MB插件生成相关代码及xml\n* common层：提供工程层面的基础工具类。\n* web层：请求处理层\n\n### 搭建步骤\n\n#### 搭建父工程\n\n1、 IDEA 工具栏选择菜单 File -> New -> Project...\n![](Project-Module/1.png)\n2、选择Spring Initializr，Initializr默认选择Default，点击Next\n![](Project-Module/2.png)\n3、填写项目资料,点击Next\n![](Project-Module/3.png)\n4、直接点击Next\n![](Project-Module/4.png)\n5、填写name，点击Finish\n![](Project-Module/5.png)\n6、项目结构如下\n![](Project-Module/6.png)\n7、删除多余目录，只留如下结构\n![](Project-Module/7.png)\n\n#### 创建子模块\n8、选择项目根目录,右键->New -> Module\n![](Project-Module/8.png)\n9、选择Maven，点击Next\n![](Project-Module/9.png)\n10、填写ArifactId，点击Next\n![](Project-Module/10.png)\n11、点击Finish\n![](Project-Module/11.png)\n12、同理添加其他子模块，最终项目目录结构如下图\n![](Project-Module/12.png)\n\n#### 模块间依赖关系\n\n各个子模块的依赖关系：\n* biz层：依赖dao层，common层\n* dao层：不依赖\n* common层：不依赖\n* web层：依赖biz层，common层。\n\n13、父pom文件中声明所有子模块依赖\n```xml\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n14、biz层pom文件中添加dao层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>dao</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n15、web层pom文件中添加biz层，common层依赖\n```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>biz</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.example.test</groupId>\n            <artifactId>common</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n#### 运行项目\n16、在web层pom文件中添加spring-boot-starter-web\n```xml\n        <!-- spring-boot -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n\n17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下\n![](Project-Module/17.png)\n入口类代码如下：\n```java\n\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n\n```\n18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return \"Hello World!\";\n    }\n}\n```\n\n19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/19.png)\n\n20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：\n```java\npackage com.example.test.demo.biz;\n\npublic interface DemoService {\n    String test();\n}\n\n```\n\n21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Override\n    public String test() {\n        return \"biz test\";\n    }\n}\n```\n\n22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：\n```java\npackage com.example.test.demo.web.controller;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"demo\")\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"test\")\n    public String test() {\n        return demoService.test();\n    }\n}\n```\n\n23、在入口类AppServiceApplication上添加@ComponentScan注解\n```java\npackage com.example.test.demo.web;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n@ComponentScan(basePackages = {\n        \"com.example.test.demo.*\"\n})\npublic class AppServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AppServiceApplication.class, args);\n    }\n}\n```\n\n24、更改完之后运行main方法，访问http://localhost:8080/demo/test得到如下效果\n![](Project-Module/24.png)\n\n25、其他层同理验证。\n\n#### 集成Mybatis\n\n26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>pom</packaging>\n    <modules>\n        <module>biz</module>\n        <module>dao</module>\n        <module>common</module>\n        <module>web</module>\n    </modules>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.1.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.example.test</groupId>\n    <artifactId>demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>demo</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <mysql-connector.version>8.0.11</mysql-connector.version>\n        <mybatis.version>1.3.2</mybatis.version>\n        <mybatis.generator.version>1.3.2</mybatis.generator.version>\n    </properties>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                </plugin>\n                <!--mybatis-->\n                <plugin>\n                    <groupId>org.mybatis.generator</groupId>\n                    <artifactId>mybatis-generator-maven-plugin</artifactId>\n                    <version>${mybatis.generator.version}</version>\n                    <dependencies>\n                        <dependency>\n                            <groupId>mysql</groupId>\n                            <artifactId>mysql-connector-java</artifactId>\n                            <version>${mysql-connector.version}</version>\n                        </dependency>\n                        <dependency>\n                            <groupId>org.mybatis.generator</groupId>\n                            <artifactId>mybatis-generator-core</artifactId>\n                            <version>${mybatis.generator.version}</version>\n                        </dependency>\n                    </dependencies>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n    </build>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>biz</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>common</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>dao</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.example.test</groupId>\n                <artifactId>web</artifactId>\n                <version>${project.version}</version>\n            </dependency>\n\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter</artifactId>\n            </dependency>\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-test</artifactId>\n                <scope>test</scope>\n            </dependency>\n\n            <!--mybatis-->\n            <dependency>\n                <groupId>org.mybatis.spring.boot</groupId>\n                <artifactId>mybatis-spring-boot-starter</artifactId>\n                <version>${mybatis.version}</version>\n            </dependency>\n\n            <!-- mysql -->\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>${mysql-connector.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n</project>\n\n```\n27、在dao层中的pom文件中添加以下依赖\n```xml\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <configuration>\n                    <configurationFile>${basedir}/src/main/resources/mybatis-generator.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n28、在web/src/main/resources下添加application.properties\n\n* **com.mysql.jdbc.Driver** 是 mysql-connector-java 5中的\n* **com.mysql.cj.jdbc.Driver** 是 mysql-connector-java 6中的\n\n```properties\nspring.datasource.driverClassName = com.mysql.cj.jdbc.Driver\nspring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF8&connectTimeout=1000&socketTimeout=3000\nspring.datasource.username = root\nspring.datasource.password = qwertyui\n\nmybatis.type-aliases-package = com.example.test.demo.dao.po\nmybatis.mapper-locations = classpath:mapper/*.xml\n```\n29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <!-- 引入SpringBoot配置文件 -->\n    <properties resource=\"application.properties\"/>\n\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n        <!-- 生成的pojo，将implements Serializable-->\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\"/>\n\n        <commentGenerator>\n            <!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否-->\n            <property name=\"suppressDate\" value=\"true\" />\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"${spring.datasource.driverClassName}\"\n                        connectionURL=\"${spring.datasource.url}\"\n                        userId=\"${spring.datasource.username}\"\n                        password=\"${spring.datasource.password}\">\n        </jdbcConnection>\n\n        <!--\n       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，\n       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下\n       -->\n        <javaModelGenerator targetPackage=\"com.example.test.demo.dao.po\" targetProject=\"../dao/src/main/java\" >\n            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->\n            <property name=\"enableSubPackages\" value=\"true\"/>\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n\n        <!--对应的mapper.xml文件 -->\n        <sqlMapGenerator targetPackage=\"mapper\"\n                         targetProject=\"../dao/src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </sqlMapGenerator>\n\n        <!-- 对应的Mapper接口类文件 -->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.example.test.demo.dao.mapper\"\n                             targetProject=\"../dao/src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\"/>\n        </javaClientGenerator>\n\n        <!-- 表名及对应po类名称-->\n        <table tableName=\"user_info\" domainObjectName=\"UserInfoPO\"\n               enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\"\n               enableSelectByExample=\"true\" selectByExampleQueryId=\"false\">\n            <property name=\"useActualColumnNames\" value=\"false\"/>\n            <generatedKey column=\"id\" identity=\"true\" sqlStatement=\"MySql\"/>\n        </table>\n    </context>\n</generatorConfiguration>\n```\n30、根据表自动生成对应的Mapper以及po类,步骤如下。\n![](Project-Module/30.1.png)\n得到目录如下\n![](Project-Module/30.2.png)\n\n30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：\n```java\npackage com.example.test.demo.biz.impl;\n\n\nimport com.example.test.demo.biz.DemoService;\nimport com.example.test.demo.dao.mapper.UserInfoPOMapper;\nimport com.example.test.demo.dao.po.UserInfoPO;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class DemoServiceImpl implements DemoService {\n\n    @Autowired\n    private UserInfoPOMapper userInfoPOMapper;\n\n    @Override\n    public String test() {\n        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(1L);\n        return \"UserInfo name is:\" + po.getName();\n    }\n}\n```\n31、在入口类AppServiceApplication上中添加注解\n```java\n@MapperScan(\"com.example.test.demo.dao.mapper\")\n```\n32、运行main方法启动项目\n![](Project-Module/32.png)\n\n### 遇到的坑\nmybatis 自动生成时遇到\n> Client does not support authentication protocol requested by server; consider upgrading MySQL client\n\n解决方法登录mysql：\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwertyui';\nSELECT plugin FROM mysql.user WHERE User = 'root';\n```","slug":"Project-Module","published":1,"updated":"2019-07-08T13:04:08.038Z","layout":"post","photos":[],"link":"","_id":"cjxyaqjgi0023jnfyfv49rs80","content":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"开发工具及系统环境\"><a href=\"#开发工具及系统环境\" class=\"headerlink\" title=\"开发工具及系统环境\"></a>开发工具及系统环境</h4><ul>\n<li>IDE：IntelliJ IDEA 2019.1</li>\n<li>系统环境：mac OSX</li>\n</ul>\n<h4 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h4><ul>\n<li>biz层：业务逻辑层</li>\n<li>dao层：数据持久层，使用MB插件生成相关代码及xml</li>\n<li>common层：提供工程层面的基础工具类。</li>\n<li>web层：请求处理层</li>\n</ul>\n<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3><h4 id=\"搭建父工程\"><a href=\"#搭建父工程\" class=\"headerlink\" title=\"搭建父工程\"></a>搭建父工程</h4><p>1、 IDEA 工具栏选择菜单 File -&gt; New -&gt; Project…<br><img src=\"/2019/06/02/Project-Module/1.png\" alt=\"\"><br>2、选择Spring Initializr，Initializr默认选择Default，点击Next<br><img src=\"/2019/06/02/Project-Module/2.png\" alt=\"\"><br>3、填写项目资料,点击Next<br><img src=\"/2019/06/02/Project-Module/3.png\" alt=\"\"><br>4、直接点击Next<br><img src=\"/2019/06/02/Project-Module/4.png\" alt=\"\"><br>5、填写name，点击Finish<br><img src=\"/2019/06/02/Project-Module/5.png\" alt=\"\"><br>6、项目结构如下<br><img src=\"/2019/06/02/Project-Module/6.png\" alt=\"\"><br>7、删除多余目录，只留如下结构<br><img src=\"/2019/06/02/Project-Module/7.png\" alt=\"\"></p>\n<h4 id=\"创建子模块\"><a href=\"#创建子模块\" class=\"headerlink\" title=\"创建子模块\"></a>创建子模块</h4><p>8、选择项目根目录,右键-&gt;New -&gt; Module<br><img src=\"/2019/06/02/Project-Module/8.png\" alt=\"\"><br>9、选择Maven，点击Next<br><img src=\"/2019/06/02/Project-Module/9.png\" alt=\"\"><br>10、填写ArifactId，点击Next<br><img src=\"/2019/06/02/Project-Module/10.png\" alt=\"\"><br>11、点击Finish<br><img src=\"/2019/06/02/Project-Module/11.png\" alt=\"\"><br>12、同理添加其他子模块，最终项目目录结构如下图<br><img src=\"/2019/06/02/Project-Module/12.png\" alt=\"\"></p>\n<h4 id=\"模块间依赖关系\"><a href=\"#模块间依赖关系\" class=\"headerlink\" title=\"模块间依赖关系\"></a>模块间依赖关系</h4><p>各个子模块的依赖关系：</p>\n<ul>\n<li>biz层：依赖dao层，common层</li>\n<li>dao层：不依赖</li>\n<li>common层：不依赖</li>\n<li>web层：依赖biz层，common层。</li>\n</ul>\n<p>13、父pom文件中声明所有子模块依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>14、biz层pom文件中添加dao层，common层依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>15、web层pom文件中添加biz层，common层依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><p>16、在web层pom文件中添加spring-boot-starter-web<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring-boot --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下<br><img src=\"/2019/06/02/Project-Module/17.png\" alt=\"\"><br>入口类代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/19.png\" alt=\"\"></p>\n<p>20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"biz test\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>23、在入口类AppServiceApplication上添加@ComponentScan注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"com.example.test.demo.*\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>24、更改完之后运行main方法，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/24.png\" alt=\"\"></p>\n<p>25、其他层同理验证。</p>\n<h4 id=\"集成Mybatis\"><a href=\"#集成Mybatis\" class=\"headerlink\" title=\"集成Mybatis\"></a>集成Mybatis</h4><p>26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mysql-connector.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql-connector.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.generator.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.generator.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>27、在dao层中的pom文件中添加以下依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/mybatis-generator.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>28、在web/src/main/resources下添加application.properties</p>\n<ul>\n<li><strong>com.mysql.jdbc.Driver</strong> 是 mysql-connector-java 5中的</li>\n<li><strong>com.mysql.cj.jdbc.Driver</strong> 是 mysql-connector-java 6中的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8&amp;connectTimeout=1000&amp;socketTimeout=3000</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = qwertyui</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis.type-aliases-package = com.example.test.demo.dao.po</span><br><span class=\"line\">mybatis.mapper-locations = classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>\n<p>29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入SpringBoot配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"application.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span> <span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.generator.plugins.SerializablePlugin\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;spring.datasource.driverClassName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;spring.datasource.url&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;spring.datasource.username&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;spring.datasource.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，</span></span><br><span class=\"line\"><span class=\"comment\">       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.po\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--对应的mapper.xml文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/resources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对应的Mapper接口类文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                             <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表名及对应po类名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"user_info\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"UserInfoPO\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"MySql\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>30、根据表自动生成对应的Mapper以及po类,步骤如下。<br><img src=\"/2019/06/02/Project-Module/30.1.png\" alt=\"\"><br>得到目录如下<br><img src=\"/2019/06/02/Project-Module/30.2.png\" alt=\"\"></p>\n<p>30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.mapper.UserInfoPOMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.po.UserInfoPO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserInfoPOMapper userInfoPOMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"UserInfo name is:\"</span> + po.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>31、在入口类AppServiceApplication上中添加注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>32、运行main方法启动项目<br><img src=\"/2019/06/02/Project-Module/32.png\" alt=\"\"></p>\n<h3 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h3><p>mybatis 自动生成时遇到</p>\n<blockquote>\n<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>\n</blockquote>\n<p>解决方法登录mysql：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'qwertyui'</span>;</span><br><span class=\"line\">SELECT plugin FROM mysql.user WHERE User = <span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"开发工具及系统环境\"><a href=\"#开发工具及系统环境\" class=\"headerlink\" title=\"开发工具及系统环境\"></a>开发工具及系统环境</h4><ul>\n<li>IDE：IntelliJ IDEA 2019.1</li>\n<li>系统环境：mac OSX</li>\n</ul>\n<h4 id=\"项目目录结构\"><a href=\"#项目目录结构\" class=\"headerlink\" title=\"项目目录结构\"></a>项目目录结构</h4><ul>\n<li>biz层：业务逻辑层</li>\n<li>dao层：数据持久层，使用MB插件生成相关代码及xml</li>\n<li>common层：提供工程层面的基础工具类。</li>\n<li>web层：请求处理层</li>\n</ul>\n<h3 id=\"搭建步骤\"><a href=\"#搭建步骤\" class=\"headerlink\" title=\"搭建步骤\"></a>搭建步骤</h3><h4 id=\"搭建父工程\"><a href=\"#搭建父工程\" class=\"headerlink\" title=\"搭建父工程\"></a>搭建父工程</h4><p>1、 IDEA 工具栏选择菜单 File -&gt; New -&gt; Project…<br><img src=\"/2019/06/02/Project-Module/1.png\" alt=\"\"><br>2、选择Spring Initializr，Initializr默认选择Default，点击Next<br><img src=\"/2019/06/02/Project-Module/2.png\" alt=\"\"><br>3、填写项目资料,点击Next<br><img src=\"/2019/06/02/Project-Module/3.png\" alt=\"\"><br>4、直接点击Next<br><img src=\"/2019/06/02/Project-Module/4.png\" alt=\"\"><br>5、填写name，点击Finish<br><img src=\"/2019/06/02/Project-Module/5.png\" alt=\"\"><br>6、项目结构如下<br><img src=\"/2019/06/02/Project-Module/6.png\" alt=\"\"><br>7、删除多余目录，只留如下结构<br><img src=\"/2019/06/02/Project-Module/7.png\" alt=\"\"></p>\n<h4 id=\"创建子模块\"><a href=\"#创建子模块\" class=\"headerlink\" title=\"创建子模块\"></a>创建子模块</h4><p>8、选择项目根目录,右键-&gt;New -&gt; Module<br><img src=\"/2019/06/02/Project-Module/8.png\" alt=\"\"><br>9、选择Maven，点击Next<br><img src=\"/2019/06/02/Project-Module/9.png\" alt=\"\"><br>10、填写ArifactId，点击Next<br><img src=\"/2019/06/02/Project-Module/10.png\" alt=\"\"><br>11、点击Finish<br><img src=\"/2019/06/02/Project-Module/11.png\" alt=\"\"><br>12、同理添加其他子模块，最终项目目录结构如下图<br><img src=\"/2019/06/02/Project-Module/12.png\" alt=\"\"></p>\n<h4 id=\"模块间依赖关系\"><a href=\"#模块间依赖关系\" class=\"headerlink\" title=\"模块间依赖关系\"></a>模块间依赖关系</h4><p>各个子模块的依赖关系：</p>\n<ul>\n<li>biz层：依赖dao层，common层</li>\n<li>dao层：不依赖</li>\n<li>common层：不依赖</li>\n<li>web层：依赖biz层，common层。</li>\n</ul>\n<p>13、父pom文件中声明所有子模块依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>14、biz层pom文件中添加dao层，common层依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>15、web层pom文件中添加biz层，common层依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><p>16、在web层pom文件中添加spring-boot-starter-web<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring-boot --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>17、在web层创建com.example.test.demo.web包并添加入口类AppServiceApplication.java，目录结构如下<br><img src=\"/2019/06/02/Project-Module/17.png\" alt=\"\"><br>入口类代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>18、在com.example.test.demo.web包下创建controller目录添加test方法测试接口是否可以正常访问<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World!\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>19、运行AppServiceApplication中的main方法启动项目，默认端口为8080，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/19.png\" alt=\"\"></p>\n<p>20、在biz层创建com.example.test.demo.biz包并创建DemoService接口类代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>21、在com.example.test.demo.biz包下创建impl目录并添加DemoServiceImpl类，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"biz test\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>22、DemoController类通过@Autowired注解注入DemoService，修改DemoController的test方法，代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"demo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>23、在入口类AppServiceApplication上添加@ComponentScan注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"com.example.test.demo.*\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppServiceApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AppServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>24、更改完之后运行main方法，访问<a href=\"http://localhost:8080/demo/test得到如下效果\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/demo/test得到如下效果</a><br><img src=\"/2019/06/02/Project-Module/24.png\" alt=\"\"></p>\n<p>25、其他层同理验证。</p>\n<h4 id=\"集成Mybatis\"><a href=\"#集成Mybatis\" class=\"headerlink\" title=\"集成Mybatis\"></a>集成Mybatis</h4><p>26、父pom文件中声明mybatis-spring-boot-starter、mysql-connector-java等依赖。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mysql-connector.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql-connector.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mybatis.generator.version</span>&gt;</span>1.3.2<span class=\"tag\">&lt;/<span class=\"name\">mybatis.generator.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.generator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>biz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dao<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example.test<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--mybatis--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- mysql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mysql-connector.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>27、在dao层中的pom文件中添加以下依赖<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/mybatis-generator.xml<span class=\"tag\">&lt;/<span class=\"name\">configurationFile</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>28、在web/src/main/resources下添加application.properties</p>\n<ul>\n<li><strong>com.mysql.jdbc.Driver</strong> 是 mysql-connector-java 5中的</li>\n<li><strong>com.mysql.cj.jdbc.Driver</strong> 是 mysql-connector-java 6中的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">spring.datasource.url = jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8&amp;connectTimeout=1000&amp;socketTimeout=3000</span><br><span class=\"line\">spring.datasource.username = root</span><br><span class=\"line\">spring.datasource.password = qwertyui</span><br><span class=\"line\"></span><br><span class=\"line\">mybatis.type-aliases-package = com.example.test.demo.dao.po</span><br><span class=\"line\">mybatis.mapper-locations = classpath:mapper/*.xml</span><br></pre></td></tr></table></figure>\n<p>29、在web/src/main/resources下添加mybatis-generator.xml配置内容如下<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入SpringBoot配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"application.properties\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Mysql\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span> <span class=\"attr\">defaultModelType</span>=<span class=\"string\">\"flat\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 生成的pojo，将implements Serializable--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.generator.plugins.SerializablePlugin\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--*是否去除自动生成的注释包含时间戳 true：是 ： false:否--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;spring.datasource.driverClassName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;spring.datasource.url&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;spring.datasource.username&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                        <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;spring.datasource.password&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">       生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，</span></span><br><span class=\"line\"><span class=\"comment\">       也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.po\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--对应的mapper.xml文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                         <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/resources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对应的Mapper接口类文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                             <span class=\"attr\">targetProject</span>=<span class=\"string\">\"../dao/src/main/java\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 表名及对应po类名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"user_info\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"UserInfoPO\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">selectByExampleQueryId</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"MySql\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>30、根据表自动生成对应的Mapper以及po类,步骤如下。<br><img src=\"/2019/06/02/Project-Module/30.1.png\" alt=\"\"><br>得到目录如下<br><img src=\"/2019/06/02/Project-Module/30.2.png\" alt=\"\"></p>\n<p>30、biz层下DemoServiceImpl通过@Autowired注解注入UserMapper，修改DemoService的test方法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test.demo.biz.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.biz.DemoService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.mapper.UserInfoPOMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.test.demo.dao.po.UserInfoPO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserInfoPOMapper userInfoPOMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UserInfoPO po = userInfoPOMapper.selectByPrimaryKey(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"UserInfo name is:\"</span> + po.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>31、在入口类AppServiceApplication上中添加注解<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapperScan</span>(<span class=\"string\">\"com.example.test.demo.dao.mapper\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>32、运行main方法启动项目<br><img src=\"/2019/06/02/Project-Module/32.png\" alt=\"\"></p>\n<h3 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h3><p>mybatis 自动生成时遇到</p>\n<blockquote>\n<p>Client does not support authentication protocol requested by server; consider upgrading MySQL client</p>\n</blockquote>\n<p>解决方法登录mysql：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'qwertyui'</span>;</span><br><span class=\"line\">SELECT plugin FROM mysql.user WHERE User = <span class=\"string\">'root'</span>;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/Github-Pages-Blog/comment-delete.png","slug":"comment-delete.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/github-pages.png","slug":"github-pages.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/setting.png","slug":"setting.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/create-repository.png","slug":"create-repository.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/valine.png","slug":"valine.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-Background/2.png","slug":"2.png","post":"cjxyaqjgh0022jnfynxlgtd9t","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-Background/4.jpg","slug":"4.jpg","post":"cjxyaqjgh0022jnfynxlgtd9t","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/blog-icon.png","slug":"blog-icon.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/categories.png","slug":"categories.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/change-theme.png","slug":"change-theme.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/copy-url.png","slug":"copy-url.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/create-project.png","slug":"create-project.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/deploy-position.png","slug":"deploy-position.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/select-theme.png","slug":"select-theme.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/tags.png","slug":"tags.png","post":"cjxyaqjdf0004jnfy3hzt54ha","modified":0,"renderable":0},{"_id":"source/_posts/Redis-adlist/list.png","slug":"list.png","post":"cjxyaqjew001bjnfyw2f90uq8","modified":0,"renderable":0},{"_id":"source/_posts/Redis-sds/sdshdr.png","slug":"sdshdr.png","post":"cjxyaqjey001ejnfykx3xsp0h","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/4.png","slug":"4.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-Background/1.png","slug":"1.png","post":"cjxyaqjgh0022jnfynxlgtd9t","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-Background/3.jpg","slug":"3.jpg","post":"cjxyaqjgh0022jnfynxlgtd9t","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-Background/5.jpeg","slug":"5.jpeg","post":"cjxyaqjgh0022jnfynxlgtd9t","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-Background/6.png","slug":"6.png","post":"cjxyaqjgh0022jnfynxlgtd9t","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/1.png","slug":"1.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/10.png","slug":"10.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/11.png","slug":"11.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/12.png","slug":"12.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/17.png","slug":"17.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/19.png","slug":"19.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/2.png","slug":"2.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/24.png","slug":"24.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/3.png","slug":"3.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/30.1.png","slug":"30.1.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/30.2.png","slug":"30.2.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/32.png","slug":"32.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/5.png","slug":"5.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/6.png","slug":"6.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/7.png","slug":"7.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/8.png","slug":"8.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0},{"_id":"source/_posts/Project-Module/9.png","slug":"9.png","post":"cjxyaqjgi0023jnfyfv49rs80","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjxyaqjd50000jnfyr18dsdbb","category_id":"cjxyaqjdc0002jnfydorvwhf3","_id":"cjxyaqjdt000ajnfyx57x1mfu"},{"post_id":"cjxyaqjda0001jnfyx4gatoxz","category_id":"cjxyaqjdn0007jnfyzj9bj857","_id":"cjxyaqjdx000djnfymy07qvkc"},{"post_id":"cjxyaqjdf0004jnfy3hzt54ha","category_id":"cjxyaqjdu000bjnfygjmz42bs","_id":"cjxyaqje1000ijnfyq7l8jboj"},{"post_id":"cjxyaqjdh0005jnfywzfsvl7z","category_id":"cjxyaqjdy000ejnfygyj6fefx","_id":"cjxyaqje4000ljnfy0498wr2g"},{"post_id":"cjxyaqjdk0006jnfyqg876bwn","category_id":"cjxyaqjdy000ejnfygyj6fefx","_id":"cjxyaqje4000njnfyt254azt4"},{"post_id":"cjxyaqjev0019jnfykxepb96s","category_id":"cjxyaqjdy000ejnfygyj6fefx","_id":"cjxyaqjf2001jjnfyyjnpvkwg"},{"post_id":"cjxyaqjew001bjnfyw2f90uq8","category_id":"cjxyaqjf1001fjnfyjgvq9t16","_id":"cjxyaqjfb001pjnfyl43ay0za"},{"post_id":"cjxyaqjey001ejnfykx3xsp0h","category_id":"cjxyaqjf1001fjnfyjgvq9t16","_id":"cjxyaqjfc001sjnfy6818xdmg"},{"post_id":"cjxyaqjf2001ijnfyejpry1e8","category_id":"cjxyaqjf1001fjnfyjgvq9t16","_id":"cjxyaqjfd001vjnfyx8fmhohc"},{"post_id":"cjxyaqjgi0023jnfyfv49rs80","category_id":"cjxyaqjdn0007jnfyzj9bj857","_id":"cjxyaqjgl0026jnfytlmz1zsa"},{"post_id":"cjxyaqjgh0022jnfynxlgtd9t","category_id":"cjxyaqjgk0024jnfydheg4p0x","_id":"cjxyaqjgl002ajnfyq8qe9gbj"}],"PostTag":[{"post_id":"cjxyaqjd50000jnfyr18dsdbb","tag_id":"cjxyaqjde0003jnfyd0vas55t","_id":"cjxyaqjdr0009jnfy7y3r0kab"},{"post_id":"cjxyaqjda0001jnfyx4gatoxz","tag_id":"cjxyaqjdn0008jnfyqowl3lp7","_id":"cjxyaqjdz000gjnfysucxfzzp"},{"post_id":"cjxyaqjda0001jnfyx4gatoxz","tag_id":"cjxyaqjdu000cjnfyxt3vsn6p","_id":"cjxyaqje1000hjnfyvp4efjc5"},{"post_id":"cjxyaqjdf0004jnfy3hzt54ha","tag_id":"cjxyaqjdy000fjnfyggb39lpn","_id":"cjxyaqje5000qjnfy58nzrsc5"},{"post_id":"cjxyaqjdf0004jnfy3hzt54ha","tag_id":"cjxyaqje2000kjnfyi8vqlh1v","_id":"cjxyaqje6000rjnfyvs967kdp"},{"post_id":"cjxyaqjdf0004jnfy3hzt54ha","tag_id":"cjxyaqjdu000cjnfyxt3vsn6p","_id":"cjxyaqje6000tjnfyoeqmi3u9"},{"post_id":"cjxyaqjdf0004jnfy3hzt54ha","tag_id":"cjxyaqje5000ojnfyblgkz77f","_id":"cjxyaqje6000ujnfywu7rwefi"},{"post_id":"cjxyaqjdh0005jnfywzfsvl7z","tag_id":"cjxyaqje5000pjnfy7khever3","_id":"cjxyaqje7000yjnfy8ocr6ta2"},{"post_id":"cjxyaqjdh0005jnfywzfsvl7z","tag_id":"cjxyaqje6000sjnfy82b0lb5o","_id":"cjxyaqje7000zjnfynzuqsd4a"},{"post_id":"cjxyaqjdh0005jnfywzfsvl7z","tag_id":"cjxyaqje6000vjnfy3rvtk0wr","_id":"cjxyaqje70011jnfy4jsfm4kb"},{"post_id":"cjxyaqjdh0005jnfywzfsvl7z","tag_id":"cjxyaqje6000wjnfy8mfm47mg","_id":"cjxyaqje80012jnfynqngqrsv"},{"post_id":"cjxyaqjdk0006jnfyqg876bwn","tag_id":"cjxyaqje5000pjnfy7khever3","_id":"cjxyaqje90015jnfyp8apowg1"},{"post_id":"cjxyaqjdk0006jnfyqg876bwn","tag_id":"cjxyaqje6000sjnfy82b0lb5o","_id":"cjxyaqje90016jnfy7uo4iod1"},{"post_id":"cjxyaqjdk0006jnfyqg876bwn","tag_id":"cjxyaqje6000vjnfy3rvtk0wr","_id":"cjxyaqje90017jnfyfqiyq20o"},{"post_id":"cjxyaqjdk0006jnfyqg876bwn","tag_id":"cjxyaqje6000wjnfy8mfm47mg","_id":"cjxyaqje90018jnfyicqkknwl"},{"post_id":"cjxyaqjev0019jnfykxepb96s","tag_id":"cjxyaqje5000pjnfy7khever3","_id":"cjxyaqjey001djnfyn33tio0g"},{"post_id":"cjxyaqjev0019jnfykxepb96s","tag_id":"cjxyaqje6000sjnfy82b0lb5o","_id":"cjxyaqjf1001hjnfyddam9fdo"},{"post_id":"cjxyaqjev0019jnfykxepb96s","tag_id":"cjxyaqje6000vjnfy3rvtk0wr","_id":"cjxyaqjf5001kjnfyfiyik2po"},{"post_id":"cjxyaqjev0019jnfykxepb96s","tag_id":"cjxyaqje6000wjnfy8mfm47mg","_id":"cjxyaqjf7001ljnfy2rm8xcep"},{"post_id":"cjxyaqjew001bjnfyw2f90uq8","tag_id":"cjxyaqjf1001gjnfy6911xooy","_id":"cjxyaqjfb001rjnfyold2sh73"},{"post_id":"cjxyaqjew001bjnfyw2f90uq8","tag_id":"cjxyaqjf7001njnfy2esfe7fz","_id":"cjxyaqjfc001tjnfybelyu3tu"},{"post_id":"cjxyaqjey001ejnfykx3xsp0h","tag_id":"cjxyaqjf1001gjnfy6911xooy","_id":"cjxyaqjfd001xjnfycfmjl3bk"},{"post_id":"cjxyaqjey001ejnfykx3xsp0h","tag_id":"cjxyaqjf7001njnfy2esfe7fz","_id":"cjxyaqjfe001yjnfyfzug1ivt"},{"post_id":"cjxyaqjf2001ijnfyejpry1e8","tag_id":"cjxyaqjf1001gjnfy6911xooy","_id":"cjxyaqjff0020jnfy9hfkqp8i"},{"post_id":"cjxyaqjf2001ijnfyejpry1e8","tag_id":"cjxyaqjfe001zjnfyfwq1f849","_id":"cjxyaqjff0021jnfy64qgh5ed"},{"post_id":"cjxyaqjgh0022jnfynxlgtd9t","tag_id":"cjxyaqjgk0025jnfyvbrscs8o","_id":"cjxyaqjgl0028jnfyqhl755ms"},{"post_id":"cjxyaqjgh0022jnfynxlgtd9t","tag_id":"cjxyaqje6000sjnfy82b0lb5o","_id":"cjxyaqjgl0029jnfybluf1lzg"},{"post_id":"cjxyaqjgh0022jnfynxlgtd9t","tag_id":"cjxyaqje6000wjnfy8mfm47mg","_id":"cjxyaqjgm002cjnfy0uzodcml"},{"post_id":"cjxyaqjgi0023jnfyfv49rs80","tag_id":"cjxyaqjgl0027jnfy72bvv2cw","_id":"cjxyaqjgn002djnfytqivw2ca"},{"post_id":"cjxyaqjgi0023jnfyfv49rs80","tag_id":"cjxyaqjdu000cjnfyxt3vsn6p","_id":"cjxyaqjgo002ejnfy07d4rr3s"},{"post_id":"cjxyaqjgi0023jnfyfv49rs80","tag_id":"cjxyaqjgm002bjnfy7iffh7sl","_id":"cjxyaqjgq002fjnfyu3rorwia"}],"Tag":[{"name":"C++","_id":"cjxyaqjde0003jnfyd0vas55t"},{"name":"git","_id":"cjxyaqjdn0008jnfyqowl3lp7"},{"name":"教程","_id":"cjxyaqjdu000cjnfyxt3vsn6p"},{"name":"github","_id":"cjxyaqjdy000fjnfyggb39lpn"},{"name":"hexo","_id":"cjxyaqje2000kjnfyi8vqlh1v"},{"name":"blog","_id":"cjxyaqje5000ojnfyblgkz77f"},{"name":"JVM","_id":"cjxyaqje5000pjnfy7khever3"},{"name":"JAVA","_id":"cjxyaqje6000sjnfy82b0lb5o"},{"name":"GO","_id":"cjxyaqje6000vjnfy3rvtk0wr"},{"name":"学习笔记","_id":"cjxyaqje6000wjnfy8mfm47mg"},{"name":"redis","_id":"cjxyaqjf1001gjnfy6911xooy"},{"name":"源码","_id":"cjxyaqjf7001njnfy2esfe7fz"},{"name":"面试总结","_id":"cjxyaqjfe001zjnfyfwq1f849"},{"name":"Kafka","_id":"cjxyaqjgk0025jnfyvbrscs8o"},{"name":"MyBatis","_id":"cjxyaqjgl0027jnfy72bvv2cw"},{"name":"Spring Boot","_id":"cjxyaqjgm002bjnfy7iffh7sl"}]}}