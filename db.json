{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1548818372000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1548818372000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1548818372000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1548818372000},{"_id":"themes/next/_config.yml","hash":"4f442caf601083fffc8d9ed2770772566d90270b","modified":1548926979000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1548818372000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog.md","hash":"5cec7d4b5e2263acbc062c82af540edb41ef75b3","modified":1553669424302},{"_id":"source/_posts/JVM1.md","hash":"59482277525b03cf1994b2a9bb37077b0b3f336f","modified":1550125486000},{"_id":"source/_posts/JVM2.md","hash":"7eb0fc78f81e827392ae6d3d4634282d3a7151ac","modified":1550125486000},{"_id":"source/_posts/Redis-sds.md","hash":"3f1d1aedd96c0812df542771416dbf26fc2c7007","modified":1553685361078},{"_id":"source/_posts/JVM3.md","hash":"d7d82ca1ba98fccb90a3535ab856fb9ce8340364","modified":1550125486000},{"_id":"source/tags/index.md","hash":"924a602ccdf829c5c1fd0faced2eb9b0f656d9d8","modified":1553669424318},{"_id":"source/categories/index.md","hash":"aee2c5e57dc28322f727617488ec89ca13299877","modified":1553669424318},{"_id":"source/_posts/Redis.md","hash":"b7c466dce97ff94f7efcb60de711a291306982c7","modified":1553669424318},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1548818372000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1548818372000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1548818372000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1548818372000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1548818372000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1548818372000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1548818372000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1548818372000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1548818372000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1548818372000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1548818372000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1548818372000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1548818372000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1548818372000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1548818372000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1548818372000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1548818372000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1548818372000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1548818372000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1548818372000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1548818372000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1548818372000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1548818372000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1548818372000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1548818372000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1548818372000},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1548922370000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1548818372000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1548818372000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1548818372000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/blog-icon.png","hash":"b4198f97a457236f7c5677680634cbbff15bc837","modified":1553669424303},{"_id":"source/_posts/Github-Pages-Blog/change-theme.png","hash":"80d61b4a4f7cba6f53e903cff176b394f9b7bdfa","modified":1553669424304},{"_id":"source/_posts/Github-Pages-Blog/categories.png","hash":"9d225500581c6625ccb43c90446ea702e2ad3d27","modified":1553669424303},{"_id":"source/_posts/Github-Pages-Blog/create-project.png","hash":"8111130d13191b07f4de818e818120f8f4941c65","modified":1553669424307},{"_id":"source/_posts/Github-Pages-Blog/deploy-position.png","hash":"710e477d8ff93bdd654228e4edfaeb8419fc32cb","modified":1553669424309},{"_id":"source/_posts/Github-Pages-Blog/tags.png","hash":"ebae8e66598ef4ab1354a3f8b21f27ec29ef667f","modified":1553669424316},{"_id":"source/_posts/Redis-sds/sds.png","hash":"dd78da543f702d163ca77f6623d910f5e5b0d042","modified":1553677561139},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548818372000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1548818372000},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"c7482bea71cc0cc8fd8b9462a6e00ffe37e35afb","modified":1548843896000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1548818372000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1548818372000},{"_id":"themes/next/layout/_macro/post-end-tag.swig","hash":"51118e29759de4dce54b348eb8197cd0044aa45c","modified":1548926225000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1548818372000},{"_id":"themes/next/layout/_macro/post.swig","hash":"5db4a61ac8facea9664dd8c53bd4256b25b36a6d","modified":1548926261000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1548818372000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1548818372000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1548818372000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"891f51bab9c163d9bd02a45c4687bafa29c1da88","modified":1548847069000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1548818372000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1548818372000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1548818372000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1548818372000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1548818372000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1548818372000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1548818372000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1548818372000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1548818372000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1548818372000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1548818372000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1548818372000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1548818372000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1548818372000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1548818372000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1548818372000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1548818372000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1548818372000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1548818372000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1548818372000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1548818372000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1548818372000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1548818372000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1548818372000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1548818372000},{"_id":"themes/next/source/images/alipay.jpg","hash":"499aab03d01ae8b1e2f2eb593bdcd6e989188b9e","modified":1548922023000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548818372000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1548818372000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1548818372000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1548818372000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1548818372000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1548818372000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548818372000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548818372000},{"_id":"themes/next/source/images/favicon.ico","hash":"85da2faa392c9c975434e11a311e70fc6e8ca55e","modified":1546966292000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548818372000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1548818372000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548818372000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1548818372000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1548818372000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548818372000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"a6529134a0531dda88058747a8f41f4aab5e9abe","modified":1548922040000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548818372000},{"_id":"themes/next/source/images/avatar.png","hash":"2fc664b73fb0dc51c0025d6d605f70440f3712c1","modified":1538126136000},{"_id":"source/_posts/Github-Pages-Blog/comment-delete.png","hash":"e8e8f4226ffb96387f1e15a45df8e28d6fe219f2","modified":1553669424305},{"_id":"source/_posts/Github-Pages-Blog/github-pages.png","hash":"cb19bd12e2c73729f622bb439c7ca2bfc6fa1706","modified":1553669424310},{"_id":"source/_posts/Github-Pages-Blog/setting.png","hash":"d78c0cf7a9a0d795e350eff8c0ab9ef0262cc01d","modified":1553669424316},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1548818372000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1548818372000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1548818372000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1548818372000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1548818372000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1548818372000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1548818372000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1548818372000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1548818372000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"365945e7908bbd9131a9f4452dd8f1f6b61de6dd","modified":1548926331000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1548818372000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1548818372000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1548818372000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"890cfaa4e771d2a7624389042febe40604d285cf","modified":1548926869000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1548818372000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1548818372000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1548818372000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1548818372000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548818372000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1548818372000},{"_id":"themes/next/source/js/src/motion.js","hash":"6a96c556378d10ec3250850be7ba4a5b55f5b5d7","modified":1548926393000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1548818372000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1548818372000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1548818372000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1548818372000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548818372000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1548818372000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1548818372000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1548818372000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1548818372000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548818372000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1548818372000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1548818372000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1548818372000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/create-repository.png","hash":"9bdbb8073bb7b6f37f42577ef8843d09028cd026","modified":1553669424309},{"_id":"source/_posts/Github-Pages-Blog/valine.png","hash":"b35df8378b9559765b74f7d6bb9909a1372d115e","modified":1553669424317},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1548818372000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"f05d6881daddfba936f7936fb7ea8b8debe07c01","modified":1548926869000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1548818372000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6109209e94d4d06513ce194a11e05a5640927e41","modified":1548926501000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1548818372000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1548818372000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1548818372000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548818372000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/copy-url.png","hash":"fb7edbabddfe278a5fc1db57a90a99f690daafe5","modified":1553669424307},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1548818372000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548818372000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"1a510f995e665b28d85ba4d169b824276c40e4f3","modified":1548843928000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"90d78b7270739eaab5b054226b684631a319011a","modified":1548844058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"8f40a758fe6dff1f45268f2dc875b4336e551335","modified":1548837748000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1548818372000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548818372000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548818372000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1548818372000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548818372000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1548818372000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1548818372000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1548818372000},{"_id":"source/_posts/Github-Pages-Blog/select-theme.png","hash":"2f05fcf89dee3dbaf7042198d28ab27c567b6a0d","modified":1553669424315},{"_id":"public/tags/index.html","hash":"5d9219e13de114073a112b4ebe1bdd1ae86e6158","modified":1553685421856},{"_id":"public/categories/index.html","hash":"eca7d9c00a51da0848edfd60aa25bfa2286d9d6f","modified":1553685421856},{"_id":"public/categories/JVM/index.html","hash":"053496d24cdbcee388008c665cbb3ce27743d1e5","modified":1553685421857},{"_id":"public/categories/blog/index.html","hash":"c2496de2e3905a07cba614bd2de263932718b19f","modified":1553685421857},{"_id":"public/categories/redis/index.html","hash":"6c7fba4b2ebe503bdfd733574d8daa64ce2cba8c","modified":1553685421857},{"_id":"public/archives/index.html","hash":"4eed0d172e9a8488e930c11f23a1ef16425842d5","modified":1553685421857},{"_id":"public/archives/2019/index.html","hash":"b41d1ba2b5cf6cba16e7e40dd0f960b85aa0c2cf","modified":1553685421857},{"_id":"public/archives/2019/01/index.html","hash":"703dd52978da20b4f14a17f6fcd4dc61553b2c6e","modified":1553685421857},{"_id":"public/archives/2019/02/index.html","hash":"8df987177573251d86dc6818d89d0d99e27b9fa0","modified":1553685421857},{"_id":"public/archives/2019/03/index.html","hash":"46021805ba972912b63535dd3da1a099dace58c7","modified":1553685421857},{"_id":"public/tags/JVM/index.html","hash":"267c57ab9fdc8698942249804d87fdd2239f1d26","modified":1553685421857},{"_id":"public/tags/JAVA/index.html","hash":"277e75fc5253d6a8487b30748c57fc0178f2fa72","modified":1553685421857},{"_id":"public/tags/GO/index.html","hash":"cd4e3eec02a0d743c7e634de37d93a4a60b2ff6d","modified":1553685421857},{"_id":"public/tags/学习笔记/index.html","hash":"00622a34216a2bd1e29bf56bb186b9017069ea94","modified":1553685421858},{"_id":"public/tags/github/index.html","hash":"2e5cef2f2d7a60d3cc59fe4b7f386b88e350abf2","modified":1553685421858},{"_id":"public/tags/hexo/index.html","hash":"7d1a4c78387e886aabe157acc16af9b915c1dacb","modified":1553685421858},{"_id":"public/tags/教程/index.html","hash":"83e7863bb438224913fd13b00bd4f1fe0409daa7","modified":1553685421858},{"_id":"public/tags/blog/index.html","hash":"c73202ba6de97a6997b01420dfc13191a3122b2a","modified":1553685421858},{"_id":"public/tags/redis/index.html","hash":"52b79c5f9ff89a077adf7d9c16eeede64bd86d70","modified":1553685421858},{"_id":"public/tags/源码/index.html","hash":"fcc3fbe78c6dec6d058627fe95041fe6bdd2a87c","modified":1553685421858},{"_id":"public/tags/面试总结/index.html","hash":"d9c4c66eb21940debed49d914dc1d0bcebc09af2","modified":1553685421858},{"_id":"public/2019/03/27/Redis-sds/index.html","hash":"55b1ee40732db8dfbb14502e9bc7a24052a41f4b","modified":1553685421858},{"_id":"public/2019/03/13/Redis/index.html","hash":"3e7b7750945e8ff741b824c1588a5c0aaec23a5b","modified":1553685421859},{"_id":"public/2019/02/14/JVM3/index.html","hash":"09fe9b8f0a98c1f839dd8694e09fb91f613590ea","modified":1553685421859},{"_id":"public/2019/02/12/JVM2/index.html","hash":"393420144fdf9dd538a15f188ac466d17fe16a08","modified":1553685421859},{"_id":"public/2019/02/11/JVM1/index.html","hash":"293137dc5d3d62e36be48f4d29c943cfd09defc3","modified":1553685421859},{"_id":"public/2019/01/30/Github-Pages-Blog/index.html","hash":"494044a33e01af87a4198640941077e21ec82822","modified":1553685421859},{"_id":"public/index.html","hash":"753735c8c019e9f8715fc7b82ee469fa703d0995","modified":1553685421859},{"_id":"public/page/2/index.html","hash":"e664011bed06031b212d92bd62caa18e4279256b","modified":1553685421859},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553685421875},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553685421875},{"_id":"public/images/alipay.jpg","hash":"499aab03d01ae8b1e2f2eb593bdcd6e989188b9e","modified":1553685421875},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553685421875},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553685421875},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553685421876},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553685421876},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553685421876},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553685421876},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553685421876},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553685421876},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553685421876},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553685421876},{"_id":"public/images/favicon.ico","hash":"85da2faa392c9c975434e11a311e70fc6e8ca55e","modified":1553685421876},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553685421876},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553685421877},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553685421877},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553685421877},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553685421877},{"_id":"public/images/wechatpay.jpg","hash":"a6529134a0531dda88058747a8f41f4aab5e9abe","modified":1553685421877},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553685421877},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553685421877},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553685421877},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553685421878},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553685421878},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553685421878},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553685421878},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553685421878},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553685421878},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553685421878},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553685421879},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553685421879},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553685421879},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553685421879},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553685421880},{"_id":"public/2019/03/27/Redis-sds/sds.png","hash":"dd78da543f702d163ca77f6623d910f5e5b0d042","modified":1553685421880},{"_id":"public/2019/01/30/Github-Pages-Blog/blog-icon.png","hash":"b4198f97a457236f7c5677680634cbbff15bc837","modified":1553685421880},{"_id":"public/2019/01/30/Github-Pages-Blog/categories.png","hash":"9d225500581c6625ccb43c90446ea702e2ad3d27","modified":1553685421880},{"_id":"public/2019/01/30/Github-Pages-Blog/change-theme.png","hash":"80d61b4a4f7cba6f53e903cff176b394f9b7bdfa","modified":1553685421881},{"_id":"public/2019/01/30/Github-Pages-Blog/tags.png","hash":"ebae8e66598ef4ab1354a3f8b21f27ec29ef667f","modified":1553685421881},{"_id":"public/2019/01/30/Github-Pages-Blog/create-project.png","hash":"8111130d13191b07f4de818e818120f8f4941c65","modified":1553685421881},{"_id":"public/live2dw/assets/exp/f02.exp.json","hash":"241b6afafa2e25c6d7a54692a8b5aa060a137ab1","modified":1553685421882},{"_id":"public/live2dw/assets/exp/f04.exp.json","hash":"35e746ede62e7090e7dfb08561d77772f58b4153","modified":1553685421882},{"_id":"public/live2dw/assets/exp/f03.exp.json","hash":"fbf7729e504f14f83f976827fcf62301a6579a34","modified":1553685421882},{"_id":"public/live2dw/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1553685421882},{"_id":"public/live2dw/assets/mtn/flickHead_00.mtn","hash":"f64c79c9171660db5c440bef229ac2e35a1597d5","modified":1553685421883},{"_id":"public/live2dw/assets/mtn/flickHead_02.mtn","hash":"d3c9c0acb4dc25a2274f3b9faa71e5ce60ad92e4","modified":1553685421883},{"_id":"public/live2dw/assets/mtn/flickHead_01.mtn","hash":"a1011d6bf397bcd3c3c968d9616f88fe1ffbc83c","modified":1553685421883},{"_id":"public/live2dw/assets/mtn/idle_00.mtn","hash":"378b4577217c604c9d28ab4edf8b707c8d8c2fbb","modified":1553685421883},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"7f5d2cf8706007c8659938eba132a68c470a4c26","modified":1553685421884},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"88c2494655dbb712b842f03232b619f381753d52","modified":1553685421884},{"_id":"public/live2dw/assets/mtn/pinchIn_01.mtn","hash":"a5fefb45115695db72b9499e627a51b2b9394f2c","modified":1553685421884},{"_id":"public/live2dw/assets/mtn/pinchIn_00.mtn","hash":"70978b4c983f6a9fd6d3d9c24571586f7d6eac30","modified":1553685421884},{"_id":"public/live2dw/assets/mtn/pinchIn_02.mtn","hash":"aa0d66ca9b06c374577fd7e64e89756de1e1f2ae","modified":1553685421885},{"_id":"public/live2dw/assets/mtn/pinchOut_00.mtn","hash":"e07fe8fd8c2810e3c1d28b730bd49c8c25849bad","modified":1553685421885},{"_id":"public/live2dw/assets/mtn/pinchOut_01.mtn","hash":"e05df948d08b17f34c993a9c1f901190509d5db0","modified":1553685421885},{"_id":"public/live2dw/assets/mtn/shake_00.mtn","hash":"5185d02c7ab9f0bec3d4a890b54b2378e553373d","modified":1553685421885},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"e812985a56796e122018f9d57d1606a4866ff7d1","modified":1553685421885},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"2702970805e07777974c383613e631730982bcff","modified":1553685421885},{"_id":"public/live2dw/assets/mtn/tapBody_00.mtn","hash":"835aa3d4a8fbd26c0bb66b164a19464fa3f17a99","modified":1553685421886},{"_id":"public/live2dw/assets/mtn/pinchOut_02.mtn","hash":"b323fd350d334b33bbdfb31194ae664089986c27","modified":1553685421886},{"_id":"public/live2dw/assets/shizuku.model.json","hash":"19a05bd41b806a935cea42c2000626fc82da2536","modified":1553685421886},{"_id":"public/live2dw/assets/mtn/tapBody_02.mtn","hash":"a75acb51c1191ce5050d3ee1af6f2dcc787c7c5e","modified":1553685421886},{"_id":"public/live2dw/assets/mtn/tapBody_01.mtn","hash":"78fca17436ab5e065e27f419f135aa6c0a0b52ef","modified":1553685421886},{"_id":"public/live2dw/assets/shizuku.pose.json","hash":"ac5505efbf80ba0a2e5783d67fe232bc5c6f1f80","modified":1553685421886},{"_id":"public/live2dw/assets/snd/flickHead_00.mp3","hash":"356388d939006b03cf9e6158c603b58d4800bec1","modified":1553685421886},{"_id":"public/live2dw/assets/shizuku.physics.json","hash":"6484d646e79a44c83784c6ae434cf7349746c5c8","modified":1553685421887},{"_id":"public/live2dw/assets/snd/flickHead_02.mp3","hash":"5f63477ce63f2073e24d68fea906fe136fe6349e","modified":1553685421887},{"_id":"public/live2dw/assets/snd/pinchIn_00.mp3","hash":"f9baa3b7cadec20b714135fc49cfab3ff6adeeb4","modified":1553685421887},{"_id":"public/live2dw/assets/snd/pinchIn_01.mp3","hash":"d5c8cc6f61b56222a83a5174f75006f83c3b88da","modified":1553685421887},{"_id":"public/live2dw/assets/snd/flickHead_01.mp3","hash":"436d0bbccf6e7a2744447554947eee4563608970","modified":1553685421887},{"_id":"public/live2dw/assets/snd/shake_00.mp3","hash":"f65dd58e7b44ec5c865d13c190316070b625b5fe","modified":1553685421888},{"_id":"public/live2dw/assets/snd/shake_01.mp3","hash":"c1e0e8a07ff268ee06c2b7825d1b645e193f21b9","modified":1553685421888},{"_id":"public/live2dw/assets/snd/shake_02.mp3","hash":"8882b94bce00f09232588b7301badb105fa8acab","modified":1553685421888},{"_id":"public/live2dw/assets/snd/tapBody_00.mp3","hash":"003e68a59a9c8392e230f34c91860efbd946277a","modified":1553685421888},{"_id":"public/live2dw/assets/snd/tapBody_02.mp3","hash":"15e7815ed0a0e5164e18e0c53b97aedc742a134d","modified":1553685421888},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"6e013af9c502b2e63ac5e42944e3244f8f515eb7","modified":1553685421889},{"_id":"public/live2dw/assets/snd/tapBody_01.mp3","hash":"5314b50f153df71559e51e2586581c006df00722","modified":1553685421889},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553685422398},{"_id":"public/images/avatar.png","hash":"2fc664b73fb0dc51c0025d6d605f70440f3712c1","modified":1553685422406},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553685422410},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553685422410},{"_id":"public/2019/01/30/Github-Pages-Blog/deploy-position.png","hash":"710e477d8ff93bdd654228e4edfaeb8419fc32cb","modified":1553685422410},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_00.png","hash":"21bdb28b31783e23b26b3aa061e90be4088665aa","modified":1553685422410},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_05.png","hash":"0cd00007fb8bff62a2eb08e1d7c43abab8722224","modified":1553685422410},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_03.png","hash":"07f568a2bb8045b6bdff7783fb4daf62c821f9ab","modified":1553685422410},{"_id":"public/live2dw/assets/snd/pinchOut_02.mp3","hash":"554edb2f3838cbdc27d1a9c6b8a9cb6eb465cbdd","modified":1553685422411},{"_id":"public/live2dw/assets/snd/pinchOut_01.mp3","hash":"8a081030fd53c07bffe3edd48f87a371ca77296b","modified":1553685422411},{"_id":"public/live2dw/assets/snd/pinchIn_02.mp3","hash":"5b63e02607571ac601c500995e836e6c861b1c62","modified":1553685422411},{"_id":"public/live2dw/assets/snd/pinchOut_00.mp3","hash":"0654f38f6e9fd623eaf8be11b5d58c9d12991949","modified":1553685422411},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553685422422},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553685422422},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553685422423},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553685422423},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553685422423},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553685422423},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553685422423},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553685422423},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553685422424},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553685422424},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553685422424},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553685422424},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1553685422425},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1553685422425},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1553685422425},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553685422425},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553685422425},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553685422426},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553685422426},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553685422426},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553685422426},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1553685422426},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553685422426},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553685422426},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553685422426},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553685422426},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553685422426},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553685422426},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553685422426},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553685422426},{"_id":"public/404.html","hash":"3b3bf28a00c3ba956ebf873d1ae2a50d374839de","modified":1553685422426},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1553685422427},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1553685422427},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1553685422427},{"_id":"public/css/main.css","hash":"5214bba6415938b86fd79be30f7d1a89e04988ed","modified":1553685422427},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553685422427},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553685422427},{"_id":"public/2019/01/30/Github-Pages-Blog/github-pages.png","hash":"cb19bd12e2c73729f622bb439c7ca2bfc6fa1706","modified":1553685422427},{"_id":"public/2019/01/30/Github-Pages-Blog/setting.png","hash":"d78c0cf7a9a0d795e350eff8c0ab9ef0262cc01d","modified":1553685422427},{"_id":"public/js/src/motion.js","hash":"6a96c556378d10ec3250850be7ba4a5b55f5b5d7","modified":1553685422443},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553685422444},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553685422446},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553685422446},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553685422446},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553685422446},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553685422446},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553685422446},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553685422446},{"_id":"public/2019/01/30/Github-Pages-Blog/comment-delete.png","hash":"e8e8f4226ffb96387f1e15a45df8e28d6fe219f2","modified":1553685422446},{"_id":"public/2019/01/30/Github-Pages-Blog/valine.png","hash":"b35df8378b9559765b74f7d6bb9909a1372d115e","modified":1553685422447},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_02.png","hash":"055eb2da9c13e9116be93a1e60c0ea2b660af864","modified":1553685422447},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_01.png","hash":"3d0e745f3e560071ee08beeecde186e5ea35d99e","modified":1553685422447},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"5e7669733ecd0b1bc3881d2cf7fcc01e2990a07d","modified":1553685422447},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553685422462},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553685422462},{"_id":"public/2019/01/30/Github-Pages-Blog/create-repository.png","hash":"9bdbb8073bb7b6f37f42577ef8843d09028cd026","modified":1553685422463},{"_id":"public/live2dw/assets/moc/shizuku.1024/texture_04.png","hash":"f764d594841905db8b2998dd61c329866125ad97","modified":1553685422463},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"7d3a9c937317b9c15f2c3a872f0e26607a729458","modified":1553685422464},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553685422485},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553685422489},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553685422519},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553685422520},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553685422522},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553685422523},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553685422523},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553685422523},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553685422523},{"_id":"public/2019/01/30/Github-Pages-Blog/copy-url.png","hash":"fb7edbabddfe278a5fc1db57a90a99f690daafe5","modified":1553685422523},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553685422537},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553685422537},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553685422538},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553685422554},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553685422573},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553685422576},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553685422576},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"09521263ecc625a246b3406c385300e99e966a2e","modified":1553685422577},{"_id":"public/2019/01/30/Github-Pages-Blog/select-theme.png","hash":"2f05fcf89dee3dbaf7042198d28ab27c567b6a0d","modified":1553685422587},{"_id":"public/live2dw/assets/moc/shizuku.moc","hash":"c2670a0f75830edc89d7fe6d074de4ee67e8dc5d","modified":1553685422591},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553685422595},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553685422606},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553685422611}],"Category":[{"name":"JVM","_id":"cjtr440ts0002cnjv2r2db7qq"},{"name":"blog","_id":"cjtr440ty0006cnjvnv3sn8jp"},{"name":"redis","_id":"cjtr440tz0009cnjv872w47v2"}],"Data":[],"Page":[{"title":"tags","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ncomments: false\n---","date":"2019-03-27T06:50:24.318Z","updated":"2019-03-27T06:50:24.318Z","path":"tags/index.html","layout":"page","_id":"cjtr441070012cnjverunrop4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n","date":"2019-03-27T06:50:24.318Z","updated":"2019-03-27T06:50:24.318Z","path":"categories/index.html","layout":"page","_id":"cjtr4410a0014cnjvp1mak9rk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"《自己动手写JAVA虚拟机》学习笔记一【命令行工具】","date":"2019-02-11T09:23:04.000Z","copyright":true,"comments":0,"_content":"最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。\n\n## 准备工作\n\n### 安装JDK\n从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161\n\n### 安装GO\n从[GO语言官网](https://golang.org/dl/)下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。\n测试Go环境是否安装成功\n``` bash\n～$ go version\ngo version go1.11.2 darwin/amd64\n```\n设置环境变量\n```bash\n#添加Go的运行环境路径\nexport PATH=$PATH:/usr/local/go/bin\n#添加Go工程的工作空间,可自行修改\nexport GOPATH=/home/XXX/XXX/jvmgo/go\n```\n执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,\n```base\n～$ go env\n```\n## 实现JAVA命令\n\njava命令常用选项及其用途\n\n| 选项 | 用途 |\n| :------ | :------ | \n| -version | 输出版本信息，然后退出 | \n| -?/-help\t | 输出帮助信息，然后退出 |\n| -cp/-classpath | 指定用户类路径 |\n| -Dproperty=value | 设置Java系统属性 |\n| -Xms | 设置初始堆空间大小 |\n| -Xmx | 设置最大堆空间大小 |\n| -Xss | 设置线程栈空间大小 |\n\n### 编写命令行工具\n\n首先创建项目结构\n```base\n|-jvmgo\n    |-ch01\n```\n在ch01目录下创建cmd.go文件\n```go\npackage main\n\nimport \"flag\"\nimport \"fmt\"\nimport \"os\"\n\n\n//用法: java [-options] class [args...] (执行类)\n//或  java [-options] -jar jarfile [args...] (执行 jar 文件)\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tclass string\n\targs []string\n}\n\n\n//把命令的用法打印到控制台\nfunc printUsage()  {\n\tfmt.Printf(\"Usage：%s [-options] class [args...]\\n\",os.Args[0])\n}\n\n//命令解析\nfunc parseCmd() *Cmd {\n\t\n\t//声明cmd为指向空的Cmd对象的指针\n\tcmd := &Cmd{}\n\n\t//定义flag参数\n\t//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息\n\tflag.Usage = printUsage\n\tflag.BoolVar(&cmd.helpFlag,\"help\",false,\"print help message\")\n\tflag.BoolVar(&cmd.helpFlag,\"?\",false,\"print help message\")\n\tflag.BoolVar(&cmd.versionFlag,\"version\",false,\"print version and exit\")\n\tflag.StringVar(&cmd.cpOption,\"classpath\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\t//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。\n\tflag.Parse()\n\t//flag.Args()可以捕获未被解析的参数\n\targs := flag.Args()\n\tif len(args) > 0{\n\t\tcmd.class = args[0]\n\t\tcmd.args = args[1:]\n\t}\n\n\treturn cmd\n}\n\n```\n### 测试代码\n\n在ch01目录下创建main.go文件\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcmd := parseCmd()\n\tif cmd.versionFlag {\n\t\tfmt.Println(\"version 0.0.1\")\n\t}else if cmd.helpFlag || cmd.class == \"\"{\n\t\tprintUsage()\n\t}else {\n\t\tstartJVM(cmd)\n\t}\n}\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t//还未开始写，暂时打印\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cmd.cpOption,cmd.class,cmd.args)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch01 \n$ ch01 -version\nversion 0.0.1\n```\n","source":"_posts/JVM1.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记一【命令行工具】\ndate: 2019-02-11 17:23:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\ncopyright: true\ncomments: false\n---\n最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。\n\n## 准备工作\n\n### 安装JDK\n从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161\n\n### 安装GO\n从[GO语言官网](https://golang.org/dl/)下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。\n测试Go环境是否安装成功\n``` bash\n～$ go version\ngo version go1.11.2 darwin/amd64\n```\n设置环境变量\n```bash\n#添加Go的运行环境路径\nexport PATH=$PATH:/usr/local/go/bin\n#添加Go工程的工作空间,可自行修改\nexport GOPATH=/home/XXX/XXX/jvmgo/go\n```\n执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,\n```base\n～$ go env\n```\n## 实现JAVA命令\n\njava命令常用选项及其用途\n\n| 选项 | 用途 |\n| :------ | :------ | \n| -version | 输出版本信息，然后退出 | \n| -?/-help\t | 输出帮助信息，然后退出 |\n| -cp/-classpath | 指定用户类路径 |\n| -Dproperty=value | 设置Java系统属性 |\n| -Xms | 设置初始堆空间大小 |\n| -Xmx | 设置最大堆空间大小 |\n| -Xss | 设置线程栈空间大小 |\n\n### 编写命令行工具\n\n首先创建项目结构\n```base\n|-jvmgo\n    |-ch01\n```\n在ch01目录下创建cmd.go文件\n```go\npackage main\n\nimport \"flag\"\nimport \"fmt\"\nimport \"os\"\n\n\n//用法: java [-options] class [args...] (执行类)\n//或  java [-options] -jar jarfile [args...] (执行 jar 文件)\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tclass string\n\targs []string\n}\n\n\n//把命令的用法打印到控制台\nfunc printUsage()  {\n\tfmt.Printf(\"Usage：%s [-options] class [args...]\\n\",os.Args[0])\n}\n\n//命令解析\nfunc parseCmd() *Cmd {\n\t\n\t//声明cmd为指向空的Cmd对象的指针\n\tcmd := &Cmd{}\n\n\t//定义flag参数\n\t//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息\n\tflag.Usage = printUsage\n\tflag.BoolVar(&cmd.helpFlag,\"help\",false,\"print help message\")\n\tflag.BoolVar(&cmd.helpFlag,\"?\",false,\"print help message\")\n\tflag.BoolVar(&cmd.versionFlag,\"version\",false,\"print version and exit\")\n\tflag.StringVar(&cmd.cpOption,\"classpath\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\t//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。\n\tflag.Parse()\n\t//flag.Args()可以捕获未被解析的参数\n\targs := flag.Args()\n\tif len(args) > 0{\n\t\tcmd.class = args[0]\n\t\tcmd.args = args[1:]\n\t}\n\n\treturn cmd\n}\n\n```\n### 测试代码\n\n在ch01目录下创建main.go文件\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcmd := parseCmd()\n\tif cmd.versionFlag {\n\t\tfmt.Println(\"version 0.0.1\")\n\t}else if cmd.helpFlag || cmd.class == \"\"{\n\t\tprintUsage()\n\t}else {\n\t\tstartJVM(cmd)\n\t}\n}\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t//还未开始写，暂时打印\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cmd.cpOption,cmd.class,cmd.args)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch01 \n$ ch01 -version\nversion 0.0.1\n```\n","slug":"JVM1","published":1,"updated":"2019-02-14T06:24:46.000Z","layout":"post","photos":[],"link":"","_id":"cjtr440tl0000cnjv4c303q40","content":"<p>最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161</p>\n<h3 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h3><p>从<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">GO语言官网</a>下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。<br>测试Go环境是否安装成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go version</span><br><span class=\"line\">go version go1.11.2 darwin/amd64</span><br></pre></td></tr></table></figure></p>\n<p>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加Go的运行环境路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"><span class=\"comment\">#添加Go工程的工作空间,可自行修改</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/XXX/XXX/jvmgo/go</span><br></pre></td></tr></table></figure></p>\n<p>执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go env</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实现JAVA命令\"><a href=\"#实现JAVA命令\" class=\"headerlink\" title=\"实现JAVA命令\"></a>实现JAVA命令</h2><p>java命令常用选项及其用途</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-version</td>\n<td style=\"text-align:left\">输出版本信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-?/-help</td>\n<td style=\"text-align:left\">输出帮助信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-cp/-classpath</td>\n<td style=\"text-align:left\">指定用户类路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Dproperty=value</td>\n<td style=\"text-align:left\">设置Java系统属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xms</td>\n<td style=\"text-align:left\">设置初始堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xmx</td>\n<td style=\"text-align:left\">设置最大堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xss</td>\n<td style=\"text-align:left\">设置线程栈空间大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"编写命令行工具\"><a href=\"#编写命令行工具\" class=\"headerlink\" title=\"编写命令行工具\"></a>编写命令行工具</h3><p>首先创建项目结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br></pre></td></tr></table></figure></p>\n<p>在ch01目录下创建cmd.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用法: java [-options] class [args...] (执行类)</span></span><br><span class=\"line\"><span class=\"comment\">//或  java [-options] -jar jarfile [args...] (执行 jar 文件)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把命令的用法打印到控制台</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printUsage</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Usage：%s [-options] class [args...]\\n\"</span>,os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//声明cmd为指向空的Cmd对象的指针</span></span><br><span class=\"line\">\tcmd := &amp;Cmd&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义flag参数</span></span><br><span class=\"line\">\t<span class=\"comment\">//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息</span></span><br><span class=\"line\">\tflag.Usage = printUsage</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"help\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"?\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.versionFlag,<span class=\"string\">\"version\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print version and exit\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"classpath\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t<span class=\"comment\">//flag.Args()可以捕获未被解析的参数</span></span><br><span class=\"line\">\targs := flag.Args()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\t\tcmd.class = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tcmd.args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>在ch01目录下创建main.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := parseCmd()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cmd.versionFlag &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"version 0.0.1\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cmd.helpFlag || cmd.class == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tprintUsage()</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tstartJVM(cmd)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还未开始写，暂时打印</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch01 </span><br><span class=\"line\">$ ch01 -version</span><br><span class=\"line\">version 0.0.1</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近正在看张秀宏著的《自己动手写Java虚拟机》，这本书适合初学者更深入的理解java虚拟机的含义，也可以简单学习go语言的基本使用。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>从Oracle官网下载最新的JDK，双击运行即可。我使用的是1.8.0_161</p>\n<h3 id=\"安装GO\"><a href=\"#安装GO\" class=\"headerlink\" title=\"安装GO\"></a>安装GO</h3><p>从<a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">GO语言官网</a>下载最新版本的GO安装文件，双击运行即可,我使用的是1.11.2。<br>测试Go环境是否安装成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go version</span><br><span class=\"line\">go version go1.11.2 darwin/amd64</span><br></pre></td></tr></table></figure></p>\n<p>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加Go的运行环境路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"><span class=\"comment\">#添加Go工程的工作空间,可自行修改</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/XXX/XXX/jvmgo/go</span><br></pre></td></tr></table></figure></p>\n<p>执行以下命令，如果GOPATH与你设置的相同环境变量设置成功,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～$ go env</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实现JAVA命令\"><a href=\"#实现JAVA命令\" class=\"headerlink\" title=\"实现JAVA命令\"></a>实现JAVA命令</h2><p>java命令常用选项及其用途</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-version</td>\n<td style=\"text-align:left\">输出版本信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-?/-help</td>\n<td style=\"text-align:left\">输出帮助信息，然后退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-cp/-classpath</td>\n<td style=\"text-align:left\">指定用户类路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Dproperty=value</td>\n<td style=\"text-align:left\">设置Java系统属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xms</td>\n<td style=\"text-align:left\">设置初始堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xmx</td>\n<td style=\"text-align:left\">设置最大堆空间大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xss</td>\n<td style=\"text-align:left\">设置线程栈空间大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"编写命令行工具\"><a href=\"#编写命令行工具\" class=\"headerlink\" title=\"编写命令行工具\"></a>编写命令行工具</h3><p>首先创建项目结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br></pre></td></tr></table></figure></p>\n<p>在ch01目录下创建cmd.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"flag\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"os\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用法: java [-options] class [args...] (执行类)</span></span><br><span class=\"line\"><span class=\"comment\">//或  java [-options] -jar jarfile [args...] (执行 jar 文件)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把命令的用法打印到控制台</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printUsage</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Usage：%s [-options] class [args...]\\n\"</span>,os.Args[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//声明cmd为指向空的Cmd对象的指针</span></span><br><span class=\"line\">\tcmd := &amp;Cmd&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义flag参数</span></span><br><span class=\"line\">\t<span class=\"comment\">//Usage是一个函数，默认输出所有定义了的命令行参数和帮助信息</span></span><br><span class=\"line\">\tflag.Usage = printUsage</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"help\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.helpFlag,<span class=\"string\">\"?\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print help message\"</span>)</span><br><span class=\"line\">\tflag.BoolVar(&amp;cmd.versionFlag,<span class=\"string\">\"version\"</span>,<span class=\"literal\">false</span>,<span class=\"string\">\"print version and exit\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"classpath\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//在所有的flag定义完成之后，可以通过调用flag.Parse()进行解析。</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t<span class=\"comment\">//flag.Args()可以捕获未被解析的参数</span></span><br><span class=\"line\">\targs := flag.Args()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(args) &gt; <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">\t\tcmd.class = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tcmd.args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>在ch01目录下创建main.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := parseCmd()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cmd.versionFlag &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"version 0.0.1\"</span>)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> cmd.helpFlag || cmd.class == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tprintUsage()</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tstartJVM(cmd)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//还未开始写，暂时打印</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cmd.cpOption,cmd.class,cmd.args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch01 </span><br><span class=\"line\">$ ch01 -version</span><br><span class=\"line\">version 0.0.1</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Mac下利用Github Pages快速搭建免费博客","date":"2019-01-30T11:30:04.000Z","copyright":true,"comments":1,"_content":"本博客利用Hexo + Next + GitHubPages 搭建博客。\n\n## 准备工作\n\n### 安装node.js\n\n``` bash\n$ brew install node\n```\n\n### 安装 git\n\n``` bash\n$ brew install git\n```\n\n### 安装yarn\n\n``` bash\n$ npm install yarn\n```\n\n如果安装失败用\n\n``` bash\n$ brew install yarn\n```\n\n### 安装hexo\n\n进入你的项目目录，举个例子我的目录是blog\n\n``` bash\n$ cd blog\n```\n\n然后用 yarn 安装 hexo\n\n``` bash\n$ yarn add hexo -S\n```\n\n如果安装失败用\n\n``` bash\n$ npm install hexo-cli -g\n$ npm install hexo-server --save\n```\n详细可见[官方文档](https://hexo.io/zh-cn/docs/)\n\n## 搭建本地博客\n\n### 项目初始化\n\n进入你的项目目录,初始化hexo\n\n``` bash\n$ cd blog\n$ hexo init\n```\n### 安装依赖\n\n``` bash\n$ yarn install\n```\n### 启动本地服务\n\n``` bash\n$ hexo server\n```\n在浏览器输入 `localhost:4000` 即可\n\n## 关联 GitHub\n### 创建项目\n\n![创建项目](Github-Pages-Blog/create-project.png)\n\n项目名称一定一定是 `[用户名].github.io`\n![创建项目](Github-Pages-Blog/create-repository.png)\n\n### 设置\n\n![设置](Github-Pages-Blog/setting.png)\n\n在设置中找到GitHub Pages ，分支选择master，点击choose a theme\n\n![设置github-pages](Github-Pages-Blog/github-pages.png)\n\n选择喜欢的主题，点击select theme即可\n![选择主题](Github-Pages-Blog/select-theme.png)\n\n到这里就可以访问你的主页啦  `https://[用户名].github.io/`,接下来复制你的项目链接\n\n![复制项目链接](Github-Pages-Blog/copy-url.png)\n\n到你的本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n![hexo设置git](Github-Pages-Blog/deploy-position.png)\n\n### 站点配置\n站点配置包括修改博客名称，描述，作者等等，建议直接查看[官方教程](https://hexo.io/zh-cn/docs/configuration)\n\n### 关联\n\n安装 hexo-deployer-git 插件\n``` bash\n$ yarn add hexo-deployer-git -S\n```\n如果失败的话尝试下面的方法\n``` bash\n$ npm install --save hexo-deployer-git\n```\n在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo\n``` bash\n$  hexo d -g\n```\n这时访问你的github主页`https://[用户名].github.io/`就可以啦\n\n## NexT主题配置\nNexT 是一个高质量并且优雅的Hexo 主题。\n详细可见[官方文档](https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md)\n\n### 安装NexT主题\n在你的项目文件夹下，执行以下命令，安装NexT主题\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n更改项目根目录下`_config.yml` 文件，如下\n![更改主题](Github-Pages-Blog/change-theme.png)\n\n重新生成本地文件并推送到github\n``` bash\n$  hexo d -g\n```\n访问你的github主页`https://[用户名].github.io/`就可以看到啦\n\n### 主题配置\n\n`themes/next`文件夹下的`_config.yml`是主题的配置文件\nnext内置了4种主题方案，选择你喜欢的方案解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\nMenu Settings是控制图中菜单的位置，根据需要解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\nmenu:\n  home: / || home\n#  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n#  archives: /archives/ || archive\n#  schedule: /schedule/ || calendar\n#  sitemap: /sitemap.xml || sitemap\n#  commonweal: /404.html || heartbeat\n```\n![更改菜单](Github-Pages-Blog/blog-icon.png)\n还有很多很多的配置请参考[官方教程](http://theme-next.iissnan.com/getting-started.html#install-next-theme),[主题个性配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html),[主题美化](http://yearito.cn/posts/hexo-theme-beautify.html)\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n也可以在本地启动服务器，在浏览器输入 `localhost:4000` 观看效果\n``` bash\n$ hexo server\n```\n## 创建文章\n\n### 添加【标签】页面\n\n新建标签页面\n``` bash\n$ hexo new page tags\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: tags\ntype: \"tags\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `tags: /tags/ || tags` 这行注释\n新建测试文章\n``` bash\n$ hexo new 'test'\n```\n在测试文章的头部添加tags信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。\n![标签](Github-Pages-Blog/tags.png)\n\n### 添加【分类】页面\n新建标签页面\n``` bash\n$ hexo new page categories\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `categories: /categories/ || th` 这行注释\n在测试文章的头部添加categories信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\ncategories: Testing\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。\n![分类](Github-Pages-Blog/categories.png)\n\n### 给博客添加图片\n在项目目录下执行\n\n``` bash\n$ npm install hexo-asset-image --save\n```\n\n在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹\n``` bash\n$ hexo new '文章名'\n```\n将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：\n``` markdown\n ![文字](xxxx/图片名.jpg)\n```\n文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n### 添加Valine评论系统\n\n首先需要去注册一个[Leancloud](https://leancloud.cn/)账号,验证邮箱\n然后随便创建一个应用，按如图所示找到`appid`，`appkey`\n![评论](Github-Pages-Blog/valine.png)\n\n按下图修改`themes/next`文件夹下的`_config.yml`主题配置文件，重新启动服务器就可以啦\n``` yaml\n # Valine.\n # You can get your appid and appkey from https://leancloud.cn\n # more info please open https://valine.js.org\n valine:\n   enable: true\n   appid: your appid  # your leancloud application appid\n   appkey: your appkey # your leancloud application appkey\n   notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n   verify: false # Verification code\n   placeholder: 描述  # comment box placeholder\n   avatar: monsterid # gravatar style\n   guest_info: nick,mail # custom comment header\n   pageSize: 10 # pagination size\n```\n如果要删除评论请到[Leancloud](https://leancloud.cn/)里删除哦\n![删除评论](Github-Pages-Blog/comment-delete.png)","source":"_posts/Github-Pages-Blog.md","raw":"---\ntitle: Mac下利用Github Pages快速搭建免费博客\ndate: 2019-01-30 19:30:04\ntags:\n    - github\n    - hexo\n    - 教程\n    - blog\ncategories: blog\ncopyright: true\ncomments: true\n---\n本博客利用Hexo + Next + GitHubPages 搭建博客。\n\n## 准备工作\n\n### 安装node.js\n\n``` bash\n$ brew install node\n```\n\n### 安装 git\n\n``` bash\n$ brew install git\n```\n\n### 安装yarn\n\n``` bash\n$ npm install yarn\n```\n\n如果安装失败用\n\n``` bash\n$ brew install yarn\n```\n\n### 安装hexo\n\n进入你的项目目录，举个例子我的目录是blog\n\n``` bash\n$ cd blog\n```\n\n然后用 yarn 安装 hexo\n\n``` bash\n$ yarn add hexo -S\n```\n\n如果安装失败用\n\n``` bash\n$ npm install hexo-cli -g\n$ npm install hexo-server --save\n```\n详细可见[官方文档](https://hexo.io/zh-cn/docs/)\n\n## 搭建本地博客\n\n### 项目初始化\n\n进入你的项目目录,初始化hexo\n\n``` bash\n$ cd blog\n$ hexo init\n```\n### 安装依赖\n\n``` bash\n$ yarn install\n```\n### 启动本地服务\n\n``` bash\n$ hexo server\n```\n在浏览器输入 `localhost:4000` 即可\n\n## 关联 GitHub\n### 创建项目\n\n![创建项目](Github-Pages-Blog/create-project.png)\n\n项目名称一定一定是 `[用户名].github.io`\n![创建项目](Github-Pages-Blog/create-repository.png)\n\n### 设置\n\n![设置](Github-Pages-Blog/setting.png)\n\n在设置中找到GitHub Pages ，分支选择master，点击choose a theme\n\n![设置github-pages](Github-Pages-Blog/github-pages.png)\n\n选择喜欢的主题，点击select theme即可\n![选择主题](Github-Pages-Blog/select-theme.png)\n\n到这里就可以访问你的主页啦  `https://[用户名].github.io/`,接下来复制你的项目链接\n\n![复制项目链接](Github-Pages-Blog/copy-url.png)\n\n到你的本地项目根目录找到 `_config.yml` 文件，粘贴到以下位置\n\n![hexo设置git](Github-Pages-Blog/deploy-position.png)\n\n### 站点配置\n站点配置包括修改博客名称，描述，作者等等，建议直接查看[官方教程](https://hexo.io/zh-cn/docs/configuration)\n\n### 关联\n\n安装 hexo-deployer-git 插件\n``` bash\n$ yarn add hexo-deployer-git -S\n```\n如果失败的话尝试下面的方法\n``` bash\n$ npm install --save hexo-deployer-git\n```\n在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo\n``` bash\n$  hexo d -g\n```\n这时访问你的github主页`https://[用户名].github.io/`就可以啦\n\n## NexT主题配置\nNexT 是一个高质量并且优雅的Hexo 主题。\n详细可见[官方文档](https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md)\n\n### 安装NexT主题\n在你的项目文件夹下，执行以下命令，安装NexT主题\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next\n```\n更改项目根目录下`_config.yml` 文件，如下\n![更改主题](Github-Pages-Blog/change-theme.png)\n\n重新生成本地文件并推送到github\n``` bash\n$  hexo d -g\n```\n访问你的github主页`https://[用户名].github.io/`就可以看到啦\n\n### 主题配置\n\n`themes/next`文件夹下的`_config.yml`是主题的配置文件\nnext内置了4种主题方案，选择你喜欢的方案解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\nMenu Settings是控制图中菜单的位置，根据需要解开注释即可\n```yaml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\nmenu:\n  home: / || home\n#  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n#  archives: /archives/ || archive\n#  schedule: /schedule/ || calendar\n#  sitemap: /sitemap.xml || sitemap\n#  commonweal: /404.html || heartbeat\n```\n![更改菜单](Github-Pages-Blog/blog-icon.png)\n还有很多很多的配置请参考[官方教程](http://theme-next.iissnan.com/getting-started.html#install-next-theme),[主题个性配置教程](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html),[主题美化](http://yearito.cn/posts/hexo-theme-beautify.html)\n\n修改之后，运行以下命令就可以再你的主页看到啦\n``` bash\n$  hexo clean\n$  hexo d -g\n```\n也可以在本地启动服务器，在浏览器输入 `localhost:4000` 观看效果\n``` bash\n$ hexo server\n```\n## 创建文章\n\n### 添加【标签】页面\n\n新建标签页面\n``` bash\n$ hexo new page tags\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: tags\ntype: \"tags\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `tags: /tags/ || tags` 这行注释\n新建测试文章\n``` bash\n$ hexo new 'test'\n```\n在测试文章的头部添加tags信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。\n![标签](Github-Pages-Blog/tags.png)\n\n### 添加【分类】页面\n新建标签页面\n``` bash\n$ hexo new page categories\n```\n修改项目根目录下 source/tags 的 index.md 文件如下：\n``` markdown\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n```\n修改`themes/next`文件夹下的`_config.yml`主题配置文件，取消  `categories: /categories/ || th` 这行注释\n在测试文章的头部添加categories信息，如下：\n``` markdown\ntitle: 测试文章\ntags:\n  - Testing\n  - Another Tag\n---\ncategories: Testing\n```\n启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。\n![分类](Github-Pages-Blog/categories.png)\n\n### 给博客添加图片\n在项目目录下执行\n\n``` bash\n$ npm install hexo-asset-image --save\n```\n\n在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹\n``` bash\n$ hexo new '文章名'\n```\n将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：\n``` markdown\n ![文字](xxxx/图片名.jpg)\n```\n文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n### 添加Valine评论系统\n\n首先需要去注册一个[Leancloud](https://leancloud.cn/)账号,验证邮箱\n然后随便创建一个应用，按如图所示找到`appid`，`appkey`\n![评论](Github-Pages-Blog/valine.png)\n\n按下图修改`themes/next`文件夹下的`_config.yml`主题配置文件，重新启动服务器就可以啦\n``` yaml\n # Valine.\n # You can get your appid and appkey from https://leancloud.cn\n # more info please open https://valine.js.org\n valine:\n   enable: true\n   appid: your appid  # your leancloud application appid\n   appkey: your appkey # your leancloud application appkey\n   notify: false # mail notifier , https://github.com/xCss/Valine/wiki\n   verify: false # Verification code\n   placeholder: 描述  # comment box placeholder\n   avatar: monsterid # gravatar style\n   guest_info: nick,mail # custom comment header\n   pageSize: 10 # pagination size\n```\n如果要删除评论请到[Leancloud](https://leancloud.cn/)里删除哦\n![删除评论](Github-Pages-Blog/comment-delete.png)","slug":"Github-Pages-Blog","published":1,"updated":"2019-03-27T06:50:24.302Z","layout":"post","photos":[],"link":"","_id":"cjtr440tq0001cnjvhe9a68r5","content":"<p>本博客利用Hexo + Next + GitHubPages 搭建博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装yarn\"><a href=\"#安装yarn\" class=\"headerlink\" title=\"安装yarn\"></a>安装yarn</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yarn</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>进入你的项目目录，举个例子我的目录是blog</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<p>然后用 yarn 安装 hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo -S</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<p>详细可见<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"搭建本地博客\"><a href=\"#搭建本地博客\" class=\"headerlink\" title=\"搭建本地博客\"></a>搭建本地博客</h2><h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><p>进入你的项目目录,初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>在浏览器输入 <code>localhost:4000</code> 即可</p>\n<h2 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/create-project.png\" alt=\"创建项目\"></p>\n<p>项目名称一定一定是 <code>[用户名].github.io</code><br><img src=\"/2019/01/30/Github-Pages-Blog/create-repository.png\" alt=\"创建项目\"></p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/setting.png\" alt=\"设置\"></p>\n<p>在设置中找到GitHub Pages ，分支选择master，点击choose a theme</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/github-pages.png\" alt=\"设置github-pages\"></p>\n<p>选择喜欢的主题，点击select theme即可<br><img src=\"/2019/01/30/Github-Pages-Blog/select-theme.png\" alt=\"选择主题\"></p>\n<p>到这里就可以访问你的主页啦  <code>https://[用户名].github.io/</code>,接下来复制你的项目链接</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/copy-url.png\" alt=\"复制项目链接\"></p>\n<p>到你的本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/deploy-position.png\" alt=\"hexo设置git\"></p>\n<h3 id=\"站点配置\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置</h3><p>站点配置包括修改博客名称，描述，作者等等，建议直接查看<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>安装 hexo-deployer-git 插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git -S</span><br></pre></td></tr></table></figure></p>\n<p>如果失败的话尝试下面的方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>这时访问你的github主页<code>https://[用户名].github.io/</code>就可以啦</p>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><p>NexT 是一个高质量并且优雅的Hexo 主题。<br>详细可见<a href=\"https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在你的项目文件夹下，执行以下命令，安装NexT主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></p>\n<p>更改项目根目录下<code>_config.yml</code> 文件，如下<br><img src=\"/2019/01/30/Github-Pages-Blog/change-theme.png\" alt=\"更改主题\"></p>\n<p>重新生成本地文件并推送到github<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>访问你的github主页<code>https://[用户名].github.io/</code>就可以看到啦</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p><code>themes/next</code>文件夹下的<code>_config.yml</code>是主题的配置文件<br>next内置了4种主题方案，选择你喜欢的方案解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></p>\n<p>Menu Settings是控制图中菜单的位置，根据需要解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"comment\">#  about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"comment\">#  archives: /archives/ || archive</span></span><br><span class=\"line\"><span class=\"comment\">#  schedule: /schedule/ || calendar</span></span><br><span class=\"line\"><span class=\"comment\">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"comment\">#  commonweal: /404.html || heartbeat</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/blog-icon.png\" alt=\"更改菜单\"><br>还有很多很多的配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" target=\"_blank\" rel=\"noopener\">官方教程</a>,<a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"noopener\">主题个性配置教程</a>,<a href=\"http://yearito.cn/posts/hexo-theme-beautify.html\" target=\"_blank\" rel=\"noopener\">主题美化</a></p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>也可以在本地启动服务器，在浏览器输入 <code>localhost:4000</code> 观看效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h2><h3 id=\"添加【标签】页面\"><a href=\"#添加【标签】页面\" class=\"headerlink\" title=\"添加【标签】页面\"></a>添加【标签】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>tags: /tags/ || tags</code> 这行注释<br>新建测试文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'test'</span></span><br></pre></td></tr></table></figure></p>\n<p>在测试文章的头部添加tags信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/tags.png\" alt=\"标签\"></p>\n<h3 id=\"添加【分类】页面\"><a href=\"#添加【分类】页面\" class=\"headerlink\" title=\"添加【分类】页面\"></a>添加【分类】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">type: \"categories\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>categories: /categories/ || th</code> 这行注释<br>在测试文章的头部添加categories信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">categories: Testing</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/categories.png\" alt=\"分类\"></p>\n<h3 id=\"给博客添加图片\"><a href=\"#给博客添加图片\" class=\"headerlink\" title=\"给博客添加图片\"></a>给博客添加图片</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'文章名'</span></span><br></pre></td></tr></table></figure></p>\n<p>将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文字</span>](<span class=\"link\">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure></p>\n<p>文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<h3 id=\"添加Valine评论系统\"><a href=\"#添加Valine评论系统\" class=\"headerlink\" title=\"添加Valine评论系统\"></a>添加Valine评论系统</h3><p>首先需要去注册一个<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>账号,验证邮箱<br>然后随便创建一个应用，按如图所示找到<code>appid</code>，<code>appkey</code><br><img src=\"/2019/01/30/Github-Pages-Blog/valine.png\" alt=\"评论\"></p>\n<p>按下图修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，重新启动服务器就可以啦<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Valine.</span></span><br><span class=\"line\"><span class=\"comment\"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class=\"line\"><span class=\"comment\"># more info please open https://valine.js.org</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"string\">your</span> <span class=\"string\">appid</span>  <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"string\">your</span> <span class=\"string\">appkey</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">描述</span>  <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要删除评论请到<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>里删除哦<br><img src=\"/2019/01/30/Github-Pages-Blog/comment-delete.png\" alt=\"删除评论\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本博客利用Hexo + Next + GitHubPages 搭建博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装yarn\"><a href=\"#安装yarn\" class=\"headerlink\" title=\"安装yarn\"></a>安装yarn</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install yarn</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install yarn</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>进入你的项目目录，举个例子我的目录是blog</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></table></figure>\n<p>然后用 yarn 安装 hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo -S</span><br></pre></td></tr></table></figure>\n<p>如果安装失败用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n<p>详细可见<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h2 id=\"搭建本地博客\"><a href=\"#搭建本地博客\" class=\"headerlink\" title=\"搭建本地博客\"></a>搭建本地博客</h2><h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><p>进入你的项目目录,初始化hexo</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>在浏览器输入 <code>localhost:4000</code> 即可</p>\n<h2 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/create-project.png\" alt=\"创建项目\"></p>\n<p>项目名称一定一定是 <code>[用户名].github.io</code><br><img src=\"/2019/01/30/Github-Pages-Blog/create-repository.png\" alt=\"创建项目\"></p>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p><img src=\"/2019/01/30/Github-Pages-Blog/setting.png\" alt=\"设置\"></p>\n<p>在设置中找到GitHub Pages ，分支选择master，点击choose a theme</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/github-pages.png\" alt=\"设置github-pages\"></p>\n<p>选择喜欢的主题，点击select theme即可<br><img src=\"/2019/01/30/Github-Pages-Blog/select-theme.png\" alt=\"选择主题\"></p>\n<p>到这里就可以访问你的主页啦  <code>https://[用户名].github.io/</code>,接下来复制你的项目链接</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/copy-url.png\" alt=\"复制项目链接\"></p>\n<p>到你的本地项目根目录找到 <code>_config.yml</code> 文件，粘贴到以下位置</p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/deploy-position.png\" alt=\"hexo设置git\"></p>\n<h3 id=\"站点配置\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置</h3><p>站点配置包括修改博客名称，描述，作者等等，建议直接查看<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方教程</a></p>\n<h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><p>安装 hexo-deployer-git 插件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git -S</span><br></pre></td></tr></table></figure></p>\n<p>如果失败的话尝试下面的方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>在你的项目文件夹下运行 hexo d -g （生成本地文件并将本地文件推送到 GitHub ，和 git push 功能相同）,如果失败的话前面加sudo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>这时访问你的github主页<code>https://[用户名].github.io/</code>就可以啦</p>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><p>NexT 是一个高质量并且优雅的Hexo 主题。<br>详细可见<a href=\"https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h3 id=\"安装NexT主题\"><a href=\"#安装NexT主题\" class=\"headerlink\" title=\"安装NexT主题\"></a>安装NexT主题</h3><p>在你的项目文件夹下，执行以下命令，安装NexT主题<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></p>\n<p>更改项目根目录下<code>_config.yml</code> 文件，如下<br><img src=\"/2019/01/30/Github-Pages-Blog/change-theme.png\" alt=\"更改主题\"></p>\n<p>重新生成本地文件并推送到github<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>访问你的github主页<code>https://[用户名].github.io/</code>就可以看到啦</p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p><code>themes/next</code>文件夹下的<code>_config.yml</code>是主题的配置文件<br>next内置了4种主题方案，选择你喜欢的方案解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></p>\n<p>Menu Settings是控制图中菜单的位置，根据需要解开注释即可<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\"><span class=\"attr\">  home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\"><span class=\"comment\">#  about: /about/ || user</span></span><br><span class=\"line\"><span class=\"attr\">  tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">  categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\"><span class=\"comment\">#  archives: /archives/ || archive</span></span><br><span class=\"line\"><span class=\"comment\">#  schedule: /schedule/ || calendar</span></span><br><span class=\"line\"><span class=\"comment\">#  sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\"><span class=\"comment\">#  commonweal: /404.html || heartbeat</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/01/30/Github-Pages-Blog/blog-icon.png\" alt=\"更改菜单\"><br>还有很多很多的配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html#install-next-theme\" target=\"_blank\" rel=\"noopener\">官方教程</a>,<a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\" target=\"_blank\" rel=\"noopener\">主题个性配置教程</a>,<a href=\"http://yearito.cn/posts/hexo-theme-beautify.html\" target=\"_blank\" rel=\"noopener\">主题美化</a></p>\n<p>修改之后，运行以下命令就可以再你的主页看到啦<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean</span><br><span class=\"line\">$  hexo d -g</span><br></pre></td></tr></table></figure></p>\n<p>也可以在本地启动服务器，在浏览器输入 <code>localhost:4000</code> 观看效果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h2><h3 id=\"添加【标签】页面\"><a href=\"#添加【标签】页面\" class=\"headerlink\" title=\"添加【标签】页面\"></a>添加【标签】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: tags</span><br><span class=\"line\">type: \"tags\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>tags: /tags/ || tags</code> 这行注释<br>新建测试文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'test'</span></span><br></pre></td></tr></table></figure></p>\n<p>在测试文章的头部添加tags信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明标签页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/tags.png\" alt=\"标签\"></p>\n<h3 id=\"添加【分类】页面\"><a href=\"#添加【分类】页面\" class=\"headerlink\" title=\"添加【分类】页面\"></a>添加【分类】页面</h3><p>新建标签页面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>\n<p>修改项目根目录下 source/tags 的 index.md 文件如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: categories</span><br><span class=\"line\">type: \"categories\"</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，取消  <code>categories: /categories/ || th</code> 这行注释<br>在测试文章的头部添加categories信息，如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 测试文章</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\">---</span><br><span class=\"line\">categories: Testing</span><br></pre></td></tr></table></figure></p>\n<p>启动本地服务，就可以看到标签菜单，点击可进入标签页，看到 如图所示 证明分类页面添加成功。<br><img src=\"/2019/01/30/Github-Pages-Blog/categories.png\" alt=\"分类\"></p>\n<h3 id=\"给博客添加图片\"><a href=\"#给博客添加图片\" class=\"headerlink\" title=\"给博客添加图片\"></a>给博客添加图片</h3><p>在项目目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>在用下面命令生成md文章时，会在_post目录下看到一个与文章同名的文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">'文章名'</span></span><br></pre></td></tr></table></figure></p>\n<p>将想要上传的图片先放到文件夹下，然后在博客中使用markdown的格式引入图片：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文字</span>](<span class=\"link\">xxxx/图片名.jpg</span>)</span><br></pre></td></tr></table></figure></p>\n<p>文章名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<h3 id=\"添加Valine评论系统\"><a href=\"#添加Valine评论系统\" class=\"headerlink\" title=\"添加Valine评论系统\"></a>添加Valine评论系统</h3><p>首先需要去注册一个<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>账号,验证邮箱<br>然后随便创建一个应用，按如图所示找到<code>appid</code>，<code>appkey</code><br><img src=\"/2019/01/30/Github-Pages-Blog/valine.png\" alt=\"评论\"></p>\n<p>按下图修改<code>themes/next</code>文件夹下的<code>_config.yml</code>主题配置文件，重新启动服务器就可以啦<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Valine.</span></span><br><span class=\"line\"><span class=\"comment\"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class=\"line\"><span class=\"comment\"># more info please open https://valine.js.org</span></span><br><span class=\"line\"><span class=\"attr\">valine:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  appid:</span> <span class=\"string\">your</span> <span class=\"string\">appid</span>  <span class=\"comment\"># your leancloud application appid</span></span><br><span class=\"line\"><span class=\"attr\">  appkey:</span> <span class=\"string\">your</span> <span class=\"string\">appkey</span> <span class=\"comment\"># your leancloud application appkey</span></span><br><span class=\"line\"><span class=\"attr\">  notify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class=\"line\"><span class=\"attr\">  verify:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Verification code</span></span><br><span class=\"line\"><span class=\"attr\">  placeholder:</span> <span class=\"string\">描述</span>  <span class=\"comment\"># comment box placeholder</span></span><br><span class=\"line\"><span class=\"attr\">  avatar:</span> <span class=\"string\">monsterid</span> <span class=\"comment\"># gravatar style</span></span><br><span class=\"line\"><span class=\"attr\">  guest_info:</span> <span class=\"string\">nick,mail</span> <span class=\"comment\"># custom comment header</span></span><br><span class=\"line\"><span class=\"attr\">  pageSize:</span> <span class=\"number\">10</span> <span class=\"comment\"># pagination size</span></span><br></pre></td></tr></table></figure></p>\n<p>如果要删除评论请到<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">Leancloud</a>里删除哦<br><img src=\"/2019/01/30/Github-Pages-Blog/comment-delete.png\" alt=\"删除评论\"></p>\n"},{"title":"redis-sds动态字符串【学习笔记】","date":"2019-03-27T07:56:04.000Z","copyright":true,"comments":0,"_content":"### SDS定义\n\n```c\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n\n```\n\n### SDS常用函数\n\n```c\n/*\n * 返回 sds 实际保存的字符串的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->len;\n}\n\n```","source":"_posts/Redis-sds.md","raw":"---\ntitle: redis-sds动态字符串【学习笔记】\ndate: 2019-03-27 15:56:04\ntags:\n    - redis\n    - 源码\ncategories: redis\ncopyright: true\ncomments: false\n---\n### SDS定义\n\n```c\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n\n```\n\n### SDS常用函数\n\n```c\n/*\n * 返回 sds 实际保存的字符串的长度\n *\n * T = O(1)\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->len;\n}\n\n```","slug":"Redis-sds","published":1,"updated":"2019-03-27T11:16:01.078Z","_id":"cjtr440tv0004cnjv93qmov0m","layout":"post","photos":[],"link":"","content":"<h3 id=\"SDS定义\"><a href=\"#SDS定义\" class=\"headerlink\" title=\"SDS定义\"></a>SDS定义</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SDS常用函数\"><a href=\"#SDS常用函数\" class=\"headerlink\" title=\"SDS常用函数\"></a>SDS常用函数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SDS定义\"><a href=\"#SDS定义\" class=\"headerlink\" title=\"SDS定义\"></a>SDS定义</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SDS常用函数\"><a href=\"#SDS常用函数\" class=\"headerlink\" title=\"SDS常用函数\"></a>SDS常用函数</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * T = O(1)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> size_t <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"《自己动手写JAVA虚拟机》学习笔记三【解析class文件】","date":"2019-02-14T03:38:04.000Z","copyright":true,"comments":0,"_content":"java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：\n```java\nClassFile {\n     u4             magic;//魔数\n     u2             minor_version;//主版本号\n     u2             major_version;//次版本号\n     u2             constant_pool_count;//常量池长度\n     cp_info        constant_pool[constant_pool_count-1];//常量池信息\n     u2             access_flags;//该类的访问修饰符\n     u2             this_class;//类索引\n     u2             super_class;//父类索引\n     u2             interfaces_count;//接口个数\n     u2             interfaces[interfaces_count];//接口详细信息\n     u2             fields_count;//属性个数\n     field_info     fields[fields_count];//属性详细信息\n     u2             methods_count;//方法个数\n     method_info    methods[methods_count];//方法详情\n     u2             attributes_count;//类文件属性个数\n     attribute_info attributes[attributes_count];//类文件属性详细信息\n}\n```\n### 准备工作\n\n把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n    |-ch03\n        |-classfile\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n为了学习编译后的class文件，新建一个classFileTest.java然后编译\n```java\npublic class ClassFileTest {\n    public static final boolean FLAG = true;\n    public static final byte BYTE = 123;\n    public static final char X = 'X';\n    public static final short SHORT = 12345;\n    public static final int INT = 123456789;\n    public static final long LONG = 12345678901L;\n    public static final float PI = 3.14f;\n    public static final double E = 2.71828;\n    public static void main(String[] args) throws RuntimeException {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n用作者提供的[classpy](https://github.com/zxh0/classpy)的图形化工具，可以查看反编译后的class文件。","source":"_posts/JVM3.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记三【解析class文件】\ndate: 2019-02-14 11:38:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\ncopyright: true\ncomments: false\n---\njava虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：\n```java\nClassFile {\n     u4             magic;//魔数\n     u2             minor_version;//主版本号\n     u2             major_version;//次版本号\n     u2             constant_pool_count;//常量池长度\n     cp_info        constant_pool[constant_pool_count-1];//常量池信息\n     u2             access_flags;//该类的访问修饰符\n     u2             this_class;//类索引\n     u2             super_class;//父类索引\n     u2             interfaces_count;//接口个数\n     u2             interfaces[interfaces_count];//接口详细信息\n     u2             fields_count;//属性个数\n     field_info     fields[fields_count];//属性详细信息\n     u2             methods_count;//方法个数\n     method_info    methods[methods_count];//方法详情\n     u2             attributes_count;//类文件属性个数\n     attribute_info attributes[attributes_count];//类文件属性详细信息\n}\n```\n### 准备工作\n\n把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n    |-ch03\n        |-classfile\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n为了学习编译后的class文件，新建一个classFileTest.java然后编译\n```java\npublic class ClassFileTest {\n    public static final boolean FLAG = true;\n    public static final byte BYTE = 123;\n    public static final char X = 'X';\n    public static final short SHORT = 12345;\n    public static final int INT = 123456789;\n    public static final long LONG = 12345678901L;\n    public static final float PI = 3.14f;\n    public static final double E = 2.71828;\n    public static void main(String[] args) throws RuntimeException {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n用作者提供的[classpy](https://github.com/zxh0/classpy)的图形化工具，可以查看反编译后的class文件。","slug":"JVM3","published":1,"updated":"2019-02-14T06:24:46.000Z","layout":"post","photos":[],"link":"","_id":"cjtr440tw0005cnjv2o4qty2c","content":"<p>java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">     u4             magic;<span class=\"comment\">//魔数</span></span><br><span class=\"line\">     u2             minor_version;<span class=\"comment\">//主版本号</span></span><br><span class=\"line\">     u2             major_version;<span class=\"comment\">//次版本号</span></span><br><span class=\"line\">     u2             constant_pool_count;<span class=\"comment\">//常量池长度</span></span><br><span class=\"line\">     cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];<span class=\"comment\">//常量池信息</span></span><br><span class=\"line\">     u2             access_flags;<span class=\"comment\">//该类的访问修饰符</span></span><br><span class=\"line\">     u2             this_class;<span class=\"comment\">//类索引</span></span><br><span class=\"line\">     u2             super_class;<span class=\"comment\">//父类索引</span></span><br><span class=\"line\">     u2             interfaces_count;<span class=\"comment\">//接口个数</span></span><br><span class=\"line\">     u2             interfaces[interfaces_count];<span class=\"comment\">//接口详细信息</span></span><br><span class=\"line\">     u2             fields_count;<span class=\"comment\">//属性个数</span></span><br><span class=\"line\">     field_info     fields[fields_count];<span class=\"comment\">//属性详细信息</span></span><br><span class=\"line\">     u2             methods_count;<span class=\"comment\">//方法个数</span></span><br><span class=\"line\">     method_info    methods[methods_count];<span class=\"comment\">//方法详情</span></span><br><span class=\"line\">     u2             attributes_count;<span class=\"comment\">//类文件属性个数</span></span><br><span class=\"line\">     attribute_info attributes[attributes_count];<span class=\"comment\">//类文件属性详细信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch03</span><br><span class=\"line\">        |-classfile</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>为了学习编译后的class文件，新建一个classFileTest.java然后编译<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> FLAG = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> X = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> SHORT = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INT = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> LONG = <span class=\"number\">12345678901L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> PI = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> E = <span class=\"number\">2.71828</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RuntimeException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用作者提供的<a href=\"https://github.com/zxh0/classpy\" target=\"_blank\" rel=\"noopener\">classpy</a>的图形化工具，可以查看反编译后的class文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>java虚拟机规范中使用一种类似C语言结构体来描述Class文件的基本结构，具体如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">     u4             magic;<span class=\"comment\">//魔数</span></span><br><span class=\"line\">     u2             minor_version;<span class=\"comment\">//主版本号</span></span><br><span class=\"line\">     u2             major_version;<span class=\"comment\">//次版本号</span></span><br><span class=\"line\">     u2             constant_pool_count;<span class=\"comment\">//常量池长度</span></span><br><span class=\"line\">     cp_info        constant_pool[constant_pool_count-<span class=\"number\">1</span>];<span class=\"comment\">//常量池信息</span></span><br><span class=\"line\">     u2             access_flags;<span class=\"comment\">//该类的访问修饰符</span></span><br><span class=\"line\">     u2             this_class;<span class=\"comment\">//类索引</span></span><br><span class=\"line\">     u2             super_class;<span class=\"comment\">//父类索引</span></span><br><span class=\"line\">     u2             interfaces_count;<span class=\"comment\">//接口个数</span></span><br><span class=\"line\">     u2             interfaces[interfaces_count];<span class=\"comment\">//接口详细信息</span></span><br><span class=\"line\">     u2             fields_count;<span class=\"comment\">//属性个数</span></span><br><span class=\"line\">     field_info     fields[fields_count];<span class=\"comment\">//属性详细信息</span></span><br><span class=\"line\">     u2             methods_count;<span class=\"comment\">//方法个数</span></span><br><span class=\"line\">     method_info    methods[methods_count];<span class=\"comment\">//方法详情</span></span><br><span class=\"line\">     u2             attributes_count;<span class=\"comment\">//类文件属性个数</span></span><br><span class=\"line\">     attribute_info attributes[attributes_count];<span class=\"comment\">//类文件属性详细信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch02的目录结构复制一份改名ch03，在ch03的目录中创建一个classfile子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch03</span><br><span class=\"line\">        |-classfile</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>为了学习编译后的class文件，新建一个classFileTest.java然后编译<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassFileTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> FLAG = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> X = <span class=\"string\">'X'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span> SHORT = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INT = <span class=\"number\">123456789</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> LONG = <span class=\"number\">12345678901L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> PI = <span class=\"number\">3.14f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> E = <span class=\"number\">2.71828</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RuntimeException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用作者提供的<a href=\"https://github.com/zxh0/classpy\" target=\"_blank\" rel=\"noopener\">classpy</a>的图形化工具，可以查看反编译后的class文件。</p>\n"},{"title":"《自己动手写JAVA虚拟机》学习笔记二【搜索class文件】","date":"2019-02-12T08:14:04.000Z","copyright":true,"comments":0,"_content":"```java\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello, world!\");\n    }\n}\n```\n运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？\n\n## 类路径\n类路径可以分为以下三种：\n * 启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。\n * 扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。\n * 用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。\n\n### 准备工作\n\n把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n修改cmd结构体，添加XjreOption字段\n```go\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tXjreOption string\n\tclass string\n\targs []string\n}\n```\nparseCmd()函数也对应添加Xjre\n```go\n//命令解析\nfunc parseCmd() *Cmd {\n    ...//其他代码不变\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.XjreOption,\"Xjre\",\"\",\"path to jre\")\n\t//解析命令行参数到定义的flag\n\tflag.Parse()\n\t...//其他代码不变\n}\n```\n### 实现类路径 \n\n采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。\n\n首先定义一个Entry接口\n```go\n//获取系统分隔符，windows是;类UNIX系统是:号\nconst pathListSeparator = string(os.PathListSeparator)\n\ntype Entry interface {\n\t//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀\n\t//例如读取java.lang.Object入参是java/lang/Object.class\n\treadClass(classname string) ([]byte, Entry, error)\n\n\t//toString\n\tString() string\n}\n```\nEntry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry\n#### DirEntry\nDirEntry相对简单些，表示目录形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"io/ioutil\"\n)\n\ntype DirEntry struct {\n\t//存放目录的绝对路径\n\tabsDir string\n}\n\n//相当于构造函数\nfunc newDirEntry(path string) *DirEntry {\n\t//将参数转换成绝对路径\n\tabsDir, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &DirEntry{absDir}\n}\n//读取class文件\nfunc (self *DirEntry) readClass (className string) ([]byte, Entry, error) {\n\t//把目录和class名拼成完成路径\n\tfileName := filepath.Join(self.absDir,className)\n\t//读取class文件内容\n\tdata, err := ioutil.ReadFile(fileName)\n\treturn data,self,err\n}\n\n//直接返回目录\nfunc (self *DirEntry) String() string{\n\treturn self.absDir\n}\n```\n#### ZipEntry\nZipEntry表示ZIP或者JAR文件形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"archive/zip\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\n\ntype ZipEntry struct {\n\t//存放目录的绝对路径\n\tabsPath string\n}\n\n//相当于构造函数\nfunc newZipEntry(path string) *ZipEntry {\n\t//将参数转换成绝对路径\n\tabsPath, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &ZipEntry{absPath}\n}\n\n//读取class文件\nfunc (self *ZipEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//打开zip文件\n\tr, err := zip.OpenReader(self.absPath)\n\tif err != nil {\n\t\treturn nil,nil,err\n\t}\n\tdefer r.Close()\n\n\t//遍历zip包里的文件\n\tfor _, f := range r.File {\n\t\t//找到class文件\n\t\tif f.Name == classname {\n\t\t\t//打开class文件\n\t\t\trc , err := f.Open()\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\tdefer rc.Close()\n\t\t\t//读取class文件内容\n\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\treturn data,self,err\n\t\t}\n\t}\n\t//未找到class文件\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n\n//直接返回目录\nfunc (self *ZipEntry) String() string {\n\treturn self.absPath\n}\n```\n#### CompositeEntry\nCompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice\n\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"errors\"\n)\n\ntype CompositeEntry []Entry\n\n\n//将每个小路径转换成具体的Entry\nfunc newCompositeEntry(pathList string) CompositeEntry {\n\tvar compositeEntry []Entry\n\t//将路径按照分隔符进行分割\n\tfor _, path := range strings.Split(pathList,pathListSeparator){\n\t\tentry := newEntry(path)\n\t\tcompositeEntry = append(compositeEntry,entry)\n\t}\n\treturn compositeEntry\n}\n\nfunc (self CompositeEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//遍历entry数据\n\tfor _, entry := range self{\n\t\t//读取class文件，依次调用每一个子路径的readClass方法\n\t\tdata, from, err := entry.readClass(classname)\n\t\tif err == nil{\n\t\t\treturn data,from,err\n\t\t}\n\t}\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n//调用每个子路径的String方法，用分隔符拼接起来\nfunc (self CompositeEntry) String() string {\n\tstrs := make([]string,len(self))\n\tfor i, entry := range self{\n\t\tstrs[i] = entry.String()\n\t}\n\treturn strings.Join(strs,pathListSeparator)\n}\n```\n#### WildcardEntry\nWildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc newWildcardEntry(path string) CompositeEntry {\n\t//去掉尾部的*\n\tbaseDir := path[:len(path)-1]\n\tvar compositeEntry []Entry\n\twalkFn := func(path string, info os.FileInfo, err error) error{\n\t\tif err != nil{\n\t\t\treturn err\n\t\t}\n\t\t//如果不是目录，返回跳过标识\n\t\tif info.IsDir() && path != baseDir {\n\t\t\treturn filepath.SkipDir\n\t\t}\n\t\t//选出jar文件\n\t\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\"){\n\t\t\tjarEntry := newZipEntry(path)\n\t\t\tcompositeEntry = append(compositeEntry,jarEntry)\n\t\t}\n\t\treturn nil\n\t}\n\t//遍历baseDir路径，创建zipEntry\n\tfilepath.Walk(baseDir,walkFn)\n\t//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)\n\treturn compositeEntry\n}\n```\n#### Entry\n四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。\n````go\nfunc newEntry(path string) Entry {\n\t//如果路径中含有分隔符\n\tif strings.Contains(path,pathListSeparator){\n\t\treturn newCompositeEntry(path)\n\t}\n\t//如果路径末尾是*\n\tif strings.HasSuffix(path,\"*\"){\n\t\treturn newWildcardEntry(path)\n\t}\n\t//如果路径以jar或者zip结尾\n\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\")||\n\t\tstrings.HasSuffix(path,\".zip\") || strings.HasSuffix(path,\".ZIP\"){\n\t\t\treturn newZipEntry(path)\n\t}\n\treturn newDirEntry(path)\n}\n````\n#### 实现Classpath\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"os\"\n\t\"fmt\"\n)\n\ntype Classpath struct {\n\tbootClasspath Entry\n\textClasspath Entry\n\tuserClasspath Entry\n}\n//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径\nfunc Parse(jreOption,cpOption string) *Classpath  {\n\tcp := &Classpath{}\n\t//解析启动类路径和扩展类路径\n\tcp.parseBootAndExtClasspath(jreOption)\n\n\t//解析用户类路径\n\tcp.parseUserClasspath(cpOption)\n\treturn cp\n}\n\nfunc getJreDir(jreOption string) string {\n\t//优先使用用户输入的-Xjre作为目录\n\tif jreOption != \"\" && exists(jreOption){\n\t\treturn jreOption\n\t}\n\t//在当前目录下寻找jre目录\n\tif exists(\"./jre\") {\n\t\treturn \"./jre\"\n\t}\n\t//尝试使用JAVA_HOME环境变量\n\tif jh := os.Getenv(\"JAVA_HOME\"); jh != \"\"{\n\t\treturn filepath.Join(jh,\"jre\")\n\t}\n\tpanic(\"Can not find jre folder\")\n}\n\n//判断目录是否存在\nfunc exists(path string) bool {\n\tif _, err := os.Stat(path); err != nil{\n\t\tif os.IsNotExist(err){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (self *Classpath) parseBootAndExtClasspath(jreOption string) {\n\t// 获取jre目录\n\tjreDir := getJreDir(jreOption)\n\t//jre/lib/*\n\tjreLibPath := filepath.Join(jreDir,\"lib\",\"*\")\n\tself.bootClasspath = newWildcardEntry(jreLibPath)\n\t//jre/lib/ext/*\n\tjreExtPath := filepath.Join(jreDir,\"lib\",\"ext\",\"*\")\n\tself.extClasspath = newWildcardEntry(jreExtPath)\n}\n\n//解析用户类路径\nfunc (self *Classpath) parseUserClasspath(cpOption string) {\n\t// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径\n\tif cpOption == \"\"{\n\t\tcpOption = \".\"\n\t}\n\tself.userClasspath = newEntry(cpOption)\n}\n\n//寻找class方法\nfunc (self *Classpath) ReadClass(classname string) ([]byte, Entry, error) {\n\t//访问ReadClass方法只需传递类名，不用包含\".class\"后缀\n\tclassname = classname + \".class\"\n\t// 从bootClasspath寻找class文件\n\tif data, entry, err := self.bootClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从extClasspath寻找class文件\n\tif data, entry, err := self.extClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从userClasspath寻找class文件\n\treturn self.userClasspath.readClass(classname)\n}\n\nfunc (self *Classpath) String() string {\n\treturn self.userClasspath.String()\n}\n```\n### 测试代码\n\n完善main.go中的startJVM\n```go\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t// 获取Classpath\n\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cp,cmd.class,cmd.args)\n\t// 将.替换成/(java.lang.String -> java/lang/String)\n\tclassName := strings.Replace(cmd.class,\".\",\"/\",-1)\n\t// 读取class\n\tclassData, _, err := cp.ReadClass(className)\n\tif err != nil {\n\t\tfmt.Printf(\"Could not find or load main class %s\\n\",cmd.class)\n\t\treturn\n\t}\n\tfmt.Printf(\"class data : %v\\n\",classData)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch02 \n$ ch02 java.lang.String\n# 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容\n$ ch02 -Xjre /opt  java.lang.Object \n# 传递错误-Xjre会打印出Could not find or load main class java.lang.Object\n```\n","source":"_posts/JVM2.md","raw":"---\ntitle: 《自己动手写JAVA虚拟机》学习笔记二【搜索class文件】\ndate: 2019-02-12 16:14:04\ntags:\n    - JVM\n    - JAVA\n    - GO\n    - 学习笔记\ncategories: JVM\ncopyright: true\ncomments: false\n---\n```java\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello, world!\");\n    }\n}\n```\n运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？\n\n## 类路径\n类路径可以分为以下三种：\n * 启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。\n * 扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。\n * 用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。\n\n### 准备工作\n\n把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。\n```base\n|-jvmgo\n    |-ch01\n    |-ch01\n        |-classpath\n        |-cmd.go\n        |-main.go\n```\n修改cmd结构体，添加XjreOption字段\n```go\ntype Cmd struct {\n\thelpFlag bool\n\tversionFlag bool\n\tcpOption string\n\tXjreOption string\n\tclass string\n\targs []string\n}\n```\nparseCmd()函数也对应添加Xjre\n```go\n//命令解析\nfunc parseCmd() *Cmd {\n    ...//其他代码不变\n\tflag.StringVar(&cmd.cpOption,\"cp\",\"\",\"classpath\")\n\tflag.StringVar(&cmd.XjreOption,\"Xjre\",\"\",\"path to jre\")\n\t//解析命令行参数到定义的flag\n\tflag.Parse()\n\t...//其他代码不变\n}\n```\n### 实现类路径 \n\n采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。\n\n首先定义一个Entry接口\n```go\n//获取系统分隔符，windows是;类UNIX系统是:号\nconst pathListSeparator = string(os.PathListSeparator)\n\ntype Entry interface {\n\t//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀\n\t//例如读取java.lang.Object入参是java/lang/Object.class\n\treadClass(classname string) ([]byte, Entry, error)\n\n\t//toString\n\tString() string\n}\n```\nEntry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry\n#### DirEntry\nDirEntry相对简单些，表示目录形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"io/ioutil\"\n)\n\ntype DirEntry struct {\n\t//存放目录的绝对路径\n\tabsDir string\n}\n\n//相当于构造函数\nfunc newDirEntry(path string) *DirEntry {\n\t//将参数转换成绝对路径\n\tabsDir, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &DirEntry{absDir}\n}\n//读取class文件\nfunc (self *DirEntry) readClass (className string) ([]byte, Entry, error) {\n\t//把目录和class名拼成完成路径\n\tfileName := filepath.Join(self.absDir,className)\n\t//读取class文件内容\n\tdata, err := ioutil.ReadFile(fileName)\n\treturn data,self,err\n}\n\n//直接返回目录\nfunc (self *DirEntry) String() string{\n\treturn self.absDir\n}\n```\n#### ZipEntry\nZipEntry表示ZIP或者JAR文件形式的类路径\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"archive/zip\"\n\t\"io/ioutil\"\n\t\"errors\"\n)\n\ntype ZipEntry struct {\n\t//存放目录的绝对路径\n\tabsPath string\n}\n\n//相当于构造函数\nfunc newZipEntry(path string) *ZipEntry {\n\t//将参数转换成绝对路径\n\tabsPath, err := filepath.Abs(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &ZipEntry{absPath}\n}\n\n//读取class文件\nfunc (self *ZipEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//打开zip文件\n\tr, err := zip.OpenReader(self.absPath)\n\tif err != nil {\n\t\treturn nil,nil,err\n\t}\n\tdefer r.Close()\n\n\t//遍历zip包里的文件\n\tfor _, f := range r.File {\n\t\t//找到class文件\n\t\tif f.Name == classname {\n\t\t\t//打开class文件\n\t\t\trc , err := f.Open()\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\tdefer rc.Close()\n\t\t\t//读取class文件内容\n\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\tif err != nil {\n\t\t\t\treturn nil,nil,err\n\t\t\t}\n\t\t\treturn data,self,err\n\t\t}\n\t}\n\t//未找到class文件\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n\n//直接返回目录\nfunc (self *ZipEntry) String() string {\n\treturn self.absPath\n}\n```\n#### CompositeEntry\nCompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice\n\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"errors\"\n)\n\ntype CompositeEntry []Entry\n\n\n//将每个小路径转换成具体的Entry\nfunc newCompositeEntry(pathList string) CompositeEntry {\n\tvar compositeEntry []Entry\n\t//将路径按照分隔符进行分割\n\tfor _, path := range strings.Split(pathList,pathListSeparator){\n\t\tentry := newEntry(path)\n\t\tcompositeEntry = append(compositeEntry,entry)\n\t}\n\treturn compositeEntry\n}\n\nfunc (self CompositeEntry) readClass(classname string) ([]byte, Entry, error) {\n\t//遍历entry数据\n\tfor _, entry := range self{\n\t\t//读取class文件，依次调用每一个子路径的readClass方法\n\t\tdata, from, err := entry.readClass(classname)\n\t\tif err == nil{\n\t\t\treturn data,from,err\n\t\t}\n\t}\n\treturn nil,nil,errors.New(\"class not found :\" +classname)\n}\n//调用每个子路径的String方法，用分隔符拼接起来\nfunc (self CompositeEntry) String() string {\n\tstrs := make([]string,len(self))\n\tfor i, entry := range self{\n\t\tstrs[i] = entry.String()\n\t}\n\treturn strings.Join(strs,pathListSeparator)\n}\n```\n#### WildcardEntry\nWildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类\n```go\npackage classpath\n\nimport (\n\t\"strings\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc newWildcardEntry(path string) CompositeEntry {\n\t//去掉尾部的*\n\tbaseDir := path[:len(path)-1]\n\tvar compositeEntry []Entry\n\twalkFn := func(path string, info os.FileInfo, err error) error{\n\t\tif err != nil{\n\t\t\treturn err\n\t\t}\n\t\t//如果不是目录，返回跳过标识\n\t\tif info.IsDir() && path != baseDir {\n\t\t\treturn filepath.SkipDir\n\t\t}\n\t\t//选出jar文件\n\t\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\"){\n\t\t\tjarEntry := newZipEntry(path)\n\t\t\tcompositeEntry = append(compositeEntry,jarEntry)\n\t\t}\n\t\treturn nil\n\t}\n\t//遍历baseDir路径，创建zipEntry\n\tfilepath.Walk(baseDir,walkFn)\n\t//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)\n\treturn compositeEntry\n}\n```\n#### Entry\n四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。\n````go\nfunc newEntry(path string) Entry {\n\t//如果路径中含有分隔符\n\tif strings.Contains(path,pathListSeparator){\n\t\treturn newCompositeEntry(path)\n\t}\n\t//如果路径末尾是*\n\tif strings.HasSuffix(path,\"*\"){\n\t\treturn newWildcardEntry(path)\n\t}\n\t//如果路径以jar或者zip结尾\n\tif strings.HasSuffix(path,\".jar\") || strings.HasSuffix(path,\".JAR\")||\n\t\tstrings.HasSuffix(path,\".zip\") || strings.HasSuffix(path,\".ZIP\"){\n\t\t\treturn newZipEntry(path)\n\t}\n\treturn newDirEntry(path)\n}\n````\n#### 实现Classpath\n```go\npackage classpath\n\nimport (\n\t\"path/filepath\"\n\t\"os\"\n\t\"fmt\"\n)\n\ntype Classpath struct {\n\tbootClasspath Entry\n\textClasspath Entry\n\tuserClasspath Entry\n}\n//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径\nfunc Parse(jreOption,cpOption string) *Classpath  {\n\tcp := &Classpath{}\n\t//解析启动类路径和扩展类路径\n\tcp.parseBootAndExtClasspath(jreOption)\n\n\t//解析用户类路径\n\tcp.parseUserClasspath(cpOption)\n\treturn cp\n}\n\nfunc getJreDir(jreOption string) string {\n\t//优先使用用户输入的-Xjre作为目录\n\tif jreOption != \"\" && exists(jreOption){\n\t\treturn jreOption\n\t}\n\t//在当前目录下寻找jre目录\n\tif exists(\"./jre\") {\n\t\treturn \"./jre\"\n\t}\n\t//尝试使用JAVA_HOME环境变量\n\tif jh := os.Getenv(\"JAVA_HOME\"); jh != \"\"{\n\t\treturn filepath.Join(jh,\"jre\")\n\t}\n\tpanic(\"Can not find jre folder\")\n}\n\n//判断目录是否存在\nfunc exists(path string) bool {\n\tif _, err := os.Stat(path); err != nil{\n\t\tif os.IsNotExist(err){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (self *Classpath) parseBootAndExtClasspath(jreOption string) {\n\t// 获取jre目录\n\tjreDir := getJreDir(jreOption)\n\t//jre/lib/*\n\tjreLibPath := filepath.Join(jreDir,\"lib\",\"*\")\n\tself.bootClasspath = newWildcardEntry(jreLibPath)\n\t//jre/lib/ext/*\n\tjreExtPath := filepath.Join(jreDir,\"lib\",\"ext\",\"*\")\n\tself.extClasspath = newWildcardEntry(jreExtPath)\n}\n\n//解析用户类路径\nfunc (self *Classpath) parseUserClasspath(cpOption string) {\n\t// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径\n\tif cpOption == \"\"{\n\t\tcpOption = \".\"\n\t}\n\tself.userClasspath = newEntry(cpOption)\n}\n\n//寻找class方法\nfunc (self *Classpath) ReadClass(classname string) ([]byte, Entry, error) {\n\t//访问ReadClass方法只需传递类名，不用包含\".class\"后缀\n\tclassname = classname + \".class\"\n\t// 从bootClasspath寻找class文件\n\tif data, entry, err := self.bootClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从extClasspath寻找class文件\n\tif data, entry, err := self.extClasspath.readClass(classname); err == nil{\n\t\treturn data, entry, err\n\t}\n\t// 从userClasspath寻找class文件\n\treturn self.userClasspath.readClass(classname)\n}\n\nfunc (self *Classpath) String() string {\n\treturn self.userClasspath.String()\n}\n```\n### 测试代码\n\n完善main.go中的startJVM\n```go\n//模拟启动jvm\nfunc startJVM(cmd *Cmd)  {\n\t// 获取Classpath\n\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)\n\tfmt.Printf(\"classpath:%s class:%s args:%v\\n\",cp,cmd.class,cmd.args)\n\t// 将.替换成/(java.lang.String -> java/lang/String)\n\tclassName := strings.Replace(cmd.class,\".\",\"/\",-1)\n\t// 读取class\n\tclassData, _, err := cp.ReadClass(className)\n\tif err != nil {\n\t\tfmt.Printf(\"Could not find or load main class %s\\n\",cmd.class)\n\t\treturn\n\t}\n\tfmt.Printf(\"class data : %v\\n\",classData)\n}\n```\n\n编译main.go，并测试-version\n```bash\n$ go install jvmgo/ch02 \n$ ch02 java.lang.String\n# 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容\n$ ch02 -Xjre /opt  java.lang.Object \n# 传递错误-Xjre会打印出Could not find or load main class java.lang.Object\n```\n","slug":"JVM2","published":1,"updated":"2019-02-14T06:24:46.000Z","layout":"post","photos":[],"link":"","_id":"cjtr441080013cnjv3123gj2v","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？</p>\n<h2 id=\"类路径\"><a href=\"#类路径\" class=\"headerlink\" title=\"类路径\"></a>类路径</h2><p>类路径可以分为以下三种：</p>\n<ul>\n<li>启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。</li>\n<li>扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。</li>\n<li>用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。</li>\n</ul>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>修改cmd结构体，添加XjreOption字段<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tXjreOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>parseCmd()函数也对应添加Xjre<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.XjreOption,<span class=\"string\">\"Xjre\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"path to jre\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//解析命令行参数到定义的flag</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实现类路径\"><a href=\"#实现类路径\" class=\"headerlink\" title=\"实现类路径\"></a>实现类路径</h3><p>采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。</p>\n<p>首先定义一个Entry接口<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取系统分隔符，windows是;类UNIX系统是:号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathListSeparator = <span class=\"keyword\">string</span>(os.PathListSeparator)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Entry <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀</span></span><br><span class=\"line\">\t<span class=\"comment\">//例如读取java.lang.Object入参是java/lang/Object.class</span></span><br><span class=\"line\">\treadClass(classname <span class=\"keyword\">string</span>) ([]<span class=\"keyword\">byte</span>, Entry, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//toString</span></span><br><span class=\"line\">\tString() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Entry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry</p>\n<h4 id=\"DirEntry\"><a href=\"#DirEntry\" class=\"headerlink\" title=\"DirEntry\"></a>DirEntry</h4><p>DirEntry相对简单些，表示目录形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DirEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newDirEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DirEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsDir, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;DirEntry&#123;absDir&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">readClass</span> <span class=\"params\">(className <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//把目录和class名拼成完成路径</span></span><br><span class=\"line\">\tfileName := filepath.Join(self.absDir,className)</span><br><span class=\"line\">\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\tdata, err := ioutil.ReadFile(fileName)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ZipEntry\"><a href=\"#ZipEntry\" class=\"headerlink\" title=\"ZipEntry\"></a>ZipEntry</h4><p>ZipEntry表示ZIP或者JAR文件形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"archive/zip\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ZipEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsPath <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newZipEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">ZipEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ZipEntry&#123;absPath&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打开zip文件</span></span><br><span class=\"line\">\tr, err := zip.OpenReader(self.absPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历zip包里的文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> r.File &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找到class文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f.Name == classname &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打开class文件</span></span><br><span class=\"line\">\t\t\trc , err := f.Open()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> rc.Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\t\t\tdata, err := ioutil.ReadAll(rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//未找到class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absPath</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"CompositeEntry\"><a href=\"#CompositeEntry\" class=\"headerlink\" title=\"CompositeEntry\"></a>CompositeEntry</h4><p>CompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CompositeEntry []Entry</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将每个小路径转换成具体的Entry</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCompositeEntry</span><span class=\"params\">(pathList <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\t<span class=\"comment\">//将路径按照分隔符进行分割</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, path := <span class=\"keyword\">range</span> strings.Split(pathList,pathListSeparator)&#123;</span><br><span class=\"line\">\t\tentry := newEntry(path)</span><br><span class=\"line\">\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,entry)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历entry数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//读取class文件，依次调用每一个子路径的readClass方法</span></span><br><span class=\"line\">\t\tdata, from, err := entry.readClass(classname)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,from,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用每个子路径的String方法，用分隔符拼接起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tstrs := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"built_in\">len</span>(self))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\tstrs[i] = entry.String()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(strs,pathListSeparator)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WildcardEntry\"><a href=\"#WildcardEntry\" class=\"headerlink\" title=\"WildcardEntry\"></a>WildcardEntry</h4><p>WildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWildcardEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//去掉尾部的*</span></span><br><span class=\"line\">\tbaseDir := path[:<span class=\"built_in\">len</span>(path)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\twalkFn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是目录，返回跳过标识</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &amp;&amp; path != baseDir &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> filepath.SkipDir</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//选出jar文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)&#123;</span><br><span class=\"line\">\t\t\tjarEntry := newZipEntry(path)</span><br><span class=\"line\">\t\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,jarEntry)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历baseDir路径，创建zipEntry</span></span><br><span class=\"line\">\tfilepath.Walk(baseDir,walkFn)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">Entry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径中含有分隔符</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.Contains(path,pathListSeparator)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newCompositeEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径末尾是*</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\"*\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newWildcardEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径以jar或者zip结尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)||</span><br><span class=\"line\">\t\tstrings.HasSuffix(path,<span class=\"string\">\".zip\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".ZIP\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> newZipEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newDirEntry(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现Classpath\"><a href=\"#实现Classpath\" class=\"headerlink\" title=\"实现Classpath\"></a>实现Classpath</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Classpath <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbootClasspath Entry</span><br><span class=\"line\">\textClasspath Entry</span><br><span class=\"line\">\tuserClasspath Entry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(jreOption,cpOption <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Classpath</span></span>  &#123;</span><br><span class=\"line\">\tcp := &amp;Classpath&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//解析启动类路径和扩展类路径</span></span><br><span class=\"line\">\tcp.parseBootAndExtClasspath(jreOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\">\tcp.parseUserClasspath(cpOption)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getJreDir</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//优先使用用户输入的-Xjre作为目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jreOption != <span class=\"string\">\"\"</span> &amp;&amp; exists(jreOption)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jreOption</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//在当前目录下寻找jre目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exists(<span class=\"string\">\"./jre\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"./jre\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试使用JAVA_HOME环境变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jh := os.Getenv(<span class=\"string\">\"JAVA_HOME\"</span>); jh != <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filepath.Join(jh,<span class=\"string\">\"jre\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not find jre folder\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断目录是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">exists</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stat(path); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.IsNotExist(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseBootAndExtClasspath</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取jre目录</span></span><br><span class=\"line\">\tjreDir := getJreDir(jreOption)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/*</span></span><br><span class=\"line\">\tjreLibPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.bootClasspath = newWildcardEntry(jreLibPath)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/ext/*</span></span><br><span class=\"line\">\tjreExtPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"ext\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.extClasspath = newWildcardEntry(jreExtPath)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseUserClasspath</span><span class=\"params\">(cpOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cpOption == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tcpOption = <span class=\"string\">\".\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tself.userClasspath = newEntry(cpOption)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//寻找class方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">ReadClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//访问ReadClass方法只需传递类名，不用包含\".class\"后缀</span></span><br><span class=\"line\">\tclassname = classname + <span class=\"string\">\".class\"</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从bootClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.bootClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从extClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.extClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从userClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.readClass(classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>完善main.go中的startJVM<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取Classpath</span></span><br><span class=\"line\">\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cp,cmd.class,cmd.args)</span><br><span class=\"line\">\t<span class=\"comment\">// 将.替换成/(java.lang.String -&gt; java/lang/String)</span></span><br><span class=\"line\">\tclassName := strings.Replace(cmd.class,<span class=\"string\">\".\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 读取class</span></span><br><span class=\"line\">\tclassData, _, err := cp.ReadClass(className)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Could not find or load main class %s\\n\"</span>,cmd.class)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"class data : %v\\n\"</span>,classData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch02 </span><br><span class=\"line\">$ ch02 java.lang.String</span><br><span class=\"line\"><span class=\"comment\"># 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容</span></span><br><span class=\"line\">$ ch02 -Xjre /opt  java.lang.Object </span><br><span class=\"line\"><span class=\"comment\"># 传递错误-Xjre会打印出Could not find or load main class java.lang.Object</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上面的java程序时，我们知道首先要启动java虚拟机，然后加载主类，最后调用主类的main方法。但是在加载HelloWorld类之前，首先要加载它的超类java.lang.Object，在调用main()函数之前，虚拟机要准备好参数数组，所以需要加载java.lang.String和java.lang.String[]类。把字符串打印到控制台还需要加载java.lang.System类，等等。。那么java虚拟机如何寻找这些类的呢？</p>\n<h2 id=\"类路径\"><a href=\"#类路径\" class=\"headerlink\" title=\"类路径\"></a>类路径</h2><p>类路径可以分为以下三种：</p>\n<ul>\n<li>启动类路径(bootstrap classpath)：启动类路径默认对应jre/lib目录，Java标准库位于该路径。</li>\n<li>扩展类路径(extention classpath)：扩展类路径默认对应jre/lib/ext目录，使用Java扩展机制的类位于该路径。</li>\n<li>用户类路径(user classpath)：我们自己实现的类，以及第三方类库则位于用户类路径。用户类路径的默认值是当前路径，也就是”.”，可以给java命令传递-classpath选项来指定。</li>\n</ul>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>把ch01的目录结构复制一份改名ch02，在ch02的目录中创建一个classpath子目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-jvmgo</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">    |-ch01</span><br><span class=\"line\">        |-classpath</span><br><span class=\"line\">        |-cmd.go</span><br><span class=\"line\">        |-main.go</span><br></pre></td></tr></table></figure></p>\n<p>修改cmd结构体，添加XjreOption字段<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cmd <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\thelpFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tversionFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tcpOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tXjreOption <span class=\"keyword\">string</span></span><br><span class=\"line\">\tclass <span class=\"keyword\">string</span></span><br><span class=\"line\">\targs []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>parseCmd()函数也对应添加Xjre<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseCmd</span><span class=\"params\">()</span> *<span class=\"title\">Cmd</span></span> &#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.cpOption,<span class=\"string\">\"cp\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"classpath\"</span>)</span><br><span class=\"line\">\tflag.StringVar(&amp;cmd.XjreOption,<span class=\"string\">\"Xjre\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"path to jre\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//解析命令行参数到定义的flag</span></span><br><span class=\"line\">\tflag.Parse()</span><br><span class=\"line\">\t...<span class=\"comment\">//其他代码不变</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实现类路径\"><a href=\"#实现类路径\" class=\"headerlink\" title=\"实现类路径\"></a>实现类路径</h3><p>采用组合模式来实现类路径，把类路径当成一个大的整体，由启动类路径、扩展类路径和用户类路径三个小路径构成，三个小路径又分别由更小的路径构成。</p>\n<p>首先定义一个Entry接口<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取系统分隔符，windows是;类UNIX系统是:号</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pathListSeparator = <span class=\"keyword\">string</span>(os.PathListSeparator)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Entry <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//寻找和加载class文件  参数：class文件相对路径，路径之间用/，文件名有.class后缀</span></span><br><span class=\"line\">\t<span class=\"comment\">//例如读取java.lang.Object入参是java/lang/Object.class</span></span><br><span class=\"line\">\treadClass(classname <span class=\"keyword\">string</span>) ([]<span class=\"keyword\">byte</span>, Entry, error)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//toString</span></span><br><span class=\"line\">\tString() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Entry接口一共有四种实现，CompositeEntry，WildcardEntry，ZipEntry，DirEntry</p>\n<h4 id=\"DirEntry\"><a href=\"#DirEntry\" class=\"headerlink\" title=\"DirEntry\"></a>DirEntry</h4><p>DirEntry相对简单些，表示目录形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DirEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsDir <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newDirEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">DirEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsDir, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;DirEntry&#123;absDir&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">readClass</span> <span class=\"params\">(className <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//把目录和class名拼成完成路径</span></span><br><span class=\"line\">\tfileName := filepath.Join(self.absDir,className)</span><br><span class=\"line\">\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\tdata, err := ioutil.ReadFile(fileName)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *DirEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ZipEntry\"><a href=\"#ZipEntry\" class=\"headerlink\" title=\"ZipEntry\"></a>ZipEntry</h4><p>ZipEntry表示ZIP或者JAR文件形式的类路径<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"archive/zip\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ZipEntry <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//存放目录的绝对路径</span></span><br><span class=\"line\">\tabsPath <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//相当于构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newZipEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> *<span class=\"title\">ZipEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将参数转换成绝对路径</span></span><br><span class=\"line\">\tabsPath, err := filepath.Abs(path)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ZipEntry&#123;absPath&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取class文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//打开zip文件</span></span><br><span class=\"line\">\tr, err := zip.OpenReader(self.absPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> r.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历zip包里的文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> r.File &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找到class文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f.Name == classname &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打开class文件</span></span><br><span class=\"line\">\t\t\trc , err := f.Open()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> rc.Close()</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//读取class文件内容</span></span><br><span class=\"line\">\t\t\tdata, err := ioutil.ReadAll(rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,self,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//未找到class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//直接返回目录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *ZipEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.absPath</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"CompositeEntry\"><a href=\"#CompositeEntry\" class=\"headerlink\" title=\"CompositeEntry\"></a>CompositeEntry</h4><p>CompositeEntry表示有分隔符的类路径，CompositeEntry由更小的Entry组成，可以表示成[]Entry，go语言中则使用便利的slice</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CompositeEntry []Entry</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将每个小路径转换成具体的Entry</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newCompositeEntry</span><span class=\"params\">(pathList <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\t<span class=\"comment\">//将路径按照分隔符进行分割</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, path := <span class=\"keyword\">range</span> strings.Split(pathList,pathListSeparator)&#123;</span><br><span class=\"line\">\t\tentry := newEntry(path)</span><br><span class=\"line\">\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,entry)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">readClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历entry数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//读取class文件，依次调用每一个子路径的readClass方法</span></span><br><span class=\"line\">\t\tdata, from, err := entry.readClass(classname)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data,from,err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>,<span class=\"literal\">nil</span>,errors.New(<span class=\"string\">\"class not found :\"</span> +classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用每个子路径的String方法，用分隔符拼接起来</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self CompositeEntry)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tstrs := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>,<span class=\"built_in\">len</span>(self))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, entry := <span class=\"keyword\">range</span> self&#123;</span><br><span class=\"line\">\t\tstrs[i] = entry.String()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Join(strs,pathListSeparator)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"WildcardEntry\"><a href=\"#WildcardEntry\" class=\"headerlink\" title=\"WildcardEntry\"></a>WildcardEntry</h4><p>WildcardEntry表示以*结尾的类路径，实际上也是CompositeEntry，因此就不再新定义类型类<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newWildcardEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">CompositeEntry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//去掉尾部的*</span></span><br><span class=\"line\">\tbaseDir := path[:<span class=\"built_in\">len</span>(path)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> compositeEntry []Entry</span><br><span class=\"line\">\twalkFn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"keyword\">string</span>, info os.FileInfo, err error)</span> <span class=\"title\">error</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是目录，返回跳过标识</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> info.IsDir() &amp;&amp; path != baseDir &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> filepath.SkipDir</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//选出jar文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)&#123;</span><br><span class=\"line\">\t\t\tjarEntry := newZipEntry(path)</span><br><span class=\"line\">\t\t\tcompositeEntry = <span class=\"built_in\">append</span>(compositeEntry,jarEntry)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历baseDir路径，创建zipEntry</span></span><br><span class=\"line\">\tfilepath.Walk(baseDir,walkFn)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Printf(\"compositeEntry : %s\\n\",compositeEntry)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> compositeEntry</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h4><p>四种类路径都实现完之后，再来完善下Entry接口，添加Entry实例的构造方法。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newEntry</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">Entry</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径中含有分隔符</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.Contains(path,pathListSeparator)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newCompositeEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径末尾是*</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\"*\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newWildcardEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路径以jar或者zip结尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.HasSuffix(path,<span class=\"string\">\".jar\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".JAR\"</span>)||</span><br><span class=\"line\">\t\tstrings.HasSuffix(path,<span class=\"string\">\".zip\"</span>) || strings.HasSuffix(path,<span class=\"string\">\".ZIP\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> newZipEntry(path)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newDirEntry(path)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现Classpath\"><a href=\"#实现Classpath\" class=\"headerlink\" title=\"实现Classpath\"></a>实现Classpath</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> classpath</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"path/filepath\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Classpath <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbootClasspath Entry</span><br><span class=\"line\">\textClasspath Entry</span><br><span class=\"line\">\tuserClasspath Entry</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用-Xjre选项解析启动类路径和扩展类路径，使用-classpath/-cp选项解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(jreOption,cpOption <span class=\"keyword\">string</span>)</span> *<span class=\"title\">Classpath</span></span>  &#123;</span><br><span class=\"line\">\tcp := &amp;Classpath&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//解析启动类路径和扩展类路径</span></span><br><span class=\"line\">\tcp.parseBootAndExtClasspath(jreOption)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\">\tcp.parseUserClasspath(cpOption)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getJreDir</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//优先使用用户输入的-Xjre作为目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jreOption != <span class=\"string\">\"\"</span> &amp;&amp; exists(jreOption)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> jreOption</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//在当前目录下寻找jre目录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exists(<span class=\"string\">\"./jre\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"./jre\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试使用JAVA_HOME环境变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> jh := os.Getenv(<span class=\"string\">\"JAVA_HOME\"</span>); jh != <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> filepath.Join(jh,<span class=\"string\">\"jre\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Can not find jre folder\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断目录是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">exists</span><span class=\"params\">(path <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _, err := os.Stat(path); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.IsNotExist(err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseBootAndExtClasspath</span><span class=\"params\">(jreOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取jre目录</span></span><br><span class=\"line\">\tjreDir := getJreDir(jreOption)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/*</span></span><br><span class=\"line\">\tjreLibPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.bootClasspath = newWildcardEntry(jreLibPath)</span><br><span class=\"line\">\t<span class=\"comment\">//jre/lib/ext/*</span></span><br><span class=\"line\">\tjreExtPath := filepath.Join(jreDir,<span class=\"string\">\"lib\"</span>,<span class=\"string\">\"ext\"</span>,<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\tself.extClasspath = newWildcardEntry(jreExtPath)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//解析用户类路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">parseUserClasspath</span><span class=\"params\">(cpOption <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果用户没有提供-classpath/-cp选项，则使用当前目录作为用户类路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cpOption == <span class=\"string\">\"\"</span>&#123;</span><br><span class=\"line\">\t\tcpOption = <span class=\"string\">\".\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tself.userClasspath = newEntry(cpOption)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//寻找class方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">ReadClass</span><span class=\"params\">(classname <span class=\"keyword\">string</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, Entry, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//访问ReadClass方法只需传递类名，不用包含\".class\"后缀</span></span><br><span class=\"line\">\tclassname = classname + <span class=\"string\">\".class\"</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从bootClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.bootClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从extClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data, entry, err := self.extClasspath.readClass(classname); err == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data, entry, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从userClasspath寻找class文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.readClass(classname)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self *Classpath)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> self.userClasspath.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>完善main.go中的startJVM<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模拟启动jvm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startJVM</span><span class=\"params\">(cmd *Cmd)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取Classpath</span></span><br><span class=\"line\">\tcp := classpath.Parse(cmd.XjreOption,cmd.cpOption)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"classpath:%s class:%s args:%v\\n\"</span>,cp,cmd.class,cmd.args)</span><br><span class=\"line\">\t<span class=\"comment\">// 将.替换成/(java.lang.String -&gt; java/lang/String)</span></span><br><span class=\"line\">\tclassName := strings.Replace(cmd.class,<span class=\"string\">\".\"</span>,<span class=\"string\">\"/\"</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 读取class</span></span><br><span class=\"line\">\tclassData, _, err := cp.ReadClass(className)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Could not find or load main class %s\\n\"</span>,cmd.class)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"class data : %v\\n\"</span>,classData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译main.go，并测试-version<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ go install jvmgo/ch02 </span><br><span class=\"line\">$ ch02 java.lang.String</span><br><span class=\"line\"><span class=\"comment\"># 没有传递-Xjre，会去读取$JAVA_HOME，成功打印出String.class的内容</span></span><br><span class=\"line\">$ ch02 -Xjre /opt  java.lang.Object </span><br><span class=\"line\"><span class=\"comment\"># 传递错误-Xjre会打印出Could not find or load main class java.lang.Object</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"redis常见面试题","date":"2019-03-13T14:33:04.000Z","copyright":true,"comments":0,"_content":"#### 什么是redis?\n```bash\nRedis 是一个基于内存的高性能key-value数据库。\n```\n\n#### Redis支持哪几种数据结构\n``` bash\nString（字符串）: set key value\nHash（哈希）: hmset name  key1 value1 key2 value2\nList（列表）：lpush  name  value\nSet（集合）：sadd  name  value\nzset(sorted set：有序集合)： zadd  name score value\n```\n#### Redis为什么这么快？redis采用多线程会有哪些问题？\n```bash\nRedis效率高的主要原因有下面几个：\n\n    （1）基于内存操作，速度非常快\n    （2）采用单线程，避免了上下文的切换导致消耗CPU\n    （3）采用单线程，不用去考虑各种加锁释放锁的问题\n    （4）使用IO多路复用模型，非阻塞IO\n```\n#### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n```bash\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。\nAOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。\n```\n#### 一个字符串类型的值能存储最大容量是多少？\n```bash\n512M\n```\n#### Redis集群方案什么情况下会导致整个集群不可用？\n```bash\n有A，B，C三个节点的集群,在没有<复制模型>的情况下.\n如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。\n```\n#### Redis哈希槽的概念？\n```bash\nRedis集群没有使用一致性hash,而是引入了哈希槽的概念.\nRedis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.\n集群的每个节点负责一部分hash槽。\n```\n#### Redis集群的主从复制模型？\n```bash\n为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，\n所以集群使用了主从复制模型,每个节点都会有N-1个复制品.\n```\n#### Redis事务相关的命令有哪几个？\n```bash\ndiscard命令-取消事务,发起执行事务块里的所有命令.\nexec命令-执行所有事务块内的命令.\nmulti命令-标记一个事务块的开始.\nwatch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.\nunwatch命令-取消watch命令对所有key的监视.\n```\n\n#### redis的过期策略\n```bash\nredis采用的是定期删除+惰性删除策略。\n\n定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。\n因此，如果只采用定期删除策略，会导致很多key到时间没有删除。\n\n惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。\n```\n#### 为什么不用定时删除策略?\n```bash\n定时删除,用一个定时器来负责监视key,过期则自动删除。\n虽然内存及时释放，但是十分消耗CPU资源。\n在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.\n```\n","source":"_posts/Redis.md","raw":"---\ntitle: redis常见面试题\ndate: 2019-03-13 22:33:04\ntags:\n    - redis\n    - 面试总结\ncategories: redis\ncopyright: true\ncomments: false\n---\n#### 什么是redis?\n```bash\nRedis 是一个基于内存的高性能key-value数据库。\n```\n\n#### Redis支持哪几种数据结构\n``` bash\nString（字符串）: set key value\nHash（哈希）: hmset name  key1 value1 key2 value2\nList（列表）：lpush  name  value\nSet（集合）：sadd  name  value\nzset(sorted set：有序集合)： zadd  name score value\n```\n#### Redis为什么这么快？redis采用多线程会有哪些问题？\n```bash\nRedis效率高的主要原因有下面几个：\n\n    （1）基于内存操作，速度非常快\n    （2）采用单线程，避免了上下文的切换导致消耗CPU\n    （3）采用单线程，不用去考虑各种加锁释放锁的问题\n    （4）使用IO多路复用模型，非阻塞IO\n```\n#### 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\n```bash\nRedis 提供了两种持久化方式:RDB（默认） 和AOF \nRDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。\nAOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。\n```\n#### 一个字符串类型的值能存储最大容量是多少？\n```bash\n512M\n```\n#### Redis集群方案什么情况下会导致整个集群不可用？\n```bash\n有A，B，C三个节点的集群,在没有<复制模型>的情况下.\n如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。\n```\n#### Redis哈希槽的概念？\n```bash\nRedis集群没有使用一致性hash,而是引入了哈希槽的概念.\nRedis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.\n集群的每个节点负责一部分hash槽。\n```\n#### Redis集群的主从复制模型？\n```bash\n为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，\n所以集群使用了主从复制模型,每个节点都会有N-1个复制品.\n```\n#### Redis事务相关的命令有哪几个？\n```bash\ndiscard命令-取消事务,发起执行事务块里的所有命令.\nexec命令-执行所有事务块内的命令.\nmulti命令-标记一个事务块的开始.\nwatch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.\nunwatch命令-取消watch命令对所有key的监视.\n```\n\n#### redis的过期策略\n```bash\nredis采用的是定期删除+惰性删除策略。\n\n定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。\n因此，如果只采用定期删除策略，会导致很多key到时间没有删除。\n\n惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。\n```\n#### 为什么不用定时删除策略?\n```bash\n定时删除,用一个定时器来负责监视key,过期则自动删除。\n虽然内存及时释放，但是十分消耗CPU资源。\n在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.\n```\n","slug":"Redis","published":1,"updated":"2019-03-27T06:50:24.318Z","layout":"post","photos":[],"link":"","_id":"cjtr4410a0015cnjv1xhliigr","content":"<h4 id=\"什么是redis\"><a href=\"#什么是redis\" class=\"headerlink\" title=\"什么是redis?\"></a>什么是redis?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 是一个基于内存的高性能key-value数据库。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis支持哪几种数据结构\"><a href=\"#Redis支持哪几种数据结构\" class=\"headerlink\" title=\"Redis支持哪几种数据结构\"></a>Redis支持哪几种数据结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String（字符串）: <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">Hash（哈希）: hmset name  key1 value1 key2 value2</span><br><span class=\"line\">List（列表）：lpush  name  value</span><br><span class=\"line\">Set（集合）：sadd  name  value</span><br><span class=\"line\">zset(sorted <span class=\"built_in\">set</span>：有序集合)： zadd  name score value</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"><a href=\"#Redis为什么这么快？redis采用多线程会有哪些问题？\" class=\"headerlink\" title=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"></a>Redis为什么这么快？redis采用多线程会有哪些问题？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis效率高的主要原因有下面几个：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）基于内存操作，速度非常快</span><br><span class=\"line\">    （2）采用单线程，避免了上下文的切换导致消耗CPU</span><br><span class=\"line\">    （3）采用单线程，不用去考虑各种加锁释放锁的问题</span><br><span class=\"line\">    （4）使用IO多路复用模型，非阻塞IO</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 提供了两种持久化方式:RDB（默认） 和AOF </span><br><span class=\"line\">RDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。</span><br><span class=\"line\">AOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。</span><br></pre></td></tr></table></figure>\n<h4 id=\"一个字符串类型的值能存储最大容量是多少？\"><a href=\"#一个字符串类型的值能存储最大容量是多少？\" class=\"headerlink\" title=\"一个字符串类型的值能存储最大容量是多少？\"></a>一个字符串类型的值能存储最大容量是多少？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512M</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群方案什么情况下会导致整个集群不可用？\"><a href=\"#Redis集群方案什么情况下会导致整个集群不可用？\" class=\"headerlink\" title=\"Redis集群方案什么情况下会导致整个集群不可用？\"></a>Redis集群方案什么情况下会导致整个集群不可用？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有A，B，C三个节点的集群,在没有&lt;复制模型&gt;的情况下.</span><br><span class=\"line\">如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis哈希槽的概念？\"><a href=\"#Redis哈希槽的概念？\" class=\"headerlink\" title=\"Redis哈希槽的概念？\"></a>Redis哈希槽的概念？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群没有使用一致性<span class=\"built_in\">hash</span>,而是引入了哈希槽的概念.</span><br><span class=\"line\">Redis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.</span><br><span class=\"line\">集群的每个节点负责一部分<span class=\"built_in\">hash</span>槽。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群的主从复制模型？\"><a href=\"#Redis集群的主从复制模型？\" class=\"headerlink\" title=\"Redis集群的主从复制模型？\"></a>Redis集群的主从复制模型？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，</span><br><span class=\"line\">所以集群使用了主从复制模型,每个节点都会有N-1个复制品.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis事务相关的命令有哪几个？\"><a href=\"#Redis事务相关的命令有哪几个？\" class=\"headerlink\" title=\"Redis事务相关的命令有哪几个？\"></a>Redis事务相关的命令有哪几个？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discard命令-取消事务,发起执行事务块里的所有命令.</span><br><span class=\"line\"><span class=\"built_in\">exec</span>命令-执行所有事务块内的命令.</span><br><span class=\"line\">multi命令-标记一个事务块的开始.</span><br><span class=\"line\">watch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.</span><br><span class=\"line\">unwatch命令-取消watch命令对所有key的监视.</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis的过期策略\"><a href=\"#redis的过期策略\" class=\"headerlink\" title=\"redis的过期策略\"></a>redis的过期策略</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis采用的是定期删除+惰性删除策略。</span><br><span class=\"line\"></span><br><span class=\"line\">定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。</span><br><span class=\"line\">因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</span><br><span class=\"line\"></span><br><span class=\"line\">惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</span><br></pre></td></tr></table></figure>\n<h4 id=\"为什么不用定时删除策略\"><a href=\"#为什么不用定时删除策略\" class=\"headerlink\" title=\"为什么不用定时删除策略?\"></a>为什么不用定时删除策略?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定时删除,用一个定时器来负责监视key,过期则自动删除。</span><br><span class=\"line\">虽然内存及时释放，但是十分消耗CPU资源。</span><br><span class=\"line\">在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"什么是redis\"><a href=\"#什么是redis\" class=\"headerlink\" title=\"什么是redis?\"></a>什么是redis?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 是一个基于内存的高性能key-value数据库。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis支持哪几种数据结构\"><a href=\"#Redis支持哪几种数据结构\" class=\"headerlink\" title=\"Redis支持哪几种数据结构\"></a>Redis支持哪几种数据结构</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String（字符串）: <span class=\"built_in\">set</span> key value</span><br><span class=\"line\">Hash（哈希）: hmset name  key1 value1 key2 value2</span><br><span class=\"line\">List（列表）：lpush  name  value</span><br><span class=\"line\">Set（集合）：sadd  name  value</span><br><span class=\"line\">zset(sorted <span class=\"built_in\">set</span>：有序集合)： zadd  name score value</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"><a href=\"#Redis为什么这么快？redis采用多线程会有哪些问题？\" class=\"headerlink\" title=\"Redis为什么这么快？redis采用多线程会有哪些问题？\"></a>Redis为什么这么快？redis采用多线程会有哪些问题？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis效率高的主要原因有下面几个：</span><br><span class=\"line\"></span><br><span class=\"line\">    （1）基于内存操作，速度非常快</span><br><span class=\"line\">    （2）采用单线程，避免了上下文的切换导致消耗CPU</span><br><span class=\"line\">    （3）采用单线程，不用去考虑各种加锁释放锁的问题</span><br><span class=\"line\">    （4）使用IO多路复用模型，非阻塞IO</span><br></pre></td></tr></table></figure>\n<h4 id=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"><a href=\"#什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\" class=\"headerlink\" title=\"什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？\"></a>什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis 提供了两种持久化方式:RDB（默认） 和AOF </span><br><span class=\"line\">RDB:当前内存中的数据集快照写入磁盘,恢复时是将快照文件直接读到内存里。</span><br><span class=\"line\">AOF:将Redis执行的每次写命令记录到单独的日志文件中,当Redis重启时再次执行AOF文件中的命令来恢复数据。</span><br></pre></td></tr></table></figure>\n<h4 id=\"一个字符串类型的值能存储最大容量是多少？\"><a href=\"#一个字符串类型的值能存储最大容量是多少？\" class=\"headerlink\" title=\"一个字符串类型的值能存储最大容量是多少？\"></a>一个字符串类型的值能存储最大容量是多少？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">512M</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群方案什么情况下会导致整个集群不可用？\"><a href=\"#Redis集群方案什么情况下会导致整个集群不可用？\" class=\"headerlink\" title=\"Redis集群方案什么情况下会导致整个集群不可用？\"></a>Redis集群方案什么情况下会导致整个集群不可用？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有A，B，C三个节点的集群,在没有&lt;复制模型&gt;的情况下.</span><br><span class=\"line\">如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis哈希槽的概念？\"><a href=\"#Redis哈希槽的概念？\" class=\"headerlink\" title=\"Redis哈希槽的概念？\"></a>Redis哈希槽的概念？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis集群没有使用一致性<span class=\"built_in\">hash</span>,而是引入了哈希槽的概念.</span><br><span class=\"line\">Redis集群有 16384 个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽.</span><br><span class=\"line\">集群的每个节点负责一部分<span class=\"built_in\">hash</span>槽。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis集群的主从复制模型？\"><a href=\"#Redis集群的主从复制模型？\" class=\"headerlink\" title=\"Redis集群的主从复制模型？\"></a>Redis集群的主从复制模型？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，</span><br><span class=\"line\">所以集群使用了主从复制模型,每个节点都会有N-1个复制品.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Redis事务相关的命令有哪几个？\"><a href=\"#Redis事务相关的命令有哪几个？\" class=\"headerlink\" title=\"Redis事务相关的命令有哪几个？\"></a>Redis事务相关的命令有哪几个？</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">discard命令-取消事务,发起执行事务块里的所有命令.</span><br><span class=\"line\"><span class=\"built_in\">exec</span>命令-执行所有事务块内的命令.</span><br><span class=\"line\">multi命令-标记一个事务块的开始.</span><br><span class=\"line\">watch命令-监视一个（或多个）key，如果在执行事务之前这些key被其他命令所改动，事务将被打断.</span><br><span class=\"line\">unwatch命令-取消watch命令对所有key的监视.</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis的过期策略\"><a href=\"#redis的过期策略\" class=\"headerlink\" title=\"redis的过期策略\"></a>redis的过期策略</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis采用的是定期删除+惰性删除策略。</span><br><span class=\"line\"></span><br><span class=\"line\">定期删除：redis默认每个100ms检查，是否有过期的key（随机抽取key进行检查）,有过期key则删除。</span><br><span class=\"line\">因此，如果只采用定期删除策略，会导致很多key到时间没有删除。</span><br><span class=\"line\"></span><br><span class=\"line\">惰性删除：在你获取某个key的时候，redis会检查一下，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除。</span><br></pre></td></tr></table></figure>\n<h4 id=\"为什么不用定时删除策略\"><a href=\"#为什么不用定时删除策略\" class=\"headerlink\" title=\"为什么不用定时删除策略?\"></a>为什么不用定时删除策略?</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定时删除,用一个定时器来负责监视key,过期则自动删除。</span><br><span class=\"line\">虽然内存及时释放，但是十分消耗CPU资源。</span><br><span class=\"line\">在大并发请求下，CPU要将时间应用在处理请求，而不是删除key,因此没有采用这一策略.</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/Github-Pages-Blog/comment-delete.png","slug":"comment-delete.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/github-pages.png","slug":"github-pages.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/setting.png","slug":"setting.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/create-repository.png","slug":"create-repository.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/valine.png","slug":"valine.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Redis-sds/sds.png","slug":"sds.png","post":"cjtr440tv0004cnjv93qmov0m","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/blog-icon.png","slug":"blog-icon.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/categories.png","slug":"categories.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/change-theme.png","slug":"change-theme.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/copy-url.png","slug":"copy-url.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/create-project.png","slug":"create-project.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/deploy-position.png","slug":"deploy-position.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/select-theme.png","slug":"select-theme.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0},{"_id":"source/_posts/Github-Pages-Blog/tags.png","slug":"tags.png","post":"cjtr440tq0001cnjvhe9a68r5","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjtr440tw0005cnjv2o4qty2c","category_id":"cjtr440ts0002cnjv2r2db7qq","_id":"cjtr440tz0008cnjvsgc0aq48"},{"post_id":"cjtr440tl0000cnjv4c303q40","category_id":"cjtr440ts0002cnjv2r2db7qq","_id":"cjtr440u0000bcnjv03eq0je7"},{"post_id":"cjtr440tq0001cnjvhe9a68r5","category_id":"cjtr440ty0006cnjvnv3sn8jp","_id":"cjtr440u0000ccnjv7bwwqtc1"},{"post_id":"cjtr440tv0004cnjv93qmov0m","category_id":"cjtr440tz0009cnjv872w47v2","_id":"cjtr440u3000ecnjvi54exjg7"},{"post_id":"cjtr441080013cnjv3123gj2v","category_id":"cjtr440ts0002cnjv2r2db7qq","_id":"cjtr4410e0019cnjv1a23b0du"},{"post_id":"cjtr4410a0015cnjv1xhliigr","category_id":"cjtr440tz0009cnjv872w47v2","_id":"cjtr4410f001bcnjvrk3w8nyn"}],"PostTag":[{"post_id":"cjtr440tl0000cnjv4c303q40","tag_id":"cjtr440tu0003cnjv0n1mskfo","_id":"cjtr440u7000gcnjv1s34un84"},{"post_id":"cjtr440tl0000cnjv4c303q40","tag_id":"cjtr440ty0007cnjv1s5nkala","_id":"cjtr440ud000hcnjvhz02kmji"},{"post_id":"cjtr440tl0000cnjv4c303q40","tag_id":"cjtr440tz000acnjv6sndgmkt","_id":"cjtr440ue000jcnjvykfm9m0r"},{"post_id":"cjtr440tl0000cnjv4c303q40","tag_id":"cjtr440u1000dcnjvsv9jidt5","_id":"cjtr440ue000kcnjvvl0z1h3z"},{"post_id":"cjtr440tq0001cnjvhe9a68r5","tag_id":"cjtr440u3000fcnjvy22z93yf","_id":"cjtr440uf000ocnjvw9y6urkm"},{"post_id":"cjtr440tq0001cnjvhe9a68r5","tag_id":"cjtr440ud000icnjv69eb46wp","_id":"cjtr440uf000pcnjvio5dintl"},{"post_id":"cjtr440tq0001cnjvhe9a68r5","tag_id":"cjtr440ue000lcnjvpsrgpe02","_id":"cjtr440uf000rcnjv860qj1jx"},{"post_id":"cjtr440tq0001cnjvhe9a68r5","tag_id":"cjtr440ue000mcnjv6oa6n01p","_id":"cjtr440uf000scnjv3rbuyaa6"},{"post_id":"cjtr440tv0004cnjv93qmov0m","tag_id":"cjtr440ue000ncnjvbipxh2bz","_id":"cjtr440uh000ucnjvykrlboer"},{"post_id":"cjtr440tv0004cnjv93qmov0m","tag_id":"cjtr440uf000qcnjvpxxc7c8w","_id":"cjtr440uh000vcnjv4nvi9is6"},{"post_id":"cjtr440tw0005cnjv2o4qty2c","tag_id":"cjtr440tu0003cnjv0n1mskfo","_id":"cjtr440ui000ycnjva5ypyjf2"},{"post_id":"cjtr440tw0005cnjv2o4qty2c","tag_id":"cjtr440ty0007cnjv1s5nkala","_id":"cjtr440ui000zcnjvo4too0l9"},{"post_id":"cjtr440tw0005cnjv2o4qty2c","tag_id":"cjtr440tz000acnjv6sndgmkt","_id":"cjtr440ui0010cnjvtfdl5j2r"},{"post_id":"cjtr440tw0005cnjv2o4qty2c","tag_id":"cjtr440u1000dcnjvsv9jidt5","_id":"cjtr440uj0011cnjvd53314mx"},{"post_id":"cjtr441080013cnjv3123gj2v","tag_id":"cjtr440tu0003cnjv0n1mskfo","_id":"cjtr4410d0016cnjvbrmye3xr"},{"post_id":"cjtr441080013cnjv3123gj2v","tag_id":"cjtr440ty0007cnjv1s5nkala","_id":"cjtr4410e0018cnjv51rlsd6d"},{"post_id":"cjtr441080013cnjv3123gj2v","tag_id":"cjtr440tz000acnjv6sndgmkt","_id":"cjtr4410f001acnjvk55bliiy"},{"post_id":"cjtr441080013cnjv3123gj2v","tag_id":"cjtr440u1000dcnjvsv9jidt5","_id":"cjtr4410f001ccnjvbaqqvlvq"},{"post_id":"cjtr4410a0015cnjv1xhliigr","tag_id":"cjtr440ue000ncnjvbipxh2bz","_id":"cjtr4410f001dcnjvpfbq0x8a"},{"post_id":"cjtr4410a0015cnjv1xhliigr","tag_id":"cjtr4410e0017cnjv4oha3z3u","_id":"cjtr4410g001ecnjvha0l0x92"}],"Tag":[{"name":"JVM","_id":"cjtr440tu0003cnjv0n1mskfo"},{"name":"JAVA","_id":"cjtr440ty0007cnjv1s5nkala"},{"name":"GO","_id":"cjtr440tz000acnjv6sndgmkt"},{"name":"学习笔记","_id":"cjtr440u1000dcnjvsv9jidt5"},{"name":"github","_id":"cjtr440u3000fcnjvy22z93yf"},{"name":"hexo","_id":"cjtr440ud000icnjv69eb46wp"},{"name":"教程","_id":"cjtr440ue000lcnjvpsrgpe02"},{"name":"blog","_id":"cjtr440ue000mcnjv6oa6n01p"},{"name":"redis","_id":"cjtr440ue000ncnjvbipxh2bz"},{"name":"源码","_id":"cjtr440uf000qcnjvpxxc7c8w"},{"name":"面试总结","_id":"cjtr4410e0017cnjv4oha3z3u"}]}}